
LowPassFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f308  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a30  0800f4a8  0800f4a8  0001f4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fed8  0800fed8  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  0800fed8  0800fed8  0001fed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fee0  0800fee0  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fee0  0800fee0  0001fee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fee4  0800fee4  0001fee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  0800fee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000498c  20000158  08010040  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ae4  08010040  00024ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a761  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049b2  00000000  00000000  0003a92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0003f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b1  00000000  00000000  000408f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d20f  00000000  00000000  000419a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021ebf  00000000  00000000  0005ebb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091b5e  00000000  00000000  00080a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000613c  00000000  00000000  001125d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0011870c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000158 	.word	0x20000158
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f490 	.word	0x0800f490

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000015c 	.word	0x2000015c
 80001dc:	0800f490 	.word	0x0800f490

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_GPIO_EXTI_Callback>:
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_0) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d102      	bne.n	8000592 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	FlagKey = true;
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <HAL_GPIO_EXTI_Callback+0x24>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
    }
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000178 	.word	0x20000178

080005a4 <_write>:
static void MX_USART1_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */


int _write(int fd, unsigned char *buf, int len) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d002      	beq.n	80005bc <_write+0x18>
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d107      	bne.n	80005cc <_write+0x28>
    HAL_UART_Transmit(&huart1, buf, len, 999);  // Print to the UART
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	f240 33e7 	movw	r3, #999	; 0x3e7
 80005c4:	68b9      	ldr	r1, [r7, #8]
 80005c6:	4804      	ldr	r0, [pc, #16]	; (80005d8 <_write+0x34>)
 80005c8:	f005 fd9c 	bl	8006104 <HAL_UART_Transmit>
  }
  return len;
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20002318 	.word	0x20002318

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fff4 	bl	80025cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8e6 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f9d4 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 f9aa 	bl	8000944 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80005f0:	f00d fa22 	bl	800da38 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80005f4:	f000 f97c 	bl	80008f0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80005f8:	f000 f944 	bl	8000884 <MX_SPI1_Init>

  // Filter initialization
  #if FILTER_M == FIR_METHOD
  	  arm_fir_init_f32(&S, FIR_TAP_NUM, (float32_t *)firCoeffs, firState, BLOCK_SIZE);
  #else
  	  arm_biquad_cascade_df2T_init_f32(&IIR, NUM_STAGES, (float32_t *)biquadCoeffs, (float32_t *)biquadState);
 80005fc:	4b60      	ldr	r3, [pc, #384]	; (8000780 <main+0x1a4>)
 80005fe:	4a61      	ldr	r2, [pc, #388]	; (8000784 <main+0x1a8>)
 8000600:	2103      	movs	r1, #3
 8000602:	4861      	ldr	r0, [pc, #388]	; (8000788 <main+0x1ac>)
 8000604:	f001 ffc5 	bl	8002592 <arm_biquad_cascade_df2T_init_f32>
  #endif


  sd_unmount();
 8000608:	f001 f936 	bl	8001878 <sd_unmount>
  while (1)
  {



	  while(FlagKey)
 800060c:	e0a5      	b.n	800075a <main+0x17e>
	  {

		  sd_mount();
 800060e:	f001 f889 	bl	8001724 <sd_mount>
		  // Open recording file
		  ResultWave = WAVFIL_Start_Read( "Recording_8.wav");
 8000612:	485e      	ldr	r0, [pc, #376]	; (800078c <main+0x1b0>)
 8000614:	f000 feaa 	bl	800136c <WAVFIL_Start_Read>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4b5c      	ldr	r3, [pc, #368]	; (8000790 <main+0x1b4>)
 800061e:	701a      	strb	r2, [r3, #0]
		  if(ResultWave != WAV_OK){
 8000620:	4b5b      	ldr	r3, [pc, #364]	; (8000790 <main+0x1b4>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	f040 809e 	bne.w	8000766 <main+0x18a>
		  	if(ResultWave != WAV_OK){
		  		break;
		  		FlagKey = false;
		  	}
		  #else
		  	  ResultWave = WAVFIL_Start_Write("LPF_IIR.wav", R_WavremainData, 22050);
 800062a:	4b5a      	ldr	r3, [pc, #360]	; (8000794 <main+0x1b8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f245 6222 	movw	r2, #22050	; 0x5622
 8000632:	4619      	mov	r1, r3
 8000634:	4858      	ldr	r0, [pc, #352]	; (8000798 <main+0x1bc>)
 8000636:	f000 fcfb 	bl	8001030 <WAVFIL_Start_Write>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b54      	ldr	r3, [pc, #336]	; (8000790 <main+0x1b4>)
 8000640:	701a      	strb	r2, [r3, #0]
		  	if(ResultWave != WAV_OK){
 8000642:	4b53      	ldr	r3, [pc, #332]	; (8000790 <main+0x1b4>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	f040 808f 	bne.w	800076a <main+0x18e>
		  		FlagKey = false;
		  	}
		  #endif

		  // Give data from wave file in the sd card
		  WAVFIL_Catch_Data(wav_in, &NumByteRead);
 800064c:	4953      	ldr	r1, [pc, #332]	; (800079c <main+0x1c0>)
 800064e:	4854      	ldr	r0, [pc, #336]	; (80007a0 <main+0x1c4>)
 8000650:	f000 ff10 	bl	8001474 <WAVFIL_Catch_Data>
		  if(ResultWave != WAV_OK){
 8000654:	4b4e      	ldr	r3, [pc, #312]	; (8000790 <main+0x1b4>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	f040 8088 	bne.w	800076e <main+0x192>
			  break;
			  FlagKey = false;
		  }

		  // Trying to connect to MATLAB on the PC
		  ResultMat = MAT_Connect(22050, 32767, NumByteRead);
 800065e:	4b4f      	ldr	r3, [pc, #316]	; (800079c <main+0x1c0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	b29b      	uxth	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800066a:	f245 6022 	movw	r0, #22050	; 0x5622
 800066e:	f000 fb0d 	bl	8000c8c <MAT_Connect>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <main+0x1c8>)
 8000678:	701a      	strb	r2, [r3, #0]
		  if(ResultMat != MAT_OK){
 800067a:	4b4a      	ldr	r3, [pc, #296]	; (80007a4 <main+0x1c8>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d177      	bne.n	8000772 <main+0x196>

		  // Apply Low Pass Filter
		  #if FILTER_M == FIR_METHOD
		  	  arm_fir_f32(&S, wav_in, wav_out, NumByteRead);
		  #else
		  	  arm_biquad_cascade_df2T_f32(&IIR, wav_in, wav_out, BLOCK_SIZE);
 8000682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000686:	4a48      	ldr	r2, [pc, #288]	; (80007a8 <main+0x1cc>)
 8000688:	4945      	ldr	r1, [pc, #276]	; (80007a0 <main+0x1c4>)
 800068a:	483f      	ldr	r0, [pc, #252]	; (8000788 <main+0x1ac>)
 800068c:	f001 feeb 	bl	8002466 <arm_biquad_cascade_df2T_f32>
		  #endif


		  // Storing Filtered data in the sd card
		  ResultWave = WAVFIL_Give_Write(wav_out);
 8000690:	4845      	ldr	r0, [pc, #276]	; (80007a8 <main+0x1cc>)
 8000692:	f000 fd4b 	bl	800112c <WAVFIL_Give_Write>
 8000696:	4603      	mov	r3, r0
 8000698:	461a      	mov	r2, r3
 800069a:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <main+0x1b4>)
 800069c:	701a      	strb	r2, [r3, #0]
		  if(ResultWave != WAV_OK){
 800069e:	4b3c      	ldr	r3, [pc, #240]	; (8000790 <main+0x1b4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d167      	bne.n	8000776 <main+0x19a>
			  break;
			  FlagKey = false;
		  }

		  // Send Filtered data to MATLAB
		  ResultMat = MAT_SendSamples(wav_out, NumByteRead, 32767.5f);
 80006a6:	4b3d      	ldr	r3, [pc, #244]	; (800079c <main+0x1c0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80007ac <main+0x1d0>
 80006ae:	4619      	mov	r1, r3
 80006b0:	483d      	ldr	r0, [pc, #244]	; (80007a8 <main+0x1cc>)
 80006b2:	f000 fb47 	bl	8000d44 <MAT_SendSamples>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <main+0x1c8>)
 80006bc:	701a      	strb	r2, [r3, #0]
		  if(ResultMat != MAT_OK){
 80006be:	4b39      	ldr	r3, [pc, #228]	; (80007a4 <main+0x1c8>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d159      	bne.n	800077a <main+0x19e>
			  break;
			  FlagKey = false;
		  }

		  // We need to continue this until the end of the wavw recording file.
		  while(R_WavremainData != 0){
 80006c6:	e02d      	b.n	8000724 <main+0x148>

			  // Give data from wave file in the sd card
			  ResultWave = WAVFIL_Catch_Data(wav_in, &NumByteRead);
 80006c8:	4934      	ldr	r1, [pc, #208]	; (800079c <main+0x1c0>)
 80006ca:	4835      	ldr	r0, [pc, #212]	; (80007a0 <main+0x1c4>)
 80006cc:	f000 fed2 	bl	8001474 <WAVFIL_Catch_Data>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <main+0x1b4>)
 80006d6:	701a      	strb	r2, [r3, #0]
			  if(ResultWave != WAV_OK){
 80006d8:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <main+0x1b4>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d126      	bne.n	800072e <main+0x152>

			  // Apply Low Pass Filter
			  #if FILTER_M == FIR_METHOD
				  arm_fir_f32(&S, wav_in, wav_out, NumByteRead);
			  #else
				  arm_biquad_cascade_df2T_f32(&IIR, wav_in, wav_out, BLOCK_SIZE);
 80006e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e4:	4a30      	ldr	r2, [pc, #192]	; (80007a8 <main+0x1cc>)
 80006e6:	492e      	ldr	r1, [pc, #184]	; (80007a0 <main+0x1c4>)
 80006e8:	4827      	ldr	r0, [pc, #156]	; (8000788 <main+0x1ac>)
 80006ea:	f001 febc 	bl	8002466 <arm_biquad_cascade_df2T_f32>
			  #endif

			  // Send Filtered data to MATLAB
			  ResultMat = MAT_SendSamples(wav_out, NumByteRead, 32767.5f);
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <main+0x1c0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80007ac <main+0x1d0>
 80006f6:	4619      	mov	r1, r3
 80006f8:	482b      	ldr	r0, [pc, #172]	; (80007a8 <main+0x1cc>)
 80006fa:	f000 fb23 	bl	8000d44 <MAT_SendSamples>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <main+0x1c8>)
 8000704:	701a      	strb	r2, [r3, #0]
			  if(ResultMat != MAT_OK){
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <main+0x1c8>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d111      	bne.n	8000732 <main+0x156>
				  break;
				  FlagKey = false;
			  }

			  // Storing Filtered data in the sd card
			  ResultWave = WAVFIL_Give_Write(wav_out);
 800070e:	4826      	ldr	r0, [pc, #152]	; (80007a8 <main+0x1cc>)
 8000710:	f000 fd0c 	bl	800112c <WAVFIL_Give_Write>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <main+0x1b4>)
 800071a:	701a      	strb	r2, [r3, #0]
			  if(ResultWave != WAV_OK){
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <main+0x1b4>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d108      	bne.n	8000736 <main+0x15a>
		  while(R_WavremainData != 0){
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <main+0x1b8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1cd      	bne.n	80006c8 <main+0xec>
 800072c:	e004      	b.n	8000738 <main+0x15c>
				  break;
 800072e:	bf00      	nop
 8000730:	e002      	b.n	8000738 <main+0x15c>
				  break;
 8000732:	bf00      	nop
 8000734:	e000      	b.n	8000738 <main+0x15c>
				  break;
 8000736:	bf00      	nop
				  FlagKey = false;
			  }
		  }
		  // Send to MATLAB end signal.
		  MAT_EndSignal();
 8000738:	f000 fba8 	bl	8000e8c <MAT_EndSignal>
		  // Close the wave recording file.
		  ResultWave = WAVFIL_End_Read();
 800073c:	f000 ff8e 	bl	800165c <WAVFIL_End_Read>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <main+0x1b4>)
 8000746:	701a      	strb	r2, [r3, #0]
		  // Close the new wave filtered file.
		  ResultWave = WAVFIL_End_Write();
 8000748:	f000 fe06 	bl	8001358 <WAVFIL_End_Write>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <main+0x1b4>)
 8000752:	701a      	strb	r2, [r3, #0]
		  // Don't come back to this loop before pressing the bottom.
		  FlagKey = false;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <main+0x1d4>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
	  while(FlagKey)
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <main+0x1d4>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	f47f af55 	bne.w	800060e <main+0x32>
 8000764:	e7f9      	b.n	800075a <main+0x17e>
			  break;
 8000766:	bf00      	nop
 8000768:	e7f7      	b.n	800075a <main+0x17e>
		  		break;
 800076a:	bf00      	nop
 800076c:	e7f5      	b.n	800075a <main+0x17e>
			  break;
 800076e:	bf00      	nop
 8000770:	e7f3      	b.n	800075a <main+0x17e>
			  break;
 8000772:	bf00      	nop
 8000774:	e7f1      	b.n	800075a <main+0x17e>
			  break;
 8000776:	bf00      	nop
 8000778:	e7ef      	b.n	800075a <main+0x17e>
			  break;
 800077a:	bf00      	nop
	  while(FlagKey)
 800077c:	e7ed      	b.n	800075a <main+0x17e>
 800077e:	bf00      	nop
 8000780:	200021d0 	.word	0x200021d0
 8000784:	0800f9d4 	.word	0x0800f9d4
 8000788:	2000017c 	.word	0x2000017c
 800078c:	0800f4a8 	.word	0x0800f4a8
 8000790:	2000017a 	.word	0x2000017a
 8000794:	20002b60 	.word	0x20002b60
 8000798:	0800f4b8 	.word	0x0800f4b8
 800079c:	20000174 	.word	0x20000174
 80007a0:	200001c8 	.word	0x200001c8
 80007a4:	2000017b 	.word	0x2000017b
 80007a8:	200011cc 	.word	0x200011cc
 80007ac:	46ffff00 	.word	0x46ffff00
 80007b0:	20000178 	.word	0x20000178

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	; 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	; 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00e f936 	bl	800ea34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b27      	ldr	r3, [pc, #156]	; (800087c <SystemClock_Config+0xc8>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	4a26      	ldr	r2, [pc, #152]	; (800087c <SystemClock_Config+0xc8>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	; 0x40
 80007e8:	4b24      	ldr	r3, [pc, #144]	; (800087c <SystemClock_Config+0xc8>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <SystemClock_Config+0xcc>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a20      	ldr	r2, [pc, #128]	; (8000880 <SystemClock_Config+0xcc>)
 80007fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <SystemClock_Config+0xcc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000824:	2319      	movs	r3, #25
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000828:	23c0      	movs	r3, #192	; 0xc0
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000830:	2304      	movs	r3, #4
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	4618      	mov	r0, r3
 800083a:	f003 ffe5 	bl	8004808 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000844:	f000 f8fe 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2302      	movs	r3, #2
 800084e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2103      	movs	r1, #3
 8000864:	4618      	mov	r0, r3
 8000866:	f004 fa47 	bl	8004cf8 <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000870:	f000 f8e8 	bl	8000a44 <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	3750      	adds	r7, #80	; 0x50
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_SPI1_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <MX_SPI1_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI1_Init+0x64>)
 8000890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008b8:	2220      	movs	r2, #32
 80008ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008d0:	220a      	movs	r2, #10
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008d6:	f004 fbef 	bl	80050b8 <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 f8b0 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20002200 	.word	0x20002200
 80008ec:	40013000 	.word	0x40013000

080008f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART1_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_USART1_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_USART1_UART_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART1_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART1_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART1_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART1_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART1_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART1_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART1_UART_Init+0x4c>)
 8000928:	f005 fb9c 	bl	8006064 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f887 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20002318 	.word	0x20002318
 8000940:	40011000 	.word	0x40011000

08000944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_DMA_Init+0x4c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <MX_DMA_Init+0x4c>)
 8000954:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <MX_DMA_Init+0x4c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2038      	movs	r0, #56	; 0x38
 800096c:	f001 ff9f 	bl	80028ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000970:	2038      	movs	r0, #56	; 0x38
 8000972:	f001 ffb8 	bl	80028e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	203a      	movs	r0, #58	; 0x3a
 800097c:	f001 ff97 	bl	80028ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000980:	203a      	movs	r0, #58	; 0x3a
 8000982:	f001 ffb0 	bl	80028e6 <HAL_NVIC_EnableIRQ>

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a22      	ldr	r2, [pc, #136]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	2110      	movs	r1, #16
 80009e6:	4816      	ldr	r0, [pc, #88]	; (8000a40 <MX_GPIO_Init+0xac>)
 80009e8:	f002 fc8c 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ec:	2301      	movs	r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	4619      	mov	r1, r3
 8000a00:	480f      	ldr	r0, [pc, #60]	; (8000a40 <MX_GPIO_Init+0xac>)
 8000a02:	f002 fafb 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000a06:	2310      	movs	r3, #16
 8000a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4808      	ldr	r0, [pc, #32]	; (8000a40 <MX_GPIO_Init+0xac>)
 8000a1e:	f002 faed 	bl	8002ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2006      	movs	r0, #6
 8000a28:	f001 ff41 	bl	80028ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a2c:	2006      	movs	r0, #6
 8000a2e:	f001 ff5a 	bl	80028e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>

08000a4e <CreateCommand>:
}



bool CreateCommand(uint8_t * command_buffer , uint8_t command_type, uint16_t scalePow, uint16_t SmaplRate, uint16_t numSamFram)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b087      	sub	sp, #28
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	4608      	mov	r0, r1
 8000a58:	4611      	mov	r1, r2
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	72fb      	strb	r3, [r7, #11]
 8000a60:	460b      	mov	r3, r1
 8000a62:	813b      	strh	r3, [r7, #8]
 8000a64:	4613      	mov	r3, r2
 8000a66:	80fb      	strh	r3, [r7, #6]
 *	| AA | 55 | 5A | A5 | nul | TP || command_type |RATE[1]|RATE[0]|| scalePow[1]  || scalePow[0] || numSamFram[1] || numSamFram[0] || CheckSum[1]  || CheckSum[0] |
 *	|____|____|____|____|_____|____||______________|_______|_______||______________||_____________||_______________||_______________||______________||_____________|
 *    //////Header\\\\\\             ///////\\\\\\\ /// \\\ /// \\\   //////////scalePow\\\\\\\\\\  /////////NumSampleFram\\\\\\\\\   //////////CheckSum\\\\\\\\\\
 */

	uint16_t checkSum = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	82fb      	strh	r3, [r7, #22]



	//[0] : header
	*command_buffer = 0xAA;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	22aa      	movs	r2, #170	; 0xaa
 8000a70:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	8afb      	ldrh	r3, [r7, #22]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]

	//[1] : header
	*command_buffer = 0x55;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2255      	movs	r2, #85	; 0x55
 8000a88:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	8afb      	ldrh	r3, [r7, #22]
 8000a92:	4413      	add	r3, r2
 8000a94:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]

	//[2] : header
	*command_buffer = 0x5A;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	225a      	movs	r2, #90	; 0x5a
 8000aa0:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	8afb      	ldrh	r3, [r7, #22]
 8000aaa:	4413      	add	r3, r2
 8000aac:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]

	//[3] : header
	*command_buffer = 0xA5;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	22a5      	movs	r2, #165	; 0xa5
 8000ab8:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	8afb      	ldrh	r3, [r7, #22]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]

/************************************************/

	//[4] : scale Power
	*command_buffer = scalePow;
 8000acc:	893b      	ldrh	r3, [r7, #8]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	8afb      	ldrh	r3, [r7, #22]
 8000adc:	4413      	add	r3, r2
 8000ade:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]

/************************************************/

	//[5] : TYPE PACKET
	*command_buffer = 0x15;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2215      	movs	r2, #21
 8000aea:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	8afb      	ldrh	r3, [r7, #22]
 8000af4:	4413      	add	r3, r2
 8000af6:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	3301      	adds	r3, #1
 8000afc:	60fb      	str	r3, [r7, #12]

/************************************************/

	//[6] : command_type
	*command_buffer = command_type;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	7afa      	ldrb	r2, [r7, #11]
 8000b02:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	8afb      	ldrh	r3, [r7, #22]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3301      	adds	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]

/************************************************/

	//[7] : SampleRate[1]
	*command_buffer = (SmaplRate & 0xff00) >> 8;
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	8afb      	ldrh	r3, [r7, #22]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]


	//[8] : SampleRate[0]
	*command_buffer = (SmaplRate & 0x00ff);
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	8afb      	ldrh	r3, [r7, #22]
 8000b44:	4413      	add	r3, r2
 8000b46:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]

/************************************************/


	//[9] : scalePow[1]
	*command_buffer = (scalePow & 0xff00) >> 8;
 8000b4e:	893b      	ldrh	r3, [r7, #8]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	8afb      	ldrh	r3, [r7, #22]
 8000b62:	4413      	add	r3, r2
 8000b64:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]


	//[10] : scalePow[0]
	*command_buffer = (scalePow & 0x00ff);
 8000b6c:	893b      	ldrh	r3, [r7, #8]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	8afb      	ldrh	r3, [r7, #22]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3301      	adds	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]

/************************************************/


	//[11] : NumSamFram[1]
	*command_buffer = (numSamFram & 0xff00) >> 8;
 8000b86:	8c3b      	ldrh	r3, [r7, #32]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	8afb      	ldrh	r3, [r7, #22]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]


	//[12] : NumSamFram[0]
	*command_buffer = (numSamFram & 0x00ff);
 8000ba4:	8c3b      	ldrh	r3, [r7, #32]
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	8afb      	ldrh	r3, [r7, #22]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]

/************************************************/

	//[13] : CheckSum[0]
	*command_buffer = (checkSum & 0xff00) >> 8;
 8000bbe:	8afb      	ldrh	r3, [r7, #22]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	701a      	strb	r2, [r3, #0]
	command_buffer++;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]

	//[14] : CheckSum[1]
	*command_buffer = (checkSum & 0x00ff);
 8000bd0:	8afb      	ldrh	r3, [r7, #22]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	701a      	strb	r2, [r3, #0]
	//BufferSample++;

	return 1;
 8000bd8:	2301      	movs	r3, #1
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	371c      	adds	r7, #28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <AnalizeCommand>:


bool AnalizeCommand(uint8_t analizePorpuse)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]

	uint16_t cal_checkSum = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	81fb      	strh	r3, [r7, #14]
	uint16_t com_chechSum = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	817b      	strh	r3, [r7, #10]


	if(BufferReceive[0] != 0xAA  ||  BufferReceive[1] != 0x55  ||  BufferReceive[2] != 0x5A  ||
 8000bfa:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <AnalizeCommand+0xa0>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2baa      	cmp	r3, #170	; 0xaa
 8000c00:	d113      	bne.n	8000c2a <AnalizeCommand+0x42>
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <AnalizeCommand+0xa0>)
 8000c04:	785b      	ldrb	r3, [r3, #1]
 8000c06:	2b55      	cmp	r3, #85	; 0x55
 8000c08:	d10f      	bne.n	8000c2a <AnalizeCommand+0x42>
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <AnalizeCommand+0xa0>)
 8000c0c:	789b      	ldrb	r3, [r3, #2]
 8000c0e:	2b5a      	cmp	r3, #90	; 0x5a
 8000c10:	d10b      	bne.n	8000c2a <AnalizeCommand+0x42>
	   BufferReceive[3] != 0xA5  ||  BufferReceive[4] != 0xBB  ||  BufferReceive[5] != 0xCC)
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <AnalizeCommand+0xa0>)
 8000c14:	78db      	ldrb	r3, [r3, #3]
	if(BufferReceive[0] != 0xAA  ||  BufferReceive[1] != 0x55  ||  BufferReceive[2] != 0x5A  ||
 8000c16:	2ba5      	cmp	r3, #165	; 0xa5
 8000c18:	d107      	bne.n	8000c2a <AnalizeCommand+0x42>
	   BufferReceive[3] != 0xA5  ||  BufferReceive[4] != 0xBB  ||  BufferReceive[5] != 0xCC)
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <AnalizeCommand+0xa0>)
 8000c1c:	791b      	ldrb	r3, [r3, #4]
 8000c1e:	2bbb      	cmp	r3, #187	; 0xbb
 8000c20:	d103      	bne.n	8000c2a <AnalizeCommand+0x42>
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <AnalizeCommand+0xa0>)
 8000c24:	795b      	ldrb	r3, [r3, #5]
 8000c26:	2bcc      	cmp	r3, #204	; 0xcc
 8000c28:	d001      	beq.n	8000c2e <AnalizeCommand+0x46>
		return 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e026      	b.n	8000c7c <AnalizeCommand+0x94>

	for(uint8_t index = 0 ; index < LENGTH_PACKET-2 ; index++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	737b      	strb	r3, [r7, #13]
 8000c32:	e009      	b.n	8000c48 <AnalizeCommand+0x60>
	{
		cal_checkSum += BufferReceive[index];
 8000c34:	7b7b      	ldrb	r3, [r7, #13]
 8000c36:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <AnalizeCommand+0xa0>)
 8000c38:	5cd3      	ldrb	r3, [r2, r3]
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	89fb      	ldrh	r3, [r7, #14]
 8000c3e:	4413      	add	r3, r2
 8000c40:	81fb      	strh	r3, [r7, #14]
	for(uint8_t index = 0 ; index < LENGTH_PACKET-2 ; index++)
 8000c42:	7b7b      	ldrb	r3, [r7, #13]
 8000c44:	3301      	adds	r3, #1
 8000c46:	737b      	strb	r3, [r7, #13]
 8000c48:	7b7b      	ldrb	r3, [r7, #13]
 8000c4a:	2b0d      	cmp	r3, #13
 8000c4c:	d9f2      	bls.n	8000c34 <AnalizeCommand+0x4c>
	}

	com_chechSum = ((((uint16_t)BufferReceive[14]) << 8) | ((uint16_t)BufferReceive[15]));
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <AnalizeCommand+0xa0>)
 8000c50:	7b9b      	ldrb	r3, [r3, #14]
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	b21a      	sxth	r2, r3
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <AnalizeCommand+0xa0>)
 8000c58:	7bdb      	ldrb	r3, [r3, #15]
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	817b      	strh	r3, [r7, #10]

	if(cal_checkSum != com_chechSum)
 8000c62:	89fa      	ldrh	r2, [r7, #14]
 8000c64:	897b      	ldrh	r3, [r7, #10]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d001      	beq.n	8000c6e <AnalizeCommand+0x86>
		return 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e006      	b.n	8000c7c <AnalizeCommand+0x94>


	if(BufferReceive[6] == ANS_MATLAB_READY_RX)
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <AnalizeCommand+0xa0>)
 8000c70:	799b      	ldrb	r3, [r3, #6]
 8000c72:	2b81      	cmp	r3, #129	; 0x81
 8000c74:	d101      	bne.n	8000c7a <AnalizeCommand+0x92>
		return 1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e000      	b.n	8000c7c <AnalizeCommand+0x94>
	else
		return 0;
 8000c7a:	2300      	movs	r3, #0

}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	20000188 	.word	0x20000188

08000c8c <MAT_Connect>:
//	CDC_Transmit_FS((uint8_t*)bufferTx, LENGTH_COMMAND);
//	return 1;
//}


MAT_StatusTypeDef MAT_Connect(uint16_t sampleRate, uint16_t scale, uint16_t numSamFram){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
 8000c96:	460b      	mov	r3, r1
 8000c98:	80bb      	strh	r3, [r7, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	807b      	strh	r3, [r7, #2]

	#define Limit_Wait		1000
//	#define ScalseSample	5


	uint8_t  bufferTx[LENGTH_COMMAND] 	= {'\0'};
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	f8c3 2007 	str.w	r2, [r3, #7]
	uint16_t timeWait 		= 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	83fb      	strh	r3, [r7, #30]


	//HAL_Delay(5000);

	memset(bufferTx, '\0', LENGTH_COMMAND);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	220f      	movs	r2, #15
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f00d feb9 	bl	800ea34 <memset>
	CreateCommand(bufferTx, COM_START_SEND_SIGNAL, scale, sampleRate, 2*numSamFram);
 8000cc2:	887b      	ldrh	r3, [r7, #2]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	88f9      	ldrh	r1, [r7, #6]
 8000cca:	88ba      	ldrh	r2, [r7, #4]
 8000ccc:	f107 000c 	add.w	r0, r7, #12
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	2110      	movs	r1, #16
 8000cd6:	f7ff feba 	bl	8000a4e <CreateCommand>
	FalgReadyPacketRx = false;
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <MAT_Connect+0xb4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
	CDC_Transmit_FS((uint8_t*)bufferTx, LENGTH_COMMAND);
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	210f      	movs	r1, #15
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f00c ff7e 	bl	800dbe8 <CDC_Transmit_FS>
	timeWait = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	83fb      	strh	r3, [r7, #30]
//	while(1);
	while(timeWait <= Limit_Wait)
 8000cf0:	e01a      	b.n	8000d28 <MAT_Connect+0x9c>
	{
		HAL_Delay(1);
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f001 fcdc 	bl	80026b0 <HAL_Delay>
		timeWait++;
 8000cf8:	8bfb      	ldrh	r3, [r7, #30]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	83fb      	strh	r3, [r7, #30]
		if(FalgReadyPacketRx)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MAT_Connect+0xb4>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00a      	beq.n	8000d1c <MAT_Connect+0x90>
		{
			FalgReadyPacketRx = false;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MAT_Connect+0xb4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
			if(AnalizeCommand(ANS_MATLAB_READY_RX))
 8000d0c:	2081      	movs	r0, #129	; 0x81
 8000d0e:	f7ff ff6b 	bl	8000be8 <AnalizeCommand>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10c      	bne.n	8000d32 <MAT_Connect+0xa6>
			{
				break;
			}
			else
				return MAT_ERROR_CONNECT;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	e00c      	b.n	8000d36 <MAT_Connect+0xaa>
		}
		if(timeWait == Limit_Wait)
 8000d1c:	8bfb      	ldrh	r3, [r7, #30]
 8000d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d22:	d101      	bne.n	8000d28 <MAT_Connect+0x9c>
			return MAT_ERROR_CONNECT;
 8000d24:	2302      	movs	r3, #2
 8000d26:	e006      	b.n	8000d36 <MAT_Connect+0xaa>
	while(timeWait <= Limit_Wait)
 8000d28:	8bfb      	ldrh	r3, [r7, #30]
 8000d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d2e:	d9e0      	bls.n	8000cf2 <MAT_Connect+0x66>
 8000d30:	e000      	b.n	8000d34 <MAT_Connect+0xa8>
				break;
 8000d32:	bf00      	nop
	}

	return MAT_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3720      	adds	r7, #32
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000179 	.word	0x20000179

08000d44 <MAT_SendSamples>:

MAT_StatusTypeDef MAT_SendSamples(float32_t *Samples, uint32_t numSample,  float32_t scale){
 8000d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d48:	b08b      	sub	sp, #44	; 0x2c
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d54:	466b      	mov	r3, sp
 8000d56:	461e      	mov	r6, r3

	#define LENGTH_PACKET	16

	int16_t  valSample   = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	83fb      	strh	r3, [r7, #30]
	uint32_t CheckSum    = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t sampleIndex = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
	uint16_t lengthPack  = (numSample * 2);
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	83bb      	strh	r3, [r7, #28]
	uint8_t  bufferTx[(numSample * 2) + 5];
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	1d59      	adds	r1, r3, #5
 8000d72:	460b      	mov	r3, r1
 8000d74:	3b01      	subs	r3, #1
 8000d76:	61bb      	str	r3, [r7, #24]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	4688      	mov	r8, r1
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	f04f 0200 	mov.w	r2, #0
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d92:	2300      	movs	r3, #0
 8000d94:	460c      	mov	r4, r1
 8000d96:	461d      	mov	r5, r3
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	00eb      	lsls	r3, r5, #3
 8000da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000da6:	00e2      	lsls	r2, r4, #3
 8000da8:	1dcb      	adds	r3, r1, #7
 8000daa:	08db      	lsrs	r3, r3, #3
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	ebad 0d03 	sub.w	sp, sp, r3
 8000db2:	466b      	mov	r3, sp
 8000db4:	3300      	adds	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]

	for(sampleIndex = 0 ; sampleIndex < lengthPack ; sampleIndex += 2){
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
 8000dbc:	e02d      	b.n	8000e1a <MAT_SendSamples+0xd6>
		valSample = (int16_t)((*Samples) * scale);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	ed93 7a00 	vldr	s14, [r3]
 8000dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd0:	ee17 3a90 	vmov	r3, s15
 8000dd4:	83fb      	strh	r3, [r7, #30]
		bufferTx[sampleIndex]   = (((int16_t)valSample) & 0xff00) >> 8;
 8000dd6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000dda:	121b      	asrs	r3, r3, #8
 8000ddc:	b2d9      	uxtb	r1, r3
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	4413      	add	r3, r2
 8000de4:	460a      	mov	r2, r1
 8000de6:	701a      	strb	r2, [r3, #0]
		bufferTx[sampleIndex+1] =  ((int16_t)valSample) & 0x00ff;
 8000de8:	6a3b      	ldr	r3, [r7, #32]
 8000dea:	3301      	adds	r3, #1
 8000dec:	8bfa      	ldrh	r2, [r7, #30]
 8000dee:	b2d1      	uxtb	r1, r2
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	54d1      	strb	r1, [r2, r3]
		CheckSum = CheckSum + bufferTx[sampleIndex] + bufferTx[sampleIndex+1];
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	6a3b      	ldr	r3, [r7, #32]
 8000df8:	4413      	add	r3, r2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	4413      	add	r3, r2
 8000e02:	6a3a      	ldr	r2, [r7, #32]
 8000e04:	3201      	adds	r2, #1
 8000e06:	6979      	ldr	r1, [r7, #20]
 8000e08:	5c8a      	ldrb	r2, [r1, r2]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
		Samples++;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	3304      	adds	r3, #4
 8000e12:	60fb      	str	r3, [r7, #12]
	for(sampleIndex = 0 ; sampleIndex < lengthPack ; sampleIndex += 2){
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	3302      	adds	r3, #2
 8000e18:	623b      	str	r3, [r7, #32]
 8000e1a:	8bbb      	ldrh	r3, [r7, #28]
 8000e1c:	6a3a      	ldr	r2, [r7, #32]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d3cd      	bcc.n	8000dbe <MAT_SendSamples+0x7a>
	}

	bufferTx[lengthPack  ] = CheckSum >> 24;
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	0e1a      	lsrs	r2, r3, #24
 8000e26:	8bbb      	ldrh	r3, [r7, #28]
 8000e28:	b2d1      	uxtb	r1, r2
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	54d1      	strb	r1, [r2, r3]
	bufferTx[lengthPack+1] = CheckSum >> 16;
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	0c1a      	lsrs	r2, r3, #16
 8000e32:	8bbb      	ldrh	r3, [r7, #28]
 8000e34:	3301      	adds	r3, #1
 8000e36:	b2d1      	uxtb	r1, r2
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	54d1      	strb	r1, [r2, r3]
	bufferTx[lengthPack+2] = CheckSum >> 8;
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	0a1a      	lsrs	r2, r3, #8
 8000e40:	8bbb      	ldrh	r3, [r7, #28]
 8000e42:	3302      	adds	r3, #2
 8000e44:	b2d1      	uxtb	r1, r2
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	54d1      	strb	r1, [r2, r3]
	bufferTx[lengthPack+3] = CheckSum;
 8000e4a:	8bbb      	ldrh	r3, [r7, #28]
 8000e4c:	3303      	adds	r3, #3
 8000e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e50:	b2d1      	uxtb	r1, r2
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	54d1      	strb	r1, [r2, r3]
	bufferTx[lengthPack+4] = 0;
 8000e56:	8bbb      	ldrh	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	54d1      	strb	r1, [r2, r3]


	lengthPack += 5;
 8000e60:	8bbb      	ldrh	r3, [r7, #28]
 8000e62:	3305      	adds	r3, #5
 8000e64:	83bb      	strh	r3, [r7, #28]
	HAL_Delay(50);
 8000e66:	2032      	movs	r0, #50	; 0x32
 8000e68:	f001 fc22 	bl	80026b0 <HAL_Delay>
	CDC_Transmit_FS((uint8_t*)bufferTx, lengthPack);
 8000e6c:	8bbb      	ldrh	r3, [r7, #28]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	6978      	ldr	r0, [r7, #20]
 8000e72:	f00c feb9 	bl	800dbe8 <CDC_Transmit_FS>
	HAL_Delay(500);
 8000e76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e7a:	f001 fc19 	bl	80026b0 <HAL_Delay>

	return MAT_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	46b5      	mov	sp, r6
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	372c      	adds	r7, #44	; 0x2c
 8000e86:	46bd      	mov	sp, r7
 8000e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e8c <MAT_EndSignal>:

MAT_StatusTypeDef MAT_EndSignal(void){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af02      	add	r7, sp, #8

	uint8_t  bufferTx[17] 	= {'\0'};
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	731a      	strb	r2, [r3, #12]

	memset(bufferTx, '\0', LENGTH_COMMAND+1);
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f00d fdc2 	bl	800ea34 <memset>
	CreateCommand(bufferTx, COM_END_SEND_SIGNAL, 0xff, 0xff, 0xff);
 8000eb0:	1d38      	adds	r0, r7, #4
 8000eb2:	23ff      	movs	r3, #255	; 0xff
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	23ff      	movs	r3, #255	; 0xff
 8000eb8:	22ff      	movs	r2, #255	; 0xff
 8000eba:	2111      	movs	r1, #17
 8000ebc:	f7ff fdc7 	bl	8000a4e <CreateCommand>
	CDC_Transmit_FS((uint8_t*)bufferTx, LENGTH_COMMAND);
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f00c fe8f 	bl	800dbe8 <CDC_Transmit_FS>

	return MAT_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <SD_disk_status>:
#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"


DSTATUS SD_disk_status(BYTE drv) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SD_disk_status+0x14>
        return STA_NOINIT;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e000      	b.n	8000eea <SD_disk_status+0x16>
    return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SD_disk_initialize+0x14>
        return STA_NOINIT;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e007      	b.n	8000f1a <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 8000f0a:	f000 fde3 	bl	8001ad4 <SD_SPI_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf14      	ite	ne
 8000f14:	2301      	movne	r3, #1
 8000f16:	2300      	moveq	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	4603      	mov	r3, r0
 8000f32:	73fb      	strb	r3, [r7, #15]
    if (pdrv != 0 || count == 0)
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <SD_disk_read+0x1c>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <SD_disk_read+0x20>
        return RES_PARERR;
 8000f40:	2304      	movs	r3, #4
 8000f42:	e010      	b.n	8000f66 <SD_disk_read+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <SD_disk_read+0x4c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <SD_disk_read+0x2c>
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e00a      	b.n	8000f66 <SD_disk_read+0x42>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	68b8      	ldr	r0, [r7, #8]
 8000f56:	f000 feaf 	bl	8001cb8 <SD_ReadBlocks>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bf14      	ite	ne
 8000f60:	2301      	movne	r3, #1
 8000f62:	2300      	moveq	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20002b75 	.word	0x20002b75

08000f74 <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  BYTE *buff, DWORD sector, UINT count) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	4603      	mov	r3, r0
 8000f82:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count) return RES_PARERR;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d102      	bne.n	8000f90 <SD_disk_write+0x1c>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <SD_disk_write+0x20>
 8000f90:	2304      	movs	r3, #4
 8000f92:	e010      	b.n	8000fb6 <SD_disk_write+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <SD_disk_write+0x4c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <SD_disk_write+0x2c>
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e00a      	b.n	8000fb6 <SD_disk_write+0x42>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	68b8      	ldr	r0, [r7, #8]
 8000fa6:	f000 ff5b 	bl	8001e60 <SD_WriteBlocks>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf14      	ite	ne
 8000fb0:	2301      	movne	r3, #1
 8000fb2:	2300      	moveq	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20002b75 	.word	0x20002b75

08000fc4 <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	603a      	str	r2, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	71bb      	strb	r3, [r7, #6]
    if (pdrv != 0)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SD_disk_ioctl+0x1a>
        return RES_PARERR;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	e022      	b.n	8001024 <SD_disk_ioctl+0x60>

    switch (cmd) {
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d81e      	bhi.n	8001022 <SD_disk_ioctl+0x5e>
 8000fe4:	a201      	add	r2, pc, #4	; (adr r2, 8000fec <SD_disk_ioctl+0x28>)
 8000fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fea:	bf00      	nop
 8000fec:	08000ffd 	.word	0x08000ffd
 8000ff0:	0800100d 	.word	0x0800100d
 8000ff4:	08001001 	.word	0x08001001
 8000ff8:	08001019 	.word	0x08001019
    case CTRL_SYNC:
        return RES_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e011      	b.n	8001024 <SD_disk_ioctl+0x60>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001006:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	e00b      	b.n	8001024 <SD_disk_ioctl+0x60>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001012:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	e005      	b.n	8001024 <SD_disk_ioctl+0x60>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]
        return RES_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <SD_disk_ioctl+0x60>
    default:
        return RES_PARERR;
 8001022:	2304      	movs	r3, #4
    }
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <WAVFIL_Start_Write>:

uint32_t W_WavremainData = 0;



WAV_StatusTypeDef WAVFIL_Start_Write(const char *filename, uint32_t sizeByteFile, uint32_t samRat){
 8001030:	b580      	push	{r7, lr}
 8001032:	b096      	sub	sp, #88	; 0x58
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]


	UINT bytesWritten;
	WAVHeader w_header;

	memcpy(w_header.ChunkID, "RIFF", 4);
 800103c:	4b32      	ldr	r3, [pc, #200]	; (8001108 <WAVFIL_Start_Write+0xd8>)
 800103e:	617b      	str	r3, [r7, #20]

	w_header.ChunkSize = sizeByteFile + WAVE_HED_SIZ - 8;
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	3334      	adds	r3, #52	; 0x34
 8001044:	61bb      	str	r3, [r7, #24]

	memcpy(w_header.Format, "WAVE", 4);
 8001046:	4b31      	ldr	r3, [pc, #196]	; (800110c <WAVFIL_Start_Write+0xdc>)
 8001048:	61fb      	str	r3, [r7, #28]

	memcpy(w_header.Subchunk1ID, "fmt ", 4);
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <WAVFIL_Start_Write+0xe0>)
 800104c:	623b      	str	r3, [r7, #32]

	w_header.Subchunk1Size = 16;
 800104e:	2310      	movs	r3, #16
 8001050:	627b      	str	r3, [r7, #36]	; 0x24

	w_header.AudioFormat = 1;
 8001052:	2301      	movs	r3, #1
 8001054:	853b      	strh	r3, [r7, #40]	; 0x28

	w_header.NumChannels = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	857b      	strh	r3, [r7, #42]	; 0x2a

	w_header.SampleRate = samRat;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c

	w_header.BitsPerSample = 16;
 800105e:	2310      	movs	r3, #16
 8001060:	86fb      	strh	r3, [r7, #54]	; 0x36

	w_header.ByteRate = w_header.SampleRate * w_header.NumChannels * w_header.BitsPerSample / 8;
 8001062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001064:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001066:	fb02 f303 	mul.w	r3, r2, r3
 800106a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800106c:	fb02 f303 	mul.w	r3, r2, r3
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	633b      	str	r3, [r7, #48]	; 0x30

	w_header.BlockAlign = w_header.NumChannels * w_header.BitsPerSample / 8;
 8001074:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001076:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001078:	fb02 f303 	mul.w	r3, r2, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	da00      	bge.n	8001082 <WAVFIL_Start_Write+0x52>
 8001080:	3307      	adds	r3, #7
 8001082:	10db      	asrs	r3, r3, #3
 8001084:	b29b      	uxth	r3, r3
 8001086:	86bb      	strh	r3, [r7, #52]	; 0x34

	memcpy(w_header.ExtraChunkID, "IDIT", 4);
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <WAVFIL_Start_Write+0xe4>)
 800108a:	63bb      	str	r3, [r7, #56]	; 0x38

	w_header.ExtraChunkSize = 8;
 800108c:	2308      	movs	r3, #8
 800108e:	63fb      	str	r3, [r7, #60]	; 0x3c

	memcpy(w_header.ExtraChunkData, "abcdefg", 8);   // Payload
 8001090:	4a21      	ldr	r2, [pc, #132]	; (8001118 <WAVFIL_Start_Write+0xe8>)
 8001092:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001096:	e892 0003 	ldmia.w	r2, {r0, r1}
 800109a:	e883 0003 	stmia.w	r3, {r0, r1}

	memcpy(w_header.Subchunk2ID, "data", 4);
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <WAVFIL_Start_Write+0xec>)
 80010a0:	64bb      	str	r3, [r7, #72]	; 0x48

	w_header.Subchunk2Size = sizeByteFile;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	64fb      	str	r3, [r7, #76]	; 0x4c


	resl = f_open(&w_filwav, filename, FA_WRITE | FA_CREATE_ALWAYS);
 80010a6:	220a      	movs	r2, #10
 80010a8:	68f9      	ldr	r1, [r7, #12]
 80010aa:	481d      	ldr	r0, [pc, #116]	; (8001120 <WAVFIL_Start_Write+0xf0>)
 80010ac:	f00b f936 	bl	800c31c <f_open>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <WAVFIL_Start_Write+0xf4>)
 80010b6:	701a      	strb	r2, [r3, #0]
	if (resl != FR_OK)
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <WAVFIL_Start_Write+0xf4>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <WAVFIL_Start_Write+0x98>
	{
		sd_unmount();
 80010c0:	f000 fbda 	bl	8001878 <sd_unmount>
		return WAV_ERROR_F_OPEN;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e01a      	b.n	80010fe <WAVFIL_Start_Write+0xce>
	}

	resl = f_write(&w_filwav, &w_header.raw, WAVE_HED_SIZ, &bytesWritten);
 80010c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010cc:	f107 0114 	add.w	r1, r7, #20
 80010d0:	223c      	movs	r2, #60	; 0x3c
 80010d2:	4813      	ldr	r0, [pc, #76]	; (8001120 <WAVFIL_Start_Write+0xf0>)
 80010d4:	f00b fc2f 	bl	800c936 <f_write>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <WAVFIL_Start_Write+0xf4>)
 80010de:	701a      	strb	r2, [r3, #0]
	if (resl != FR_OK  ||  bytesWritten != WAVE_HED_SIZ)
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <WAVFIL_Start_Write+0xf4>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <WAVFIL_Start_Write+0xbe>
 80010e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ea:	2b3c      	cmp	r3, #60	; 0x3c
 80010ec:	d003      	beq.n	80010f6 <WAVFIL_Start_Write+0xc6>
	{
		sd_unmount();
 80010ee:	f000 fbc3 	bl	8001878 <sd_unmount>
		return WAV_ERROR_F_WRIT;
 80010f2:	2307      	movs	r3, #7
 80010f4:	e003      	b.n	80010fe <WAVFIL_Start_Write+0xce>
	}

	W_WavremainData = sizeByteFile;
 80010f6:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <WAVFIL_Start_Write+0xf8>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	6013      	str	r3, [r2, #0]



	return WAV_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3758      	adds	r7, #88	; 0x58
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	46464952 	.word	0x46464952
 800110c:	45564157 	.word	0x45564157
 8001110:	20746d66 	.word	0x20746d66
 8001114:	54494449 	.word	0x54494449
 8001118:	0800f4c4 	.word	0x0800f4c4
 800111c:	61746164 	.word	0x61746164
 8001120:	200027c8 	.word	0x200027c8
 8001124:	20002b14 	.word	0x20002b14
 8001128:	20002b68 	.word	0x20002b68

0800112c <WAVFIL_Give_Write>:



WAV_StatusTypeDef WAVFIL_Give_Write(float32_t *puerData){
 800112c:	b580      	push	{r7, lr}
 800112e:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8001132:	af00      	add	r7, sp, #0
 8001134:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001138:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 800113c:	6018      	str	r0, [r3, #0]

	UINT 	  bytesWritten;
	uint32_t  writeNum = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
	uint8_t   w_rawdata[WAVE_DAT_RED_SIZ+1] = {'\0'};
 8001144:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001148:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	3304      	adds	r3, #4
 8001152:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f00d fc6b 	bl	800ea34 <memset>
//	float32_t f_sample = 0;
//	int16_t   i_sample = 0;
//	uint16_t  u_sample = 0;
	int8_t   sizeFram = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	f887 3823 	strb.w	r3, [r7, #2083]	; 0x823
	uint32_t  indexWrite = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
	float32_t valSample = 0;
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001172:	6013      	str	r3, [r2, #0]


	for(int i = 0; i < WAVE_DAT_RED_SIZ; i=i+2){
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 800117a:	e069      	b.n	8001250 <WAVFIL_Give_Write+0x124>

		valSample = *puerData;
 800117c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001180:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800118c:	6013      	str	r3, [r2, #0]

		if(valSample >  1.0f)
 800118e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800119a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	dd04      	ble.n	80011ae <WAVFIL_Give_Write+0x82>
			valSample =  1.0f;
 80011a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011a8:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80011ac:	6013      	str	r3, [r2, #0]
		if(valSample < -1.0f)
 80011ae:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80011ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	d503      	bpl.n	80011cc <WAVFIL_Give_Write+0xa0>
			valSample = -1.0f;
 80011c4:	4b5e      	ldr	r3, [pc, #376]	; (8001340 <WAVFIL_Give_Write+0x214>)
 80011c6:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80011ca:	6013      	str	r3, [r2, #0]

		valSample = valSample * NORMALISE;
 80011cc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001344 <WAVFIL_Give_Write+0x218>
 80011d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011dc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80011e0:	edc3 7a00 	vstr	s15, [r3]

		w_rawdata[i]   =  ((int16_t)valSample) & 0x00ff;
 80011e4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f0:	ee17 3a90 	vmov	r3, s15
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	b2d9      	uxtb	r1, r3
 80011f8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80011fc:	f6a3 021c 	subw	r2, r3, #2076	; 0x81c
 8001200:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001204:	4413      	add	r3, r2
 8001206:	460a      	mov	r2, r1
 8001208:	701a      	strb	r2, [r3, #0]
		w_rawdata[i+1] = (((int16_t)valSample) & 0xff00) >> 8;
 800120a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001216:	ee17 3a90 	vmov	r3, s15
 800121a:	b21b      	sxth	r3, r3
 800121c:	121a      	asrs	r2, r3, #8
 800121e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001222:	3301      	adds	r3, #1
 8001224:	b2d1      	uxtb	r1, r2
 8001226:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800122a:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 800122e:	54d1      	strb	r1, [r2, r3]
		puerData++;
 8001230:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001234:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8001238:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800123c:	f6a2 0224 	subw	r2, r2, #2084	; 0x824
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	3204      	adds	r2, #4
 8001244:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < WAVE_DAT_RED_SIZ; i=i+2){
 8001246:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800124a:	3302      	adds	r3, #2
 800124c:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8001250:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001258:	db90      	blt.n	800117c <WAVFIL_Give_Write+0x50>
//	}
//	W_WavremainData = W_WavremainData - bytesWritten;
//	*NumByteWrite = bytesWritten;


	if(W_WavremainData >= WAVE_DAT_RED_SIZ)
 800125a:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <WAVFIL_Give_Write+0x21c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001262:	d303      	bcc.n	800126c <WAVFIL_Give_Write+0x140>
		sizeFram = WAVE_DAT_RED_SIZ / 1024;
 8001264:	2302      	movs	r3, #2
 8001266:	f887 3823 	strb.w	r3, [r7, #2083]	; 0x823
 800126a:	e016      	b.n	800129a <WAVFIL_Give_Write+0x16e>
	else{
		sizeFram = ceilf((float32_t)W_WavremainData / 1024.0f);
 800126c:	4b36      	ldr	r3, [pc, #216]	; (8001348 <WAVFIL_Give_Write+0x21c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	ee07 3a90 	vmov	s15, r3
 8001274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001278:	eddf 6a34 	vldr	s13, [pc, #208]	; 800134c <WAVFIL_Give_Write+0x220>
 800127c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001280:	eeb0 0a47 	vmov.f32	s0, s14
 8001284:	f00e f8c2 	bl	800f40c <ceilf>
 8001288:	eef0 7a40 	vmov.f32	s15, s0
 800128c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001290:	edc7 7a00 	vstr	s15, [r7]
 8001294:	783b      	ldrb	r3, [r7, #0]
 8001296:	f887 3823 	strb.w	r3, [r7, #2083]	; 0x823
	}

	indexWrite = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
	while(sizeFram > 0)
 80012a0:	e043      	b.n	800132a <WAVFIL_Give_Write+0x1fe>
	{
		if(W_WavremainData > 1024)
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <WAVFIL_Give_Write+0x21c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012aa:	d904      	bls.n	80012b6 <WAVFIL_Give_Write+0x18a>
		{
			writeNum = 1024;
 80012ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b0:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 80012b4:	e006      	b.n	80012c4 <WAVFIL_Give_Write+0x198>
		}
		else
		{
			writeNum = W_WavremainData;
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <WAVFIL_Give_Write+0x21c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
			sizeFram = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	f887 3823 	strb.w	r3, [r7, #2083]	; 0x823
		}

		resl = f_write(&w_filwav, &w_rawdata[indexWrite], writeNum, &bytesWritten);
 80012c4:	f107 020c 	add.w	r2, r7, #12
 80012c8:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80012cc:	18d1      	adds	r1, r2, r3
 80012ce:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80012d2:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 80012d6:	481e      	ldr	r0, [pc, #120]	; (8001350 <WAVFIL_Give_Write+0x224>)
 80012d8:	f00b fb2d 	bl	800c936 <f_write>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <WAVFIL_Give_Write+0x228>)
 80012e2:	701a      	strb	r2, [r3, #0]
		if (resl != FR_OK  ||  bytesWritten != writeNum) {
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <WAVFIL_Give_Write+0x228>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d105      	bne.n	80012f8 <WAVFIL_Give_Write+0x1cc>
 80012ec:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80012f0:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d003      	beq.n	8001300 <WAVFIL_Give_Write+0x1d4>
			sd_unmount();
 80012f8:	f000 fabe 	bl	8001878 <sd_unmount>
			return WAV_ERROR_F_WRIT;
 80012fc:	2307      	movs	r3, #7
 80012fe:	e019      	b.n	8001334 <WAVFIL_Give_Write+0x208>
		}
		sizeFram--;
 8001300:	f997 3823 	ldrsb.w	r3, [r7, #2083]	; 0x823
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3b01      	subs	r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f887 3823 	strb.w	r3, [r7, #2083]	; 0x823
		indexWrite = indexWrite + bytesWritten;
 800130e:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001312:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 8001316:	4413      	add	r3, r2
 8001318:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
		W_WavremainData = W_WavremainData - bytesWritten;
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <WAVFIL_Give_Write+0x21c>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <WAVFIL_Give_Write+0x21c>)
 8001328:	6013      	str	r3, [r2, #0]
	while(sizeFram > 0)
 800132a:	f997 3823 	ldrsb.w	r3, [r7, #2083]	; 0x823
 800132e:	2b00      	cmp	r3, #0
 8001330:	dcb7      	bgt.n	80012a2 <WAVFIL_Give_Write+0x176>

	}


	return WAV_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	f607 0728 	addw	r7, r7, #2088	; 0x828
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	bf800000 	.word	0xbf800000
 8001344:	46ffff00 	.word	0x46ffff00
 8001348:	20002b68 	.word	0x20002b68
 800134c:	44800000 	.word	0x44800000
 8001350:	200027c8 	.word	0x200027c8
 8001354:	20002b14 	.word	0x20002b14

08001358 <WAVFIL_End_Write>:

WAV_StatusTypeDef WAVFIL_End_Write(void){
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

	f_close(&w_filwav);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <WAVFIL_End_Write+0x10>)
 800135e:	f00b fcdd 	bl	800cd1c <f_close>

	return WAV_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200027c8 	.word	0x200027c8

0800136c <WAVFIL_Start_Read>:





WAV_StatusTypeDef WAVFIL_Start_Read(const char *filename){
 800136c:	b580      	push	{r7, lr}
 800136e:	b092      	sub	sp, #72	; 0x48
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

	R_WavSize 		= 0;
 8001374:	4b35      	ldr	r3, [pc, #212]	; (800144c <WAVFIL_Start_Read+0xe0>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
	R_WavDataNum 	= 0;
 800137a:	4b35      	ldr	r3, [pc, #212]	; (8001450 <WAVFIL_Start_Read+0xe4>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
	R_WavremainData = 0;
 8001380:	4b34      	ldr	r3, [pc, #208]	; (8001454 <WAVFIL_Start_Read+0xe8>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
	R_WavSamRat		= 0;
 8001386:	4b34      	ldr	r3, [pc, #208]	; (8001458 <WAVFIL_Start_Read+0xec>)
 8001388:	2200      	movs	r2, #0
 800138a:	801a      	strh	r2, [r3, #0]
	memset(BufHeader, '\0', WAVE_HED_SIZ+1);
 800138c:	223d      	movs	r2, #61	; 0x3d
 800138e:	2100      	movs	r1, #0
 8001390:	4832      	ldr	r0, [pc, #200]	; (800145c <WAVFIL_Start_Read+0xf0>)
 8001392:	f00d fb4f 	bl	800ea34 <memset>

	WAVHeader r_header;


	// Read size file
	resl = f_stat(filename, &fno);
 8001396:	4932      	ldr	r1, [pc, #200]	; (8001460 <WAVFIL_Start_Read+0xf4>)
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f00b fce9 	bl	800cd70 <f_stat>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b30      	ldr	r3, [pc, #192]	; (8001464 <WAVFIL_Start_Read+0xf8>)
 80013a4:	701a      	strb	r2, [r3, #0]
	if (resl != FR_OK)
 80013a6:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <WAVFIL_Start_Read+0xf8>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <WAVFIL_Start_Read+0x4a>
	{
		sd_unmount();
 80013ae:	f000 fa63 	bl	8001878 <sd_unmount>
		return WAV_ERROR_F_STAT;
 80013b2:	2304      	movs	r3, #4
 80013b4:	e045      	b.n	8001442 <WAVFIL_Start_Read+0xd6>
	}
	R_WavSize = fno.fsize;
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <WAVFIL_Start_Read+0xf4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a24      	ldr	r2, [pc, #144]	; (800144c <WAVFIL_Start_Read+0xe0>)
 80013bc:	6013      	str	r3, [r2, #0]


	if (f_open(&r_filwav, filename, FA_READ) != FR_OK)
 80013be:	2201      	movs	r2, #1
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	4829      	ldr	r0, [pc, #164]	; (8001468 <WAVFIL_Start_Read+0xfc>)
 80013c4:	f00a ffaa 	bl	800c31c <f_open>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <WAVFIL_Start_Read+0x6a>
	{
		sd_unmount();
 80013ce:	f000 fa53 	bl	8001878 <sd_unmount>
		return WAV_ERROR_F_OPEN;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e035      	b.n	8001442 <WAVFIL_Start_Read+0xd6>
	}

	// Read header
	resl = f_read(&r_filwav, r_header.raw, WAVE_HED_SIZ, &bytes_read);
 80013d6:	f107 0108 	add.w	r1, r7, #8
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <WAVFIL_Start_Read+0x100>)
 80013dc:	223c      	movs	r2, #60	; 0x3c
 80013de:	4822      	ldr	r0, [pc, #136]	; (8001468 <WAVFIL_Start_Read+0xfc>)
 80013e0:	f00b f96a 	bl	800c6b8 <f_read>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <WAVFIL_Start_Read+0xf8>)
 80013ea:	701a      	strb	r2, [r3, #0]
    if (resl != FR_OK || bytes_read != WAVE_HED_SIZ) {
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <WAVFIL_Start_Read+0xf8>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d103      	bne.n	80013fc <WAVFIL_Start_Read+0x90>
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <WAVFIL_Start_Read+0x100>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b3c      	cmp	r3, #60	; 0x3c
 80013fa:	d006      	beq.n	800140a <WAVFIL_Start_Read+0x9e>
        f_close(&r_filwav);
 80013fc:	481a      	ldr	r0, [pc, #104]	; (8001468 <WAVFIL_Start_Read+0xfc>)
 80013fe:	f00b fc8d 	bl	800cd1c <f_close>
        sd_unmount();
 8001402:	f000 fa39 	bl	8001878 <sd_unmount>
        return WAV_ERROR_F_READ;
 8001406:	2305      	movs	r3, #5
 8001408:	e01b      	b.n	8001442 <WAVFIL_Start_Read+0xd6>
    }

    //  Header check
    if(memcmp(r_header.ChunkID, "RIFF", 4) || r_header.ChunkSize != (R_WavSize-8) ||
       memcmp(r_header.Format , "WAVE", 4) || memcmp(r_header.Subchunk1ID, "fmt ", 4) ||
	   memcmp(r_header.ExtraChunkID , "IDIT", 4) || r_header.BitsPerSample != 16,
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	3334      	adds	r3, #52	; 0x34
 8001410:	2204      	movs	r2, #4
 8001412:	4917      	ldr	r1, [pc, #92]	; (8001470 <WAVFIL_Start_Read+0x104>)
 8001414:	4618      	mov	r0, r3
 8001416:	f00d fafd 	bl	800ea14 <memcmp>
 800141a:	4603      	mov	r3, r0
    if(memcmp(r_header.ChunkID, "RIFF", 4) || r_header.ChunkSize != (R_WavSize-8) ||
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <WAVFIL_Start_Read+0xbc>
	   memcmp(r_header.Subchunk2ID , "data", 4)){

    	sd_unmount();
 8001420:	f000 fa2a 	bl	8001878 <sd_unmount>
    	return WAV_ERROR_HEADER;
 8001424:	2306      	movs	r3, #6
 8001426:	e00c      	b.n	8001442 <WAVFIL_Start_Read+0xd6>
    }


	R_WavSamRat  	  = r_header.SampleRate;
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <WAVFIL_Start_Read+0xec>)
 800142e:	801a      	strh	r2, [r3, #0]
	R_WavDataNum 	  = R_WavSize - (WAVE_HED_SIZ);
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <WAVFIL_Start_Read+0xe0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3b3c      	subs	r3, #60	; 0x3c
 8001436:	4a06      	ldr	r2, [pc, #24]	; (8001450 <WAVFIL_Start_Read+0xe4>)
 8001438:	6013      	str	r3, [r2, #0]
//	R_WavremainData   = R_WavDataNum;

	R_WavremainData = r_header.Subchunk2Size;
 800143a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800143c:	4a05      	ldr	r2, [pc, #20]	; (8001454 <WAVFIL_Start_Read+0xe8>)
 800143e:	6013      	str	r3, [r2, #0]
//		sd_unmount();
//		return WAV_ERROR_HEADER;
//	}


	return WAV_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3748      	adds	r7, #72	; 0x48
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20002b58 	.word	0x20002b58
 8001450:	20002b5c 	.word	0x20002b5c
 8001454:	20002b60 	.word	0x20002b60
 8001458:	20002b64 	.word	0x20002b64
 800145c:	20002b18 	.word	0x20002b18
 8001460:	200029fc 	.word	0x200029fc
 8001464:	20002b14 	.word	0x20002b14
 8001468:	20002598 	.word	0x20002598
 800146c:	200029f8 	.word	0x200029f8
 8001470:	0800f4cc 	.word	0x0800f4cc

08001474 <WAVFIL_Catch_Data>:


WAV_StatusTypeDef WAVFIL_Catch_Data(float32_t *dataBuf, uint32_t *puerData){
 8001474:	b580      	push	{r7, lr}
 8001476:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 800147a:	af00      	add	r7, sp, #0
 800147c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001480:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001484:	6018      	str	r0, [r3, #0]
 8001486:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800148a:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 800148e:	6019      	str	r1, [r3, #0]

	UINT     bytes_read = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	uint32_t readNum 	= 0;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
	uint8_t  r_rawData[WAVE_DAT_RED_SIZ+1] = {'\0'};
 800149c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80014a0:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	3304      	adds	r3, #4
 80014aa:	f240 72fd 	movw	r2, #2045	; 0x7fd
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f00d fabf 	bl	800ea34 <memset>
	int8_t   sizeFram = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 3823 	strb.w	r3, [r7, #2083]	; 0x823
	uint32_t indexRead = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
//		return WAV_ERROR_F_READ;
//	}



	if(R_WavremainData >= WAVE_DAT_RED_SIZ)
 80014c2:	4b61      	ldr	r3, [pc, #388]	; (8001648 <WAVFIL_Catch_Data+0x1d4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014ca:	d303      	bcc.n	80014d4 <WAVFIL_Catch_Data+0x60>
		sizeFram = WAVE_DAT_RED_SIZ / 1024;
 80014cc:	2302      	movs	r3, #2
 80014ce:	f887 3823 	strb.w	r3, [r7, #2083]	; 0x823
 80014d2:	e016      	b.n	8001502 <WAVFIL_Catch_Data+0x8e>
	else{
		sizeFram = ceilf((float32_t)R_WavremainData / 1024.0f);
 80014d4:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <WAVFIL_Catch_Data+0x1d4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e0:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800164c <WAVFIL_Catch_Data+0x1d8>
 80014e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014e8:	eeb0 0a47 	vmov.f32	s0, s14
 80014ec:	f00d ff8e 	bl	800f40c <ceilf>
 80014f0:	eef0 7a40 	vmov.f32	s15, s0
 80014f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80014fc:	793b      	ldrb	r3, [r7, #4]
 80014fe:	f887 3823 	strb.w	r3, [r7, #2083]	; 0x823
	}

	indexRead = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
	while(sizeFram > 0)
 8001508:	e043      	b.n	8001592 <WAVFIL_Catch_Data+0x11e>
	{
		if(R_WavremainData > 1024)
 800150a:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <WAVFIL_Catch_Data+0x1d4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001512:	d904      	bls.n	800151e <WAVFIL_Catch_Data+0xaa>
		{
			readNum = 1024;
 8001514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001518:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 800151c:	e006      	b.n	800152c <WAVFIL_Catch_Data+0xb8>
		}
		else
		{
			readNum = R_WavremainData;
 800151e:	4b4a      	ldr	r3, [pc, #296]	; (8001648 <WAVFIL_Catch_Data+0x1d4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
			sizeFram = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 3823 	strb.w	r3, [r7, #2083]	; 0x823
		}

		resl = f_read(&r_filwav, &r_rawData[indexRead], readNum, &bytes_read);
 800152c:	f107 0210 	add.w	r2, r7, #16
 8001530:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001534:	18d1      	adds	r1, r2, r3
 8001536:	f607 0314 	addw	r3, r7, #2068	; 0x814
 800153a:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 800153e:	4844      	ldr	r0, [pc, #272]	; (8001650 <WAVFIL_Catch_Data+0x1dc>)
 8001540:	f00b f8ba 	bl	800c6b8 <f_read>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	4b42      	ldr	r3, [pc, #264]	; (8001654 <WAVFIL_Catch_Data+0x1e0>)
 800154a:	701a      	strb	r2, [r3, #0]
		if (resl != FR_OK  ||  bytes_read != readNum) {
 800154c:	4b41      	ldr	r3, [pc, #260]	; (8001654 <WAVFIL_Catch_Data+0x1e0>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d105      	bne.n	8001560 <WAVFIL_Catch_Data+0xec>
 8001554:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001558:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 800155c:	429a      	cmp	r2, r3
 800155e:	d003      	beq.n	8001568 <WAVFIL_Catch_Data+0xf4>
			sd_unmount();
 8001560:	f000 f98a 	bl	8001878 <sd_unmount>
			return WAV_ERROR_F_READ;
 8001564:	2305      	movs	r3, #5
 8001566:	e06a      	b.n	800163e <WAVFIL_Catch_Data+0x1ca>
		}
		sizeFram--;
 8001568:	f997 3823 	ldrsb.w	r3, [r7, #2083]	; 0x823
 800156c:	b2db      	uxtb	r3, r3
 800156e:	3b01      	subs	r3, #1
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f887 3823 	strb.w	r3, [r7, #2083]	; 0x823
		indexRead = indexRead + bytes_read;
 8001576:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800157a:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 800157e:	4413      	add	r3, r2
 8001580:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
		R_WavremainData = R_WavremainData - bytes_read;
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <WAVFIL_Catch_Data+0x1d4>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	4a2e      	ldr	r2, [pc, #184]	; (8001648 <WAVFIL_Catch_Data+0x1d4>)
 8001590:	6013      	str	r3, [r2, #0]
	while(sizeFram > 0)
 8001592:	f997 3823 	ldrsb.w	r3, [r7, #2083]	; 0x823
 8001596:	2b00      	cmp	r3, #0
 8001598:	dcb7      	bgt.n	800150a <WAVFIL_Catch_Data+0x96>
	}




	*puerData = 0;
 800159a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800159e:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < WAVE_DAT_RED_SIZ; i = i+2){
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
 80015ae:	e040      	b.n	8001632 <WAVFIL_Catch_Data+0x1be>
		*dataBuf = ((float32_t)((int16_t)(((int16_t)r_rawData[i+1]) << 8  |  r_rawData[i]))) / NORMALISE;
 80015b0:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80015b4:	3301      	adds	r3, #1
 80015b6:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80015ba:	f6a2 0218 	subw	r2, r2, #2072	; 0x818
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80015c8:	f6a3 0118 	subw	r1, r3, #2072	; 0x818
 80015cc:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80015d0:	440b      	add	r3, r1
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b21b      	sxth	r3, r3
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e2:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001658 <WAVFIL_Catch_Data+0x1e4>
 80015e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ea:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80015ee:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	edc3 7a00 	vstr	s15, [r3]
		dataBuf++;
 80015f8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80015fc:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001600:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001604:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	3204      	adds	r2, #4
 800160c:	601a      	str	r2, [r3, #0]
		*puerData = *puerData + 1;
 800160e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001612:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001620:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < WAVE_DAT_RED_SIZ; i = i+2){
 8001628:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800162c:	3302      	adds	r3, #2
 800162e:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
 8001632:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8001636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800163a:	dbb9      	blt.n	80015b0 <WAVFIL_Catch_Data+0x13c>
	}


	return WAV_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	f607 0728 	addw	r7, r7, #2088	; 0x828
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20002b60 	.word	0x20002b60
 800164c:	44800000 	.word	0x44800000
 8001650:	20002598 	.word	0x20002598
 8001654:	20002b14 	.word	0x20002b14
 8001658:	46ffff00 	.word	0x46ffff00

0800165c <WAVFIL_End_Read>:


WAV_StatusTypeDef WAVFIL_End_Read(void){
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

	f_close(&r_filwav);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <WAVFIL_End_Read+0x10>)
 8001662:	f00b fb5b 	bl	800cd1c <f_close>
	return WAV_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20002598 	.word	0x20002598

08001670 <sd_format>:
*/




int sd_format(void) {
 8001670:	b580      	push	{r7, lr}
 8001672:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001676:	af02      	add	r7, sp, #8
    FRESULT res;
    BYTE work[512];

    res = f_mkfs(sd_path, FM_FAT32, 0, work, sizeof(work));
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167e:	9200      	str	r2, [sp, #0]
 8001680:	2200      	movs	r2, #0
 8001682:	2102      	movs	r1, #2
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <sd_format+0x44>)
 8001686:	f00b fc71 	bl	800cf6c <f_mkfs>
 800168a:	4603      	mov	r3, r0
 800168c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    if (res != FR_OK) {
 8001690:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <sd_format+0x34>
        printf("Format failed: f_mkfs returned %d\r\n", res);
 8001698:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	; (80016b8 <sd_format+0x48>)
 80016a0:	f00d f872 	bl	800e788 <iprintf>
    }
    return res;
 80016a4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20002360 	.word	0x20002360
 80016b8:	0800f4d4 	.word	0x0800f4d4

080016bc <sd_get_space_kb>:

int sd_get_space_kb(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
    FATFS *pfs;
    DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
    FRESULT res = f_getfree(sd_path, &fre_clust, &pfs);
 80016c2:	f107 0208 	add.w	r2, r7, #8
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4814      	ldr	r0, [pc, #80]	; (800171c <sd_get_space_kb+0x60>)
 80016cc:	f00b fb99 	bl	800ce02 <f_getfree>
 80016d0:	4603      	mov	r3, r0
 80016d2:	77fb      	strb	r3, [r7, #31]
    if (res != FR_OK) return res;
 80016d4:	7ffb      	ldrb	r3, [r7, #31]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <sd_get_space_kb+0x22>
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	e01a      	b.n	8001714 <sd_get_space_kb+0x58>

    tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	3b02      	subs	r3, #2
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	8952      	ldrh	r2, [r2, #10]
 80016e8:	fb02 f303 	mul.w	r3, r2, r3
 80016ec:	61bb      	str	r3, [r7, #24]
    fre_sect = fre_clust * pfs->csize;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	895b      	ldrh	r3, [r3, #10]
 80016f2:	461a      	mov	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	fb02 f303 	mul.w	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
    total_kb = tot_sect / 2;
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	613b      	str	r3, [r7, #16]
    free_kb = fre_sect / 2;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	085b      	lsrs	r3, r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
    printf("💾 Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb);
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	6939      	ldr	r1, [r7, #16]
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <sd_get_space_kb+0x64>)
 800170e:	f00d f83b 	bl	800e788 <iprintf>
    return FR_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3720      	adds	r7, #32
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20002360 	.word	0x20002360
 8001720:	0800f4f8 	.word	0x0800f4f8

08001724 <sd_mount>:

int sd_mount(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
    FRESULT res;
    extern uint8_t sd_is_sdhc(void);

    printf("Linking SD driver...\r\n");
 800172a:	4840      	ldr	r0, [pc, #256]	; (800182c <sd_mount+0x108>)
 800172c:	f00d f892 	bl	800e854 <puts>
    if (FATFS_LinkDriver(&SD_Driver, sd_path) != 0) {
 8001730:	493f      	ldr	r1, [pc, #252]	; (8001830 <sd_mount+0x10c>)
 8001732:	4840      	ldr	r0, [pc, #256]	; (8001834 <sd_mount+0x110>)
 8001734:	f00c f892 	bl	800d85c <FATFS_LinkDriver>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d004      	beq.n	8001748 <sd_mount+0x24>
        printf("FATFS_LinkDriver failed\n");
 800173e:	483e      	ldr	r0, [pc, #248]	; (8001838 <sd_mount+0x114>)
 8001740:	f00d f888 	bl	800e854 <puts>
        return FR_DISK_ERR;
 8001744:	2301      	movs	r3, #1
 8001746:	e06d      	b.n	8001824 <sd_mount+0x100>
    }

    printf("Initializing disk...\r\n");
 8001748:	483c      	ldr	r0, [pc, #240]	; (800183c <sd_mount+0x118>)
 800174a:	f00d f883 	bl	800e854 <puts>
    DSTATUS stat = disk_initialize(0);
 800174e:	2000      	movs	r0, #0
 8001750:	f008 fbc0 	bl	8009ed4 <disk_initialize>
 8001754:	4603      	mov	r3, r0
 8001756:	71fb      	strb	r3, [r7, #7]
    if (stat != 0) {
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <sd_mount+0x4e>
        printf("disk_initialize failed: 0x%02X\n", stat);
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	4619      	mov	r1, r3
 8001762:	4837      	ldr	r0, [pc, #220]	; (8001840 <sd_mount+0x11c>)
 8001764:	f00d f810 	bl	800e788 <iprintf>
        printf("FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n");
 8001768:	4836      	ldr	r0, [pc, #216]	; (8001844 <sd_mount+0x120>)
 800176a:	f00d f873 	bl	800e854 <puts>
        return FR_NOT_READY;
 800176e:	2303      	movs	r3, #3
 8001770:	e058      	b.n	8001824 <sd_mount+0x100>
    }

    printf("Attempting mount at %s...\r\n", sd_path);
 8001772:	492f      	ldr	r1, [pc, #188]	; (8001830 <sd_mount+0x10c>)
 8001774:	4834      	ldr	r0, [pc, #208]	; (8001848 <sd_mount+0x124>)
 8001776:	f00d f807 	bl	800e788 <iprintf>
    res = f_mount(&fs, sd_path, 1);
 800177a:	2201      	movs	r2, #1
 800177c:	492c      	ldr	r1, [pc, #176]	; (8001830 <sd_mount+0x10c>)
 800177e:	4833      	ldr	r0, [pc, #204]	; (800184c <sd_mount+0x128>)
 8001780:	f00a fd86 	bl	800c290 <f_mount>
 8001784:	4603      	mov	r3, r0
 8001786:	71bb      	strb	r3, [r7, #6]
    if (res == FR_OK)
 8001788:	79bb      	ldrb	r3, [r7, #6]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d113      	bne.n	80017b6 <sd_mount+0x92>
    {
        printf("SD card mounted successfully at %s\r\n", sd_path);
 800178e:	4928      	ldr	r1, [pc, #160]	; (8001830 <sd_mount+0x10c>)
 8001790:	482f      	ldr	r0, [pc, #188]	; (8001850 <sd_mount+0x12c>)
 8001792:	f00c fff9 	bl	800e788 <iprintf>
        printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 8001796:	f000 f991 	bl	8001abc <sd_is_sdhc>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <sd_mount+0x80>
 80017a0:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <sd_mount+0x130>)
 80017a2:	e000      	b.n	80017a6 <sd_mount+0x82>
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <sd_mount+0x134>)
 80017a6:	4619      	mov	r1, r3
 80017a8:	482c      	ldr	r0, [pc, #176]	; (800185c <sd_mount+0x138>)
 80017aa:	f00c ffed 	bl	800e788 <iprintf>

        sd_get_space_kb();
 80017ae:	f7ff ff85 	bl	80016bc <sd_get_space_kb>
        return FR_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e036      	b.n	8001824 <sd_mount+0x100>
    }

    if (res == FR_NO_FILESYSTEM)
 80017b6:	79bb      	ldrb	r3, [r7, #6]
 80017b8:	2b0d      	cmp	r3, #13
 80017ba:	d12d      	bne.n	8001818 <sd_mount+0xf4>
    {
        printf("No filesystem found on SD card. Attempting format...\r\nThis will create 32MB Partition (Most Probably)\r\n");
 80017bc:	4828      	ldr	r0, [pc, #160]	; (8001860 <sd_mount+0x13c>)
 80017be:	f00d f849 	bl	800e854 <puts>
        printf("If you need the full sized SD card, use the computer to format into FAT32\r\n");
 80017c2:	4828      	ldr	r0, [pc, #160]	; (8001864 <sd_mount+0x140>)
 80017c4:	f00d f846 	bl	800e854 <puts>
        sd_format();
 80017c8:	f7ff ff52 	bl	8001670 <sd_format>

        printf("Retrying mount after format...\r\n");
 80017cc:	4826      	ldr	r0, [pc, #152]	; (8001868 <sd_mount+0x144>)
 80017ce:	f00d f841 	bl	800e854 <puts>
        res = f_mount(&fs, sd_path, 1);
 80017d2:	2201      	movs	r2, #1
 80017d4:	4916      	ldr	r1, [pc, #88]	; (8001830 <sd_mount+0x10c>)
 80017d6:	481d      	ldr	r0, [pc, #116]	; (800184c <sd_mount+0x128>)
 80017d8:	f00a fd5a 	bl	800c290 <f_mount>
 80017dc:	4603      	mov	r3, r0
 80017de:	71bb      	strb	r3, [r7, #6]
        if (res == FR_OK) {
 80017e0:	79bb      	ldrb	r3, [r7, #6]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d111      	bne.n	800180a <sd_mount+0xe6>
            printf("SD card formatted and mounted successfully.\r\n");
 80017e6:	4821      	ldr	r0, [pc, #132]	; (800186c <sd_mount+0x148>)
 80017e8:	f00d f834 	bl	800e854 <puts>
            printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 80017ec:	f000 f966 	bl	8001abc <sd_is_sdhc>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <sd_mount+0xd6>
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <sd_mount+0x130>)
 80017f8:	e000      	b.n	80017fc <sd_mount+0xd8>
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <sd_mount+0x134>)
 80017fc:	4619      	mov	r1, r3
 80017fe:	4817      	ldr	r0, [pc, #92]	; (800185c <sd_mount+0x138>)
 8001800:	f00c ffc2 	bl	800e788 <iprintf>

            sd_get_space_kb();
 8001804:	f7ff ff5a 	bl	80016bc <sd_get_space_kb>
 8001808:	e004      	b.n	8001814 <sd_mount+0xf0>
        }
        else {
            printf("Mount failed even after format: %d\r\n", res);
 800180a:	79bb      	ldrb	r3, [r7, #6]
 800180c:	4619      	mov	r1, r3
 800180e:	4818      	ldr	r0, [pc, #96]	; (8001870 <sd_mount+0x14c>)
 8001810:	f00c ffba 	bl	800e788 <iprintf>
        }
        return res;
 8001814:	79bb      	ldrb	r3, [r7, #6]
 8001816:	e005      	b.n	8001824 <sd_mount+0x100>
    }

    printf("Mount failed with code: %d\r\n", res);
 8001818:	79bb      	ldrb	r3, [r7, #6]
 800181a:	4619      	mov	r1, r3
 800181c:	4815      	ldr	r0, [pc, #84]	; (8001874 <sd_mount+0x150>)
 800181e:	f00c ffb3 	bl	800e788 <iprintf>
    return res;
 8001822:	79bb      	ldrb	r3, [r7, #6]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	0800f51c 	.word	0x0800f51c
 8001830:	20002360 	.word	0x20002360
 8001834:	0800fa10 	.word	0x0800fa10
 8001838:	0800f534 	.word	0x0800f534
 800183c:	0800f54c 	.word	0x0800f54c
 8001840:	0800f564 	.word	0x0800f564
 8001844:	0800f584 	.word	0x0800f584
 8001848:	0800f5bc 	.word	0x0800f5bc
 800184c:	20002364 	.word	0x20002364
 8001850:	0800f5d8 	.word	0x0800f5d8
 8001854:	0800f600 	.word	0x0800f600
 8001858:	0800f60c 	.word	0x0800f60c
 800185c:	0800f614 	.word	0x0800f614
 8001860:	0800f624 	.word	0x0800f624
 8001864:	0800f68c 	.word	0x0800f68c
 8001868:	0800f6d8 	.word	0x0800f6d8
 800186c:	0800f6f8 	.word	0x0800f6f8
 8001870:	0800f728 	.word	0x0800f728
 8001874:	0800f750 	.word	0x0800f750

08001878 <sd_unmount>:

int sd_unmount(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
    FRESULT res = f_mount(NULL, sd_path, 1);
 800187e:	2201      	movs	r2, #1
 8001880:	490a      	ldr	r1, [pc, #40]	; (80018ac <sd_unmount+0x34>)
 8001882:	2000      	movs	r0, #0
 8001884:	f00a fd04 	bl	800c290 <f_mount>
 8001888:	4603      	mov	r3, r0
 800188a:	71fb      	strb	r3, [r7, #7]
    printf("SD card unmounted: %s\r\n", (res == FR_OK) ? "OK" : "Failed");
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <sd_unmount+0x1e>
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <sd_unmount+0x38>)
 8001894:	e000      	b.n	8001898 <sd_unmount+0x20>
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <sd_unmount+0x3c>)
 8001898:	4619      	mov	r1, r3
 800189a:	4807      	ldr	r0, [pc, #28]	; (80018b8 <sd_unmount+0x40>)
 800189c:	f00c ff74 	bl	800e788 <iprintf>
    return res;
 80018a0:	79fb      	ldrb	r3, [r7, #7]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20002360 	.word	0x20002360
 80018b0:	0800f770 	.word	0x0800f770
 80018b4:	0800f774 	.word	0x0800f774
 80018b8:	0800f77c 	.word	0x0800f77c

080018bc <HAL_SPI_TxCpltCallback>:

#if USE_DMA
volatile int dma_tx_done = 0;
volatile int dma_rx_done = 0;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	if (hspi == &SD_SPI_HANDLE) dma_tx_done = 1;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <HAL_SPI_TxCpltCallback+0x24>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d102      	bne.n	80018d2 <HAL_SPI_TxCpltCallback+0x16>
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_SPI_TxCpltCallback+0x28>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20002200 	.word	0x20002200
 80018e4:	20002b6c 	.word	0x20002b6c

080018e8 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) dma_rx_done = 1;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_SPI_TxRxCpltCallback+0x24>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d102      	bne.n	80018fe <HAL_SPI_TxRxCpltCallback+0x16>
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_SPI_TxRxCpltCallback+0x28>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20002200 	.word	0x20002200
 8001910:	20002b70 	.word	0x20002b70

08001914 <SD_TransmitByte>:
#endif

static void SD_TransmitByte(uint8_t data) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 800191e:	1df9      	adds	r1, r7, #7
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
 8001924:	2201      	movs	r2, #1
 8001926:	4803      	ldr	r0, [pc, #12]	; (8001934 <SD_TransmitByte+0x20>)
 8001928:	f003 fc4f 	bl	80051ca <HAL_SPI_Transmit>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20002200 	.word	0x20002200

08001938 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 800193e:	23ff      	movs	r3, #255	; 0xff
 8001940:	71fb      	strb	r3, [r7, #7]
 8001942:	2300      	movs	r3, #0
 8001944:	71bb      	strb	r3, [r7, #6]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 8001946:	1dba      	adds	r2, r7, #6
 8001948:	1df9      	adds	r1, r7, #7
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2301      	movs	r3, #1
 8001952:	4804      	ldr	r0, [pc, #16]	; (8001964 <SD_ReceiveByte+0x2c>)
 8001954:	f003 fd7c 	bl	8005450 <HAL_SPI_TransmitReceive>
    return data;
 8001958:	79bb      	ldrb	r3, [r7, #6]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20002200 	.word	0x20002200

08001968 <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
#if USE_DMA
    dma_tx_done = 0;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <SD_TransmitBuffer+0x34>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
 800197a:	887b      	ldrh	r3, [r7, #2]
 800197c:	461a      	mov	r2, r3
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4807      	ldr	r0, [pc, #28]	; (80019a0 <SD_TransmitBuffer+0x38>)
 8001982:	f003 ff15 	bl	80057b0 <HAL_SPI_Transmit_DMA>
    while (!dma_tx_done);
 8001986:	bf00      	nop
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <SD_TransmitBuffer+0x34>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0fb      	beq.n	8001988 <SD_TransmitBuffer+0x20>
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
#endif
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20002b6c 	.word	0x20002b6c
 80019a0:	20002200 	.word	0x20002200

080019a4 <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
#if USE_DMA
	static uint8_t tx_dummy[512];
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e007      	b.n	80019c6 <SD_ReceiveBuffer+0x22>
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <SD_ReceiveBuffer+0x50>)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	22ff      	movs	r2, #255	; 0xff
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3301      	adds	r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dbf3      	blt.n	80019b6 <SD_ReceiveBuffer+0x12>
    dma_rx_done = 0;
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <SD_ReceiveBuffer+0x54>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_dummy, buffer, len);
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4906      	ldr	r1, [pc, #24]	; (80019f4 <SD_ReceiveBuffer+0x50>)
 80019da:	4808      	ldr	r0, [pc, #32]	; (80019fc <SD_ReceiveBuffer+0x58>)
 80019dc:	f003 ff9a 	bl	8005914 <HAL_SPI_TransmitReceive_DMA>
    while (!dma_rx_done);
 80019e0:	bf00      	nop
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <SD_ReceiveBuffer+0x54>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0fb      	beq.n	80019e2 <SD_ReceiveBuffer+0x3e>
#else
    for (uint16_t i = 0; i < len; i++) {
        buffer[i] = SD_ReceiveByte();
    }
#endif
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20002b78 	.word	0x20002b78
 80019f8:	20002b70 	.word	0x20002b70
 80019fc:	20002200 	.word	0x20002200

08001a00 <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 8001a06:	f000 fe47 	bl	8002698 <HAL_GetTick>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a10:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 8001a12:	f7ff ff91 	bl	8001938 <SD_ReceiveByte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	70fb      	strb	r3, [r7, #3]
        if (resp == 0xFF) return SD_OK;
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	2bff      	cmp	r3, #255	; 0xff
 8001a1e:	d101      	bne.n	8001a24 <SD_WaitReady+0x24>
 8001a20:	2300      	movs	r3, #0
 8001a22:	e006      	b.n	8001a32 <SD_WaitReady+0x32>
    } while (HAL_GetTick() < timeout);
 8001a24:	f000 fe38 	bl	8002698 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d8f0      	bhi.n	8001a12 <SD_WaitReady+0x12>
    return SD_ERROR;
 8001a30:	2301      	movs	r3, #1
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	6039      	str	r1, [r7, #0]
 8001a44:	71fb      	strb	r3, [r7, #7]
 8001a46:	4613      	mov	r3, r2
 8001a48:	71bb      	strb	r3, [r7, #6]
    uint8_t response, retry = 0xFF;
 8001a4a:	23ff      	movs	r3, #255	; 0xff
 8001a4c:	73fb      	strb	r3, [r7, #15]

    SD_WaitReady();
 8001a4e:	f7ff ffd7 	bl	8001a00 <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff5a 	bl	8001914 <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	0e1b      	lsrs	r3, r3, #24
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff54 	bl	8001914 <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	0c1b      	lsrs	r3, r3, #16
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff4e 	bl	8001914 <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff48 	bl	8001914 <SD_TransmitByte>
    SD_TransmitByte(arg);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff43 	bl	8001914 <SD_TransmitByte>
    SD_TransmitByte(crc);
 8001a8e:	79bb      	ldrb	r3, [r7, #6]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff3f 	bl	8001914 <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 8001a96:	f7ff ff4f 	bl	8001938 <SD_ReceiveByte>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	73bb      	strb	r3, [r7, #14]
    } while ((response & 0x80) && --retry);
 8001a9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	da05      	bge.n	8001ab2 <SD_SendCommand+0x78>
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f1      	bne.n	8001a96 <SD_SendCommand+0x5c>

    return response;
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
    return sdhc;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <sd_is_sdhc+0x14>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20002b74 	.word	0x20002b74

08001ad4 <SD_SPI_Init>:
uint8_t card_initialized = 0;

SD_Status SD_SPI_Init(void) {
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 8001ada:	2201      	movs	r2, #1
 8001adc:	2110      	movs	r1, #16
 8001ade:	4873      	ldr	r0, [pc, #460]	; (8001cac <SD_SPI_Init+0x1d8>)
 8001ae0:	f001 fc10 	bl	8003304 <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	e005      	b.n	8001af6 <SD_SPI_Init+0x22>
 8001aea:	20ff      	movs	r0, #255	; 0xff
 8001aec:	f7ff ff12 	bl	8001914 <SD_TransmitByte>
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	3301      	adds	r3, #1
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	2b09      	cmp	r3, #9
 8001afa:	d9f6      	bls.n	8001aea <SD_SPI_Init+0x16>

    SD_CS_LOW();
 8001afc:	2200      	movs	r2, #0
 8001afe:	2110      	movs	r1, #16
 8001b00:	486a      	ldr	r0, [pc, #424]	; (8001cac <SD_SPI_Init+0x1d8>)
 8001b02:	f001 fbff 	bl	8003304 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 8001b06:	2295      	movs	r2, #149	; 0x95
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f7ff ff95 	bl	8001a3a <SD_SendCommand>
 8001b10:	4603      	mov	r3, r0
 8001b12:	73bb      	strb	r3, [r7, #14]
    SD_CS_HIGH();
 8001b14:	2201      	movs	r2, #1
 8001b16:	2110      	movs	r1, #16
 8001b18:	4864      	ldr	r0, [pc, #400]	; (8001cac <SD_SPI_Init+0x1d8>)
 8001b1a:	f001 fbf3 	bl	8003304 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001b1e:	20ff      	movs	r0, #255	; 0xff
 8001b20:	f7ff fef8 	bl	8001914 <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 8001b24:	7bbb      	ldrb	r3, [r7, #14]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d001      	beq.n	8001b2e <SD_SPI_Init+0x5a>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0ba      	b.n	8001ca4 <SD_SPI_Init+0x1d0>

    SD_CS_LOW();
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2110      	movs	r1, #16
 8001b32:	485e      	ldr	r0, [pc, #376]	; (8001cac <SD_SPI_Init+0x1d8>)
 8001b34:	f001 fbe6 	bl	8003304 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 8001b38:	2287      	movs	r2, #135	; 0x87
 8001b3a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001b3e:	2008      	movs	r0, #8
 8001b40:	f7ff ff7b 	bl	8001a3a <SD_SendCommand>
 8001b44:	4603      	mov	r3, r0
 8001b46:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e00c      	b.n	8001b68 <SD_SPI_Init+0x94>
 8001b4e:	7bfc      	ldrb	r4, [r7, #15]
 8001b50:	f7ff fef2 	bl	8001938 <SD_ReceiveByte>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	f104 0310 	add.w	r3, r4, #16
 8001b5c:	443b      	add	r3, r7
 8001b5e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	3301      	adds	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d9ef      	bls.n	8001b4e <SD_SPI_Init+0x7a>
    SD_CS_HIGH();
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2110      	movs	r1, #16
 8001b72:	484e      	ldr	r0, [pc, #312]	; (8001cac <SD_SPI_Init+0x1d8>)
 8001b74:	f001 fbc6 	bl	8003304 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001b78:	20ff      	movs	r0, #255	; 0xff
 8001b7a:	f7ff fecb 	bl	8001914 <SD_TransmitByte>

    sdhc = 0;
 8001b7e:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <SD_SPI_Init+0x1dc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 8001b84:	f000 fd88 	bl	8002698 <HAL_GetTick>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001b8e:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001b90:	7bbb      	ldrb	r3, [r7, #14]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d15a      	bne.n	8001c4c <SD_SPI_Init+0x178>
 8001b96:	79bb      	ldrb	r3, [r7, #6]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d157      	bne.n	8001c4c <SD_SPI_Init+0x178>
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	2baa      	cmp	r3, #170	; 0xaa
 8001ba0:	d154      	bne.n	8001c4c <SD_SPI_Init+0x178>
        do {
            SD_CS_LOW();
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2110      	movs	r1, #16
 8001ba6:	4841      	ldr	r0, [pc, #260]	; (8001cac <SD_SPI_Init+0x1d8>)
 8001ba8:	f001 fbac 	bl	8003304 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001bac:	22ff      	movs	r2, #255	; 0xff
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2037      	movs	r0, #55	; 0x37
 8001bb2:	f7ff ff42 	bl	8001a3a <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 8001bb6:	22ff      	movs	r2, #255	; 0xff
 8001bb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bbc:	2029      	movs	r0, #41	; 0x29
 8001bbe:	f7ff ff3c 	bl	8001a3a <SD_SendCommand>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2110      	movs	r1, #16
 8001bca:	4838      	ldr	r0, [pc, #224]	; (8001cac <SD_SPI_Init+0x1d8>)
 8001bcc:	f001 fb9a 	bl	8003304 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8001bd0:	20ff      	movs	r0, #255	; 0xff
 8001bd2:	f7ff fe9f 	bl	8001914 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8001bd6:	7bbb      	ldrb	r3, [r7, #14]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <SD_SPI_Init+0x114>
 8001bdc:	f000 fd5c 	bl	8002698 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d8dc      	bhi.n	8001ba2 <SD_SPI_Init+0xce>

        if (response != 0x00) return SD_ERROR;
 8001be8:	7bbb      	ldrb	r3, [r7, #14]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <SD_SPI_Init+0x11e>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e058      	b.n	8001ca4 <SD_SPI_Init+0x1d0>

        SD_CS_LOW();
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2110      	movs	r1, #16
 8001bf6:	482d      	ldr	r0, [pc, #180]	; (8001cac <SD_SPI_Init+0x1d8>)
 8001bf8:	f001 fb84 	bl	8003304 <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 8001bfc:	22ff      	movs	r2, #255	; 0xff
 8001bfe:	2100      	movs	r1, #0
 8001c00:	203a      	movs	r0, #58	; 0x3a
 8001c02:	f7ff ff1a 	bl	8001a3a <SD_SendCommand>
 8001c06:	4603      	mov	r3, r0
 8001c08:	73bb      	strb	r3, [r7, #14]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	73fb      	strb	r3, [r7, #15]
 8001c0e:	e00c      	b.n	8001c2a <SD_SPI_Init+0x156>
 8001c10:	7bfc      	ldrb	r4, [r7, #15]
 8001c12:	f7ff fe91 	bl	8001938 <SD_ReceiveByte>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f104 0310 	add.w	r3, r4, #16
 8001c1e:	443b      	add	r3, r7
 8001c20:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	3301      	adds	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d9ef      	bls.n	8001c10 <SD_SPI_Init+0x13c>
        SD_CS_HIGH();
 8001c30:	2201      	movs	r2, #1
 8001c32:	2110      	movs	r1, #16
 8001c34:	481d      	ldr	r0, [pc, #116]	; (8001cac <SD_SPI_Init+0x1d8>)
 8001c36:	f001 fb65 	bl	8003304 <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 8001c3a:	783b      	ldrb	r3, [r7, #0]
 8001c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d02a      	beq.n	8001c9a <SD_SPI_Init+0x1c6>
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <SD_SPI_Init+0x1dc>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001c4a:	e026      	b.n	8001c9a <SD_SPI_Init+0x1c6>
    } else {
        do {
            SD_CS_LOW();
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2110      	movs	r1, #16
 8001c50:	4816      	ldr	r0, [pc, #88]	; (8001cac <SD_SPI_Init+0x1d8>)
 8001c52:	f001 fb57 	bl	8003304 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001c56:	22ff      	movs	r2, #255	; 0xff
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2037      	movs	r0, #55	; 0x37
 8001c5c:	f7ff feed 	bl	8001a3a <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 8001c60:	22ff      	movs	r2, #255	; 0xff
 8001c62:	2100      	movs	r1, #0
 8001c64:	2029      	movs	r0, #41	; 0x29
 8001c66:	f7ff fee8 	bl	8001a3a <SD_SendCommand>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2110      	movs	r1, #16
 8001c72:	480e      	ldr	r0, [pc, #56]	; (8001cac <SD_SPI_Init+0x1d8>)
 8001c74:	f001 fb46 	bl	8003304 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8001c78:	20ff      	movs	r0, #255	; 0xff
 8001c7a:	f7ff fe4b 	bl	8001914 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8001c7e:	7bbb      	ldrb	r3, [r7, #14]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <SD_SPI_Init+0x1bc>
 8001c84:	f000 fd08 	bl	8002698 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d8dd      	bhi.n	8001c4c <SD_SPI_Init+0x178>
        if (response != 0x00) return SD_ERROR;
 8001c90:	7bbb      	ldrb	r3, [r7, #14]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <SD_SPI_Init+0x1c8>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e004      	b.n	8001ca4 <SD_SPI_Init+0x1d0>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001c9a:	bf00      	nop
    }

    card_initialized = 1;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SD_SPI_Init+0x1e0>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd90      	pop	{r4, r7, pc}
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	20002b74 	.word	0x20002b74
 8001cb4:	20002b75 	.word	0x20002b75

08001cb8 <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <SD_ReadBlocks+0x16>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e054      	b.n	8001d78 <SD_ReadBlocks+0xc0>
    if (!sdhc) sector *= 512;
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <SD_ReadBlocks+0xc8>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <SD_ReadBlocks+0x24>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	025b      	lsls	r3, r3, #9
 8001cda:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d144      	bne.n	8001d6c <SD_ReadBlocks+0xb4>
        SD_CS_LOW();
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2110      	movs	r1, #16
 8001ce6:	4827      	ldr	r0, [pc, #156]	; (8001d84 <SD_ReadBlocks+0xcc>)
 8001ce8:	f001 fb0c 	bl	8003304 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 8001cec:	22ff      	movs	r2, #255	; 0xff
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	2011      	movs	r0, #17
 8001cf2:	f7ff fea2 	bl	8001a3a <SD_SendCommand>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <SD_ReadBlocks+0x52>
            SD_CS_HIGH();
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	2110      	movs	r1, #16
 8001d00:	4820      	ldr	r0, [pc, #128]	; (8001d84 <SD_ReadBlocks+0xcc>)
 8001d02:	f001 faff 	bl	8003304 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e036      	b.n	8001d78 <SD_ReadBlocks+0xc0>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001d0a:	f000 fcc5 	bl	8002698 <HAL_GetTick>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	33c8      	adds	r3, #200	; 0xc8
 8001d12:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 8001d14:	f7ff fe10 	bl	8001938 <SD_ReceiveByte>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8001d1c:	7cfb      	ldrb	r3, [r7, #19]
 8001d1e:	2bfe      	cmp	r3, #254	; 0xfe
 8001d20:	d006      	beq.n	8001d30 <SD_ReadBlocks+0x78>
        } while (HAL_GetTick() < timeout);
 8001d22:	f000 fcb9 	bl	8002698 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d8f2      	bhi.n	8001d14 <SD_ReadBlocks+0x5c>
 8001d2e:	e000      	b.n	8001d32 <SD_ReadBlocks+0x7a>
            if (token == 0xFE) break;
 8001d30:	bf00      	nop
        if (token != 0xFE) {
 8001d32:	7cfb      	ldrb	r3, [r7, #19]
 8001d34:	2bfe      	cmp	r3, #254	; 0xfe
 8001d36:	d006      	beq.n	8001d46 <SD_ReadBlocks+0x8e>
            SD_CS_HIGH();
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2110      	movs	r1, #16
 8001d3c:	4811      	ldr	r0, [pc, #68]	; (8001d84 <SD_ReadBlocks+0xcc>)
 8001d3e:	f001 fae1 	bl	8003304 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e018      	b.n	8001d78 <SD_ReadBlocks+0xc0>
        }

        SD_ReceiveBuffer(buff, 512);
 8001d46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f7ff fe2a 	bl	80019a4 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 8001d50:	f7ff fdf2 	bl	8001938 <SD_ReceiveByte>
        SD_ReceiveByte();
 8001d54:	f7ff fdf0 	bl	8001938 <SD_ReceiveByte>
        SD_CS_HIGH();
 8001d58:	2201      	movs	r2, #1
 8001d5a:	2110      	movs	r1, #16
 8001d5c:	4809      	ldr	r0, [pc, #36]	; (8001d84 <SD_ReadBlocks+0xcc>)
 8001d5e:	f001 fad1 	bl	8003304 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8001d62:	20ff      	movs	r0, #255	; 0xff
 8001d64:	f7ff fdd6 	bl	8001914 <SD_TransmitByte>
        return SD_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e005      	b.n	8001d78 <SD_ReadBlocks+0xc0>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 f809 	bl	8001d88 <SD_ReadMultiBlocks>
 8001d76:	4603      	mov	r3, r0
    }
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20002b74 	.word	0x20002b74
 8001d84:	40020000 	.word	0x40020000

08001d88 <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <SD_ReadMultiBlocks+0x16>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e058      	b.n	8001e50 <SD_ReadMultiBlocks+0xc8>
    if (!sdhc) sector *= 512;
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <SD_ReadMultiBlocks+0xd0>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <SD_ReadMultiBlocks+0x24>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	025b      	lsls	r3, r3, #9
 8001daa:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8001dac:	2200      	movs	r2, #0
 8001dae:	2110      	movs	r1, #16
 8001db0:	482a      	ldr	r0, [pc, #168]	; (8001e5c <SD_ReadMultiBlocks+0xd4>)
 8001db2:	f001 faa7 	bl	8003304 <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 8001db6:	22ff      	movs	r2, #255	; 0xff
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	2012      	movs	r0, #18
 8001dbc:	f7ff fe3d 	bl	8001a3a <SD_SendCommand>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d031      	beq.n	8001e2a <SD_ReadMultiBlocks+0xa2>
        SD_CS_HIGH();
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	2110      	movs	r1, #16
 8001dca:	4824      	ldr	r0, [pc, #144]	; (8001e5c <SD_ReadMultiBlocks+0xd4>)
 8001dcc:	f001 fa9a 	bl	8003304 <HAL_GPIO_WritePin>
        return SD_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e03d      	b.n	8001e50 <SD_ReadMultiBlocks+0xc8>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001dd4:	f000 fc60 	bl	8002698 <HAL_GetTick>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	33c8      	adds	r3, #200	; 0xc8
 8001ddc:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 8001dde:	f7ff fdab 	bl	8001938 <SD_ReceiveByte>
 8001de2:	4603      	mov	r3, r0
 8001de4:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8001de6:	7cfb      	ldrb	r3, [r7, #19]
 8001de8:	2bfe      	cmp	r3, #254	; 0xfe
 8001dea:	d006      	beq.n	8001dfa <SD_ReadMultiBlocks+0x72>
        } while (HAL_GetTick() < timeout);
 8001dec:	f000 fc54 	bl	8002698 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d8f2      	bhi.n	8001dde <SD_ReadMultiBlocks+0x56>
 8001df8:	e000      	b.n	8001dfc <SD_ReadMultiBlocks+0x74>
            if (token == 0xFE) break;
 8001dfa:	bf00      	nop

        if (token != 0xFE) {
 8001dfc:	7cfb      	ldrb	r3, [r7, #19]
 8001dfe:	2bfe      	cmp	r3, #254	; 0xfe
 8001e00:	d006      	beq.n	8001e10 <SD_ReadMultiBlocks+0x88>
            SD_CS_HIGH();
 8001e02:	2201      	movs	r2, #1
 8001e04:	2110      	movs	r1, #16
 8001e06:	4815      	ldr	r0, [pc, #84]	; (8001e5c <SD_ReadMultiBlocks+0xd4>)
 8001e08:	f001 fa7c 	bl	8003304 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e01f      	b.n	8001e50 <SD_ReadMultiBlocks+0xc8>
        }

        SD_ReceiveBuffer(buff, 512);
 8001e10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7ff fdc5 	bl	80019a4 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 8001e1a:	f7ff fd8d 	bl	8001938 <SD_ReceiveByte>
        SD_ReceiveByte();
 8001e1e:	f7ff fd8b 	bl	8001938 <SD_ReceiveByte>

        buff += 512;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e28:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	1e5a      	subs	r2, r3, #1
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1cf      	bne.n	8001dd4 <SD_ReadMultiBlocks+0x4c>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 8001e34:	22ff      	movs	r2, #255	; 0xff
 8001e36:	2100      	movs	r1, #0
 8001e38:	200c      	movs	r0, #12
 8001e3a:	f7ff fdfe 	bl	8001a3a <SD_SendCommand>
    SD_CS_HIGH();
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2110      	movs	r1, #16
 8001e42:	4806      	ldr	r0, [pc, #24]	; (8001e5c <SD_ReadMultiBlocks+0xd4>)
 8001e44:	f001 fa5e 	bl	8003304 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 8001e48:	20ff      	movs	r0, #255	; 0xff
 8001e4a:	f7ff fd63 	bl	8001914 <SD_TransmitByte>

    return SD_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20002b74 	.word	0x20002b74
 8001e5c:	40020000 	.word	0x40020000

08001e60 <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <SD_WriteBlocks+0x16>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e051      	b.n	8001f1a <SD_WriteBlocks+0xba>
    if (!sdhc) sector *= 512;
 8001e76:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <SD_WriteBlocks+0xc4>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <SD_WriteBlocks+0x24>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	025b      	lsls	r3, r3, #9
 8001e82:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d141      	bne.n	8001f0e <SD_WriteBlocks+0xae>
        SD_CS_LOW();
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2110      	movs	r1, #16
 8001e8e:	4826      	ldr	r0, [pc, #152]	; (8001f28 <SD_WriteBlocks+0xc8>)
 8001e90:	f001 fa38 	bl	8003304 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 8001e94:	22ff      	movs	r2, #255	; 0xff
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	2018      	movs	r0, #24
 8001e9a:	f7ff fdce 	bl	8001a3a <SD_SendCommand>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <SD_WriteBlocks+0x52>
            SD_CS_HIGH();
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2110      	movs	r1, #16
 8001ea8:	481f      	ldr	r0, [pc, #124]	; (8001f28 <SD_WriteBlocks+0xc8>)
 8001eaa:	f001 fa2b 	bl	8003304 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e033      	b.n	8001f1a <SD_WriteBlocks+0xba>
        }

        SD_TransmitByte(0xFE);
 8001eb2:	20fe      	movs	r0, #254	; 0xfe
 8001eb4:	f7ff fd2e 	bl	8001914 <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 8001eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f7ff fd53 	bl	8001968 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 8001ec2:	20ff      	movs	r0, #255	; 0xff
 8001ec4:	f7ff fd26 	bl	8001914 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8001ec8:	20ff      	movs	r0, #255	; 0xff
 8001eca:	f7ff fd23 	bl	8001914 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8001ece:	f7ff fd33 	bl	8001938 <SD_ReceiveByte>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d006      	beq.n	8001eee <SD_WriteBlocks+0x8e>
            SD_CS_HIGH();
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2110      	movs	r1, #16
 8001ee4:	4810      	ldr	r0, [pc, #64]	; (8001f28 <SD_WriteBlocks+0xc8>)
 8001ee6:	f001 fa0d 	bl	8003304 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e015      	b.n	8001f1a <SD_WriteBlocks+0xba>
        }

        while (SD_ReceiveByte() == 0);
 8001eee:	bf00      	nop
 8001ef0:	f7ff fd22 	bl	8001938 <SD_ReceiveByte>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0fa      	beq.n	8001ef0 <SD_WriteBlocks+0x90>
        SD_CS_HIGH();
 8001efa:	2201      	movs	r2, #1
 8001efc:	2110      	movs	r1, #16
 8001efe:	480a      	ldr	r0, [pc, #40]	; (8001f28 <SD_WriteBlocks+0xc8>)
 8001f00:	f001 fa00 	bl	8003304 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8001f04:	20ff      	movs	r0, #255	; 0xff
 8001f06:	f7ff fd05 	bl	8001914 <SD_TransmitByte>

        return SD_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e005      	b.n	8001f1a <SD_WriteBlocks+0xba>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f80a 	bl	8001f2c <SD_WriteMultiBlocks>
 8001f18:	4603      	mov	r3, r0
    }
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20002b74 	.word	0x20002b74
 8001f28:	40020000 	.word	0x40020000

08001f2c <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <SD_WriteMultiBlocks+0x16>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e059      	b.n	8001ff6 <SD_WriteMultiBlocks+0xca>
    if (!sdhc) sector *= 512;
 8001f42:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <SD_WriteMultiBlocks+0xd4>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <SD_WriteMultiBlocks+0x24>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	025b      	lsls	r3, r3, #9
 8001f4e:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8001f50:	2200      	movs	r2, #0
 8001f52:	2110      	movs	r1, #16
 8001f54:	482b      	ldr	r0, [pc, #172]	; (8002004 <SD_WriteMultiBlocks+0xd8>)
 8001f56:	f001 f9d5 	bl	8003304 <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 8001f5a:	22ff      	movs	r2, #255	; 0xff
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	2019      	movs	r0, #25
 8001f60:	f7ff fd6b 	bl	8001a3a <SD_SendCommand>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d02e      	beq.n	8001fc8 <SD_WriteMultiBlocks+0x9c>
        SD_CS_HIGH();
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	4825      	ldr	r0, [pc, #148]	; (8002004 <SD_WriteMultiBlocks+0xd8>)
 8001f70:	f001 f9c8 	bl	8003304 <HAL_GPIO_WritePin>
        return SD_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e03e      	b.n	8001ff6 <SD_WriteMultiBlocks+0xca>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 8001f78:	20fc      	movs	r0, #252	; 0xfc
 8001f7a:	f7ff fccb 	bl	8001914 <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 8001f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f7ff fcf0 	bl	8001968 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 8001f88:	20ff      	movs	r0, #255	; 0xff
 8001f8a:	f7ff fcc3 	bl	8001914 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8001f8e:	20ff      	movs	r0, #255	; 0xff
 8001f90:	f7ff fcc0 	bl	8001914 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8001f94:	f7ff fcd0 	bl	8001938 <SD_ReceiveByte>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 8001f9c:	7dfb      	ldrb	r3, [r7, #23]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d006      	beq.n	8001fb4 <SD_WriteMultiBlocks+0x88>
            SD_CS_HIGH();
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2110      	movs	r1, #16
 8001faa:	4816      	ldr	r0, [pc, #88]	; (8002004 <SD_WriteMultiBlocks+0xd8>)
 8001fac:	f001 f9aa 	bl	8003304 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e020      	b.n	8001ff6 <SD_WriteMultiBlocks+0xca>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 8001fb4:	bf00      	nop
 8001fb6:	f7ff fcbf 	bl	8001938 <SD_ReceiveByte>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0fa      	beq.n	8001fb6 <SD_WriteMultiBlocks+0x8a>
        buff += 512;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001fc6:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	1e5a      	subs	r2, r3, #1
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1d2      	bne.n	8001f78 <SD_WriteMultiBlocks+0x4c>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 8001fd2:	20fd      	movs	r0, #253	; 0xfd
 8001fd4:	f7ff fc9e 	bl	8001914 <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 8001fd8:	bf00      	nop
 8001fda:	f7ff fcad 	bl	8001938 <SD_ReceiveByte>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0fa      	beq.n	8001fda <SD_WriteMultiBlocks+0xae>

    SD_CS_HIGH();
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	2110      	movs	r1, #16
 8001fe8:	4806      	ldr	r0, [pc, #24]	; (8002004 <SD_WriteMultiBlocks+0xd8>)
 8001fea:	f001 f98b 	bl	8003304 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001fee:	20ff      	movs	r0, #255	; 0xff
 8001ff0:	f7ff fc90 	bl	8001914 <SD_TransmitByte>

    return SD_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20002b74 	.word	0x20002b74
 8002004:	40020000 	.word	0x40020000

08002008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_MspInit+0x4c>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <HAL_MspInit+0x4c>)
 8002018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <HAL_MspInit+0x4c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_MspInit+0x4c>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_MspInit+0x4c>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_MspInit+0x4c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a47      	ldr	r2, [pc, #284]	; (8002194 <HAL_SPI_MspInit+0x13c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	f040 8088 	bne.w	800218c <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	4b45      	ldr	r3, [pc, #276]	; (8002198 <HAL_SPI_MspInit+0x140>)
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	4a44      	ldr	r2, [pc, #272]	; (8002198 <HAL_SPI_MspInit+0x140>)
 8002086:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800208a:	6453      	str	r3, [r2, #68]	; 0x44
 800208c:	4b42      	ldr	r3, [pc, #264]	; (8002198 <HAL_SPI_MspInit+0x140>)
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <HAL_SPI_MspInit+0x140>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	4a3d      	ldr	r2, [pc, #244]	; (8002198 <HAL_SPI_MspInit+0x140>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6313      	str	r3, [r2, #48]	; 0x30
 80020a8:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_SPI_MspInit+0x140>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020b4:	23e0      	movs	r3, #224	; 0xe0
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020c4:	2305      	movs	r3, #5
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	4833      	ldr	r0, [pc, #204]	; (800219c <HAL_SPI_MspInit+0x144>)
 80020d0:	f000 ff94 	bl	8002ffc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80020d4:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <HAL_SPI_MspInit+0x148>)
 80020d6:	4a33      	ldr	r2, [pc, #204]	; (80021a4 <HAL_SPI_MspInit+0x14c>)
 80020d8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80020da:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_SPI_MspInit+0x148>)
 80020dc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80020e0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_SPI_MspInit+0x148>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_SPI_MspInit+0x148>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020ee:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <HAL_SPI_MspInit+0x148>)
 80020f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f6:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <HAL_SPI_MspInit+0x148>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020fc:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_SPI_MspInit+0x148>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002102:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <HAL_SPI_MspInit+0x148>)
 8002104:	2200      	movs	r2, #0
 8002106:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002108:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <HAL_SPI_MspInit+0x148>)
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800210e:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_SPI_MspInit+0x148>)
 8002110:	2200      	movs	r2, #0
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002114:	4822      	ldr	r0, [pc, #136]	; (80021a0 <HAL_SPI_MspInit+0x148>)
 8002116:	f000 fc01 	bl	800291c <HAL_DMA_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002120:	f7fe fc90 	bl	8000a44 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a1e      	ldr	r2, [pc, #120]	; (80021a0 <HAL_SPI_MspInit+0x148>)
 8002128:	64da      	str	r2, [r3, #76]	; 0x4c
 800212a:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <HAL_SPI_MspInit+0x148>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <HAL_SPI_MspInit+0x150>)
 8002132:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <HAL_SPI_MspInit+0x154>)
 8002134:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_SPI_MspInit+0x150>)
 8002138:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800213c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <HAL_SPI_MspInit+0x150>)
 8002140:	2240      	movs	r2, #64	; 0x40
 8002142:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_SPI_MspInit+0x150>)
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <HAL_SPI_MspInit+0x150>)
 800214c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002150:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <HAL_SPI_MspInit+0x150>)
 8002154:	2200      	movs	r2, #0
 8002156:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_SPI_MspInit+0x150>)
 800215a:	2200      	movs	r2, #0
 800215c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_SPI_MspInit+0x150>)
 8002160:	2200      	movs	r2, #0
 8002162:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002164:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <HAL_SPI_MspInit+0x150>)
 8002166:	2200      	movs	r2, #0
 8002168:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_SPI_MspInit+0x150>)
 800216c:	2200      	movs	r2, #0
 800216e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002170:	480d      	ldr	r0, [pc, #52]	; (80021a8 <HAL_SPI_MspInit+0x150>)
 8002172:	f000 fbd3 	bl	800291c <HAL_DMA_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800217c:	f7fe fc62 	bl	8000a44 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_SPI_MspInit+0x150>)
 8002184:	649a      	str	r2, [r3, #72]	; 0x48
 8002186:	4a08      	ldr	r2, [pc, #32]	; (80021a8 <HAL_SPI_MspInit+0x150>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800218c:	bf00      	nop
 800218e:	3728      	adds	r7, #40	; 0x28
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40013000 	.word	0x40013000
 8002198:	40023800 	.word	0x40023800
 800219c:	40020000 	.word	0x40020000
 80021a0:	20002258 	.word	0x20002258
 80021a4:	40026410 	.word	0x40026410
 80021a8:	200022b8 	.word	0x200022b8
 80021ac:	40026440 	.word	0x40026440

080021b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a19      	ldr	r2, [pc, #100]	; (8002234 <HAL_UART_MspInit+0x84>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d12c      	bne.n	800222c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_UART_MspInit+0x88>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a17      	ldr	r2, [pc, #92]	; (8002238 <HAL_UART_MspInit+0x88>)
 80021dc:	f043 0310 	orr.w	r3, r3, #16
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_UART_MspInit+0x88>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_UART_MspInit+0x88>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a10      	ldr	r2, [pc, #64]	; (8002238 <HAL_UART_MspInit+0x88>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_UART_MspInit+0x88>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800220a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800220e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800221c:	2307      	movs	r3, #7
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <HAL_UART_MspInit+0x8c>)
 8002228:	f000 fee8 	bl	8002ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800222c:	bf00      	nop
 800222e:	3728      	adds	r7, #40	; 0x28
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40011000 	.word	0x40011000
 8002238:	40023800 	.word	0x40023800
 800223c:	40020000 	.word	0x40020000

08002240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002244:	e7fe      	b.n	8002244 <NMI_Handler+0x4>

08002246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224a:	e7fe      	b.n	800224a <HardFault_Handler+0x4>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <MemManage_Handler+0x4>

08002252 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002256:	e7fe      	b.n	8002256 <BusFault_Handler+0x4>

08002258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <UsageFault_Handler+0x4>

0800225e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800228c:	f000 f9f0 	bl	8002670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002298:	2001      	movs	r0, #1
 800229a:	f001 f84d 	bl	8003338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <DMA2_Stream0_IRQHandler+0x10>)
 80022aa:	f000 fc3d 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20002258 	.word	0x20002258

080022b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <DMA2_Stream2_IRQHandler+0x10>)
 80022be:	f000 fc33 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200022b8 	.word	0x200022b8

080022cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <OTG_FS_IRQHandler+0x10>)
 80022d2:	f001 f98d 	bl	80035f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20004294 	.word	0x20004294

080022e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	e00a      	b.n	8002308 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022f2:	f3af 8000 	nop.w
 80022f6:	4601      	mov	r1, r0
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	60ba      	str	r2, [r7, #8]
 80022fe:	b2ca      	uxtb	r2, r1
 8002300:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	3301      	adds	r3, #1
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	dbf0      	blt.n	80022f2 <_read+0x12>
  }

  return len;
 8002310:	687b      	ldr	r3, [r7, #4]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <_close>:
  }
  return len;
}

int _close(int file)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002342:	605a      	str	r2, [r3, #4]
  return 0;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_isatty>:

int _isatty(int file)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <_sbrk+0x5c>)
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <_sbrk+0x60>)
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <_sbrk+0x64>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d207      	bcs.n	80023c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b4:	f00c fb9c 	bl	800eaf0 <__errno>
 80023b8:	4603      	mov	r3, r0
 80023ba:	220c      	movs	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	e009      	b.n	80023d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <_sbrk+0x64>)
 80023d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20020000 	.word	0x20020000
 80023e4:	00000400 	.word	0x00000400
 80023e8:	20002d78 	.word	0x20002d78
 80023ec:	20004ae8 	.word	0x20004ae8

080023f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <SystemInit+0x20>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <SystemInit+0x20>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800244c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002418:	f7ff ffea 	bl	80023f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800241c:	480c      	ldr	r0, [pc, #48]	; (8002450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800241e:	490d      	ldr	r1, [pc, #52]	; (8002454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002420:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002434:	4c0a      	ldr	r4, [pc, #40]	; (8002460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002442:	f00c fb5b 	bl	800eafc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002446:	f7fe f8c9 	bl	80005dc <main>
  bx  lr    
 800244a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800244c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8002458:	0800fee8 	.word	0x0800fee8
  ldr r2, =_sbss
 800245c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8002460:	20004ae4 	.word	0x20004ae4

08002464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC_IRQHandler>

08002466 <arm_biquad_cascade_df2T_f32>:
ARM_DSP_ATTRIBUTE void arm_biquad_cascade_df2T_f32(
  const arm_biquad_cascade_df2T_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8002466:	b480      	push	{r7}
 8002468:	b095      	sub	sp, #84	; 0x54
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	603b      	str	r3, [r7, #0]
  const float32_t *pIn = pSrc;                         /* Source pointer */
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	64fb      	str	r3, [r7, #76]	; 0x4c
        float32_t *pOut = pDst;                        /* Destination pointer */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pState = S->pState;                 /* State pointer */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	647b      	str	r3, [r7, #68]	; 0x44
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t acc1;                                /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1;                                 /* Temporary input */
        float32_t d1, d2;                              /* State variables */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	633b      	str	r3, [r7, #48]	; 0x30

  do
  {
     /* Reading the coefficients */
     b0 = pCoeffs[0];
 800248e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
     b1 = pCoeffs[1];
 8002494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002496:	3304      	adds	r3, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
     b2 = pCoeffs[2];
 800249c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800249e:	3308      	adds	r3, #8
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
     a1 = pCoeffs[3];
 80024a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a6:	330c      	adds	r3, #12
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	623b      	str	r3, [r7, #32]
     a2 = pCoeffs[4];
 80024ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ae:	3310      	adds	r3, #16
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	61fb      	str	r3, [r7, #28]

     /* Reading the state values */
     d1 = pState[0];
 80024b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
     d2 = pState[1];
 80024ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38

     pCoeffs += 5U;
 80024c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c2:	3314      	adds	r3, #20
 80024c4:	643b      	str	r3, [r7, #64]	; 0x40
      sample = blockSize & 0xFU;

#else

      /* Initialize blkCnt with number of samples */
      sample = blockSize;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (sample > 0U) {
 80024ca:	e044      	b.n	8002556 <arm_biquad_cascade_df2T_f32+0xf0>
        Xn1 = *pIn++;
 80024cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ce:	1d1a      	adds	r2, r3, #4
 80024d0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	61bb      	str	r3, [r7, #24]

        acc1 = b0 * Xn1 + d1;
 80024d6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80024da:	edd7 7a06 	vldr	s15, [r7, #24]
 80024de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80024e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ea:	edc7 7a05 	vstr	s15, [r7, #20]

        d1 = b1 * Xn1 + d2;
 80024ee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80024f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80024f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80024fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002502:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        d1 += a1 * acc1;
 8002506:	ed97 7a08 	vldr	s14, [r7, #32]
 800250a:	edd7 7a05 	vldr	s15, [r7, #20]
 800250e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002512:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        d2 = b2 * Xn1;
 800251e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002522:	edd7 7a06 	vldr	s15, [r7, #24]
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        d2 += a2 * acc1;
 800252e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002532:	edd7 7a05 	vldr	s15, [r7, #20]
 8002536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800253e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002542:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        *pOut++ = acc1;
 8002546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002548:	1d1a      	adds	r2, r3, #4
 800254a:	64ba      	str	r2, [r7, #72]	; 0x48
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	601a      	str	r2, [r3, #0]

        /* decrement loop counter */
        sample--;
 8002550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002552:	3b01      	subs	r3, #1
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
      while (sample > 0U) {
 8002556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1b7      	bne.n	80024cc <arm_biquad_cascade_df2T_f32+0x66>
      }

      /* Store the updated state variables back into the state array */
      pState[0] = d1;
 800255c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800255e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002560:	601a      	str	r2, [r3, #0]
      pState[1] = d2;
 8002562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002564:	3304      	adds	r3, #4
 8002566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002568:	601a      	str	r2, [r3, #0]

      pState += 2U;
 800256a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256c:	3308      	adds	r3, #8
 800256e:	647b      	str	r3, [r7, #68]	; 0x44

      /* The current stage output is given as the input to the next stage */
      pIn = pDst;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Reset the output working pointer */
      pOut = pDst;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	64bb      	str	r3, [r7, #72]	; 0x48

      /* decrement loop counter */
      stage--;
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	3b01      	subs	r3, #1
 800257c:	633b      	str	r3, [r7, #48]	; 0x30

   } while (stage > 0U);
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	2b00      	cmp	r3, #0
 8002582:	d184      	bne.n	800248e <arm_biquad_cascade_df2T_f32+0x28>

}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3754      	adds	r7, #84	; 0x54
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <arm_biquad_cascade_df2T_init_f32>:
ARM_DSP_ATTRIBUTE void arm_biquad_cascade_df2T_init_f32(
        arm_biquad_cascade_df2T_instance_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	460b      	mov	r3, r1
 80025a0:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	7afa      	ldrb	r2, [r7, #11]
 80025a6:	701a      	strb	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 2 * numStages */
  memset(pState, 0, (2U * (uint32_t) numStages) * sizeof(float32_t));
 80025ae:	7afb      	ldrb	r3, [r7, #11]
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	461a      	mov	r2, r3
 80025b4:	2100      	movs	r1, #0
 80025b6:	6838      	ldr	r0, [r7, #0]
 80025b8:	f00c fa3c 	bl	800ea34 <memset>

  /* Assign state pointer */
  S->pState = pState;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	605a      	str	r2, [r3, #4]
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <HAL_Init+0x40>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0d      	ldr	r2, [pc, #52]	; (800260c <HAL_Init+0x40>)
 80025d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_Init+0x40>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0a      	ldr	r2, [pc, #40]	; (800260c <HAL_Init+0x40>)
 80025e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <HAL_Init+0x40>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a07      	ldr	r2, [pc, #28]	; (800260c <HAL_Init+0x40>)
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f4:	2003      	movs	r0, #3
 80025f6:	f000 f94f 	bl	8002898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025fa:	200f      	movs	r0, #15
 80025fc:	f000 f808 	bl	8002610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002600:	f7ff fd02 	bl	8002008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023c00 	.word	0x40023c00

08002610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_InitTick+0x54>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_InitTick+0x58>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002626:	fbb3 f3f1 	udiv	r3, r3, r1
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f967 	bl	8002902 <HAL_SYSTICK_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e00e      	b.n	800265c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b0f      	cmp	r3, #15
 8002642:	d80a      	bhi.n	800265a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002644:	2200      	movs	r2, #0
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	f04f 30ff 	mov.w	r0, #4294967295
 800264c:	f000 f92f 	bl	80028ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002650:	4a06      	ldr	r2, [pc, #24]	; (800266c <HAL_InitTick+0x5c>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	e000      	b.n	800265c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000000 	.word	0x20000000
 8002668:	20000008 	.word	0x20000008
 800266c:	20000004 	.word	0x20000004

08002670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x20>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_IncTick+0x24>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4413      	add	r3, r2
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_IncTick+0x24>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000008 	.word	0x20000008
 8002694:	20002d7c 	.word	0x20002d7c

08002698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return uwTick;
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_GetTick+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20002d7c 	.word	0x20002d7c

080026b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff ffee 	bl	8002698 <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d005      	beq.n	80026d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_Delay+0x44>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026d6:	bf00      	nop
 80026d8:	f7ff ffde 	bl	8002698 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d8f7      	bhi.n	80026d8 <HAL_Delay+0x28>
  {
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000008 	.word	0x20000008

080026f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002714:	4013      	ands	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272a:	4a04      	ldr	r2, [pc, #16]	; (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	60d3      	str	r3, [r2, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <__NVIC_GetPriorityGrouping+0x18>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	f003 0307 	and.w	r3, r3, #7
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	2b00      	cmp	r3, #0
 800276c:	db0b      	blt.n	8002786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	4907      	ldr	r1, [pc, #28]	; (8002794 <__NVIC_EnableIRQ+0x38>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2001      	movs	r0, #1
 800277e:	fa00 f202 	lsl.w	r2, r0, r2
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000e100 	.word	0xe000e100

08002798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	db0a      	blt.n	80027c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	490c      	ldr	r1, [pc, #48]	; (80027e4 <__NVIC_SetPriority+0x4c>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	0112      	lsls	r2, r2, #4
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	440b      	add	r3, r1
 80027bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c0:	e00a      	b.n	80027d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4908      	ldr	r1, [pc, #32]	; (80027e8 <__NVIC_SetPriority+0x50>)
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	3b04      	subs	r3, #4
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	440b      	add	r3, r1
 80027d6:	761a      	strb	r2, [r3, #24]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000e100 	.word	0xe000e100
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	; 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f1c3 0307 	rsb	r3, r3, #7
 8002806:	2b04      	cmp	r3, #4
 8002808:	bf28      	it	cs
 800280a:	2304      	movcs	r3, #4
 800280c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3304      	adds	r3, #4
 8002812:	2b06      	cmp	r3, #6
 8002814:	d902      	bls.n	800281c <NVIC_EncodePriority+0x30>
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3b03      	subs	r3, #3
 800281a:	e000      	b.n	800281e <NVIC_EncodePriority+0x32>
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	f04f 32ff 	mov.w	r2, #4294967295
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	401a      	ands	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	43d9      	mvns	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	4313      	orrs	r3, r2
         );
}
 8002846:	4618      	mov	r0, r3
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002864:	d301      	bcc.n	800286a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002866:	2301      	movs	r3, #1
 8002868:	e00f      	b.n	800288a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <SysTick_Config+0x40>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002872:	210f      	movs	r1, #15
 8002874:	f04f 30ff 	mov.w	r0, #4294967295
 8002878:	f7ff ff8e 	bl	8002798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <SysTick_Config+0x40>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <SysTick_Config+0x40>)
 8002884:	2207      	movs	r2, #7
 8002886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	e000e010 	.word	0xe000e010

08002898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ff29 	bl	80026f8 <__NVIC_SetPriorityGrouping>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b086      	sub	sp, #24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c0:	f7ff ff3e 	bl	8002740 <__NVIC_GetPriorityGrouping>
 80028c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	6978      	ldr	r0, [r7, #20]
 80028cc:	f7ff ff8e 	bl	80027ec <NVIC_EncodePriority>
 80028d0:	4602      	mov	r2, r0
 80028d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff5d 	bl	8002798 <__NVIC_SetPriority>
}
 80028de:	bf00      	nop
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4603      	mov	r3, r0
 80028ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff31 	bl	800275c <__NVIC_EnableIRQ>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ffa2 	bl	8002854 <SysTick_Config>
 8002910:	4603      	mov	r3, r0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff feb6 	bl	8002698 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e099      	b.n	8002a6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002958:	e00f      	b.n	800297a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800295a:	f7ff fe9d 	bl	8002698 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b05      	cmp	r3, #5
 8002966:	d908      	bls.n	800297a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2203      	movs	r2, #3
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e078      	b.n	8002a6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e8      	bne.n	800295a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <HAL_DMA_Init+0x158>)
 8002994:	4013      	ands	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d107      	bne.n	80029e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	4313      	orrs	r3, r2
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f023 0307 	bic.w	r3, r3, #7
 80029fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d117      	bne.n	8002a3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00e      	beq.n	8002a3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fa6f 	bl	8002f04 <DMA_CheckFifoParam>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2240      	movs	r2, #64	; 0x40
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e016      	b.n	8002a6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fa26 	bl	8002e98 <DMA_CalcBaseAndBitshift>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a54:	223f      	movs	r2, #63	; 0x3f
 8002a56:	409a      	lsls	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	f010803f 	.word	0xf010803f

08002a78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_DMA_Start_IT+0x26>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e040      	b.n	8002b20 <HAL_DMA_Start_IT+0xa8>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d12f      	bne.n	8002b12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f9b8 	bl	8002e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad0:	223f      	movs	r2, #63	; 0x3f
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0216 	orr.w	r2, r2, #22
 8002ae6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d007      	beq.n	8002b00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0208 	orr.w	r2, r2, #8
 8002afe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e005      	b.n	8002b1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b34:	4b8e      	ldr	r3, [pc, #568]	; (8002d70 <HAL_DMA_IRQHandler+0x248>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a8e      	ldr	r2, [pc, #568]	; (8002d74 <HAL_DMA_IRQHandler+0x24c>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0a9b      	lsrs	r3, r3, #10
 8002b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	2208      	movs	r2, #8
 8002b54:	409a      	lsls	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01a      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d013      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	2208      	movs	r2, #8
 8002b82:	409a      	lsls	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b98:	2201      	movs	r2, #1
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	f043 0202 	orr.w	r2, r3, #2
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	2204      	movs	r2, #4
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d012      	beq.n	8002c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00b      	beq.n	8002c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	2204      	movs	r2, #4
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f043 0204 	orr.w	r2, r3, #4
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	2210      	movs	r2, #16
 8002c06:	409a      	lsls	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d043      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d03c      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	2210      	movs	r2, #16
 8002c24:	409a      	lsls	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d018      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d108      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d024      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
 8002c56:	e01f      	b.n	8002c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
 8002c68:	e016      	b.n	8002c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d107      	bne.n	8002c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0208 	bic.w	r2, r2, #8
 8002c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 808f 	beq.w	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8087 	beq.w	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d136      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0216 	bic.w	r2, r2, #22
 8002ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d103      	bne.n	8002d02 <HAL_DMA_IRQHandler+0x1da>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0208 	bic.w	r2, r2, #8
 8002d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	223f      	movs	r2, #63	; 0x3f
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d07e      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
        }
        return;
 8002d3e:	e079      	b.n	8002e34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01d      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10d      	bne.n	8002d78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d031      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
 8002d6c:	e02c      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
 8002d6e:	bf00      	nop
 8002d70:	20000000 	.word	0x20000000
 8002d74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d023      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
 8002d88:	e01e      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10f      	bne.n	8002db8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0210 	bic.w	r2, r2, #16
 8002da6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d032      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d022      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2205      	movs	r2, #5
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	3301      	adds	r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d307      	bcc.n	8002e10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f2      	bne.n	8002df4 <HAL_DMA_IRQHandler+0x2cc>
 8002e0e:	e000      	b.n	8002e12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4798      	blx	r3
 8002e32:	e000      	b.n	8002e36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e34:	bf00      	nop
    }
  }
}
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b40      	cmp	r3, #64	; 0x40
 8002e68:	d108      	bne.n	8002e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e7a:	e007      	b.n	8002e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	60da      	str	r2, [r3, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3b10      	subs	r3, #16
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <DMA_CalcBaseAndBitshift+0x64>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <DMA_CalcBaseAndBitshift+0x68>)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d909      	bls.n	8002eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ece:	f023 0303 	bic.w	r3, r3, #3
 8002ed2:	1d1a      	adds	r2, r3, #4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ed8:	e007      	b.n	8002eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ee2:	f023 0303 	bic.w	r3, r3, #3
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	aaaaaaab 	.word	0xaaaaaaab
 8002f00:	0800fa3c 	.word	0x0800fa3c

08002f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d11f      	bne.n	8002f5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d856      	bhi.n	8002fd2 <DMA_CheckFifoParam+0xce>
 8002f24:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <DMA_CheckFifoParam+0x28>)
 8002f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2a:	bf00      	nop
 8002f2c:	08002f3d 	.word	0x08002f3d
 8002f30:	08002f4f 	.word	0x08002f4f
 8002f34:	08002f3d 	.word	0x08002f3d
 8002f38:	08002fd3 	.word	0x08002fd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d046      	beq.n	8002fd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f4c:	e043      	b.n	8002fd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f56:	d140      	bne.n	8002fda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f5c:	e03d      	b.n	8002fda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f66:	d121      	bne.n	8002fac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d837      	bhi.n	8002fde <DMA_CheckFifoParam+0xda>
 8002f6e:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <DMA_CheckFifoParam+0x70>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002f85 	.word	0x08002f85
 8002f78:	08002f8b 	.word	0x08002f8b
 8002f7c:	08002f85 	.word	0x08002f85
 8002f80:	08002f9d 	.word	0x08002f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      break;
 8002f88:	e030      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d025      	beq.n	8002fe2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f9a:	e022      	b.n	8002fe2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fa4:	d11f      	bne.n	8002fe6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002faa:	e01c      	b.n	8002fe6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d903      	bls.n	8002fba <DMA_CheckFifoParam+0xb6>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d003      	beq.n	8002fc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fb8:	e018      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8002fbe:	e015      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00e      	beq.n	8002fea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd0:	e00b      	b.n	8002fea <DMA_CheckFifoParam+0xe6>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e00a      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e008      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e006      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e004      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e002      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;   
 8002fe6:	bf00      	nop
 8002fe8:	e000      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fea:	bf00      	nop
    }
  } 
  
  return status; 
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop

08002ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	e159      	b.n	80032cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003018:	2201      	movs	r2, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	429a      	cmp	r2, r3
 8003032:	f040 8148 	bne.w	80032c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d005      	beq.n	800304e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304a:	2b02      	cmp	r3, #2
 800304c:	d130      	bne.n	80030b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003084:	2201      	movs	r2, #1
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 0201 	and.w	r2, r3, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d017      	beq.n	80030ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d123      	bne.n	8003140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	08da      	lsrs	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3208      	adds	r2, #8
 8003100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	220f      	movs	r2, #15
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	08da      	lsrs	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3208      	adds	r2, #8
 800313a:	69b9      	ldr	r1, [r7, #24]
 800313c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	2203      	movs	r2, #3
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0203 	and.w	r2, r3, #3
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80a2 	beq.w	80032c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	4b57      	ldr	r3, [pc, #348]	; (80032e4 <HAL_GPIO_Init+0x2e8>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	4a56      	ldr	r2, [pc, #344]	; (80032e4 <HAL_GPIO_Init+0x2e8>)
 800318c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003190:	6453      	str	r3, [r2, #68]	; 0x44
 8003192:	4b54      	ldr	r3, [pc, #336]	; (80032e4 <HAL_GPIO_Init+0x2e8>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800319e:	4a52      	ldr	r2, [pc, #328]	; (80032e8 <HAL_GPIO_Init+0x2ec>)
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3302      	adds	r3, #2
 80031a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	220f      	movs	r2, #15
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a49      	ldr	r2, [pc, #292]	; (80032ec <HAL_GPIO_Init+0x2f0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d019      	beq.n	80031fe <HAL_GPIO_Init+0x202>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a48      	ldr	r2, [pc, #288]	; (80032f0 <HAL_GPIO_Init+0x2f4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_GPIO_Init+0x1fe>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a47      	ldr	r2, [pc, #284]	; (80032f4 <HAL_GPIO_Init+0x2f8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00d      	beq.n	80031f6 <HAL_GPIO_Init+0x1fa>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a46      	ldr	r2, [pc, #280]	; (80032f8 <HAL_GPIO_Init+0x2fc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <HAL_GPIO_Init+0x1f6>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a45      	ldr	r2, [pc, #276]	; (80032fc <HAL_GPIO_Init+0x300>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_GPIO_Init+0x1f2>
 80031ea:	2304      	movs	r3, #4
 80031ec:	e008      	b.n	8003200 <HAL_GPIO_Init+0x204>
 80031ee:	2307      	movs	r3, #7
 80031f0:	e006      	b.n	8003200 <HAL_GPIO_Init+0x204>
 80031f2:	2303      	movs	r3, #3
 80031f4:	e004      	b.n	8003200 <HAL_GPIO_Init+0x204>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e002      	b.n	8003200 <HAL_GPIO_Init+0x204>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_GPIO_Init+0x204>
 80031fe:	2300      	movs	r3, #0
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	f002 0203 	and.w	r2, r2, #3
 8003206:	0092      	lsls	r2, r2, #2
 8003208:	4093      	lsls	r3, r2
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003210:	4935      	ldr	r1, [pc, #212]	; (80032e8 <HAL_GPIO_Init+0x2ec>)
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	089b      	lsrs	r3, r3, #2
 8003216:	3302      	adds	r3, #2
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800321e:	4b38      	ldr	r3, [pc, #224]	; (8003300 <HAL_GPIO_Init+0x304>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003242:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <HAL_GPIO_Init+0x304>)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003248:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_GPIO_Init+0x304>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800326c:	4a24      	ldr	r2, [pc, #144]	; (8003300 <HAL_GPIO_Init+0x304>)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <HAL_GPIO_Init+0x304>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003296:	4a1a      	ldr	r2, [pc, #104]	; (8003300 <HAL_GPIO_Init+0x304>)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800329c:	4b18      	ldr	r3, [pc, #96]	; (8003300 <HAL_GPIO_Init+0x304>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032c0:	4a0f      	ldr	r2, [pc, #60]	; (8003300 <HAL_GPIO_Init+0x304>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3301      	adds	r3, #1
 80032ca:	61fb      	str	r3, [r7, #28]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	2b0f      	cmp	r3, #15
 80032d0:	f67f aea2 	bls.w	8003018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	3724      	adds	r7, #36	; 0x24
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40013800 	.word	0x40013800
 80032ec:	40020000 	.word	0x40020000
 80032f0:	40020400 	.word	0x40020400
 80032f4:	40020800 	.word	0x40020800
 80032f8:	40020c00 	.word	0x40020c00
 80032fc:	40021000 	.word	0x40021000
 8003300:	40013c00 	.word	0x40013c00

08003304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]
 8003310:	4613      	mov	r3, r2
 8003312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003314:	787b      	ldrb	r3, [r7, #1]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800331a:	887a      	ldrh	r2, [r7, #2]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003320:	e003      	b.n	800332a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	041a      	lsls	r2, r3, #16
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	619a      	str	r2, [r3, #24]
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800334e:	4a05      	ldr	r2, [pc, #20]	; (8003364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd f910 	bl	800057c <HAL_GPIO_EXTI_Callback>
  }
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40013c00 	.word	0x40013c00

08003368 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af02      	add	r7, sp, #8
 800336e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e101      	b.n	800357e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d106      	bne.n	800339a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f00a fd6f 	bl	800de78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2203      	movs	r2, #3
 800339e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033a8:	d102      	bne.n	80033b0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f003 fb78 	bl	8006aaa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	7c1a      	ldrb	r2, [r3, #16]
 80033c2:	f88d 2000 	strb.w	r2, [sp]
 80033c6:	3304      	adds	r3, #4
 80033c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ca:	f003 fa57 	bl	800687c <USB_CoreInit>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0ce      	b.n	800357e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f003 fb70 	bl	8006acc <USB_SetCurrentMode>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2202      	movs	r2, #2
 80033f6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0bf      	b.n	800357e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	e04a      	b.n	800349a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	3315      	adds	r3, #21
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	3314      	adds	r3, #20
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	b298      	uxth	r0, r3
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	332e      	adds	r3, #46	; 0x2e
 8003440:	4602      	mov	r2, r0
 8003442:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	3318      	adds	r3, #24
 8003454:	2200      	movs	r2, #0
 8003456:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	331c      	adds	r3, #28
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	3320      	adds	r3, #32
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	3324      	adds	r3, #36	; 0x24
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	3301      	adds	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	791b      	ldrb	r3, [r3, #4]
 800349e:	7bfa      	ldrb	r2, [r7, #15]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d3af      	bcc.n	8003404 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	73fb      	strb	r3, [r7, #15]
 80034a8:	e044      	b.n	8003534 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	f203 2355 	addw	r3, r3, #597	; 0x255
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034c0:	7bfa      	ldrb	r2, [r7, #15]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034d6:	7bfa      	ldrb	r2, [r7, #15]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003502:	7bfa      	ldrb	r2, [r7, #15]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	3301      	adds	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	791b      	ldrb	r3, [r3, #4]
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	429a      	cmp	r2, r3
 800353c:	d3b5      	bcc.n	80034aa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7c1a      	ldrb	r2, [r3, #16]
 8003546:	f88d 2000 	strb.w	r2, [sp]
 800354a:	3304      	adds	r3, #4
 800354c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800354e:	f003 fb09 	bl	8006b64 <USB_DevInit>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e00c      	b.n	800357e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f004 fb4d 	bl	8007c16 <USB_DevDisconnect>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_PCD_Start+0x1c>
 800359e:	2302      	movs	r3, #2
 80035a0:	e022      	b.n	80035e8 <HAL_PCD_Start+0x62>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d105      	bne.n	80035ca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f003 fa5a 	bl	8006a88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f004 fafb 	bl	8007bd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b08d      	sub	sp, #52	; 0x34
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f004 fbb9 	bl	8007d7e <USB_GetMode>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 848c 	bne.w	8003f2c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f004 fb1d 	bl	8007c58 <USB_ReadInterrupts>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8482 	beq.w	8003f2a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f004 fb0a 	bl	8007c58 <USB_ReadInterrupts>
 8003644:	4603      	mov	r3, r0
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d107      	bne.n	800365e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f002 0202 	and.w	r2, r2, #2
 800365c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f004 faf8 	bl	8007c58 <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b10      	cmp	r3, #16
 8003670:	d161      	bne.n	8003736 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699a      	ldr	r2, [r3, #24]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0210 	bic.w	r2, r2, #16
 8003680:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f003 020f 	and.w	r2, r3, #15
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	3304      	adds	r3, #4
 80036a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	0c5b      	lsrs	r3, r3, #17
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d124      	bne.n	80036f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d035      	beq.n	8003726 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	6a38      	ldr	r0, [r7, #32]
 80036ce:	f004 f92f 	bl	8007930 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036de:	441a      	add	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f0:	441a      	add	r2, r3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	615a      	str	r2, [r3, #20]
 80036f6:	e016      	b.n	8003726 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	0c5b      	lsrs	r3, r3, #17
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	2b06      	cmp	r3, #6
 8003702:	d110      	bne.n	8003726 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800370a:	2208      	movs	r2, #8
 800370c:	4619      	mov	r1, r3
 800370e:	6a38      	ldr	r0, [r7, #32]
 8003710:	f004 f90e 	bl	8007930 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003720:	441a      	add	r2, r3
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699a      	ldr	r2, [r3, #24]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0210 	orr.w	r2, r2, #16
 8003734:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f004 fa8c 	bl	8007c58 <USB_ReadInterrupts>
 8003740:	4603      	mov	r3, r0
 8003742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003746:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800374a:	f040 80a7 	bne.w	800389c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f004 fa91 	bl	8007c7e <USB_ReadDevAllOutEpInterrupt>
 800375c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800375e:	e099      	b.n	8003894 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 808e 	beq.w	8003888 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f004 fab5 	bl	8007ce6 <USB_ReadDevOutEPInterrupt>
 800377c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00c      	beq.n	80037a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003794:	461a      	mov	r2, r3
 8003796:	2301      	movs	r3, #1
 8003798:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800379a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fea1 	bl	80044e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00c      	beq.n	80037c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b8:	461a      	mov	r2, r3
 80037ba:	2308      	movs	r3, #8
 80037bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80037be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 ff77 	bl	80046b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037dc:	461a      	mov	r2, r3
 80037de:	2310      	movs	r3, #16
 80037e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d030      	beq.n	800384e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	2b80      	cmp	r3, #128	; 0x80
 80037f6:	d109      	bne.n	800380c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800380a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800380c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	3304      	adds	r3, #4
 8003820:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	78db      	ldrb	r3, [r3, #3]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d108      	bne.n	800383c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2200      	movs	r2, #0
 800382e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	b2db      	uxtb	r3, r3
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f00a fc1a 	bl	800e070 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003848:	461a      	mov	r2, r3
 800384a:	2302      	movs	r3, #2
 800384c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003864:	461a      	mov	r2, r3
 8003866:	2320      	movs	r3, #32
 8003868:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003880:	461a      	mov	r2, r3
 8003882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003886:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	3301      	adds	r3, #1
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	085b      	lsrs	r3, r3, #1
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	2b00      	cmp	r3, #0
 8003898:	f47f af62 	bne.w	8003760 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f004 f9d9 	bl	8007c58 <USB_ReadInterrupts>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038b0:	f040 80db 	bne.w	8003a6a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f004 f9fa 	bl	8007cb2 <USB_ReadDevAllInEpInterrupt>
 80038be:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80038c4:	e0cd      	b.n	8003a62 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80c2 	beq.w	8003a56 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f004 fa20 	bl	8007d22 <USB_ReadDevInEPInterrupt>
 80038e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d057      	beq.n	800399e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	2201      	movs	r2, #1
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	43db      	mvns	r3, r3
 8003908:	69f9      	ldr	r1, [r7, #28]
 800390a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800390e:	4013      	ands	r3, r2
 8003910:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391e:	461a      	mov	r2, r3
 8003920:	2301      	movs	r3, #1
 8003922:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	799b      	ldrb	r3, [r3, #6]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d132      	bne.n	8003992 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	3320      	adds	r3, #32
 800393c:	6819      	ldr	r1, [r3, #0]
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003942:	4613      	mov	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4403      	add	r3, r0
 800394c:	331c      	adds	r3, #28
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4419      	add	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4403      	add	r3, r0
 8003960:	3320      	adds	r3, #32
 8003962:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	2b00      	cmp	r3, #0
 8003968:	d113      	bne.n	8003992 <HAL_PCD_IRQHandler+0x3a2>
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3324      	adds	r3, #36	; 0x24
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d108      	bne.n	8003992 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800398a:	461a      	mov	r2, r3
 800398c:	2101      	movs	r1, #1
 800398e:	f004 fa27 	bl	8007de0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	b2db      	uxtb	r3, r3
 8003996:	4619      	mov	r1, r3
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f00a faee 	bl	800df7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b4:	461a      	mov	r2, r3
 80039b6:	2308      	movs	r3, #8
 80039b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d0:	461a      	mov	r2, r3
 80039d2:	2310      	movs	r3, #16
 80039d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ec:	461a      	mov	r2, r3
 80039ee:	2340      	movs	r3, #64	; 0x40
 80039f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d023      	beq.n	8003a44 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80039fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039fe:	6a38      	ldr	r0, [r7, #32]
 8003a00:	f003 fa14 	bl	8006e2c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a06:	4613      	mov	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	3310      	adds	r3, #16
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	3304      	adds	r3, #4
 8003a16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	78db      	ldrb	r3, [r3, #3]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d108      	bne.n	8003a32 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2200      	movs	r2, #0
 8003a24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f00a fb31 	bl	800e094 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3e:	461a      	mov	r2, r3
 8003a40:	2302      	movs	r3, #2
 8003a42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fcbb 	bl	80043cc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	3301      	adds	r3, #1
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f47f af2e 	bne.w	80038c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f004 f8f2 	bl	8007c58 <USB_ReadInterrupts>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a7e:	d122      	bne.n	8003ac6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d108      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fea1 	bl	80047f0 <HAL_PCDEx_LPM_Callback>
 8003aae:	e002      	b.n	8003ab6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f00a facf 	bl	800e054 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695a      	ldr	r2, [r3, #20]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f004 f8c4 	bl	8007c58 <USB_ReadInterrupts>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ada:	d112      	bne.n	8003b02 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d102      	bne.n	8003af2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f00a fa8b 	bl	800e008 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b00:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f004 f8a6 	bl	8007c58 <USB_ReadInterrupts>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b16:	f040 80b7 	bne.w	8003c88 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2110      	movs	r1, #16
 8003b34:	4618      	mov	r0, r3
 8003b36:	f003 f979 	bl	8006e2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b3e:	e046      	b.n	8003bce <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b52:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	461a      	mov	r2, r3
 8003b82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b86:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b98:	0151      	lsls	r1, r2, #5
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	440a      	add	r2, r1
 8003b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ba2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ba6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb8:	0151      	lsls	r1, r2, #5
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	440a      	add	r2, r1
 8003bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bc6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bca:	3301      	adds	r3, #1
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	791b      	ldrb	r3, [r3, #4]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d3b2      	bcc.n	8003b40 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003be8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003bec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7bdb      	ldrb	r3, [r3, #15]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d016      	beq.n	8003c24 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c06:	f043 030b 	orr.w	r3, r3, #11
 8003c0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c1c:	f043 030b 	orr.w	r3, r3, #11
 8003c20:	6453      	str	r3, [r2, #68]	; 0x44
 8003c22:	e015      	b.n	8003c50 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c36:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c4a:	f043 030b 	orr.w	r3, r3, #11
 8003c4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c72:	461a      	mov	r2, r3
 8003c74:	f004 f8b4 	bl	8007de0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f003 ffe3 	bl	8007c58 <USB_ReadInterrupts>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9c:	d123      	bne.n	8003ce6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f004 f879 	bl	8007d9a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f003 f936 	bl	8006f1e <USB_GetDevSpeed>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681c      	ldr	r4, [r3, #0]
 8003cbe:	f001 f9c7 	bl	8005050 <HAL_RCC_GetHCLKFreq>
 8003cc2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f002 fe3a 	bl	8006944 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f00a f97a 	bl	800dfca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f003 ffb4 	bl	8007c58 <USB_ReadInterrupts>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d10a      	bne.n	8003d10 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f00a f957 	bl	800dfae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f002 0208 	and.w	r2, r2, #8
 8003d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f003 ff9f 	bl	8007c58 <USB_ReadInterrupts>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d20:	2b80      	cmp	r3, #128	; 0x80
 8003d22:	d123      	bne.n	8003d6c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d30:	2301      	movs	r3, #1
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
 8003d34:	e014      	b.n	8003d60 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d105      	bne.n	8003d5a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	4619      	mov	r1, r3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fb08 	bl	800436a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	791b      	ldrb	r3, [r3, #4]
 8003d64:	461a      	mov	r2, r3
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d3e4      	bcc.n	8003d36 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f003 ff71 	bl	8007c58 <USB_ReadInterrupts>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d80:	d13c      	bne.n	8003dfc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d82:	2301      	movs	r3, #1
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
 8003d86:	e02b      	b.n	8003de0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	3318      	adds	r3, #24
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d115      	bne.n	8003dda <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003dae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	da12      	bge.n	8003dda <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	3317      	adds	r3, #23
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fac8 	bl	800436a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	3301      	adds	r3, #1
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	791b      	ldrb	r3, [r3, #4]
 8003de4:	461a      	mov	r2, r3
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d3cd      	bcc.n	8003d88 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695a      	ldr	r2, [r3, #20]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f003 ff29 	bl	8007c58 <USB_ReadInterrupts>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e10:	d156      	bne.n	8003ec0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e12:	2301      	movs	r3, #1
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	e045      	b.n	8003ea4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d12e      	bne.n	8003e9e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	da2b      	bge.n	8003e9e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003e52:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d121      	bne.n	8003e9e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5e:	4613      	mov	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e9a:	6053      	str	r3, [r2, #4]
            break;
 8003e9c:	e008      	b.n	8003eb0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	791b      	ldrb	r3, [r3, #4]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d3b3      	bcc.n	8003e18 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f003 fec7 	bl	8007c58 <USB_ReadInterrupts>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed4:	d10a      	bne.n	8003eec <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f00a f8ee 	bl	800e0b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003eea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f003 feb1 	bl	8007c58 <USB_ReadInterrupts>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d115      	bne.n	8003f2c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f00a f8de 	bl	800e0d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	e000      	b.n	8003f2c <HAL_PCD_IRQHandler+0x93c>
      return;
 8003f2a:	bf00      	nop
    }
  }
}
 8003f2c:	3734      	adds	r7, #52	; 0x34
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd90      	pop	{r4, r7, pc}

08003f32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_PCD_SetAddress+0x1a>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e012      	b.n	8003f72 <HAL_PCD_SetAddress+0x40>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	4611      	mov	r1, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f003 fe10 	bl	8007b88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	4608      	mov	r0, r1
 8003f84:	4611      	mov	r1, r2
 8003f86:	461a      	mov	r2, r3
 8003f88:	4603      	mov	r3, r0
 8003f8a:	70fb      	strb	r3, [r7, #3]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	803b      	strh	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	da0f      	bge.n	8003fc0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 020f 	and.w	r2, r3, #15
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	3310      	adds	r3, #16
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	705a      	strb	r2, [r3, #1]
 8003fbe:	e00f      	b.n	8003fe0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	f003 020f 	and.w	r2, r3, #15
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fec:	883a      	ldrh	r2, [r7, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	78ba      	ldrb	r2, [r7, #2]
 8003ff6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	785b      	ldrb	r3, [r3, #1]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800400a:	78bb      	ldrb	r3, [r7, #2]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d102      	bne.n	8004016 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_PCD_EP_Open+0xaa>
 8004020:	2302      	movs	r3, #2
 8004022:	e00e      	b.n	8004042 <HAL_PCD_EP_Open+0xc8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68f9      	ldr	r1, [r7, #12]
 8004032:	4618      	mov	r0, r3
 8004034:	f002 ff98 	bl	8006f68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004040:	7afb      	ldrb	r3, [r7, #11]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	460b      	mov	r3, r1
 8004054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800405a:	2b00      	cmp	r3, #0
 800405c:	da0f      	bge.n	800407e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	f003 020f 	and.w	r2, r3, #15
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	3310      	adds	r3, #16
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	3304      	adds	r3, #4
 8004074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	705a      	strb	r2, [r3, #1]
 800407c:	e00f      	b.n	800409e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	f003 020f 	and.w	r2, r3, #15
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4413      	add	r3, r2
 8004094:	3304      	adds	r3, #4
 8004096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_PCD_EP_Close+0x6e>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e00e      	b.n	80040d6 <HAL_PCD_EP_Close+0x8c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68f9      	ldr	r1, [r7, #12]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f002 ffd6 	bl	8007078 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	460b      	mov	r3, r1
 80040ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ee:	7afb      	ldrb	r3, [r7, #11]
 80040f0:	f003 020f 	and.w	r2, r3, #15
 80040f4:	4613      	mov	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	3304      	adds	r3, #4
 8004106:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2200      	movs	r2, #0
 8004118:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2200      	movs	r2, #0
 800411e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004120:	7afb      	ldrb	r3, [r7, #11]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	b2da      	uxtb	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	799b      	ldrb	r3, [r3, #6]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d102      	bne.n	800413a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	799b      	ldrb	r3, [r3, #6]
 8004142:	461a      	mov	r2, r3
 8004144:	6979      	ldr	r1, [r7, #20]
 8004146:	f003 f873 	bl	8007230 <USB_EPStartXfer>

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8004176:	681b      	ldr	r3, [r3, #0]
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	460b      	mov	r3, r1
 8004192:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004194:	7afb      	ldrb	r3, [r7, #11]
 8004196:	f003 020f 	and.w	r2, r3, #15
 800419a:	4613      	mov	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	3310      	adds	r3, #16
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	3304      	adds	r3, #4
 80041aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2200      	movs	r2, #0
 80041bc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2201      	movs	r2, #1
 80041c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041c4:	7afb      	ldrb	r3, [r7, #11]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	799b      	ldrb	r3, [r3, #6]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d102      	bne.n	80041de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	799b      	ldrb	r3, [r3, #6]
 80041e6:	461a      	mov	r2, r3
 80041e8:	6979      	ldr	r1, [r7, #20]
 80041ea:	f003 f821 	bl	8007230 <USB_EPStartXfer>

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	7912      	ldrb	r2, [r2, #4]
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e04f      	b.n	80042b6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800421a:	2b00      	cmp	r3, #0
 800421c:	da0f      	bge.n	800423e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	f003 020f 	and.w	r2, r3, #15
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	3310      	adds	r3, #16
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	3304      	adds	r3, #4
 8004234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	705a      	strb	r2, [r3, #1]
 800423c:	e00d      	b.n	800425a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800423e:	78fa      	ldrb	r2, [r7, #3]
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	4413      	add	r3, r2
 8004250:	3304      	adds	r3, #4
 8004252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	b2da      	uxtb	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_PCD_EP_SetStall+0x82>
 8004276:	2302      	movs	r3, #2
 8004278:	e01d      	b.n	80042b6 <HAL_PCD_EP_SetStall+0xbe>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68f9      	ldr	r1, [r7, #12]
 8004288:	4618      	mov	r0, r3
 800428a:	f003 fba9 	bl	80079e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	2b00      	cmp	r3, #0
 8004296:	d109      	bne.n	80042ac <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	7999      	ldrb	r1, [r3, #6]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80042a6:	461a      	mov	r2, r3
 80042a8:	f003 fd9a 	bl	8007de0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	460b      	mov	r3, r1
 80042c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	7912      	ldrb	r2, [r2, #4]
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d901      	bls.n	80042dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e042      	b.n	8004362 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	da0f      	bge.n	8004304 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	f003 020f 	and.w	r2, r3, #15
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	3310      	adds	r3, #16
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	4413      	add	r3, r2
 80042f8:	3304      	adds	r3, #4
 80042fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	705a      	strb	r2, [r3, #1]
 8004302:	e00f      	b.n	8004324 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	f003 020f 	and.w	r2, r3, #15
 800430a:	4613      	mov	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	4413      	add	r3, r2
 800431a:	3304      	adds	r3, #4
 800431c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	b2da      	uxtb	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_PCD_EP_ClrStall+0x86>
 8004340:	2302      	movs	r3, #2
 8004342:	e00e      	b.n	8004362 <HAL_PCD_EP_ClrStall+0xa4>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68f9      	ldr	r1, [r7, #12]
 8004352:	4618      	mov	r0, r3
 8004354:	f003 fbb2 	bl	8007abc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	460b      	mov	r3, r1
 8004374:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800437a:	2b00      	cmp	r3, #0
 800437c:	da0c      	bge.n	8004398 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	f003 020f 	and.w	r2, r3, #15
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	3310      	adds	r3, #16
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4413      	add	r3, r2
 8004392:	3304      	adds	r3, #4
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	e00c      	b.n	80043b2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	f003 020f 	and.w	r2, r3, #15
 800439e:	4613      	mov	r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	3304      	adds	r3, #4
 80043b0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68f9      	ldr	r1, [r7, #12]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f003 f9d1 	bl	8007760 <USB_EPStopXfer>
 80043be:	4603      	mov	r3, r0
 80043c0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80043c2:	7afb      	ldrb	r3, [r7, #11]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	4613      	mov	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	3310      	adds	r3, #16
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	4413      	add	r3, r2
 80043f0:	3304      	adds	r3, #4
 80043f2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d901      	bls.n	8004404 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e06b      	b.n	80044dc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	429a      	cmp	r2, r3
 8004418:	d902      	bls.n	8004420 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	3303      	adds	r3, #3
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004428:	e02a      	b.n	8004480 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	429a      	cmp	r2, r3
 800443e:	d902      	bls.n	8004446 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	3303      	adds	r3, #3
 800444a:	089b      	lsrs	r3, r3, #2
 800444c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	68d9      	ldr	r1, [r3, #12]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	4603      	mov	r3, r0
 8004462:	6978      	ldr	r0, [r7, #20]
 8004464:	f003 fa26 	bl	80078b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	441a      	add	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	441a      	add	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	429a      	cmp	r2, r3
 8004494:	d809      	bhi.n	80044aa <PCD_WriteEmptyTxFifo+0xde>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800449e:	429a      	cmp	r2, r3
 80044a0:	d203      	bcs.n	80044aa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1bf      	bne.n	800442a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d811      	bhi.n	80044da <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	2201      	movs	r2, #1
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	43db      	mvns	r3, r3
 80044d0:	6939      	ldr	r1, [r7, #16]
 80044d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044d6:	4013      	ands	r3, r2
 80044d8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3720      	adds	r7, #32
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	333c      	adds	r3, #60	; 0x3c
 80044fc:	3304      	adds	r3, #4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	799b      	ldrb	r3, [r3, #6]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d17b      	bne.n	8004612 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d015      	beq.n	8004550 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	4a61      	ldr	r2, [pc, #388]	; (80046ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	f240 80b9 	bls.w	80046a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80b3 	beq.w	80046a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004546:	461a      	mov	r2, r3
 8004548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800454c:	6093      	str	r3, [r2, #8]
 800454e:	e0a7      	b.n	80046a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d009      	beq.n	800456e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004566:	461a      	mov	r2, r3
 8004568:	2320      	movs	r3, #32
 800456a:	6093      	str	r3, [r2, #8]
 800456c:	e098      	b.n	80046a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004574:	2b00      	cmp	r3, #0
 8004576:	f040 8093 	bne.w	80046a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	4a4b      	ldr	r2, [pc, #300]	; (80046ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d90f      	bls.n	80045a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004598:	461a      	mov	r2, r3
 800459a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800459e:	6093      	str	r3, [r2, #8]
 80045a0:	e07e      	b.n	80046a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	4613      	mov	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	3304      	adds	r3, #4
 80045b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a1a      	ldr	r2, [r3, #32]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	0159      	lsls	r1, r3, #5
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	440b      	add	r3, r1
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ce:	1ad2      	subs	r2, r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d114      	bne.n	8004604 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80045ec:	461a      	mov	r2, r3
 80045ee:	2101      	movs	r1, #1
 80045f0:	f003 fbf6 	bl	8007de0 <USB_EP0_OutStart>
 80045f4:	e006      	b.n	8004604 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	441a      	add	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	4619      	mov	r1, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f009 fc9a 	bl	800df44 <HAL_PCD_DataOutStageCallback>
 8004610:	e046      	b.n	80046a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	4a26      	ldr	r2, [pc, #152]	; (80046b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d124      	bne.n	8004664 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004630:	461a      	mov	r2, r3
 8004632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004636:	6093      	str	r3, [r2, #8]
 8004638:	e032      	b.n	80046a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	461a      	mov	r2, r3
 8004652:	2320      	movs	r3, #32
 8004654:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	4619      	mov	r1, r3
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f009 fc71 	bl	800df44 <HAL_PCD_DataOutStageCallback>
 8004662:	e01d      	b.n	80046a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d114      	bne.n	8004694 <PCD_EP_OutXfrComplete_int+0x1b0>
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	4613      	mov	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	4413      	add	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d108      	bne.n	8004694 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800468c:	461a      	mov	r2, r3
 800468e:	2100      	movs	r1, #0
 8004690:	f003 fba6 	bl	8007de0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	4619      	mov	r1, r3
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f009 fc52 	bl	800df44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3720      	adds	r7, #32
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	4f54300a 	.word	0x4f54300a
 80046b0:	4f54310a 	.word	0x4f54310a

080046b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	333c      	adds	r3, #60	; 0x3c
 80046cc:	3304      	adds	r3, #4
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4a15      	ldr	r2, [pc, #84]	; (800473c <PCD_EP_OutSetupPacket_int+0x88>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d90e      	bls.n	8004708 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d009      	beq.n	8004708 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004700:	461a      	mov	r2, r3
 8004702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004706:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f009 fc09 	bl	800df20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4a0a      	ldr	r2, [pc, #40]	; (800473c <PCD_EP_OutSetupPacket_int+0x88>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d90c      	bls.n	8004730 <PCD_EP_OutSetupPacket_int+0x7c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	799b      	ldrb	r3, [r3, #6]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d108      	bne.n	8004730 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004728:	461a      	mov	r2, r3
 800472a:	2101      	movs	r1, #1
 800472c:	f003 fb58 	bl	8007de0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	4f54300a 	.word	0x4f54300a

08004740 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	70fb      	strb	r3, [r7, #3]
 800474c:	4613      	mov	r3, r2
 800474e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d107      	bne.n	800476e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800475e:	883b      	ldrh	r3, [r7, #0]
 8004760:	0419      	lsls	r1, r3, #16
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	430a      	orrs	r2, r1
 800476a:	629a      	str	r2, [r3, #40]	; 0x28
 800476c:	e028      	b.n	80047c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	4413      	add	r3, r2
 800477a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800477c:	2300      	movs	r3, #0
 800477e:	73fb      	strb	r3, [r7, #15]
 8004780:	e00d      	b.n	800479e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	3340      	adds	r3, #64	; 0x40
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	4413      	add	r3, r2
 8004796:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	3301      	adds	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
 800479e:	7bfa      	ldrb	r2, [r7, #15]
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d3ec      	bcc.n	8004782 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047a8:	883b      	ldrh	r3, [r7, #0]
 80047aa:	0418      	lsls	r0, r3, #16
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6819      	ldr	r1, [r3, #0]
 80047b0:	78fb      	ldrb	r3, [r7, #3]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	4302      	orrs	r2, r0
 80047b8:	3340      	adds	r3, #64	; 0x40
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	460b      	mov	r3, r1
 80047d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	887a      	ldrh	r2, [r7, #2]
 80047e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e267      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d075      	beq.n	8004912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004826:	4b88      	ldr	r3, [pc, #544]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b04      	cmp	r3, #4
 8004830:	d00c      	beq.n	800484c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004832:	4b85      	ldr	r3, [pc, #532]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800483a:	2b08      	cmp	r3, #8
 800483c:	d112      	bne.n	8004864 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800483e:	4b82      	ldr	r3, [pc, #520]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800484a:	d10b      	bne.n	8004864 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484c:	4b7e      	ldr	r3, [pc, #504]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d05b      	beq.n	8004910 <HAL_RCC_OscConfig+0x108>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d157      	bne.n	8004910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e242      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486c:	d106      	bne.n	800487c <HAL_RCC_OscConfig+0x74>
 800486e:	4b76      	ldr	r3, [pc, #472]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a75      	ldr	r2, [pc, #468]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	e01d      	b.n	80048b8 <HAL_RCC_OscConfig+0xb0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004884:	d10c      	bne.n	80048a0 <HAL_RCC_OscConfig+0x98>
 8004886:	4b70      	ldr	r3, [pc, #448]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a6f      	ldr	r2, [pc, #444]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800488c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	4b6d      	ldr	r3, [pc, #436]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a6c      	ldr	r2, [pc, #432]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	e00b      	b.n	80048b8 <HAL_RCC_OscConfig+0xb0>
 80048a0:	4b69      	ldr	r3, [pc, #420]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a68      	ldr	r2, [pc, #416]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	4b66      	ldr	r3, [pc, #408]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a65      	ldr	r2, [pc, #404]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d013      	beq.n	80048e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7fd feea 	bl	8002698 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c8:	f7fd fee6 	bl	8002698 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	; 0x64
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e207      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048da:	4b5b      	ldr	r3, [pc, #364]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0xc0>
 80048e6:	e014      	b.n	8004912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fd fed6 	bl	8002698 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f0:	f7fd fed2 	bl	8002698 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	; 0x64
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e1f3      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004902:	4b51      	ldr	r3, [pc, #324]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0xe8>
 800490e:	e000      	b.n	8004912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d063      	beq.n	80049e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800491e:	4b4a      	ldr	r3, [pc, #296]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800492a:	4b47      	ldr	r3, [pc, #284]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004932:	2b08      	cmp	r3, #8
 8004934:	d11c      	bne.n	8004970 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004936:	4b44      	ldr	r3, [pc, #272]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d116      	bne.n	8004970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004942:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_RCC_OscConfig+0x152>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d001      	beq.n	800495a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e1c7      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495a:	4b3b      	ldr	r3, [pc, #236]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4937      	ldr	r1, [pc, #220]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800496a:	4313      	orrs	r3, r2
 800496c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800496e:	e03a      	b.n	80049e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d020      	beq.n	80049ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004978:	4b34      	ldr	r3, [pc, #208]	; (8004a4c <HAL_RCC_OscConfig+0x244>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497e:	f7fd fe8b 	bl	8002698 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004986:	f7fd fe87 	bl	8002698 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e1a8      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004998:	4b2b      	ldr	r3, [pc, #172]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a4:	4b28      	ldr	r3, [pc, #160]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	4925      	ldr	r1, [pc, #148]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	600b      	str	r3, [r1, #0]
 80049b8:	e015      	b.n	80049e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ba:	4b24      	ldr	r3, [pc, #144]	; (8004a4c <HAL_RCC_OscConfig+0x244>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fd fe6a 	bl	8002698 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049c8:	f7fd fe66 	bl	8002698 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e187      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d036      	beq.n	8004a60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d016      	beq.n	8004a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049fa:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <HAL_RCC_OscConfig+0x248>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7fd fe4a 	bl	8002698 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a08:	f7fd fe46 	bl	8002698 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e167      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0x200>
 8004a26:	e01b      	b.n	8004a60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <HAL_RCC_OscConfig+0x248>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2e:	f7fd fe33 	bl	8002698 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a34:	e00e      	b.n	8004a54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a36:	f7fd fe2f 	bl	8002698 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d907      	bls.n	8004a54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e150      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	42470000 	.word	0x42470000
 8004a50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a54:	4b88      	ldr	r3, [pc, #544]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1ea      	bne.n	8004a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8097 	beq.w	8004b9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a72:	4b81      	ldr	r3, [pc, #516]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10f      	bne.n	8004a9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	4b7d      	ldr	r3, [pc, #500]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	4a7c      	ldr	r2, [pc, #496]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a8e:	4b7a      	ldr	r3, [pc, #488]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a96:	60bb      	str	r3, [r7, #8]
 8004a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9e:	4b77      	ldr	r3, [pc, #476]	; (8004c7c <HAL_RCC_OscConfig+0x474>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d118      	bne.n	8004adc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aaa:	4b74      	ldr	r3, [pc, #464]	; (8004c7c <HAL_RCC_OscConfig+0x474>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a73      	ldr	r2, [pc, #460]	; (8004c7c <HAL_RCC_OscConfig+0x474>)
 8004ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ab6:	f7fd fdef 	bl	8002698 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004abe:	f7fd fdeb 	bl	8002698 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e10c      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad0:	4b6a      	ldr	r3, [pc, #424]	; (8004c7c <HAL_RCC_OscConfig+0x474>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCC_OscConfig+0x2ea>
 8004ae4:	4b64      	ldr	r3, [pc, #400]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae8:	4a63      	ldr	r2, [pc, #396]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	6713      	str	r3, [r2, #112]	; 0x70
 8004af0:	e01c      	b.n	8004b2c <HAL_RCC_OscConfig+0x324>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x30c>
 8004afa:	4b5f      	ldr	r3, [pc, #380]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	4a5e      	ldr	r2, [pc, #376]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b00:	f043 0304 	orr.w	r3, r3, #4
 8004b04:	6713      	str	r3, [r2, #112]	; 0x70
 8004b06:	4b5c      	ldr	r3, [pc, #368]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	4a5b      	ldr	r2, [pc, #364]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	6713      	str	r3, [r2, #112]	; 0x70
 8004b12:	e00b      	b.n	8004b2c <HAL_RCC_OscConfig+0x324>
 8004b14:	4b58      	ldr	r3, [pc, #352]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	4a57      	ldr	r2, [pc, #348]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b20:	4b55      	ldr	r3, [pc, #340]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	4a54      	ldr	r2, [pc, #336]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b26:	f023 0304 	bic.w	r3, r3, #4
 8004b2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d015      	beq.n	8004b60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b34:	f7fd fdb0 	bl	8002698 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3a:	e00a      	b.n	8004b52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b3c:	f7fd fdac 	bl	8002698 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e0cb      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b52:	4b49      	ldr	r3, [pc, #292]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0ee      	beq.n	8004b3c <HAL_RCC_OscConfig+0x334>
 8004b5e:	e014      	b.n	8004b8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b60:	f7fd fd9a 	bl	8002698 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b66:	e00a      	b.n	8004b7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b68:	f7fd fd96 	bl	8002698 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e0b5      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7e:	4b3e      	ldr	r3, [pc, #248]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1ee      	bne.n	8004b68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d105      	bne.n	8004b9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b90:	4b39      	ldr	r3, [pc, #228]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	4a38      	ldr	r2, [pc, #224]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80a1 	beq.w	8004ce8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ba6:	4b34      	ldr	r3, [pc, #208]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d05c      	beq.n	8004c6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d141      	bne.n	8004c3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bba:	4b31      	ldr	r3, [pc, #196]	; (8004c80 <HAL_RCC_OscConfig+0x478>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc0:	f7fd fd6a 	bl	8002698 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fd fd66 	bl	8002698 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e087      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bda:	4b27      	ldr	r3, [pc, #156]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69da      	ldr	r2, [r3, #28]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	019b      	lsls	r3, r3, #6
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	085b      	lsrs	r3, r3, #1
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	041b      	lsls	r3, r3, #16
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	061b      	lsls	r3, r3, #24
 8004c0a:	491b      	ldr	r1, [pc, #108]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c10:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <HAL_RCC_OscConfig+0x478>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c16:	f7fd fd3f 	bl	8002698 <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c1e:	f7fd fd3b 	bl	8002698 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e05c      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c30:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <HAL_RCC_OscConfig+0x416>
 8004c3c:	e054      	b.n	8004ce8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <HAL_RCC_OscConfig+0x478>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fd fd28 	bl	8002698 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fd fd24 	bl	8002698 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e045      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <HAL_RCC_OscConfig+0x470>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x444>
 8004c6a:	e03d      	b.n	8004ce8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e038      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40007000 	.word	0x40007000
 8004c80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c84:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <HAL_RCC_OscConfig+0x4ec>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d028      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d121      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d11a      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d111      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40023800 	.word	0x40023800

08004cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0cc      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d0c:	4b68      	ldr	r3, [pc, #416]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d90c      	bls.n	8004d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1a:	4b65      	ldr	r3, [pc, #404]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d22:	4b63      	ldr	r3, [pc, #396]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d001      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0b8      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d020      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d4c:	4b59      	ldr	r3, [pc, #356]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4a58      	ldr	r2, [pc, #352]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d64:	4b53      	ldr	r3, [pc, #332]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4a52      	ldr	r2, [pc, #328]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d70:	4b50      	ldr	r3, [pc, #320]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	494d      	ldr	r1, [pc, #308]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d044      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d107      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d96:	4b47      	ldr	r3, [pc, #284]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d119      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e07f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d003      	beq.n	8004db6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db6:	4b3f      	ldr	r3, [pc, #252]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e06f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e067      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dd6:	4b37      	ldr	r3, [pc, #220]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f023 0203 	bic.w	r2, r3, #3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	4934      	ldr	r1, [pc, #208]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004de8:	f7fd fc56 	bl	8002698 <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dee:	e00a      	b.n	8004e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df0:	f7fd fc52 	bl	8002698 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e04f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e06:	4b2b      	ldr	r3, [pc, #172]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 020c 	and.w	r2, r3, #12
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d1eb      	bne.n	8004df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e18:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d20c      	bcs.n	8004e40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e26:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2e:	4b20      	ldr	r3, [pc, #128]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e032      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e4c:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4916      	ldr	r1, [pc, #88]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d009      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	490e      	ldr	r1, [pc, #56]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e7e:	f000 f821 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 8004e82:	4602      	mov	r2, r0
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	490a      	ldr	r1, [pc, #40]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e90:	5ccb      	ldrb	r3, [r1, r3]
 8004e92:	fa22 f303 	lsr.w	r3, r2, r3
 8004e96:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <HAL_RCC_ClockConfig+0x1c4>)
 8004e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e9a:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fd fbb6 	bl	8002610 <HAL_InitTick>

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40023c00 	.word	0x40023c00
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	0800fa24 	.word	0x0800fa24
 8004ebc:	20000000 	.word	0x20000000
 8004ec0:	20000004 	.word	0x20000004

08004ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec8:	b090      	sub	sp, #64	; 0x40
 8004eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004edc:	4b59      	ldr	r3, [pc, #356]	; (8005044 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 030c 	and.w	r3, r3, #12
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d00d      	beq.n	8004f04 <HAL_RCC_GetSysClockFreq+0x40>
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	f200 80a1 	bhi.w	8005030 <HAL_RCC_GetSysClockFreq+0x16c>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d003      	beq.n	8004efe <HAL_RCC_GetSysClockFreq+0x3a>
 8004ef6:	e09b      	b.n	8005030 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ef8:	4b53      	ldr	r3, [pc, #332]	; (8005048 <HAL_RCC_GetSysClockFreq+0x184>)
 8004efa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004efc:	e09b      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004efe:	4b53      	ldr	r3, [pc, #332]	; (800504c <HAL_RCC_GetSysClockFreq+0x188>)
 8004f00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f02:	e098      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f04:	4b4f      	ldr	r3, [pc, #316]	; (8005044 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f0e:	4b4d      	ldr	r3, [pc, #308]	; (8005044 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d028      	beq.n	8004f6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f1a:	4b4a      	ldr	r3, [pc, #296]	; (8005044 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	099b      	lsrs	r3, r3, #6
 8004f20:	2200      	movs	r2, #0
 8004f22:	623b      	str	r3, [r7, #32]
 8004f24:	627a      	str	r2, [r7, #36]	; 0x24
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4b47      	ldr	r3, [pc, #284]	; (800504c <HAL_RCC_GetSysClockFreq+0x188>)
 8004f30:	fb03 f201 	mul.w	r2, r3, r1
 8004f34:	2300      	movs	r3, #0
 8004f36:	fb00 f303 	mul.w	r3, r0, r3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	4a43      	ldr	r2, [pc, #268]	; (800504c <HAL_RCC_GetSysClockFreq+0x188>)
 8004f3e:	fba0 1202 	umull	r1, r2, r0, r2
 8004f42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f44:	460a      	mov	r2, r1
 8004f46:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f4a:	4413      	add	r3, r2
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f50:	2200      	movs	r2, #0
 8004f52:	61bb      	str	r3, [r7, #24]
 8004f54:	61fa      	str	r2, [r7, #28]
 8004f56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f5e:	f7fb f98f 	bl	8000280 <__aeabi_uldivmod>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4613      	mov	r3, r2
 8004f68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f6a:	e053      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f6c:	4b35      	ldr	r3, [pc, #212]	; (8005044 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	099b      	lsrs	r3, r3, #6
 8004f72:	2200      	movs	r2, #0
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	617a      	str	r2, [r7, #20]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f7e:	f04f 0b00 	mov.w	fp, #0
 8004f82:	4652      	mov	r2, sl
 8004f84:	465b      	mov	r3, fp
 8004f86:	f04f 0000 	mov.w	r0, #0
 8004f8a:	f04f 0100 	mov.w	r1, #0
 8004f8e:	0159      	lsls	r1, r3, #5
 8004f90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f94:	0150      	lsls	r0, r2, #5
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	ebb2 080a 	subs.w	r8, r2, sl
 8004f9e:	eb63 090b 	sbc.w	r9, r3, fp
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fb6:	ebb2 0408 	subs.w	r4, r2, r8
 8004fba:	eb63 0509 	sbc.w	r5, r3, r9
 8004fbe:	f04f 0200 	mov.w	r2, #0
 8004fc2:	f04f 0300 	mov.w	r3, #0
 8004fc6:	00eb      	lsls	r3, r5, #3
 8004fc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fcc:	00e2      	lsls	r2, r4, #3
 8004fce:	4614      	mov	r4, r2
 8004fd0:	461d      	mov	r5, r3
 8004fd2:	eb14 030a 	adds.w	r3, r4, sl
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	eb45 030b 	adc.w	r3, r5, fp
 8004fdc:	607b      	str	r3, [r7, #4]
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fea:	4629      	mov	r1, r5
 8004fec:	028b      	lsls	r3, r1, #10
 8004fee:	4621      	mov	r1, r4
 8004ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	028a      	lsls	r2, r1, #10
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffe:	2200      	movs	r2, #0
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	60fa      	str	r2, [r7, #12]
 8005004:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005008:	f7fb f93a 	bl	8000280 <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4613      	mov	r3, r2
 8005012:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005014:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <HAL_RCC_GetSysClockFreq+0x180>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	3301      	adds	r3, #1
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005024:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800502e:	e002      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005030:	4b05      	ldr	r3, [pc, #20]	; (8005048 <HAL_RCC_GetSysClockFreq+0x184>)
 8005032:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005038:	4618      	mov	r0, r3
 800503a:	3740      	adds	r7, #64	; 0x40
 800503c:	46bd      	mov	sp, r7
 800503e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005042:	bf00      	nop
 8005044:	40023800 	.word	0x40023800
 8005048:	00f42400 	.word	0x00f42400
 800504c:	017d7840 	.word	0x017d7840

08005050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005054:	4b03      	ldr	r3, [pc, #12]	; (8005064 <HAL_RCC_GetHCLKFreq+0x14>)
 8005056:	681b      	ldr	r3, [r3, #0]
}
 8005058:	4618      	mov	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000000 	.word	0x20000000

08005068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800506c:	f7ff fff0 	bl	8005050 <HAL_RCC_GetHCLKFreq>
 8005070:	4602      	mov	r2, r0
 8005072:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	0a9b      	lsrs	r3, r3, #10
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	4903      	ldr	r1, [pc, #12]	; (800508c <HAL_RCC_GetPCLK1Freq+0x24>)
 800507e:	5ccb      	ldrb	r3, [r1, r3]
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40023800 	.word	0x40023800
 800508c:	0800fa34 	.word	0x0800fa34

08005090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005094:	f7ff ffdc 	bl	8005050 <HAL_RCC_GetHCLKFreq>
 8005098:	4602      	mov	r2, r0
 800509a:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	0b5b      	lsrs	r3, r3, #13
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	4903      	ldr	r1, [pc, #12]	; (80050b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050a6:	5ccb      	ldrb	r3, [r1, r3]
 80050a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40023800 	.word	0x40023800
 80050b4:	0800fa34 	.word	0x0800fa34

080050b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e07b      	b.n	80051c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d108      	bne.n	80050e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050da:	d009      	beq.n	80050f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	61da      	str	r2, [r3, #28]
 80050e2:	e005      	b.n	80050f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fc ffa4 	bl	8002058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005126:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005174:	ea42 0103 	orr.w	r1, r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	f003 0104 	and.w	r1, r3, #4
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	f003 0210 	and.w	r2, r3, #16
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69da      	ldr	r2, [r3, #28]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b088      	sub	sp, #32
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	603b      	str	r3, [r7, #0]
 80051d6:	4613      	mov	r3, r2
 80051d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_SPI_Transmit+0x22>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e12d      	b.n	8005448 <HAL_SPI_Transmit+0x27e>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051f4:	f7fd fa50 	bl	8002698 <HAL_GetTick>
 80051f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b01      	cmp	r3, #1
 8005208:	d002      	beq.n	8005210 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800520a:	2302      	movs	r3, #2
 800520c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800520e:	e116      	b.n	800543e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_SPI_Transmit+0x52>
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005220:	e10d      	b.n	800543e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2203      	movs	r2, #3
 8005226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	88fa      	ldrh	r2, [r7, #6]
 800523a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	88fa      	ldrh	r2, [r7, #6]
 8005240:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005268:	d10f      	bne.n	800528a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005278:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005288:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b40      	cmp	r3, #64	; 0x40
 8005296:	d007      	beq.n	80052a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b0:	d14f      	bne.n	8005352 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_SPI_Transmit+0xf6>
 80052ba:	8afb      	ldrh	r3, [r7, #22]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d142      	bne.n	8005346 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	881a      	ldrh	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	1c9a      	adds	r2, r3, #2
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052e4:	e02f      	b.n	8005346 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d112      	bne.n	800531a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	881a      	ldrh	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	1c9a      	adds	r2, r3, #2
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b01      	subs	r3, #1
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	86da      	strh	r2, [r3, #54]	; 0x36
 8005318:	e015      	b.n	8005346 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800531a:	f7fd f9bd 	bl	8002698 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d803      	bhi.n	8005332 <HAL_SPI_Transmit+0x168>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005330:	d102      	bne.n	8005338 <HAL_SPI_Transmit+0x16e>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d106      	bne.n	8005346 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005344:	e07b      	b.n	800543e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1ca      	bne.n	80052e6 <HAL_SPI_Transmit+0x11c>
 8005350:	e050      	b.n	80053f4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_SPI_Transmit+0x196>
 800535a:	8afb      	ldrh	r3, [r7, #22]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d144      	bne.n	80053ea <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	7812      	ldrb	r2, [r2, #0]
 800536c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005386:	e030      	b.n	80053ea <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b02      	cmp	r3, #2
 8005394:	d113      	bne.n	80053be <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	7812      	ldrb	r2, [r2, #0]
 80053a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80053bc:	e015      	b.n	80053ea <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053be:	f7fd f96b 	bl	8002698 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d803      	bhi.n	80053d6 <HAL_SPI_Transmit+0x20c>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d4:	d102      	bne.n	80053dc <HAL_SPI_Transmit+0x212>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80053e8:	e029      	b.n	800543e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1c9      	bne.n	8005388 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 fddf 	bl	8005fbc <SPI_EndRxTxTransaction>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005412:	2300      	movs	r3, #0
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	77fb      	strb	r3, [r7, #31]
 8005434:	e003      	b.n	800543e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005446:	7ffb      	ldrb	r3, [r7, #31]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08c      	sub	sp, #48	; 0x30
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800545e:	2301      	movs	r3, #1
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x26>
 8005472:	2302      	movs	r3, #2
 8005474:	e198      	b.n	80057a8 <HAL_SPI_TransmitReceive+0x358>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800547e:	f7fd f90b 	bl	8002698 <HAL_GetTick>
 8005482:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005494:	887b      	ldrh	r3, [r7, #2]
 8005496:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005498:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800549c:	2b01      	cmp	r3, #1
 800549e:	d00f      	beq.n	80054c0 <HAL_SPI_TransmitReceive+0x70>
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a6:	d107      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d103      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x68>
 80054b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d003      	beq.n	80054c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
 80054ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054be:	e16d      	b.n	800579c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <HAL_SPI_TransmitReceive+0x82>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_SPI_TransmitReceive+0x82>
 80054cc:	887b      	ldrh	r3, [r7, #2]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d103      	bne.n	80054da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054d8:	e160      	b.n	800579c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d003      	beq.n	80054ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2205      	movs	r2, #5
 80054ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	887a      	ldrh	r2, [r7, #2]
 80054fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	887a      	ldrh	r2, [r7, #2]
 8005504:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	887a      	ldrh	r2, [r7, #2]
 8005510:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	887a      	ldrh	r2, [r7, #2]
 8005516:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d007      	beq.n	8005542 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005540:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800554a:	d17c      	bne.n	8005646 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <HAL_SPI_TransmitReceive+0x10a>
 8005554:	8b7b      	ldrh	r3, [r7, #26]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d16a      	bne.n	8005630 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	881a      	ldrh	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	1c9a      	adds	r2, r3, #2
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800557e:	e057      	b.n	8005630 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b02      	cmp	r3, #2
 800558c:	d11b      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x176>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d016      	beq.n	80055c6 <HAL_SPI_TransmitReceive+0x176>
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	2b01      	cmp	r3, #1
 800559c:	d113      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	881a      	ldrh	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	1c9a      	adds	r2, r3, #2
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d119      	bne.n	8005608 <HAL_SPI_TransmitReceive+0x1b8>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d014      	beq.n	8005608 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	b292      	uxth	r2, r2
 80055ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	1c9a      	adds	r2, r3, #2
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005604:	2301      	movs	r3, #1
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005608:	f7fd f846 	bl	8002698 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005614:	429a      	cmp	r2, r3
 8005616:	d80b      	bhi.n	8005630 <HAL_SPI_TransmitReceive+0x1e0>
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d007      	beq.n	8005630 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800562e:	e0b5      	b.n	800579c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1a2      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x130>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d19d      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x130>
 8005644:	e080      	b.n	8005748 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_SPI_TransmitReceive+0x204>
 800564e:	8b7b      	ldrh	r3, [r7, #26]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d16f      	bne.n	8005734 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	7812      	ldrb	r2, [r2, #0]
 8005660:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800567a:	e05b      	b.n	8005734 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	d11c      	bne.n	80056c4 <HAL_SPI_TransmitReceive+0x274>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800568e:	b29b      	uxth	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d017      	beq.n	80056c4 <HAL_SPI_TransmitReceive+0x274>
 8005694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005696:	2b01      	cmp	r3, #1
 8005698:	d114      	bne.n	80056c4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	7812      	ldrb	r2, [r2, #0]
 80056a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d119      	bne.n	8005706 <HAL_SPI_TransmitReceive+0x2b6>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d014      	beq.n	8005706 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005702:	2301      	movs	r3, #1
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005706:	f7fc ffc7 	bl	8002698 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005712:	429a      	cmp	r2, r3
 8005714:	d803      	bhi.n	800571e <HAL_SPI_TransmitReceive+0x2ce>
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d102      	bne.n	8005724 <HAL_SPI_TransmitReceive+0x2d4>
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	2b00      	cmp	r3, #0
 8005722:	d107      	bne.n	8005734 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005732:	e033      	b.n	800579c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d19e      	bne.n	800567c <HAL_SPI_TransmitReceive+0x22c>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d199      	bne.n	800567c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 fc35 	bl	8005fbc <SPI_EndRxTxTransaction>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d006      	beq.n	8005766 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005764:	e01a      	b.n	800579c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005792:	e003      	b.n	800579c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3730      	adds	r7, #48	; 0x30
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	4613      	mov	r3, r2
 80057bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_SPI_Transmit_DMA+0x20>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e097      	b.n	8005900 <HAL_SPI_Transmit_DMA+0x150>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d002      	beq.n	80057ea <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80057e4:	2302      	movs	r3, #2
 80057e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057e8:	e085      	b.n	80058f6 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <HAL_SPI_Transmit_DMA+0x46>
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057fa:	e07c      	b.n	80058f6 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2203      	movs	r2, #3
 8005800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	88fa      	ldrh	r2, [r7, #6]
 8005814:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	88fa      	ldrh	r2, [r7, #6]
 800581a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005842:	d10f      	bne.n	8005864 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005852:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005862:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005868:	4a27      	ldr	r2, [pc, #156]	; (8005908 <HAL_SPI_Transmit_DMA+0x158>)
 800586a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005870:	4a26      	ldr	r2, [pc, #152]	; (800590c <HAL_SPI_Transmit_DMA+0x15c>)
 8005872:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005878:	4a25      	ldr	r2, [pc, #148]	; (8005910 <HAL_SPI_Transmit_DMA+0x160>)
 800587a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005880:	2200      	movs	r2, #0
 8005882:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588c:	4619      	mov	r1, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	330c      	adds	r3, #12
 8005894:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800589a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800589c:	f7fd f8ec 	bl	8002a78 <HAL_DMA_Start_IT>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058aa:	f043 0210 	orr.w	r2, r3, #16
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]

    goto error;
 80058b6:	e01e      	b.n	80058f6 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d007      	beq.n	80058d6 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0220 	orr.w	r2, r2, #32
 80058e4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0202 	orr.w	r2, r2, #2
 80058f4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	08005d4d 	.word	0x08005d4d
 800590c:	08005b6d 	.word	0x08005b6d
 8005910:	08005da1 	.word	0x08005da1

08005914 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005930:	2302      	movs	r3, #2
 8005932:	e0db      	b.n	8005aec <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005942:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800594a:	7dbb      	ldrb	r3, [r7, #22]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d00d      	beq.n	800596c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005956:	d106      	bne.n	8005966 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d102      	bne.n	8005966 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005960:	7dbb      	ldrb	r3, [r7, #22]
 8005962:	2b04      	cmp	r3, #4
 8005964:	d002      	beq.n	800596c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005966:	2302      	movs	r3, #2
 8005968:	75fb      	strb	r3, [r7, #23]
    goto error;
 800596a:	e0ba      	b.n	8005ae2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005978:	887b      	ldrh	r3, [r7, #2]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005982:	e0ae      	b.n	8005ae2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b04      	cmp	r3, #4
 800598e:	d003      	beq.n	8005998 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2205      	movs	r2, #5
 8005994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	887a      	ldrh	r2, [r7, #2]
 80059a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	887a      	ldrh	r2, [r7, #2]
 80059ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	887a      	ldrh	r2, [r7, #2]
 80059ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	887a      	ldrh	r2, [r7, #2]
 80059c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d108      	bne.n	80059ec <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059de:	4a45      	ldr	r2, [pc, #276]	; (8005af4 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e6:	4a44      	ldr	r2, [pc, #272]	; (8005af8 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80059e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80059ea:	e007      	b.n	80059fc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f0:	4a42      	ldr	r2, [pc, #264]	; (8005afc <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f8:	4a41      	ldr	r2, [pc, #260]	; (8005b00 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80059fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a00:	4a40      	ldr	r2, [pc, #256]	; (8005b04 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005a02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a08:	2200      	movs	r2, #0
 8005a0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	330c      	adds	r3, #12
 8005a16:	4619      	mov	r1, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a22:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005a24:	f7fd f828 	bl	8002a78 <HAL_DMA_Start_IT>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a32:	f043 0210 	orr.w	r2, r3, #16
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005a3e:	e050      	b.n	8005ae2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a54:	2200      	movs	r2, #0
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a64:	2200      	movs	r2, #0
 8005a66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a78:	4619      	mov	r1, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	330c      	adds	r3, #12
 8005a80:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005a88:	f7fc fff6 	bl	8002a78 <HAL_DMA_Start_IT>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d008      	beq.n	8005aa4 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a96:	f043 0210 	orr.w	r2, r3, #16
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005aa2:	e01e      	b.n	8005ae2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aae:	2b40      	cmp	r3, #64	; 0x40
 8005ab0:	d007      	beq.n	8005ac2 <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ac0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0220 	orr.w	r2, r2, #32
 8005ad0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f042 0202 	orr.w	r2, r2, #2
 8005ae0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	08005d69 	.word	0x08005d69
 8005af8:	08005c15 	.word	0x08005c15
 8005afc:	08005d85 	.word	0x08005d85
 8005b00:	08005cbd 	.word	0x08005cbd
 8005b04:	08005da1 	.word	0x08005da1

08005b08 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b7a:	f7fc fd8d 	bl	8002698 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8e:	d03b      	beq.n	8005c08 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0220 	bic.w	r2, r2, #32
 8005b9e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0202 	bic.w	r2, r2, #2
 8005bae:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	2164      	movs	r1, #100	; 0x64
 8005bb4:	6978      	ldr	r0, [r7, #20]
 8005bb6:	f000 fa01 	bl	8005fbc <SPI_EndRxTxTransaction>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc4:	f043 0220 	orr.w	r2, r3, #32
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2200      	movs	r2, #0
 8005bee:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005c00:	6978      	ldr	r0, [r7, #20]
 8005c02:	f7ff ffa9 	bl	8005b58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c06:	e002      	b.n	8005c0e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005c08:	6978      	ldr	r0, [r7, #20]
 8005c0a:	f7fb fe57 	bl	80018bc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c22:	f7fc fd39 	bl	8002698 <HAL_GetTick>
 8005c26:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c36:	d03b      	beq.n	8005cb0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0220 	bic.w	r2, r2, #32
 8005c46:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10d      	bne.n	8005c6c <SPI_DMAReceiveCplt+0x58>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c58:	d108      	bne.n	8005c6c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0203 	bic.w	r2, r2, #3
 8005c68:	605a      	str	r2, [r3, #4]
 8005c6a:	e007      	b.n	8005c7c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	2164      	movs	r1, #100	; 0x64
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f935 	bl	8005ef0 <SPI_EndRxTransaction>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f7ff ff55 	bl	8005b58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005cae:	e002      	b.n	8005cb6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f7ff ff29 	bl	8005b08 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cca:	f7fc fce5 	bl	8002698 <HAL_GetTick>
 8005cce:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cde:	d02f      	beq.n	8005d40 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0220 	bic.w	r2, r2, #32
 8005cee:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	2164      	movs	r1, #100	; 0x64
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f961 	bl	8005fbc <SPI_EndRxTxTransaction>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d04:	f043 0220 	orr.w	r2, r3, #32
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0203 	bic.w	r2, r2, #3
 8005d1a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7ff ff0d 	bl	8005b58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005d3e:	e002      	b.n	8005d46 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7fb fdd1 	bl	80018e8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f7ff fede 	bl	8005b1c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f7ff feda 	bl	8005b30 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f7ff fed6 	bl	8005b44 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d98:	bf00      	nop
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0203 	bic.w	r2, r2, #3
 8005dbc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	f043 0210 	orr.w	r2, r3, #16
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f7ff fec0 	bl	8005b58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dd8:	bf00      	nop
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005df0:	f7fc fc52 	bl	8002698 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	1a9b      	subs	r3, r3, r2
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e00:	f7fc fc4a 	bl	8002698 <HAL_GetTick>
 8005e04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e06:	4b39      	ldr	r3, [pc, #228]	; (8005eec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	015b      	lsls	r3, r3, #5
 8005e0c:	0d1b      	lsrs	r3, r3, #20
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	fb02 f303 	mul.w	r3, r2, r3
 8005e14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e16:	e054      	b.n	8005ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1e:	d050      	beq.n	8005ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e20:	f7fc fc3a 	bl	8002698 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d902      	bls.n	8005e36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d13d      	bne.n	8005eb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e4e:	d111      	bne.n	8005e74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e58:	d004      	beq.n	8005e64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e62:	d107      	bne.n	8005e74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7c:	d10f      	bne.n	8005e9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e017      	b.n	8005ee2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	bf0c      	ite	eq
 8005ed2:	2301      	moveq	r3, #1
 8005ed4:	2300      	movne	r3, #0
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d19b      	bne.n	8005e18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000000 	.word	0x20000000

08005ef0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f04:	d111      	bne.n	8005f2a <SPI_EndRxTransaction+0x3a>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f0e:	d004      	beq.n	8005f1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f18:	d107      	bne.n	8005f2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f32:	d12a      	bne.n	8005f8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f3c:	d012      	beq.n	8005f64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2200      	movs	r2, #0
 8005f46:	2180      	movs	r1, #128	; 0x80
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f7ff ff49 	bl	8005de0 <SPI_WaitFlagStateUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d02d      	beq.n	8005fb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f58:	f043 0220 	orr.w	r2, r3, #32
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e026      	b.n	8005fb2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7ff ff36 	bl	8005de0 <SPI_WaitFlagStateUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d01a      	beq.n	8005fb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	f043 0220 	orr.w	r2, r3, #32
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e013      	b.n	8005fb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2200      	movs	r2, #0
 8005f92:	2101      	movs	r1, #1
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f7ff ff23 	bl	8005de0 <SPI_WaitFlagStateUntilTimeout>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d007      	beq.n	8005fb0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa4:	f043 0220 	orr.w	r2, r3, #32
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e000      	b.n	8005fb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	2102      	movs	r1, #2
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff ff04 	bl	8005de0 <SPI_WaitFlagStateUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d007      	beq.n	8005fee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e032      	b.n	8006054 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005fee:	4b1b      	ldr	r3, [pc, #108]	; (800605c <SPI_EndRxTxTransaction+0xa0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1b      	ldr	r2, [pc, #108]	; (8006060 <SPI_EndRxTxTransaction+0xa4>)
 8005ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff8:	0d5b      	lsrs	r3, r3, #21
 8005ffa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ffe:	fb02 f303 	mul.w	r3, r2, r3
 8006002:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800600c:	d112      	bne.n	8006034 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2200      	movs	r2, #0
 8006016:	2180      	movs	r1, #128	; 0x80
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7ff fee1 	bl	8005de0 <SPI_WaitFlagStateUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d016      	beq.n	8006052 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006028:	f043 0220 	orr.w	r2, r3, #32
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e00f      	b.n	8006054 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	3b01      	subs	r3, #1
 800603e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604a:	2b80      	cmp	r3, #128	; 0x80
 800604c:	d0f2      	beq.n	8006034 <SPI_EndRxTxTransaction+0x78>
 800604e:	e000      	b.n	8006052 <SPI_EndRxTxTransaction+0x96>
        break;
 8006050:	bf00      	nop
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20000000 	.word	0x20000000
 8006060:	165e9f81 	.word	0x165e9f81

08006064 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e042      	b.n	80060fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fc f890 	bl	80021b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2224      	movs	r2, #36	; 0x24
 8006094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f973 	bl	8006394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	691a      	ldr	r2, [r3, #16]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695a      	ldr	r2, [r3, #20]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08a      	sub	sp, #40	; 0x28
 8006108:	af02      	add	r7, sp, #8
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	603b      	str	r3, [r7, #0]
 8006110:	4613      	mov	r3, r2
 8006112:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b20      	cmp	r3, #32
 8006122:	d175      	bne.n	8006210 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <HAL_UART_Transmit+0x2c>
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e06e      	b.n	8006212 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2221      	movs	r2, #33	; 0x21
 800613e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006142:	f7fc faa9 	bl	8002698 <HAL_GetTick>
 8006146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	88fa      	ldrh	r2, [r7, #6]
 800614c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	88fa      	ldrh	r2, [r7, #6]
 8006152:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615c:	d108      	bne.n	8006170 <HAL_UART_Transmit+0x6c>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	e003      	b.n	8006178 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006174:	2300      	movs	r3, #0
 8006176:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006178:	e02e      	b.n	80061d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2200      	movs	r2, #0
 8006182:	2180      	movs	r1, #128	; 0x80
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 f848 	bl	800621a <UART_WaitOnFlagUntilTimeout>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d005      	beq.n	800619c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e03a      	b.n	8006212 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10b      	bne.n	80061ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	3302      	adds	r3, #2
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	e007      	b.n	80061ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	781a      	ldrb	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	3301      	adds	r3, #1
 80061c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1cb      	bne.n	800617a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2200      	movs	r2, #0
 80061ea:	2140      	movs	r1, #64	; 0x40
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f814 	bl	800621a <UART_WaitOnFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e006      	b.n	8006212 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	e000      	b.n	8006212 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006210:	2302      	movs	r3, #2
  }
}
 8006212:	4618      	mov	r0, r3
 8006214:	3720      	adds	r7, #32
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b086      	sub	sp, #24
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	603b      	str	r3, [r7, #0]
 8006226:	4613      	mov	r3, r2
 8006228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800622a:	e03b      	b.n	80062a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d037      	beq.n	80062a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006234:	f7fc fa30 	bl	8002698 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	6a3a      	ldr	r2, [r7, #32]
 8006240:	429a      	cmp	r2, r3
 8006242:	d302      	bcc.n	800624a <UART_WaitOnFlagUntilTimeout+0x30>
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e03a      	b.n	80062c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	d023      	beq.n	80062a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2b80      	cmp	r3, #128	; 0x80
 8006260:	d020      	beq.n	80062a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	d01d      	beq.n	80062a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0308 	and.w	r3, r3, #8
 8006272:	2b08      	cmp	r3, #8
 8006274:	d116      	bne.n	80062a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006276:	2300      	movs	r3, #0
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 f81d 	bl	80062cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2208      	movs	r2, #8
 8006296:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e00f      	b.n	80062c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	4013      	ands	r3, r2
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	bf0c      	ite	eq
 80062b4:	2301      	moveq	r3, #1
 80062b6:	2300      	movne	r3, #0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	79fb      	ldrb	r3, [r7, #7]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d0b4      	beq.n	800622c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b095      	sub	sp, #84	; 0x54
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	330c      	adds	r3, #12
 80062da:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062f4:	643a      	str	r2, [r7, #64]	; 0x40
 80062f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e5      	bne.n	80062d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3314      	adds	r3, #20
 800630e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	61fb      	str	r3, [r7, #28]
   return(result);
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f023 0301 	bic.w	r3, r3, #1
 800631e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3314      	adds	r3, #20
 8006326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006328:	62fa      	str	r2, [r7, #44]	; 0x2c
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800632e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e5      	bne.n	8006308 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006340:	2b01      	cmp	r3, #1
 8006342:	d119      	bne.n	8006378 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	60bb      	str	r3, [r7, #8]
   return(result);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f023 0310 	bic.w	r3, r3, #16
 800635a:	647b      	str	r3, [r7, #68]	; 0x44
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	330c      	adds	r3, #12
 8006362:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006364:	61ba      	str	r2, [r7, #24]
 8006366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	6979      	ldr	r1, [r7, #20]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	613b      	str	r3, [r7, #16]
   return(result);
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e5      	bne.n	8006344 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006386:	bf00      	nop
 8006388:	3754      	adds	r7, #84	; 0x54
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
	...

08006394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006398:	b0c0      	sub	sp, #256	; 0x100
 800639a:	af00      	add	r7, sp, #0
 800639c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b0:	68d9      	ldr	r1, [r3, #12]
 80063b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	ea40 0301 	orr.w	r3, r0, r1
 80063bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	431a      	orrs	r2, r3
 80063cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063ec:	f021 010c 	bic.w	r1, r1, #12
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063fa:	430b      	orrs	r3, r1
 80063fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640e:	6999      	ldr	r1, [r3, #24]
 8006410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	ea40 0301 	orr.w	r3, r0, r1
 800641a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4b8f      	ldr	r3, [pc, #572]	; (8006660 <UART_SetConfig+0x2cc>)
 8006424:	429a      	cmp	r2, r3
 8006426:	d005      	beq.n	8006434 <UART_SetConfig+0xa0>
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	4b8d      	ldr	r3, [pc, #564]	; (8006664 <UART_SetConfig+0x2d0>)
 8006430:	429a      	cmp	r2, r3
 8006432:	d104      	bne.n	800643e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006434:	f7fe fe2c 	bl	8005090 <HAL_RCC_GetPCLK2Freq>
 8006438:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800643c:	e003      	b.n	8006446 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800643e:	f7fe fe13 	bl	8005068 <HAL_RCC_GetPCLK1Freq>
 8006442:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006450:	f040 810c 	bne.w	800666c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006458:	2200      	movs	r2, #0
 800645a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800645e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006462:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006466:	4622      	mov	r2, r4
 8006468:	462b      	mov	r3, r5
 800646a:	1891      	adds	r1, r2, r2
 800646c:	65b9      	str	r1, [r7, #88]	; 0x58
 800646e:	415b      	adcs	r3, r3
 8006470:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006472:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006476:	4621      	mov	r1, r4
 8006478:	eb12 0801 	adds.w	r8, r2, r1
 800647c:	4629      	mov	r1, r5
 800647e:	eb43 0901 	adc.w	r9, r3, r1
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	f04f 0300 	mov.w	r3, #0
 800648a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800648e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006496:	4690      	mov	r8, r2
 8006498:	4699      	mov	r9, r3
 800649a:	4623      	mov	r3, r4
 800649c:	eb18 0303 	adds.w	r3, r8, r3
 80064a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064a4:	462b      	mov	r3, r5
 80064a6:	eb49 0303 	adc.w	r3, r9, r3
 80064aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064c2:	460b      	mov	r3, r1
 80064c4:	18db      	adds	r3, r3, r3
 80064c6:	653b      	str	r3, [r7, #80]	; 0x50
 80064c8:	4613      	mov	r3, r2
 80064ca:	eb42 0303 	adc.w	r3, r2, r3
 80064ce:	657b      	str	r3, [r7, #84]	; 0x54
 80064d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80064d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80064d8:	f7f9 fed2 	bl	8000280 <__aeabi_uldivmod>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	4b61      	ldr	r3, [pc, #388]	; (8006668 <UART_SetConfig+0x2d4>)
 80064e2:	fba3 2302 	umull	r2, r3, r3, r2
 80064e6:	095b      	lsrs	r3, r3, #5
 80064e8:	011c      	lsls	r4, r3, #4
 80064ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80064f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80064fc:	4642      	mov	r2, r8
 80064fe:	464b      	mov	r3, r9
 8006500:	1891      	adds	r1, r2, r2
 8006502:	64b9      	str	r1, [r7, #72]	; 0x48
 8006504:	415b      	adcs	r3, r3
 8006506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006508:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800650c:	4641      	mov	r1, r8
 800650e:	eb12 0a01 	adds.w	sl, r2, r1
 8006512:	4649      	mov	r1, r9
 8006514:	eb43 0b01 	adc.w	fp, r3, r1
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006524:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006528:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800652c:	4692      	mov	sl, r2
 800652e:	469b      	mov	fp, r3
 8006530:	4643      	mov	r3, r8
 8006532:	eb1a 0303 	adds.w	r3, sl, r3
 8006536:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800653a:	464b      	mov	r3, r9
 800653c:	eb4b 0303 	adc.w	r3, fp, r3
 8006540:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006550:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006554:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006558:	460b      	mov	r3, r1
 800655a:	18db      	adds	r3, r3, r3
 800655c:	643b      	str	r3, [r7, #64]	; 0x40
 800655e:	4613      	mov	r3, r2
 8006560:	eb42 0303 	adc.w	r3, r2, r3
 8006564:	647b      	str	r3, [r7, #68]	; 0x44
 8006566:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800656a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800656e:	f7f9 fe87 	bl	8000280 <__aeabi_uldivmod>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4611      	mov	r1, r2
 8006578:	4b3b      	ldr	r3, [pc, #236]	; (8006668 <UART_SetConfig+0x2d4>)
 800657a:	fba3 2301 	umull	r2, r3, r3, r1
 800657e:	095b      	lsrs	r3, r3, #5
 8006580:	2264      	movs	r2, #100	; 0x64
 8006582:	fb02 f303 	mul.w	r3, r2, r3
 8006586:	1acb      	subs	r3, r1, r3
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800658e:	4b36      	ldr	r3, [pc, #216]	; (8006668 <UART_SetConfig+0x2d4>)
 8006590:	fba3 2302 	umull	r2, r3, r3, r2
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800659c:	441c      	add	r4, r3
 800659e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80065ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065b0:	4642      	mov	r2, r8
 80065b2:	464b      	mov	r3, r9
 80065b4:	1891      	adds	r1, r2, r2
 80065b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80065b8:	415b      	adcs	r3, r3
 80065ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065c0:	4641      	mov	r1, r8
 80065c2:	1851      	adds	r1, r2, r1
 80065c4:	6339      	str	r1, [r7, #48]	; 0x30
 80065c6:	4649      	mov	r1, r9
 80065c8:	414b      	adcs	r3, r1
 80065ca:	637b      	str	r3, [r7, #52]	; 0x34
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80065d8:	4659      	mov	r1, fp
 80065da:	00cb      	lsls	r3, r1, #3
 80065dc:	4651      	mov	r1, sl
 80065de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065e2:	4651      	mov	r1, sl
 80065e4:	00ca      	lsls	r2, r1, #3
 80065e6:	4610      	mov	r0, r2
 80065e8:	4619      	mov	r1, r3
 80065ea:	4603      	mov	r3, r0
 80065ec:	4642      	mov	r2, r8
 80065ee:	189b      	adds	r3, r3, r2
 80065f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065f4:	464b      	mov	r3, r9
 80065f6:	460a      	mov	r2, r1
 80065f8:	eb42 0303 	adc.w	r3, r2, r3
 80065fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800660c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006610:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006614:	460b      	mov	r3, r1
 8006616:	18db      	adds	r3, r3, r3
 8006618:	62bb      	str	r3, [r7, #40]	; 0x28
 800661a:	4613      	mov	r3, r2
 800661c:	eb42 0303 	adc.w	r3, r2, r3
 8006620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006622:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006626:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800662a:	f7f9 fe29 	bl	8000280 <__aeabi_uldivmod>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4b0d      	ldr	r3, [pc, #52]	; (8006668 <UART_SetConfig+0x2d4>)
 8006634:	fba3 1302 	umull	r1, r3, r3, r2
 8006638:	095b      	lsrs	r3, r3, #5
 800663a:	2164      	movs	r1, #100	; 0x64
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	00db      	lsls	r3, r3, #3
 8006644:	3332      	adds	r3, #50	; 0x32
 8006646:	4a08      	ldr	r2, [pc, #32]	; (8006668 <UART_SetConfig+0x2d4>)
 8006648:	fba2 2303 	umull	r2, r3, r2, r3
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	f003 0207 	and.w	r2, r3, #7
 8006652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4422      	add	r2, r4
 800665a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800665c:	e106      	b.n	800686c <UART_SetConfig+0x4d8>
 800665e:	bf00      	nop
 8006660:	40011000 	.word	0x40011000
 8006664:	40011400 	.word	0x40011400
 8006668:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800666c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006670:	2200      	movs	r2, #0
 8006672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006676:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800667a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800667e:	4642      	mov	r2, r8
 8006680:	464b      	mov	r3, r9
 8006682:	1891      	adds	r1, r2, r2
 8006684:	6239      	str	r1, [r7, #32]
 8006686:	415b      	adcs	r3, r3
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
 800668a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800668e:	4641      	mov	r1, r8
 8006690:	1854      	adds	r4, r2, r1
 8006692:	4649      	mov	r1, r9
 8006694:	eb43 0501 	adc.w	r5, r3, r1
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	f04f 0300 	mov.w	r3, #0
 80066a0:	00eb      	lsls	r3, r5, #3
 80066a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066a6:	00e2      	lsls	r2, r4, #3
 80066a8:	4614      	mov	r4, r2
 80066aa:	461d      	mov	r5, r3
 80066ac:	4643      	mov	r3, r8
 80066ae:	18e3      	adds	r3, r4, r3
 80066b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066b4:	464b      	mov	r3, r9
 80066b6:	eb45 0303 	adc.w	r3, r5, r3
 80066ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066ce:	f04f 0200 	mov.w	r2, #0
 80066d2:	f04f 0300 	mov.w	r3, #0
 80066d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80066da:	4629      	mov	r1, r5
 80066dc:	008b      	lsls	r3, r1, #2
 80066de:	4621      	mov	r1, r4
 80066e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066e4:	4621      	mov	r1, r4
 80066e6:	008a      	lsls	r2, r1, #2
 80066e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066ec:	f7f9 fdc8 	bl	8000280 <__aeabi_uldivmod>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4b60      	ldr	r3, [pc, #384]	; (8006878 <UART_SetConfig+0x4e4>)
 80066f6:	fba3 2302 	umull	r2, r3, r3, r2
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	011c      	lsls	r4, r3, #4
 80066fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006702:	2200      	movs	r2, #0
 8006704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006708:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800670c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006710:	4642      	mov	r2, r8
 8006712:	464b      	mov	r3, r9
 8006714:	1891      	adds	r1, r2, r2
 8006716:	61b9      	str	r1, [r7, #24]
 8006718:	415b      	adcs	r3, r3
 800671a:	61fb      	str	r3, [r7, #28]
 800671c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006720:	4641      	mov	r1, r8
 8006722:	1851      	adds	r1, r2, r1
 8006724:	6139      	str	r1, [r7, #16]
 8006726:	4649      	mov	r1, r9
 8006728:	414b      	adcs	r3, r1
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006738:	4659      	mov	r1, fp
 800673a:	00cb      	lsls	r3, r1, #3
 800673c:	4651      	mov	r1, sl
 800673e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006742:	4651      	mov	r1, sl
 8006744:	00ca      	lsls	r2, r1, #3
 8006746:	4610      	mov	r0, r2
 8006748:	4619      	mov	r1, r3
 800674a:	4603      	mov	r3, r0
 800674c:	4642      	mov	r2, r8
 800674e:	189b      	adds	r3, r3, r2
 8006750:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006754:	464b      	mov	r3, r9
 8006756:	460a      	mov	r2, r1
 8006758:	eb42 0303 	adc.w	r3, r2, r3
 800675c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	67bb      	str	r3, [r7, #120]	; 0x78
 800676a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006778:	4649      	mov	r1, r9
 800677a:	008b      	lsls	r3, r1, #2
 800677c:	4641      	mov	r1, r8
 800677e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006782:	4641      	mov	r1, r8
 8006784:	008a      	lsls	r2, r1, #2
 8006786:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800678a:	f7f9 fd79 	bl	8000280 <__aeabi_uldivmod>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4611      	mov	r1, r2
 8006794:	4b38      	ldr	r3, [pc, #224]	; (8006878 <UART_SetConfig+0x4e4>)
 8006796:	fba3 2301 	umull	r2, r3, r3, r1
 800679a:	095b      	lsrs	r3, r3, #5
 800679c:	2264      	movs	r2, #100	; 0x64
 800679e:	fb02 f303 	mul.w	r3, r2, r3
 80067a2:	1acb      	subs	r3, r1, r3
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	3332      	adds	r3, #50	; 0x32
 80067a8:	4a33      	ldr	r2, [pc, #204]	; (8006878 <UART_SetConfig+0x4e4>)
 80067aa:	fba2 2303 	umull	r2, r3, r2, r3
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067b4:	441c      	add	r4, r3
 80067b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ba:	2200      	movs	r2, #0
 80067bc:	673b      	str	r3, [r7, #112]	; 0x70
 80067be:	677a      	str	r2, [r7, #116]	; 0x74
 80067c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	1891      	adds	r1, r2, r2
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	415b      	adcs	r3, r3
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067d4:	4641      	mov	r1, r8
 80067d6:	1851      	adds	r1, r2, r1
 80067d8:	6039      	str	r1, [r7, #0]
 80067da:	4649      	mov	r1, r9
 80067dc:	414b      	adcs	r3, r1
 80067de:	607b      	str	r3, [r7, #4]
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067ec:	4659      	mov	r1, fp
 80067ee:	00cb      	lsls	r3, r1, #3
 80067f0:	4651      	mov	r1, sl
 80067f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067f6:	4651      	mov	r1, sl
 80067f8:	00ca      	lsls	r2, r1, #3
 80067fa:	4610      	mov	r0, r2
 80067fc:	4619      	mov	r1, r3
 80067fe:	4603      	mov	r3, r0
 8006800:	4642      	mov	r2, r8
 8006802:	189b      	adds	r3, r3, r2
 8006804:	66bb      	str	r3, [r7, #104]	; 0x68
 8006806:	464b      	mov	r3, r9
 8006808:	460a      	mov	r2, r1
 800680a:	eb42 0303 	adc.w	r3, r2, r3
 800680e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	663b      	str	r3, [r7, #96]	; 0x60
 800681a:	667a      	str	r2, [r7, #100]	; 0x64
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006828:	4649      	mov	r1, r9
 800682a:	008b      	lsls	r3, r1, #2
 800682c:	4641      	mov	r1, r8
 800682e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006832:	4641      	mov	r1, r8
 8006834:	008a      	lsls	r2, r1, #2
 8006836:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800683a:	f7f9 fd21 	bl	8000280 <__aeabi_uldivmod>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <UART_SetConfig+0x4e4>)
 8006844:	fba3 1302 	umull	r1, r3, r3, r2
 8006848:	095b      	lsrs	r3, r3, #5
 800684a:	2164      	movs	r1, #100	; 0x64
 800684c:	fb01 f303 	mul.w	r3, r1, r3
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	3332      	adds	r3, #50	; 0x32
 8006856:	4a08      	ldr	r2, [pc, #32]	; (8006878 <UART_SetConfig+0x4e4>)
 8006858:	fba2 2303 	umull	r2, r3, r2, r3
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	f003 020f 	and.w	r2, r3, #15
 8006862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4422      	add	r2, r4
 800686a:	609a      	str	r2, [r3, #8]
}
 800686c:	bf00      	nop
 800686e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006872:	46bd      	mov	sp, r7
 8006874:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006878:	51eb851f 	.word	0x51eb851f

0800687c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800687c:	b084      	sub	sp, #16
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	f107 001c 	add.w	r0, r7, #28
 800688a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800688e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006892:	2b01      	cmp	r3, #1
 8006894:	d123      	bne.n	80068de <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80068aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d105      	bne.n	80068d2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f001 fae2 	bl	8007e9c <USB_CoreReset>
 80068d8:	4603      	mov	r3, r0
 80068da:	73fb      	strb	r3, [r7, #15]
 80068dc:	e01b      	b.n	8006916 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 fad6 	bl	8007e9c <USB_CoreReset>
 80068f0:	4603      	mov	r3, r0
 80068f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d106      	bne.n	800690a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	639a      	str	r2, [r3, #56]	; 0x38
 8006908:	e005      	b.n	8006916 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006916:	7fbb      	ldrb	r3, [r7, #30]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d10b      	bne.n	8006934 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f043 0206 	orr.w	r2, r3, #6
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f043 0220 	orr.w	r2, r3, #32
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006934:	7bfb      	ldrb	r3, [r7, #15]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006940:	b004      	add	sp, #16
 8006942:	4770      	bx	lr

08006944 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	4613      	mov	r3, r2
 8006950:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d165      	bne.n	8006a24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4a41      	ldr	r2, [pc, #260]	; (8006a60 <USB_SetTurnaroundTime+0x11c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d906      	bls.n	800696e <USB_SetTurnaroundTime+0x2a>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4a40      	ldr	r2, [pc, #256]	; (8006a64 <USB_SetTurnaroundTime+0x120>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d202      	bcs.n	800696e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006968:	230f      	movs	r3, #15
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	e062      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	4a3c      	ldr	r2, [pc, #240]	; (8006a64 <USB_SetTurnaroundTime+0x120>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d306      	bcc.n	8006984 <USB_SetTurnaroundTime+0x40>
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	4a3b      	ldr	r2, [pc, #236]	; (8006a68 <USB_SetTurnaroundTime+0x124>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d202      	bcs.n	8006984 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800697e:	230e      	movs	r3, #14
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	e057      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	4a38      	ldr	r2, [pc, #224]	; (8006a68 <USB_SetTurnaroundTime+0x124>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d306      	bcc.n	800699a <USB_SetTurnaroundTime+0x56>
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4a37      	ldr	r2, [pc, #220]	; (8006a6c <USB_SetTurnaroundTime+0x128>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d202      	bcs.n	800699a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006994:	230d      	movs	r3, #13
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	e04c      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	4a33      	ldr	r2, [pc, #204]	; (8006a6c <USB_SetTurnaroundTime+0x128>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d306      	bcc.n	80069b0 <USB_SetTurnaroundTime+0x6c>
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	4a32      	ldr	r2, [pc, #200]	; (8006a70 <USB_SetTurnaroundTime+0x12c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d802      	bhi.n	80069b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80069aa:	230c      	movs	r3, #12
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e041      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	4a2f      	ldr	r2, [pc, #188]	; (8006a70 <USB_SetTurnaroundTime+0x12c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d906      	bls.n	80069c6 <USB_SetTurnaroundTime+0x82>
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4a2e      	ldr	r2, [pc, #184]	; (8006a74 <USB_SetTurnaroundTime+0x130>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d802      	bhi.n	80069c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80069c0:	230b      	movs	r3, #11
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	e036      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	4a2a      	ldr	r2, [pc, #168]	; (8006a74 <USB_SetTurnaroundTime+0x130>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d906      	bls.n	80069dc <USB_SetTurnaroundTime+0x98>
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4a29      	ldr	r2, [pc, #164]	; (8006a78 <USB_SetTurnaroundTime+0x134>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d802      	bhi.n	80069dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80069d6:	230a      	movs	r3, #10
 80069d8:	617b      	str	r3, [r7, #20]
 80069da:	e02b      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4a26      	ldr	r2, [pc, #152]	; (8006a78 <USB_SetTurnaroundTime+0x134>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d906      	bls.n	80069f2 <USB_SetTurnaroundTime+0xae>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4a25      	ldr	r2, [pc, #148]	; (8006a7c <USB_SetTurnaroundTime+0x138>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d202      	bcs.n	80069f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80069ec:	2309      	movs	r3, #9
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	e020      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	4a21      	ldr	r2, [pc, #132]	; (8006a7c <USB_SetTurnaroundTime+0x138>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d306      	bcc.n	8006a08 <USB_SetTurnaroundTime+0xc4>
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	4a20      	ldr	r2, [pc, #128]	; (8006a80 <USB_SetTurnaroundTime+0x13c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d802      	bhi.n	8006a08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a02:	2308      	movs	r3, #8
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	e015      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4a1d      	ldr	r2, [pc, #116]	; (8006a80 <USB_SetTurnaroundTime+0x13c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d906      	bls.n	8006a1e <USB_SetTurnaroundTime+0xda>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4a1c      	ldr	r2, [pc, #112]	; (8006a84 <USB_SetTurnaroundTime+0x140>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d202      	bcs.n	8006a1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a18:	2307      	movs	r3, #7
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	e00a      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a1e:	2306      	movs	r3, #6
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	e007      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a2a:	2309      	movs	r3, #9
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	e001      	b.n	8006a34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a30:	2309      	movs	r3, #9
 8006a32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	029b      	lsls	r3, r3, #10
 8006a48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	371c      	adds	r7, #28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	00d8acbf 	.word	0x00d8acbf
 8006a64:	00e4e1c0 	.word	0x00e4e1c0
 8006a68:	00f42400 	.word	0x00f42400
 8006a6c:	01067380 	.word	0x01067380
 8006a70:	011a499f 	.word	0x011a499f
 8006a74:	01312cff 	.word	0x01312cff
 8006a78:	014ca43f 	.word	0x014ca43f
 8006a7c:	016e3600 	.word	0x016e3600
 8006a80:	01a6ab1f 	.word	0x01a6ab1f
 8006a84:	01e84800 	.word	0x01e84800

08006a88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f043 0201 	orr.w	r2, r3, #1
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f023 0201 	bic.w	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d115      	bne.n	8006b1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006afa:	200a      	movs	r0, #10
 8006afc:	f7fb fdd8 	bl	80026b0 <HAL_Delay>
      ms += 10U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	330a      	adds	r3, #10
 8006b04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 f939 	bl	8007d7e <USB_GetMode>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d01e      	beq.n	8006b50 <USB_SetCurrentMode+0x84>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2bc7      	cmp	r3, #199	; 0xc7
 8006b16:	d9f0      	bls.n	8006afa <USB_SetCurrentMode+0x2e>
 8006b18:	e01a      	b.n	8006b50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d115      	bne.n	8006b4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b2c:	200a      	movs	r0, #10
 8006b2e:	f7fb fdbf 	bl	80026b0 <HAL_Delay>
      ms += 10U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	330a      	adds	r3, #10
 8006b36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 f920 	bl	8007d7e <USB_GetMode>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <USB_SetCurrentMode+0x84>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2bc7      	cmp	r3, #199	; 0xc7
 8006b48:	d9f0      	bls.n	8006b2c <USB_SetCurrentMode+0x60>
 8006b4a:	e001      	b.n	8006b50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e005      	b.n	8006b5c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2bc8      	cmp	r3, #200	; 0xc8
 8006b54:	d101      	bne.n	8006b5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b64:	b084      	sub	sp, #16
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b086      	sub	sp, #24
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b7e:	2300      	movs	r3, #0
 8006b80:	613b      	str	r3, [r7, #16]
 8006b82:	e009      	b.n	8006b98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	3340      	adds	r3, #64	; 0x40
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	2200      	movs	r2, #0
 8006b90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	3301      	adds	r3, #1
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	2b0e      	cmp	r3, #14
 8006b9c:	d9f2      	bls.n	8006b84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b9e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d11c      	bne.n	8006be0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bb4:	f043 0302 	orr.w	r3, r3, #2
 8006bb8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	639a      	str	r2, [r3, #56]	; 0x38
 8006bde:	e00b      	b.n	8006bf8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bfe:	461a      	mov	r2, r3
 8006c00:	2300      	movs	r3, #0
 8006c02:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c04:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d10d      	bne.n	8006c28 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d104      	bne.n	8006c1e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c14:	2100      	movs	r1, #0
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f968 	bl	8006eec <USB_SetDevSpeed>
 8006c1c:	e008      	b.n	8006c30 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c1e:	2101      	movs	r1, #1
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f963 	bl	8006eec <USB_SetDevSpeed>
 8006c26:	e003      	b.n	8006c30 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c28:	2103      	movs	r1, #3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f95e 	bl	8006eec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c30:	2110      	movs	r1, #16
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f8fa 	bl	8006e2c <USB_FlushTxFifo>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f924 	bl	8006e90 <USB_FlushRxFifo>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c64:	461a      	mov	r2, r3
 8006c66:	2300      	movs	r3, #0
 8006c68:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c70:	461a      	mov	r2, r3
 8006c72:	2300      	movs	r3, #0
 8006c74:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c76:	2300      	movs	r3, #0
 8006c78:	613b      	str	r3, [r7, #16]
 8006c7a:	e043      	b.n	8006d04 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c92:	d118      	bne.n	8006cc6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10a      	bne.n	8006cb0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	e013      	b.n	8006cd8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	e008      	b.n	8006cd8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	3301      	adds	r3, #1
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d08:	461a      	mov	r2, r3
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d3b5      	bcc.n	8006c7c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d10:	2300      	movs	r3, #0
 8006d12:	613b      	str	r3, [r7, #16]
 8006d14:	e043      	b.n	8006d9e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d2c:	d118      	bne.n	8006d60 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d40:	461a      	mov	r2, r3
 8006d42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	e013      	b.n	8006d72 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d56:	461a      	mov	r2, r3
 8006d58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	e008      	b.n	8006d72 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7e:	461a      	mov	r2, r3
 8006d80:	2300      	movs	r3, #0
 8006d82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	461a      	mov	r2, r3
 8006d92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	613b      	str	r3, [r7, #16]
 8006d9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006da2:	461a      	mov	r2, r3
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d3b5      	bcc.n	8006d16 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dbc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006dca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d105      	bne.n	8006de0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f043 0210 	orr.w	r2, r3, #16
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	699a      	ldr	r2, [r3, #24]
 8006de4:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <USB_DevInit+0x2c4>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006dec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	f043 0208 	orr.w	r2, r3, #8
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d107      	bne.n	8006e18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e10:	f043 0304 	orr.w	r3, r3, #4
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e24:	b004      	add	sp, #16
 8006e26:	4770      	bx	lr
 8006e28:	803c3800 	.word	0x803c3800

08006e2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e46:	d901      	bls.n	8006e4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e01b      	b.n	8006e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	daf2      	bge.n	8006e3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	019b      	lsls	r3, r3, #6
 8006e5c:	f043 0220 	orr.w	r2, r3, #32
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3301      	adds	r3, #1
 8006e68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e70:	d901      	bls.n	8006e76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e006      	b.n	8006e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d0f0      	beq.n	8006e64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006ea8:	d901      	bls.n	8006eae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e018      	b.n	8006ee0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	daf2      	bge.n	8006e9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2210      	movs	r2, #16
 8006ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006ecc:	d901      	bls.n	8006ed2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e006      	b.n	8006ee0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	2b10      	cmp	r3, #16
 8006edc:	d0f0      	beq.n	8006ec0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	78fb      	ldrb	r3, [r7, #3]
 8006f06:	68f9      	ldr	r1, [r7, #12]
 8006f08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b087      	sub	sp, #28
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 0306 	and.w	r3, r3, #6
 8006f36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d102      	bne.n	8006f44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	75fb      	strb	r3, [r7, #23]
 8006f42:	e00a      	b.n	8006f5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d002      	beq.n	8006f50 <USB_GetDevSpeed+0x32>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b06      	cmp	r3, #6
 8006f4e:	d102      	bne.n	8006f56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f50:	2302      	movs	r3, #2
 8006f52:	75fb      	strb	r3, [r7, #23]
 8006f54:	e001      	b.n	8006f5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f56:	230f      	movs	r3, #15
 8006f58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d13a      	bne.n	8006ffa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8a:	69da      	ldr	r2, [r3, #28]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f003 030f 	and.w	r3, r3, #15
 8006f94:	2101      	movs	r1, #1
 8006f96:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	68f9      	ldr	r1, [r7, #12]
 8006f9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d155      	bne.n	8007068 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	791b      	ldrb	r3, [r3, #4]
 8006fd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	059b      	lsls	r3, r3, #22
 8006fde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	0151      	lsls	r1, r2, #5
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	440a      	add	r2, r1
 8006fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	e036      	b.n	8007068 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007000:	69da      	ldr	r2, [r3, #28]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	f003 030f 	and.w	r3, r3, #15
 800700a:	2101      	movs	r1, #1
 800700c:	fa01 f303 	lsl.w	r3, r1, r3
 8007010:	041b      	lsls	r3, r3, #16
 8007012:	68f9      	ldr	r1, [r7, #12]
 8007014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007018:	4313      	orrs	r3, r2
 800701a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d11a      	bne.n	8007068 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	791b      	ldrb	r3, [r3, #4]
 800704c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800704e:	430b      	orrs	r3, r1
 8007050:	4313      	orrs	r3, r2
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800705e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007066:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
	...

08007078 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	785b      	ldrb	r3, [r3, #1]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d161      	bne.n	8007158 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070aa:	d11f      	bne.n	80070ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	0151      	lsls	r1, r2, #5
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	440a      	add	r2, r1
 80070e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	2101      	movs	r1, #1
 80070fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007102:	b29b      	uxth	r3, r3
 8007104:	43db      	mvns	r3, r3
 8007106:	68f9      	ldr	r1, [r7, #12]
 8007108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800710c:	4013      	ands	r3, r2
 800710e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007116:	69da      	ldr	r2, [r3, #28]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	f003 030f 	and.w	r3, r3, #15
 8007120:	2101      	movs	r1, #1
 8007122:	fa01 f303 	lsl.w	r3, r1, r3
 8007126:	b29b      	uxth	r3, r3
 8007128:	43db      	mvns	r3, r3
 800712a:	68f9      	ldr	r1, [r7, #12]
 800712c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007130:	4013      	ands	r3, r2
 8007132:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	0159      	lsls	r1, r3, #5
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	440b      	add	r3, r1
 800714a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714e:	4619      	mov	r1, r3
 8007150:	4b35      	ldr	r3, [pc, #212]	; (8007228 <USB_DeactivateEndpoint+0x1b0>)
 8007152:	4013      	ands	r3, r2
 8007154:	600b      	str	r3, [r1, #0]
 8007156:	e060      	b.n	800721a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800716a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800716e:	d11f      	bne.n	80071b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	0151      	lsls	r1, r2, #5
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	440a      	add	r2, r1
 8007186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800718a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800718e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	0151      	lsls	r1, r2, #5
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	440a      	add	r2, r1
 80071a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	f003 030f 	and.w	r3, r3, #15
 80071c0:	2101      	movs	r1, #1
 80071c2:	fa01 f303 	lsl.w	r3, r1, r3
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	43db      	mvns	r3, r3
 80071ca:	68f9      	ldr	r1, [r7, #12]
 80071cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071d0:	4013      	ands	r3, r2
 80071d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071da:	69da      	ldr	r2, [r3, #28]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	f003 030f 	and.w	r3, r3, #15
 80071e4:	2101      	movs	r1, #1
 80071e6:	fa01 f303 	lsl.w	r3, r1, r3
 80071ea:	041b      	lsls	r3, r3, #16
 80071ec:	43db      	mvns	r3, r3
 80071ee:	68f9      	ldr	r1, [r7, #12]
 80071f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071f4:	4013      	ands	r3, r2
 80071f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	0159      	lsls	r1, r3, #5
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	440b      	add	r3, r1
 800720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007212:	4619      	mov	r1, r3
 8007214:	4b05      	ldr	r3, [pc, #20]	; (800722c <USB_DeactivateEndpoint+0x1b4>)
 8007216:	4013      	ands	r3, r2
 8007218:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	ec337800 	.word	0xec337800
 800722c:	eff37800 	.word	0xeff37800

08007230 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08a      	sub	sp, #40	; 0x28
 8007234:	af02      	add	r7, sp, #8
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	4613      	mov	r3, r2
 800723c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	785b      	ldrb	r3, [r3, #1]
 800724c:	2b01      	cmp	r3, #1
 800724e:	f040 817a 	bne.w	8007546 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d132      	bne.n	80072c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	0151      	lsls	r1, r2, #5
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	440a      	add	r2, r1
 8007270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007274:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007278:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800727c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	0151      	lsls	r1, r2, #5
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	440a      	add	r2, r1
 8007294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800729c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	0151      	lsls	r1, r2, #5
 80072b0:	69fa      	ldr	r2, [r7, #28]
 80072b2:	440a      	add	r2, r1
 80072b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b8:	0cdb      	lsrs	r3, r3, #19
 80072ba:	04db      	lsls	r3, r3, #19
 80072bc:	6113      	str	r3, [r2, #16]
 80072be:	e092      	b.n	80073e6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	0151      	lsls	r1, r2, #5
 80072d2:	69fa      	ldr	r2, [r7, #28]
 80072d4:	440a      	add	r2, r1
 80072d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072da:	0cdb      	lsrs	r3, r3, #19
 80072dc:	04db      	lsls	r3, r3, #19
 80072de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	0151      	lsls	r1, r2, #5
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	440a      	add	r2, r1
 80072f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007302:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d11a      	bne.n	8007340 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	691a      	ldr	r2, [r3, #16]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	429a      	cmp	r2, r3
 8007314:	d903      	bls.n	800731e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	0151      	lsls	r1, r2, #5
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	440a      	add	r2, r1
 8007334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800733c:	6113      	str	r3, [r2, #16]
 800733e:	e01b      	b.n	8007378 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6919      	ldr	r1, [r3, #16]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	440b      	add	r3, r1
 8007358:	1e59      	subs	r1, r3, #1
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007362:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007364:	4ba2      	ldr	r3, [pc, #648]	; (80075f0 <USB_EPStartXfer+0x3c0>)
 8007366:	400b      	ands	r3, r1
 8007368:	69b9      	ldr	r1, [r7, #24]
 800736a:	0148      	lsls	r0, r1, #5
 800736c:	69f9      	ldr	r1, [r7, #28]
 800736e:	4401      	add	r1, r0
 8007370:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007374:	4313      	orrs	r3, r2
 8007376:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007384:	691a      	ldr	r2, [r3, #16]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800738e:	69b9      	ldr	r1, [r7, #24]
 8007390:	0148      	lsls	r0, r1, #5
 8007392:	69f9      	ldr	r1, [r7, #28]
 8007394:	4401      	add	r1, r0
 8007396:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800739a:	4313      	orrs	r3, r2
 800739c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	791b      	ldrb	r3, [r3, #4]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d11f      	bne.n	80073e6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	0151      	lsls	r1, r2, #5
 80073b8:	69fa      	ldr	r2, [r7, #28]
 80073ba:	440a      	add	r2, r1
 80073bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80073c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	0151      	lsls	r1, r2, #5
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	440a      	add	r2, r1
 80073dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d14b      	bne.n	8007484 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d009      	beq.n	8007408 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007400:	461a      	mov	r2, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	791b      	ldrb	r3, [r3, #4]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d128      	bne.n	8007462 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741c:	2b00      	cmp	r3, #0
 800741e:	d110      	bne.n	8007442 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	0151      	lsls	r1, r2, #5
 8007432:	69fa      	ldr	r2, [r7, #28]
 8007434:	440a      	add	r2, r1
 8007436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800743a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	e00f      	b.n	8007462 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	440a      	add	r2, r1
 8007458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007460:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	0151      	lsls	r1, r2, #5
 8007474:	69fa      	ldr	r2, [r7, #28]
 8007476:	440a      	add	r2, r1
 8007478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800747c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	e165      	b.n	8007750 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	0151      	lsls	r1, r2, #5
 8007496:	69fa      	ldr	r2, [r7, #28]
 8007498:	440a      	add	r2, r1
 800749a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800749e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	791b      	ldrb	r3, [r3, #4]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d015      	beq.n	80074d8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 814d 	beq.w	8007750 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	2101      	movs	r1, #1
 80074c8:	fa01 f303 	lsl.w	r3, r1, r3
 80074cc:	69f9      	ldr	r1, [r7, #28]
 80074ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074d2:	4313      	orrs	r3, r2
 80074d4:	634b      	str	r3, [r1, #52]	; 0x34
 80074d6:	e13b      	b.n	8007750 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d110      	bne.n	800750a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007502:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	e00f      	b.n	800752a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	0151      	lsls	r1, r2, #5
 800751c:	69fa      	ldr	r2, [r7, #28]
 800751e:	440a      	add	r2, r1
 8007520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007528:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	68d9      	ldr	r1, [r3, #12]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	781a      	ldrb	r2, [r3, #0]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	b298      	uxth	r0, r3
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	4603      	mov	r3, r0
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 f9b8 	bl	80078b4 <USB_WritePacket>
 8007544:	e104      	b.n	8007750 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	0151      	lsls	r1, r2, #5
 8007558:	69fa      	ldr	r2, [r7, #28]
 800755a:	440a      	add	r2, r1
 800755c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007560:	0cdb      	lsrs	r3, r3, #19
 8007562:	04db      	lsls	r3, r3, #19
 8007564:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	0151      	lsls	r1, r2, #5
 8007578:	69fa      	ldr	r2, [r7, #28]
 800757a:	440a      	add	r2, r1
 800757c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007580:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007584:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007588:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d131      	bne.n	80075f4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b4:	691a      	ldr	r2, [r3, #16]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075be:	69b9      	ldr	r1, [r7, #24]
 80075c0:	0148      	lsls	r0, r1, #5
 80075c2:	69f9      	ldr	r1, [r7, #28]
 80075c4:	4401      	add	r1, r0
 80075c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075ca:	4313      	orrs	r3, r2
 80075cc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	0151      	lsls	r1, r2, #5
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	440a      	add	r2, r1
 80075e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075ec:	6113      	str	r3, [r2, #16]
 80075ee:	e061      	b.n	80076b4 <USB_EPStartXfer+0x484>
 80075f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d123      	bne.n	8007644 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007608:	691a      	ldr	r2, [r3, #16]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007612:	69b9      	ldr	r1, [r7, #24]
 8007614:	0148      	lsls	r0, r1, #5
 8007616:	69f9      	ldr	r1, [r7, #28]
 8007618:	4401      	add	r1, r0
 800761a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800761e:	4313      	orrs	r3, r2
 8007620:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	0151      	lsls	r1, r2, #5
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	440a      	add	r2, r1
 8007638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800763c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007640:	6113      	str	r3, [r2, #16]
 8007642:	e037      	b.n	80076b4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	4413      	add	r3, r2
 800764e:	1e5a      	subs	r2, r3, #1
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	fbb2 f3f3 	udiv	r3, r2, r3
 8007658:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	8afa      	ldrh	r2, [r7, #22]
 8007660:	fb03 f202 	mul.w	r2, r3, r2
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	8afb      	ldrh	r3, [r7, #22]
 8007678:	04d9      	lsls	r1, r3, #19
 800767a:	4b38      	ldr	r3, [pc, #224]	; (800775c <USB_EPStartXfer+0x52c>)
 800767c:	400b      	ands	r3, r1
 800767e:	69b9      	ldr	r1, [r7, #24]
 8007680:	0148      	lsls	r0, r1, #5
 8007682:	69f9      	ldr	r1, [r7, #28]
 8007684:	4401      	add	r1, r0
 8007686:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800768a:	4313      	orrs	r3, r2
 800768c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	691a      	ldr	r2, [r3, #16]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076a4:	69b9      	ldr	r1, [r7, #24]
 80076a6:	0148      	lsls	r0, r1, #5
 80076a8:	69f9      	ldr	r1, [r7, #28]
 80076aa:	4401      	add	r1, r0
 80076ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076b0:	4313      	orrs	r3, r2
 80076b2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80076b4:	79fb      	ldrb	r3, [r7, #7]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d10d      	bne.n	80076d6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d009      	beq.n	80076d6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	68d9      	ldr	r1, [r3, #12]
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d2:	460a      	mov	r2, r1
 80076d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	791b      	ldrb	r3, [r3, #4]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d128      	bne.n	8007730 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d110      	bne.n	8007710 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	0151      	lsls	r1, r2, #5
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	440a      	add	r2, r1
 8007704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007708:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	e00f      	b.n	8007730 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	0151      	lsls	r1, r2, #5
 8007722:	69fa      	ldr	r2, [r7, #28]
 8007724:	440a      	add	r2, r1
 8007726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800772a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	0151      	lsls	r1, r2, #5
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	440a      	add	r2, r1
 8007746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800774e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3720      	adds	r7, #32
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	1ff80000 	.word	0x1ff80000

08007760 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	785b      	ldrb	r3, [r3, #1]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d14a      	bne.n	8007814 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	4413      	add	r3, r2
 8007788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007796:	f040 8086 	bne.w	80078a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	7812      	ldrb	r2, [r2, #0]
 80077ae:	0151      	lsls	r1, r2, #5
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	440a      	add	r2, r1
 80077b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	7812      	ldrb	r2, [r2, #0]
 80077d2:	0151      	lsls	r1, r2, #5
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	440a      	add	r2, r1
 80077d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3301      	adds	r3, #1
 80077e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d902      	bls.n	80077f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	75fb      	strb	r3, [r7, #23]
          break;
 80077f6:	e056      	b.n	80078a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800780c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007810:	d0e7      	beq.n	80077e2 <USB_EPStopXfer+0x82>
 8007812:	e048      	b.n	80078a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800782c:	d13b      	bne.n	80078a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	7812      	ldrb	r2, [r2, #0]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	440a      	add	r2, r1
 8007848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800784c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007850:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	7812      	ldrb	r2, [r2, #0]
 8007866:	0151      	lsls	r1, r2, #5
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	440a      	add	r2, r1
 800786c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007874:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3301      	adds	r3, #1
 800787a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007882:	4293      	cmp	r3, r2
 8007884:	d902      	bls.n	800788c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	75fb      	strb	r3, [r7, #23]
          break;
 800788a:	e00c      	b.n	80078a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078a4:	d0e7      	beq.n	8007876 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	371c      	adds	r7, #28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b089      	sub	sp, #36	; 0x24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	4611      	mov	r1, r2
 80078c0:	461a      	mov	r2, r3
 80078c2:	460b      	mov	r3, r1
 80078c4:	71fb      	strb	r3, [r7, #7]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80078d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d123      	bne.n	8007922 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80078da:	88bb      	ldrh	r3, [r7, #4]
 80078dc:	3303      	adds	r3, #3
 80078de:	089b      	lsrs	r3, r3, #2
 80078e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80078e2:	2300      	movs	r3, #0
 80078e4:	61bb      	str	r3, [r7, #24]
 80078e6:	e018      	b.n	800791a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	031a      	lsls	r2, r3, #12
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f4:	461a      	mov	r2, r3
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	3301      	adds	r3, #1
 8007900:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	3301      	adds	r3, #1
 8007906:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	3301      	adds	r3, #1
 800790c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	3301      	adds	r3, #1
 8007912:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	3301      	adds	r3, #1
 8007918:	61bb      	str	r3, [r7, #24]
 800791a:	69ba      	ldr	r2, [r7, #24]
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	429a      	cmp	r2, r3
 8007920:	d3e2      	bcc.n	80078e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3724      	adds	r7, #36	; 0x24
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007930:	b480      	push	{r7}
 8007932:	b08b      	sub	sp, #44	; 0x2c
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	4613      	mov	r3, r2
 800793c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	089b      	lsrs	r3, r3, #2
 800794a:	b29b      	uxth	r3, r3
 800794c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800794e:	88fb      	ldrh	r3, [r7, #6]
 8007950:	f003 0303 	and.w	r3, r3, #3
 8007954:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007956:	2300      	movs	r3, #0
 8007958:	623b      	str	r3, [r7, #32]
 800795a:	e014      	b.n	8007986 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	601a      	str	r2, [r3, #0]
    pDest++;
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	3301      	adds	r3, #1
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	3301      	adds	r3, #1
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	3301      	adds	r3, #1
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	3301      	adds	r3, #1
 800797e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	3301      	adds	r3, #1
 8007984:	623b      	str	r3, [r7, #32]
 8007986:	6a3a      	ldr	r2, [r7, #32]
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	429a      	cmp	r2, r3
 800798c:	d3e6      	bcc.n	800795c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800798e:	8bfb      	ldrh	r3, [r7, #30]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01e      	beq.n	80079d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007994:	2300      	movs	r3, #0
 8007996:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800799e:	461a      	mov	r2, r3
 80079a0:	f107 0310 	add.w	r3, r7, #16
 80079a4:	6812      	ldr	r2, [r2, #0]
 80079a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	fa22 f303 	lsr.w	r3, r2, r3
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	701a      	strb	r2, [r3, #0]
      i++;
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	3301      	adds	r3, #1
 80079be:	623b      	str	r3, [r7, #32]
      pDest++;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	3301      	adds	r3, #1
 80079c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80079c6:	8bfb      	ldrh	r3, [r7, #30]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80079cc:	8bfb      	ldrh	r3, [r7, #30]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1ea      	bne.n	80079a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	372c      	adds	r7, #44	; 0x2c
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d12c      	bne.n	8007a56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	db12      	blt.n	8007a34 <USB_EPSetStall+0x54>
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00f      	beq.n	8007a34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	0151      	lsls	r1, r2, #5
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	440a      	add	r2, r1
 8007a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	0151      	lsls	r1, r2, #5
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	440a      	add	r2, r1
 8007a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	e02b      	b.n	8007aae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	db12      	blt.n	8007a8e <USB_EPSetStall+0xae>
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00f      	beq.n	8007a8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	0151      	lsls	r1, r2, #5
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	440a      	add	r2, r1
 8007a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	0151      	lsls	r1, r2, #5
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007aac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d128      	bne.n	8007b2a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	0151      	lsls	r1, r2, #5
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	440a      	add	r2, r1
 8007aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007af2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007af6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	791b      	ldrb	r3, [r3, #4]
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d003      	beq.n	8007b08 <USB_EPClearStall+0x4c>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	791b      	ldrb	r3, [r3, #4]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d138      	bne.n	8007b7a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	0151      	lsls	r1, r2, #5
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	440a      	add	r2, r1
 8007b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	e027      	b.n	8007b7a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	0151      	lsls	r1, r2, #5
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	440a      	add	r2, r1
 8007b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	791b      	ldrb	r3, [r3, #4]
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d003      	beq.n	8007b5a <USB_EPClearStall+0x9e>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	791b      	ldrb	r3, [r3, #4]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d10f      	bne.n	8007b7a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	0151      	lsls	r1, r2, #5
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	440a      	add	r2, r1
 8007b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b78:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ba6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007baa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007bbc:	68f9      	ldr	r1, [r7, #12]
 8007bbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c02:	f023 0302 	bic.w	r3, r3, #2
 8007c06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b085      	sub	sp, #20
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c30:	f023 0303 	bic.w	r3, r3, #3
 8007c34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c44:	f043 0302 	orr.w	r3, r3, #2
 8007c48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c70:	68fb      	ldr	r3, [r7, #12]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b085      	sub	sp, #20
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	0c1b      	lsrs	r3, r3, #16
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b085      	sub	sp, #20
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	b29b      	uxth	r3, r3
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007cf6:	78fb      	ldrb	r3, [r7, #3]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	4013      	ands	r3, r2
 8007d12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d14:	68bb      	ldr	r3, [r7, #8]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b087      	sub	sp, #28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d52:	01db      	lsls	r3, r3, #7
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d70:	68bb      	ldr	r3, [r7, #8]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007db4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007db8:	f023 0307 	bic.w	r3, r3, #7
 8007dbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	460b      	mov	r3, r1
 8007dea:	607a      	str	r2, [r7, #4]
 8007dec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	333c      	adds	r3, #60	; 0x3c
 8007df6:	3304      	adds	r3, #4
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	4a26      	ldr	r2, [pc, #152]	; (8007e98 <USB_EP0_OutStart+0xb8>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d90a      	bls.n	8007e1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e14:	d101      	bne.n	8007e1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	e037      	b.n	8007e8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e20:	461a      	mov	r2, r3
 8007e22:	2300      	movs	r3, #0
 8007e24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e48:	f043 0318 	orr.w	r3, r3, #24
 8007e4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007e60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e62:	7afb      	ldrb	r3, [r7, #11]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d10f      	bne.n	8007e88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6e:	461a      	mov	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e82:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007e86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	4f54300a 	.word	0x4f54300a

08007e9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007eb4:	d901      	bls.n	8007eba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e01b      	b.n	8007ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	daf2      	bge.n	8007ea8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	f043 0201 	orr.w	r2, r3, #1
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007ede:	d901      	bls.n	8007ee4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e006      	b.n	8007ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d0f0      	beq.n	8007ed2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007efe:	b480      	push	{r7}
 8007f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007f02:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
	...

08007f10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f20:	f006 fa70 	bl	800e404 <USBD_static_malloc>
 8007f24:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d109      	bne.n	8007f40 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	32b0      	adds	r2, #176	; 0xb0
 8007f36:	2100      	movs	r1, #0
 8007f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	e0d4      	b.n	80080ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007f40:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007f44:	2100      	movs	r1, #0
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f006 fd74 	bl	800ea34 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	32b0      	adds	r2, #176	; 0xb0
 8007f56:	68f9      	ldr	r1, [r7, #12]
 8007f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	32b0      	adds	r2, #176	; 0xb0
 8007f66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	7c1b      	ldrb	r3, [r3, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d138      	bne.n	8007fea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f78:	4b5e      	ldr	r3, [pc, #376]	; (80080f4 <USBD_CDC_Init+0x1e4>)
 8007f7a:	7819      	ldrb	r1, [r3, #0]
 8007f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f80:	2202      	movs	r2, #2
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f006 f91b 	bl	800e1be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f88:	4b5a      	ldr	r3, [pc, #360]	; (80080f4 <USBD_CDC_Init+0x1e4>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	f003 020f 	and.w	r2, r3, #15
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	440b      	add	r3, r1
 8007f9c:	3324      	adds	r3, #36	; 0x24
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007fa2:	4b55      	ldr	r3, [pc, #340]	; (80080f8 <USBD_CDC_Init+0x1e8>)
 8007fa4:	7819      	ldrb	r1, [r3, #0]
 8007fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007faa:	2202      	movs	r2, #2
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f006 f906 	bl	800e1be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007fb2:	4b51      	ldr	r3, [pc, #324]	; (80080f8 <USBD_CDC_Init+0x1e8>)
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	f003 020f 	and.w	r2, r3, #15
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fca:	2201      	movs	r2, #1
 8007fcc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007fce:	4b4b      	ldr	r3, [pc, #300]	; (80080fc <USBD_CDC_Init+0x1ec>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	f003 020f 	and.w	r2, r3, #15
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	440b      	add	r3, r1
 8007fe2:	3326      	adds	r3, #38	; 0x26
 8007fe4:	2210      	movs	r2, #16
 8007fe6:	801a      	strh	r2, [r3, #0]
 8007fe8:	e035      	b.n	8008056 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007fea:	4b42      	ldr	r3, [pc, #264]	; (80080f4 <USBD_CDC_Init+0x1e4>)
 8007fec:	7819      	ldrb	r1, [r3, #0]
 8007fee:	2340      	movs	r3, #64	; 0x40
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f006 f8e3 	bl	800e1be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ff8:	4b3e      	ldr	r3, [pc, #248]	; (80080f4 <USBD_CDC_Init+0x1e4>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	f003 020f 	and.w	r2, r3, #15
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	4613      	mov	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	440b      	add	r3, r1
 800800c:	3324      	adds	r3, #36	; 0x24
 800800e:	2201      	movs	r2, #1
 8008010:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008012:	4b39      	ldr	r3, [pc, #228]	; (80080f8 <USBD_CDC_Init+0x1e8>)
 8008014:	7819      	ldrb	r1, [r3, #0]
 8008016:	2340      	movs	r3, #64	; 0x40
 8008018:	2202      	movs	r2, #2
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f006 f8cf 	bl	800e1be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008020:	4b35      	ldr	r3, [pc, #212]	; (80080f8 <USBD_CDC_Init+0x1e8>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	f003 020f 	and.w	r2, r3, #15
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	440b      	add	r3, r1
 8008034:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008038:	2201      	movs	r2, #1
 800803a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800803c:	4b2f      	ldr	r3, [pc, #188]	; (80080fc <USBD_CDC_Init+0x1ec>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	f003 020f 	and.w	r2, r3, #15
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	4613      	mov	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	440b      	add	r3, r1
 8008050:	3326      	adds	r3, #38	; 0x26
 8008052:	2210      	movs	r2, #16
 8008054:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008056:	4b29      	ldr	r3, [pc, #164]	; (80080fc <USBD_CDC_Init+0x1ec>)
 8008058:	7819      	ldrb	r1, [r3, #0]
 800805a:	2308      	movs	r3, #8
 800805c:	2203      	movs	r2, #3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f006 f8ad 	bl	800e1be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008064:	4b25      	ldr	r3, [pc, #148]	; (80080fc <USBD_CDC_Init+0x1ec>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	f003 020f 	and.w	r2, r3, #15
 800806c:	6879      	ldr	r1, [r7, #4]
 800806e:	4613      	mov	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	440b      	add	r3, r1
 8008078:	3324      	adds	r3, #36	; 0x24
 800807a:	2201      	movs	r2, #1
 800807c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	33b0      	adds	r3, #176	; 0xb0
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80080b4:	2302      	movs	r3, #2
 80080b6:	e018      	b.n	80080ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	7c1b      	ldrb	r3, [r3, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080c0:	4b0d      	ldr	r3, [pc, #52]	; (80080f8 <USBD_CDC_Init+0x1e8>)
 80080c2:	7819      	ldrb	r1, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f006 f964 	bl	800e39c <USBD_LL_PrepareReceive>
 80080d4:	e008      	b.n	80080e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080d6:	4b08      	ldr	r3, [pc, #32]	; (80080f8 <USBD_CDC_Init+0x1e8>)
 80080d8:	7819      	ldrb	r1, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080e0:	2340      	movs	r3, #64	; 0x40
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f006 f95a 	bl	800e39c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20000093 	.word	0x20000093
 80080f8:	20000094 	.word	0x20000094
 80080fc:	20000095 	.word	0x20000095

08008100 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800810c:	4b3a      	ldr	r3, [pc, #232]	; (80081f8 <USBD_CDC_DeInit+0xf8>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f006 f879 	bl	800e20a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008118:	4b37      	ldr	r3, [pc, #220]	; (80081f8 <USBD_CDC_DeInit+0xf8>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	f003 020f 	and.w	r2, r3, #15
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	4613      	mov	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	440b      	add	r3, r1
 800812c:	3324      	adds	r3, #36	; 0x24
 800812e:	2200      	movs	r2, #0
 8008130:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008132:	4b32      	ldr	r3, [pc, #200]	; (80081fc <USBD_CDC_DeInit+0xfc>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f006 f866 	bl	800e20a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800813e:	4b2f      	ldr	r3, [pc, #188]	; (80081fc <USBD_CDC_DeInit+0xfc>)
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	f003 020f 	and.w	r2, r3, #15
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008156:	2200      	movs	r2, #0
 8008158:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800815a:	4b29      	ldr	r3, [pc, #164]	; (8008200 <USBD_CDC_DeInit+0x100>)
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f006 f852 	bl	800e20a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008166:	4b26      	ldr	r3, [pc, #152]	; (8008200 <USBD_CDC_DeInit+0x100>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	f003 020f 	and.w	r2, r3, #15
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	4613      	mov	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	3324      	adds	r3, #36	; 0x24
 800817c:	2200      	movs	r2, #0
 800817e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008180:	4b1f      	ldr	r3, [pc, #124]	; (8008200 <USBD_CDC_DeInit+0x100>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	f003 020f 	and.w	r2, r3, #15
 8008188:	6879      	ldr	r1, [r7, #4]
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	440b      	add	r3, r1
 8008194:	3326      	adds	r3, #38	; 0x26
 8008196:	2200      	movs	r2, #0
 8008198:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	32b0      	adds	r2, #176	; 0xb0
 80081a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01f      	beq.n	80081ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	33b0      	adds	r3, #176	; 0xb0
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	32b0      	adds	r2, #176	; 0xb0
 80081ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f006 f926 	bl	800e420 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	32b0      	adds	r2, #176	; 0xb0
 80081de:	2100      	movs	r1, #0
 80081e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20000093 	.word	0x20000093
 80081fc:	20000094 	.word	0x20000094
 8008200:	20000095 	.word	0x20000095

08008204 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	32b0      	adds	r2, #176	; 0xb0
 8008218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008230:	2303      	movs	r3, #3
 8008232:	e0bf      	b.n	80083b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800823c:	2b00      	cmp	r3, #0
 800823e:	d050      	beq.n	80082e2 <USBD_CDC_Setup+0xde>
 8008240:	2b20      	cmp	r3, #32
 8008242:	f040 80af 	bne.w	80083a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	88db      	ldrh	r3, [r3, #6]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d03a      	beq.n	80082c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b25b      	sxtb	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	da1b      	bge.n	8008290 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	33b0      	adds	r3, #176	; 0xb0
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800826e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	88d2      	ldrh	r2, [r2, #6]
 8008274:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	88db      	ldrh	r3, [r3, #6]
 800827a:	2b07      	cmp	r3, #7
 800827c:	bf28      	it	cs
 800827e:	2307      	movcs	r3, #7
 8008280:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	89fa      	ldrh	r2, [r7, #14]
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 fd89 	bl	8009da0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800828e:	e090      	b.n	80083b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	785a      	ldrb	r2, [r3, #1]
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	88db      	ldrh	r3, [r3, #6]
 800829e:	2b3f      	cmp	r3, #63	; 0x3f
 80082a0:	d803      	bhi.n	80082aa <USBD_CDC_Setup+0xa6>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	88db      	ldrh	r3, [r3, #6]
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	e000      	b.n	80082ac <USBD_CDC_Setup+0xa8>
 80082aa:	2240      	movs	r2, #64	; 0x40
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80082b2:	6939      	ldr	r1, [r7, #16]
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80082ba:	461a      	mov	r2, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 fd9b 	bl	8009df8 <USBD_CtlPrepareRx>
      break;
 80082c2:	e076      	b.n	80083b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	33b0      	adds	r3, #176	; 0xb0
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	7850      	ldrb	r0, [r2, #1]
 80082da:	2200      	movs	r2, #0
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	4798      	blx	r3
      break;
 80082e0:	e067      	b.n	80083b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	785b      	ldrb	r3, [r3, #1]
 80082e6:	2b0b      	cmp	r3, #11
 80082e8:	d851      	bhi.n	800838e <USBD_CDC_Setup+0x18a>
 80082ea:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <USBD_CDC_Setup+0xec>)
 80082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f0:	08008321 	.word	0x08008321
 80082f4:	0800839d 	.word	0x0800839d
 80082f8:	0800838f 	.word	0x0800838f
 80082fc:	0800838f 	.word	0x0800838f
 8008300:	0800838f 	.word	0x0800838f
 8008304:	0800838f 	.word	0x0800838f
 8008308:	0800838f 	.word	0x0800838f
 800830c:	0800838f 	.word	0x0800838f
 8008310:	0800838f 	.word	0x0800838f
 8008314:	0800838f 	.word	0x0800838f
 8008318:	0800834b 	.word	0x0800834b
 800831c:	08008375 	.word	0x08008375
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b03      	cmp	r3, #3
 800832a:	d107      	bne.n	800833c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800832c:	f107 030a 	add.w	r3, r7, #10
 8008330:	2202      	movs	r2, #2
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 fd33 	bl	8009da0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800833a:	e032      	b.n	80083a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f001 fcbd 	bl	8009cbe <USBD_CtlError>
            ret = USBD_FAIL;
 8008344:	2303      	movs	r3, #3
 8008346:	75fb      	strb	r3, [r7, #23]
          break;
 8008348:	e02b      	b.n	80083a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b03      	cmp	r3, #3
 8008354:	d107      	bne.n	8008366 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008356:	f107 030d 	add.w	r3, r7, #13
 800835a:	2201      	movs	r2, #1
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 fd1e 	bl	8009da0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008364:	e01d      	b.n	80083a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 fca8 	bl	8009cbe <USBD_CtlError>
            ret = USBD_FAIL;
 800836e:	2303      	movs	r3, #3
 8008370:	75fb      	strb	r3, [r7, #23]
          break;
 8008372:	e016      	b.n	80083a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b03      	cmp	r3, #3
 800837e:	d00f      	beq.n	80083a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f001 fc9b 	bl	8009cbe <USBD_CtlError>
            ret = USBD_FAIL;
 8008388:	2303      	movs	r3, #3
 800838a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800838c:	e008      	b.n	80083a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 fc94 	bl	8009cbe <USBD_CtlError>
          ret = USBD_FAIL;
 8008396:	2303      	movs	r3, #3
 8008398:	75fb      	strb	r3, [r7, #23]
          break;
 800839a:	e002      	b.n	80083a2 <USBD_CDC_Setup+0x19e>
          break;
 800839c:	bf00      	nop
 800839e:	e008      	b.n	80083b2 <USBD_CDC_Setup+0x1ae>
          break;
 80083a0:	bf00      	nop
      }
      break;
 80083a2:	e006      	b.n	80083b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fc89 	bl	8009cbe <USBD_CtlError>
      ret = USBD_FAIL;
 80083ac:	2303      	movs	r3, #3
 80083ae:	75fb      	strb	r3, [r7, #23]
      break;
 80083b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	32b0      	adds	r2, #176	; 0xb0
 80083da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e065      	b.n	80084b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	32b0      	adds	r2, #176	; 0xb0
 80083f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	f003 020f 	and.w	r2, r3, #15
 80083fc:	6879      	ldr	r1, [r7, #4]
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	440b      	add	r3, r1
 8008408:	3318      	adds	r3, #24
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d02f      	beq.n	8008470 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	f003 020f 	and.w	r2, r3, #15
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	4613      	mov	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	440b      	add	r3, r1
 8008422:	3318      	adds	r3, #24
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	78fb      	ldrb	r3, [r7, #3]
 8008428:	f003 010f 	and.w	r1, r3, #15
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	460b      	mov	r3, r1
 8008430:	00db      	lsls	r3, r3, #3
 8008432:	440b      	add	r3, r1
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4403      	add	r3, r0
 8008438:	331c      	adds	r3, #28
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008440:	fb01 f303 	mul.w	r3, r1, r3
 8008444:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008446:	2b00      	cmp	r3, #0
 8008448:	d112      	bne.n	8008470 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800844a:	78fb      	ldrb	r3, [r7, #3]
 800844c:	f003 020f 	and.w	r2, r3, #15
 8008450:	6879      	ldr	r1, [r7, #4]
 8008452:	4613      	mov	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	440b      	add	r3, r1
 800845c:	3318      	adds	r3, #24
 800845e:	2200      	movs	r2, #0
 8008460:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008462:	78f9      	ldrb	r1, [r7, #3]
 8008464:	2300      	movs	r3, #0
 8008466:	2200      	movs	r2, #0
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f005 ff76 	bl	800e35a <USBD_LL_Transmit>
 800846e:	e01f      	b.n	80084b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	33b0      	adds	r3, #176	; 0xb0
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4413      	add	r3, r2
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d010      	beq.n	80084b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	33b0      	adds	r3, #176	; 0xb0
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80084ac:	78fa      	ldrb	r2, [r7, #3]
 80084ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	460b      	mov	r3, r1
 80084c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	32b0      	adds	r2, #176	; 0xb0
 80084d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	32b0      	adds	r2, #176	; 0xb0
 80084e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e01a      	b.n	8008522 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f005 ff74 	bl	800e3de <USBD_LL_GetRxDataSize>
 80084f6:	4602      	mov	r2, r0
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	33b0      	adds	r3, #176	; 0xb0
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800851c:	4611      	mov	r1, r2
 800851e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	32b0      	adds	r2, #176	; 0xb0
 800853c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008540:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008548:	2303      	movs	r3, #3
 800854a:	e025      	b.n	8008598 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	33b0      	adds	r3, #176	; 0xb0
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d01a      	beq.n	8008596 <USBD_CDC_EP0_RxReady+0x6c>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008566:	2bff      	cmp	r3, #255	; 0xff
 8008568:	d015      	beq.n	8008596 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	33b0      	adds	r3, #176	; 0xb0
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008582:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800858a:	b292      	uxth	r2, r2
 800858c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	22ff      	movs	r2, #255	; 0xff
 8008592:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085a8:	2182      	movs	r1, #130	; 0x82
 80085aa:	4818      	ldr	r0, [pc, #96]	; (800860c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085ac:	f000 fd4f 	bl	800904e <USBD_GetEpDesc>
 80085b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085b2:	2101      	movs	r1, #1
 80085b4:	4815      	ldr	r0, [pc, #84]	; (800860c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085b6:	f000 fd4a 	bl	800904e <USBD_GetEpDesc>
 80085ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085bc:	2181      	movs	r1, #129	; 0x81
 80085be:	4813      	ldr	r0, [pc, #76]	; (800860c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085c0:	f000 fd45 	bl	800904e <USBD_GetEpDesc>
 80085c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	2210      	movs	r2, #16
 80085d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d006      	beq.n	80085e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	2200      	movs	r2, #0
 80085dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085e0:	711a      	strb	r2, [r3, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d006      	beq.n	80085fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085f4:	711a      	strb	r2, [r3, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2243      	movs	r2, #67	; 0x43
 80085fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008600:	4b02      	ldr	r3, [pc, #8]	; (800860c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008602:	4618      	mov	r0, r3
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20000050 	.word	0x20000050

08008610 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008618:	2182      	movs	r1, #130	; 0x82
 800861a:	4818      	ldr	r0, [pc, #96]	; (800867c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800861c:	f000 fd17 	bl	800904e <USBD_GetEpDesc>
 8008620:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008622:	2101      	movs	r1, #1
 8008624:	4815      	ldr	r0, [pc, #84]	; (800867c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008626:	f000 fd12 	bl	800904e <USBD_GetEpDesc>
 800862a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800862c:	2181      	movs	r1, #129	; 0x81
 800862e:	4813      	ldr	r0, [pc, #76]	; (800867c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008630:	f000 fd0d 	bl	800904e <USBD_GetEpDesc>
 8008634:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2210      	movs	r2, #16
 8008640:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d006      	beq.n	8008656 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	2200      	movs	r2, #0
 800864c:	711a      	strb	r2, [r3, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f042 0202 	orr.w	r2, r2, #2
 8008654:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d006      	beq.n	800866a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	711a      	strb	r2, [r3, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f042 0202 	orr.w	r2, r2, #2
 8008668:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2243      	movs	r2, #67	; 0x43
 800866e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008670:	4b02      	ldr	r3, [pc, #8]	; (800867c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008672:	4618      	mov	r0, r3
 8008674:	3718      	adds	r7, #24
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20000050 	.word	0x20000050

08008680 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008688:	2182      	movs	r1, #130	; 0x82
 800868a:	4818      	ldr	r0, [pc, #96]	; (80086ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800868c:	f000 fcdf 	bl	800904e <USBD_GetEpDesc>
 8008690:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008692:	2101      	movs	r1, #1
 8008694:	4815      	ldr	r0, [pc, #84]	; (80086ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008696:	f000 fcda 	bl	800904e <USBD_GetEpDesc>
 800869a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800869c:	2181      	movs	r1, #129	; 0x81
 800869e:	4813      	ldr	r0, [pc, #76]	; (80086ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086a0:	f000 fcd5 	bl	800904e <USBD_GetEpDesc>
 80086a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2210      	movs	r2, #16
 80086b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d006      	beq.n	80086c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086c0:	711a      	strb	r2, [r3, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d006      	beq.n	80086da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086d4:	711a      	strb	r2, [r3, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2243      	movs	r2, #67	; 0x43
 80086de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80086e0:	4b02      	ldr	r3, [pc, #8]	; (80086ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	20000050 	.word	0x20000050

080086f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	220a      	movs	r2, #10
 80086fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80086fe:	4b03      	ldr	r3, [pc, #12]	; (800870c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	2000000c 	.word	0x2000000c

08008710 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008720:	2303      	movs	r3, #3
 8008722:	e009      	b.n	8008738 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	33b0      	adds	r3, #176	; 0xb0
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	32b0      	adds	r2, #176	; 0xb0
 800875a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008766:	2303      	movs	r3, #3
 8008768:	e008      	b.n	800877c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	371c      	adds	r7, #28
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	32b0      	adds	r2, #176	; 0xb0
 800879c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d101      	bne.n	80087ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e004      	b.n	80087b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
	...

080087c4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	32b0      	adds	r2, #176	; 0xb0
 80087d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087da:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80087dc:	2301      	movs	r3, #1
 80087de:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e025      	b.n	8008836 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d11f      	bne.n	8008834 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80087fc:	4b10      	ldr	r3, [pc, #64]	; (8008840 <USBD_CDC_TransmitPacket+0x7c>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	f003 020f 	and.w	r2, r3, #15
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	4613      	mov	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4403      	add	r3, r0
 8008816:	3318      	adds	r3, #24
 8008818:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800881a:	4b09      	ldr	r3, [pc, #36]	; (8008840 <USBD_CDC_TransmitPacket+0x7c>)
 800881c:	7819      	ldrb	r1, [r3, #0]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f005 fd95 	bl	800e35a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008834:	7bfb      	ldrb	r3, [r7, #15]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20000093 	.word	0x20000093

08008844 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	32b0      	adds	r2, #176	; 0xb0
 8008856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800885a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	32b0      	adds	r2, #176	; 0xb0
 8008866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800886e:	2303      	movs	r3, #3
 8008870:	e018      	b.n	80088a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	7c1b      	ldrb	r3, [r3, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10a      	bne.n	8008890 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800887a:	4b0c      	ldr	r3, [pc, #48]	; (80088ac <USBD_CDC_ReceivePacket+0x68>)
 800887c:	7819      	ldrb	r1, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f005 fd87 	bl	800e39c <USBD_LL_PrepareReceive>
 800888e:	e008      	b.n	80088a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008890:	4b06      	ldr	r3, [pc, #24]	; (80088ac <USBD_CDC_ReceivePacket+0x68>)
 8008892:	7819      	ldrb	r1, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800889a:	2340      	movs	r3, #64	; 0x40
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f005 fd7d 	bl	800e39c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20000094 	.word	0x20000094

080088b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	4613      	mov	r3, r2
 80088bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e01f      	b.n	8008908 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	79fa      	ldrb	r2, [r7, #7]
 80088fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f005 fbf7 	bl	800e0f0 <USBD_LL_Init>
 8008902:	4603      	mov	r3, r0
 8008904:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008906:	7dfb      	ldrb	r3, [r7, #23]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3718      	adds	r7, #24
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008924:	2303      	movs	r3, #3
 8008926:	e025      	b.n	8008974 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	683a      	ldr	r2, [r7, #0]
 800892c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	32ae      	adds	r2, #174	; 0xae
 800893a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00f      	beq.n	8008964 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	32ae      	adds	r2, #174	; 0xae
 800894e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008954:	f107 020e 	add.w	r2, r7, #14
 8008958:	4610      	mov	r0, r2
 800895a:	4798      	blx	r3
 800895c:	4602      	mov	r2, r0
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f005 fbff 	bl	800e188 <USBD_LL_Start>
 800898a:	4603      	mov	r3, r0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800899c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	460b      	mov	r3, r1
 80089b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d009      	beq.n	80089d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	78fa      	ldrb	r2, [r7, #3]
 80089ce:	4611      	mov	r1, r2
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	4798      	blx	r3
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	460b      	mov	r3, r1
 80089ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	78fa      	ldrb	r2, [r7, #3]
 80089fc:	4611      	mov	r1, r2
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	4798      	blx	r3
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f001 f90e 	bl	8009c4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a4a:	f003 031f 	and.w	r3, r3, #31
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d01a      	beq.n	8008a88 <USBD_LL_SetupStage+0x72>
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d822      	bhi.n	8008a9c <USBD_LL_SetupStage+0x86>
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <USBD_LL_SetupStage+0x4a>
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d00a      	beq.n	8008a74 <USBD_LL_SetupStage+0x5e>
 8008a5e:	e01d      	b.n	8008a9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fb65 	bl	8009138 <USBD_StdDevReq>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73fb      	strb	r3, [r7, #15]
      break;
 8008a72:	e020      	b.n	8008ab6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fbcd 	bl	800921c <USBD_StdItfReq>
 8008a82:	4603      	mov	r3, r0
 8008a84:	73fb      	strb	r3, [r7, #15]
      break;
 8008a86:	e016      	b.n	8008ab6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fc2f 	bl	80092f4 <USBD_StdEPReq>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73fb      	strb	r3, [r7, #15]
      break;
 8008a9a:	e00c      	b.n	8008ab6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008aa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f005 fbcc 	bl	800e248 <USBD_LL_StallEP>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab4:	bf00      	nop
  }

  return ret;
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008ad2:	7afb      	ldrb	r3, [r7, #11]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d16e      	bne.n	8008bb6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008ade:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	f040 8098 	bne.w	8008c1c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d913      	bls.n	8008b20 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	689a      	ldr	r2, [r3, #8]
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	1ad2      	subs	r2, r2, r3
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	bf28      	it	cs
 8008b12:	4613      	movcs	r3, r2
 8008b14:	461a      	mov	r2, r3
 8008b16:	6879      	ldr	r1, [r7, #4]
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f001 f98a 	bl	8009e32 <USBD_CtlContinueRx>
 8008b1e:	e07d      	b.n	8008c1c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b26:	f003 031f 	and.w	r3, r3, #31
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d014      	beq.n	8008b58 <USBD_LL_DataOutStage+0x98>
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d81d      	bhi.n	8008b6e <USBD_LL_DataOutStage+0xae>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <USBD_LL_DataOutStage+0x7c>
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d003      	beq.n	8008b42 <USBD_LL_DataOutStage+0x82>
 8008b3a:	e018      	b.n	8008b6e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	75bb      	strb	r3, [r7, #22]
            break;
 8008b40:	e018      	b.n	8008b74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 fa64 	bl	800901a <USBD_CoreFindIF>
 8008b52:	4603      	mov	r3, r0
 8008b54:	75bb      	strb	r3, [r7, #22]
            break;
 8008b56:	e00d      	b.n	8008b74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	4619      	mov	r1, r3
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 fa66 	bl	8009034 <USBD_CoreFindEP>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	75bb      	strb	r3, [r7, #22]
            break;
 8008b6c:	e002      	b.n	8008b74 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	75bb      	strb	r3, [r7, #22]
            break;
 8008b72:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b74:	7dbb      	ldrb	r3, [r7, #22]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d119      	bne.n	8008bae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	d113      	bne.n	8008bae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008b86:	7dba      	ldrb	r2, [r7, #22]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	32ae      	adds	r2, #174	; 0xae
 8008b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00b      	beq.n	8008bae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008b96:	7dba      	ldrb	r2, [r7, #22]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008b9e:	7dba      	ldrb	r2, [r7, #22]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	32ae      	adds	r2, #174	; 0xae
 8008ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f001 f950 	bl	8009e54 <USBD_CtlSendStatus>
 8008bb4:	e032      	b.n	8008c1c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008bb6:	7afb      	ldrb	r3, [r7, #11]
 8008bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f000 fa37 	bl	8009034 <USBD_CoreFindEP>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bca:	7dbb      	ldrb	r3, [r7, #22]
 8008bcc:	2bff      	cmp	r3, #255	; 0xff
 8008bce:	d025      	beq.n	8008c1c <USBD_LL_DataOutStage+0x15c>
 8008bd0:	7dbb      	ldrb	r3, [r7, #22]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d122      	bne.n	8008c1c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d117      	bne.n	8008c12 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008be2:	7dba      	ldrb	r2, [r7, #22]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	32ae      	adds	r2, #174	; 0xae
 8008be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00f      	beq.n	8008c12 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008bf2:	7dba      	ldrb	r2, [r7, #22]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008bfa:	7dba      	ldrb	r2, [r7, #22]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	32ae      	adds	r2, #174	; 0xae
 8008c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	7afa      	ldrb	r2, [r7, #11]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	4798      	blx	r3
 8008c0e:	4603      	mov	r3, r0
 8008c10:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
 8008c1a:	e000      	b.n	8008c1e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b086      	sub	sp, #24
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	60f8      	str	r0, [r7, #12]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	607a      	str	r2, [r7, #4]
 8008c32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008c34:	7afb      	ldrb	r3, [r7, #11]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d16f      	bne.n	8008d1a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3314      	adds	r3, #20
 8008c3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d15a      	bne.n	8008d00 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	689a      	ldr	r2, [r3, #8]
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d914      	bls.n	8008c80 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	689a      	ldr	r2, [r3, #8]
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6879      	ldr	r1, [r7, #4]
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f001 f8b2 	bl	8009dd6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c72:	2300      	movs	r3, #0
 8008c74:	2200      	movs	r2, #0
 8008c76:	2100      	movs	r1, #0
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f005 fb8f 	bl	800e39c <USBD_LL_PrepareReceive>
 8008c7e:	e03f      	b.n	8008d00 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	68da      	ldr	r2, [r3, #12]
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d11c      	bne.n	8008cc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d316      	bcc.n	8008cc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d20f      	bcs.n	8008cc6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2100      	movs	r1, #0
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f001 f893 	bl	8009dd6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cb8:	2300      	movs	r3, #0
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f005 fb6c 	bl	800e39c <USBD_LL_PrepareReceive>
 8008cc4:	e01c      	b.n	8008d00 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d10f      	bne.n	8008cf2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d009      	beq.n	8008cf2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cf2:	2180      	movs	r1, #128	; 0x80
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f005 faa7 	bl	800e248 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f001 f8bd 	bl	8009e7a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d03a      	beq.n	8008d80 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f7ff fe42 	bl	8008994 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d18:	e032      	b.n	8008d80 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d1a:	7afb      	ldrb	r3, [r7, #11]
 8008d1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	4619      	mov	r1, r3
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 f985 	bl	8009034 <USBD_CoreFindEP>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	2bff      	cmp	r3, #255	; 0xff
 8008d32:	d025      	beq.n	8008d80 <USBD_LL_DataInStage+0x15a>
 8008d34:	7dfb      	ldrb	r3, [r7, #23]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d122      	bne.n	8008d80 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	d11c      	bne.n	8008d80 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d46:	7dfa      	ldrb	r2, [r7, #23]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	32ae      	adds	r2, #174	; 0xae
 8008d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d014      	beq.n	8008d80 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008d56:	7dfa      	ldrb	r2, [r7, #23]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d5e:	7dfa      	ldrb	r2, [r7, #23]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	32ae      	adds	r2, #174	; 0xae
 8008d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d68:	695b      	ldr	r3, [r3, #20]
 8008d6a:	7afa      	ldrb	r2, [r7, #11]
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	4798      	blx	r3
 8008d72:	4603      	mov	r3, r0
 8008d74:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d76:	7dbb      	ldrb	r3, [r7, #22]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008d7c:	7dbb      	ldrb	r3, [r7, #22]
 8008d7e:	e000      	b.n	8008d82 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d014      	beq.n	8008df0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00e      	beq.n	8008df0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	6852      	ldr	r2, [r2, #4]
 8008dde:	b2d2      	uxtb	r2, r2
 8008de0:	4611      	mov	r1, r2
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	4798      	blx	r3
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008dec:	2303      	movs	r3, #3
 8008dee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008df0:	2340      	movs	r3, #64	; 0x40
 8008df2:	2200      	movs	r2, #0
 8008df4:	2100      	movs	r1, #0
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f005 f9e1 	bl	800e1be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2240      	movs	r2, #64	; 0x40
 8008e08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e0c:	2340      	movs	r3, #64	; 0x40
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2180      	movs	r1, #128	; 0x80
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f005 f9d3 	bl	800e1be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2240      	movs	r2, #64	; 0x40
 8008e22:	621a      	str	r2, [r3, #32]

  return ret;
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b083      	sub	sp, #12
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	460b      	mov	r3, r1
 8008e38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	78fa      	ldrb	r2, [r7, #3]
 8008e3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	d006      	beq.n	8008e70 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2204      	movs	r2, #4
 8008e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b083      	sub	sp, #12
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d106      	bne.n	8008ea8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	d110      	bne.n	8008eec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d005      	beq.n	8008eec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	460b      	mov	r3, r1
 8008f00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	32ae      	adds	r2, #174	; 0xae
 8008f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e01c      	b.n	8008f52 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	d115      	bne.n	8008f50 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	32ae      	adds	r2, #174	; 0xae
 8008f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00b      	beq.n	8008f50 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	32ae      	adds	r2, #174	; 0xae
 8008f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	78fa      	ldrb	r2, [r7, #3]
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b082      	sub	sp, #8
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	460b      	mov	r3, r1
 8008f64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	32ae      	adds	r2, #174	; 0xae
 8008f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d101      	bne.n	8008f7c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e01c      	b.n	8008fb6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b03      	cmp	r3, #3
 8008f86:	d115      	bne.n	8008fb4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	32ae      	adds	r2, #174	; 0xae
 8008f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00b      	beq.n	8008fb4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	32ae      	adds	r2, #174	; 0xae
 8008fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	78fa      	ldrb	r2, [r7, #3]
 8008fae:	4611      	mov	r1, r2
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00e      	beq.n	8009010 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	6852      	ldr	r2, [r2, #4]
 8008ffe:	b2d2      	uxtb	r2, r2
 8009000:	4611      	mov	r1, r2
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	4798      	blx	r3
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800900c:	2303      	movs	r3, #3
 800900e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009010:	7bfb      	ldrb	r3, [r7, #15]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800901a:	b480      	push	{r7}
 800901c:	b083      	sub	sp, #12
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	460b      	mov	r3, r1
 8009024:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009026:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009028:	4618      	mov	r0, r3
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009040:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009042:	4618      	mov	r0, r3
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b086      	sub	sp, #24
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009062:	2300      	movs	r3, #0
 8009064:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	885b      	ldrh	r3, [r3, #2]
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	b29b      	uxth	r3, r3
 8009072:	429a      	cmp	r2, r3
 8009074:	d920      	bls.n	80090b8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	b29b      	uxth	r3, r3
 800907c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800907e:	e013      	b.n	80090a8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009080:	f107 030a 	add.w	r3, r7, #10
 8009084:	4619      	mov	r1, r3
 8009086:	6978      	ldr	r0, [r7, #20]
 8009088:	f000 f81b 	bl	80090c2 <USBD_GetNextDesc>
 800908c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	785b      	ldrb	r3, [r3, #1]
 8009092:	2b05      	cmp	r3, #5
 8009094:	d108      	bne.n	80090a8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	789b      	ldrb	r3, [r3, #2]
 800909e:	78fa      	ldrb	r2, [r7, #3]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d008      	beq.n	80090b6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80090a4:	2300      	movs	r3, #0
 80090a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	885b      	ldrh	r3, [r3, #2]
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	897b      	ldrh	r3, [r7, #10]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d8e5      	bhi.n	8009080 <USBD_GetEpDesc+0x32>
 80090b4:	e000      	b.n	80090b8 <USBD_GetEpDesc+0x6a>
          break;
 80090b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80090b8:	693b      	ldr	r3, [r7, #16]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b085      	sub	sp, #20
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	881a      	ldrh	r2, [r3, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	b29b      	uxth	r3, r3
 80090da:	4413      	add	r3, r2
 80090dc:	b29a      	uxth	r2, r3
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4413      	add	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090ee:	68fb      	ldr	r3, [r7, #12]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b087      	sub	sp, #28
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	3301      	adds	r3, #1
 8009112:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800911a:	8a3b      	ldrh	r3, [r7, #16]
 800911c:	021b      	lsls	r3, r3, #8
 800911e:	b21a      	sxth	r2, r3
 8009120:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009124:	4313      	orrs	r3, r2
 8009126:	b21b      	sxth	r3, r3
 8009128:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800912a:	89fb      	ldrh	r3, [r7, #14]
}
 800912c:	4618      	mov	r0, r3
 800912e:	371c      	adds	r7, #28
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800914e:	2b40      	cmp	r3, #64	; 0x40
 8009150:	d005      	beq.n	800915e <USBD_StdDevReq+0x26>
 8009152:	2b40      	cmp	r3, #64	; 0x40
 8009154:	d857      	bhi.n	8009206 <USBD_StdDevReq+0xce>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00f      	beq.n	800917a <USBD_StdDevReq+0x42>
 800915a:	2b20      	cmp	r3, #32
 800915c:	d153      	bne.n	8009206 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	32ae      	adds	r2, #174	; 0xae
 8009168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	4798      	blx	r3
 8009174:	4603      	mov	r3, r0
 8009176:	73fb      	strb	r3, [r7, #15]
      break;
 8009178:	e04a      	b.n	8009210 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	785b      	ldrb	r3, [r3, #1]
 800917e:	2b09      	cmp	r3, #9
 8009180:	d83b      	bhi.n	80091fa <USBD_StdDevReq+0xc2>
 8009182:	a201      	add	r2, pc, #4	; (adr r2, 8009188 <USBD_StdDevReq+0x50>)
 8009184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009188:	080091dd 	.word	0x080091dd
 800918c:	080091f1 	.word	0x080091f1
 8009190:	080091fb 	.word	0x080091fb
 8009194:	080091e7 	.word	0x080091e7
 8009198:	080091fb 	.word	0x080091fb
 800919c:	080091bb 	.word	0x080091bb
 80091a0:	080091b1 	.word	0x080091b1
 80091a4:	080091fb 	.word	0x080091fb
 80091a8:	080091d3 	.word	0x080091d3
 80091ac:	080091c5 	.word	0x080091c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fa3c 	bl	8009630 <USBD_GetDescriptor>
          break;
 80091b8:	e024      	b.n	8009204 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fba1 	bl	8009904 <USBD_SetAddress>
          break;
 80091c2:	e01f      	b.n	8009204 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fbe0 	bl	800998c <USBD_SetConfig>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73fb      	strb	r3, [r7, #15]
          break;
 80091d0:	e018      	b.n	8009204 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fc83 	bl	8009ae0 <USBD_GetConfig>
          break;
 80091da:	e013      	b.n	8009204 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fcb4 	bl	8009b4c <USBD_GetStatus>
          break;
 80091e4:	e00e      	b.n	8009204 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fce3 	bl	8009bb4 <USBD_SetFeature>
          break;
 80091ee:	e009      	b.n	8009204 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fd07 	bl	8009c06 <USBD_ClrFeature>
          break;
 80091f8:	e004      	b.n	8009204 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fd5e 	bl	8009cbe <USBD_CtlError>
          break;
 8009202:	bf00      	nop
      }
      break;
 8009204:	e004      	b.n	8009210 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fd58 	bl	8009cbe <USBD_CtlError>
      break;
 800920e:	bf00      	nop
  }

  return ret;
 8009210:	7bfb      	ldrb	r3, [r7, #15]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop

0800921c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009232:	2b40      	cmp	r3, #64	; 0x40
 8009234:	d005      	beq.n	8009242 <USBD_StdItfReq+0x26>
 8009236:	2b40      	cmp	r3, #64	; 0x40
 8009238:	d852      	bhi.n	80092e0 <USBD_StdItfReq+0xc4>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <USBD_StdItfReq+0x26>
 800923e:	2b20      	cmp	r3, #32
 8009240:	d14e      	bne.n	80092e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009248:	b2db      	uxtb	r3, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	2b02      	cmp	r3, #2
 800924e:	d840      	bhi.n	80092d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	889b      	ldrh	r3, [r3, #4]
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b01      	cmp	r3, #1
 8009258:	d836      	bhi.n	80092c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	889b      	ldrh	r3, [r3, #4]
 800925e:	b2db      	uxtb	r3, r3
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff fed9 	bl	800901a <USBD_CoreFindIF>
 8009268:	4603      	mov	r3, r0
 800926a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	2bff      	cmp	r3, #255	; 0xff
 8009270:	d01d      	beq.n	80092ae <USBD_StdItfReq+0x92>
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d11a      	bne.n	80092ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009278:	7bba      	ldrb	r2, [r7, #14]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	32ae      	adds	r2, #174	; 0xae
 800927e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00f      	beq.n	80092a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009288:	7bba      	ldrb	r2, [r7, #14]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009290:	7bba      	ldrb	r2, [r7, #14]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	32ae      	adds	r2, #174	; 0xae
 8009296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	4798      	blx	r3
 80092a2:	4603      	mov	r3, r0
 80092a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092a6:	e004      	b.n	80092b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80092a8:	2303      	movs	r3, #3
 80092aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092ac:	e001      	b.n	80092b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80092ae:	2303      	movs	r3, #3
 80092b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	88db      	ldrh	r3, [r3, #6]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d110      	bne.n	80092dc <USBD_StdItfReq+0xc0>
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10d      	bne.n	80092dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fdc7 	bl	8009e54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092c6:	e009      	b.n	80092dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fcf7 	bl	8009cbe <USBD_CtlError>
          break;
 80092d0:	e004      	b.n	80092dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fcf2 	bl	8009cbe <USBD_CtlError>
          break;
 80092da:	e000      	b.n	80092de <USBD_StdItfReq+0xc2>
          break;
 80092dc:	bf00      	nop
      }
      break;
 80092de:	e004      	b.n	80092ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fceb 	bl	8009cbe <USBD_CtlError>
      break;
 80092e8:	bf00      	nop
  }

  return ret;
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	889b      	ldrh	r3, [r3, #4]
 8009306:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009310:	2b40      	cmp	r3, #64	; 0x40
 8009312:	d007      	beq.n	8009324 <USBD_StdEPReq+0x30>
 8009314:	2b40      	cmp	r3, #64	; 0x40
 8009316:	f200 817f 	bhi.w	8009618 <USBD_StdEPReq+0x324>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d02a      	beq.n	8009374 <USBD_StdEPReq+0x80>
 800931e:	2b20      	cmp	r3, #32
 8009320:	f040 817a 	bne.w	8009618 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009324:	7bbb      	ldrb	r3, [r7, #14]
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7ff fe83 	bl	8009034 <USBD_CoreFindEP>
 800932e:	4603      	mov	r3, r0
 8009330:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009332:	7b7b      	ldrb	r3, [r7, #13]
 8009334:	2bff      	cmp	r3, #255	; 0xff
 8009336:	f000 8174 	beq.w	8009622 <USBD_StdEPReq+0x32e>
 800933a:	7b7b      	ldrb	r3, [r7, #13]
 800933c:	2b00      	cmp	r3, #0
 800933e:	f040 8170 	bne.w	8009622 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009342:	7b7a      	ldrb	r2, [r7, #13]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800934a:	7b7a      	ldrb	r2, [r7, #13]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	32ae      	adds	r2, #174	; 0xae
 8009350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 8163 	beq.w	8009622 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800935c:	7b7a      	ldrb	r2, [r7, #13]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	32ae      	adds	r2, #174	; 0xae
 8009362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	4798      	blx	r3
 800936e:	4603      	mov	r3, r0
 8009370:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009372:	e156      	b.n	8009622 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	785b      	ldrb	r3, [r3, #1]
 8009378:	2b03      	cmp	r3, #3
 800937a:	d008      	beq.n	800938e <USBD_StdEPReq+0x9a>
 800937c:	2b03      	cmp	r3, #3
 800937e:	f300 8145 	bgt.w	800960c <USBD_StdEPReq+0x318>
 8009382:	2b00      	cmp	r3, #0
 8009384:	f000 809b 	beq.w	80094be <USBD_StdEPReq+0x1ca>
 8009388:	2b01      	cmp	r3, #1
 800938a:	d03c      	beq.n	8009406 <USBD_StdEPReq+0x112>
 800938c:	e13e      	b.n	800960c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b02      	cmp	r3, #2
 8009398:	d002      	beq.n	80093a0 <USBD_StdEPReq+0xac>
 800939a:	2b03      	cmp	r3, #3
 800939c:	d016      	beq.n	80093cc <USBD_StdEPReq+0xd8>
 800939e:	e02c      	b.n	80093fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00d      	beq.n	80093c2 <USBD_StdEPReq+0xce>
 80093a6:	7bbb      	ldrb	r3, [r7, #14]
 80093a8:	2b80      	cmp	r3, #128	; 0x80
 80093aa:	d00a      	beq.n	80093c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f004 ff49 	bl	800e248 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093b6:	2180      	movs	r1, #128	; 0x80
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f004 ff45 	bl	800e248 <USBD_LL_StallEP>
 80093be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093c0:	e020      	b.n	8009404 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fc7a 	bl	8009cbe <USBD_CtlError>
              break;
 80093ca:	e01b      	b.n	8009404 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	885b      	ldrh	r3, [r3, #2]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10e      	bne.n	80093f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093d4:	7bbb      	ldrb	r3, [r7, #14]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00b      	beq.n	80093f2 <USBD_StdEPReq+0xfe>
 80093da:	7bbb      	ldrb	r3, [r7, #14]
 80093dc:	2b80      	cmp	r3, #128	; 0x80
 80093de:	d008      	beq.n	80093f2 <USBD_StdEPReq+0xfe>
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	88db      	ldrh	r3, [r3, #6]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d104      	bne.n	80093f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093e8:	7bbb      	ldrb	r3, [r7, #14]
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f004 ff2b 	bl	800e248 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fd2e 	bl	8009e54 <USBD_CtlSendStatus>

              break;
 80093f8:	e004      	b.n	8009404 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fc5e 	bl	8009cbe <USBD_CtlError>
              break;
 8009402:	bf00      	nop
          }
          break;
 8009404:	e107      	b.n	8009616 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b02      	cmp	r3, #2
 8009410:	d002      	beq.n	8009418 <USBD_StdEPReq+0x124>
 8009412:	2b03      	cmp	r3, #3
 8009414:	d016      	beq.n	8009444 <USBD_StdEPReq+0x150>
 8009416:	e04b      	b.n	80094b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00d      	beq.n	800943a <USBD_StdEPReq+0x146>
 800941e:	7bbb      	ldrb	r3, [r7, #14]
 8009420:	2b80      	cmp	r3, #128	; 0x80
 8009422:	d00a      	beq.n	800943a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	4619      	mov	r1, r3
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f004 ff0d 	bl	800e248 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800942e:	2180      	movs	r1, #128	; 0x80
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f004 ff09 	bl	800e248 <USBD_LL_StallEP>
 8009436:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009438:	e040      	b.n	80094bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fc3e 	bl	8009cbe <USBD_CtlError>
              break;
 8009442:	e03b      	b.n	80094bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	885b      	ldrh	r3, [r3, #2]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d136      	bne.n	80094ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800944c:	7bbb      	ldrb	r3, [r7, #14]
 800944e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009452:	2b00      	cmp	r3, #0
 8009454:	d004      	beq.n	8009460 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009456:	7bbb      	ldrb	r3, [r7, #14]
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f004 ff13 	bl	800e286 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fcf7 	bl	8009e54 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7ff fde2 	bl	8009034 <USBD_CoreFindEP>
 8009470:	4603      	mov	r3, r0
 8009472:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009474:	7b7b      	ldrb	r3, [r7, #13]
 8009476:	2bff      	cmp	r3, #255	; 0xff
 8009478:	d01f      	beq.n	80094ba <USBD_StdEPReq+0x1c6>
 800947a:	7b7b      	ldrb	r3, [r7, #13]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d11c      	bne.n	80094ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009480:	7b7a      	ldrb	r2, [r7, #13]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009488:	7b7a      	ldrb	r2, [r7, #13]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	32ae      	adds	r2, #174	; 0xae
 800948e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d010      	beq.n	80094ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009498:	7b7a      	ldrb	r2, [r7, #13]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	32ae      	adds	r2, #174	; 0xae
 800949e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	4798      	blx	r3
 80094aa:	4603      	mov	r3, r0
 80094ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80094ae:	e004      	b.n	80094ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fc03 	bl	8009cbe <USBD_CtlError>
              break;
 80094b8:	e000      	b.n	80094bc <USBD_StdEPReq+0x1c8>
              break;
 80094ba:	bf00      	nop
          }
          break;
 80094bc:	e0ab      	b.n	8009616 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d002      	beq.n	80094d0 <USBD_StdEPReq+0x1dc>
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	d032      	beq.n	8009534 <USBD_StdEPReq+0x240>
 80094ce:	e097      	b.n	8009600 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d007      	beq.n	80094e6 <USBD_StdEPReq+0x1f2>
 80094d6:	7bbb      	ldrb	r3, [r7, #14]
 80094d8:	2b80      	cmp	r3, #128	; 0x80
 80094da:	d004      	beq.n	80094e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fbed 	bl	8009cbe <USBD_CtlError>
                break;
 80094e4:	e091      	b.n	800960a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	da0b      	bge.n	8009506 <USBD_StdEPReq+0x212>
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094f4:	4613      	mov	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	3310      	adds	r3, #16
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	4413      	add	r3, r2
 8009502:	3304      	adds	r3, #4
 8009504:	e00b      	b.n	800951e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800950c:	4613      	mov	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	4413      	add	r3, r2
 800951c:	3304      	adds	r3, #4
 800951e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2200      	movs	r2, #0
 8009524:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	2202      	movs	r2, #2
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fc37 	bl	8009da0 <USBD_CtlSendData>
              break;
 8009532:	e06a      	b.n	800960a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009538:	2b00      	cmp	r3, #0
 800953a:	da11      	bge.n	8009560 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800953c:	7bbb      	ldrb	r3, [r7, #14]
 800953e:	f003 020f 	and.w	r2, r3, #15
 8009542:	6879      	ldr	r1, [r7, #4]
 8009544:	4613      	mov	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	440b      	add	r3, r1
 800954e:	3324      	adds	r3, #36	; 0x24
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d117      	bne.n	8009586 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fbb0 	bl	8009cbe <USBD_CtlError>
                  break;
 800955e:	e054      	b.n	800960a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	f003 020f 	and.w	r2, r3, #15
 8009566:	6879      	ldr	r1, [r7, #4]
 8009568:	4613      	mov	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	440b      	add	r3, r1
 8009572:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009576:	881b      	ldrh	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d104      	bne.n	8009586 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800957c:	6839      	ldr	r1, [r7, #0]
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 fb9d 	bl	8009cbe <USBD_CtlError>
                  break;
 8009584:	e041      	b.n	800960a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009586:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800958a:	2b00      	cmp	r3, #0
 800958c:	da0b      	bge.n	80095a6 <USBD_StdEPReq+0x2b2>
 800958e:	7bbb      	ldrb	r3, [r7, #14]
 8009590:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009594:	4613      	mov	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4413      	add	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	3310      	adds	r3, #16
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	4413      	add	r3, r2
 80095a2:	3304      	adds	r3, #4
 80095a4:	e00b      	b.n	80095be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095ac:	4613      	mov	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	4413      	add	r3, r2
 80095bc:	3304      	adds	r3, #4
 80095be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <USBD_StdEPReq+0x2d8>
 80095c6:	7bbb      	ldrb	r3, [r7, #14]
 80095c8:	2b80      	cmp	r3, #128	; 0x80
 80095ca:	d103      	bne.n	80095d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	2200      	movs	r2, #0
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	e00e      	b.n	80095f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f004 fe73 	bl	800e2c4 <USBD_LL_IsStallEP>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d003      	beq.n	80095ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2201      	movs	r2, #1
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	e002      	b.n	80095f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2200      	movs	r2, #0
 80095f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	2202      	movs	r2, #2
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fbd1 	bl	8009da0 <USBD_CtlSendData>
              break;
 80095fe:	e004      	b.n	800960a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fb5b 	bl	8009cbe <USBD_CtlError>
              break;
 8009608:	bf00      	nop
          }
          break;
 800960a:	e004      	b.n	8009616 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fb55 	bl	8009cbe <USBD_CtlError>
          break;
 8009614:	bf00      	nop
      }
      break;
 8009616:	e005      	b.n	8009624 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009618:	6839      	ldr	r1, [r7, #0]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fb4f 	bl	8009cbe <USBD_CtlError>
      break;
 8009620:	e000      	b.n	8009624 <USBD_StdEPReq+0x330>
      break;
 8009622:	bf00      	nop
  }

  return ret;
 8009624:	7bfb      	ldrb	r3, [r7, #15]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
	...

08009630 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800963a:	2300      	movs	r3, #0
 800963c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800963e:	2300      	movs	r3, #0
 8009640:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009642:	2300      	movs	r3, #0
 8009644:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	885b      	ldrh	r3, [r3, #2]
 800964a:	0a1b      	lsrs	r3, r3, #8
 800964c:	b29b      	uxth	r3, r3
 800964e:	3b01      	subs	r3, #1
 8009650:	2b06      	cmp	r3, #6
 8009652:	f200 8128 	bhi.w	80098a6 <USBD_GetDescriptor+0x276>
 8009656:	a201      	add	r2, pc, #4	; (adr r2, 800965c <USBD_GetDescriptor+0x2c>)
 8009658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965c:	08009679 	.word	0x08009679
 8009660:	08009691 	.word	0x08009691
 8009664:	080096d1 	.word	0x080096d1
 8009668:	080098a7 	.word	0x080098a7
 800966c:	080098a7 	.word	0x080098a7
 8009670:	08009847 	.word	0x08009847
 8009674:	08009873 	.word	0x08009873
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	7c12      	ldrb	r2, [r2, #16]
 8009684:	f107 0108 	add.w	r1, r7, #8
 8009688:	4610      	mov	r0, r2
 800968a:	4798      	blx	r3
 800968c:	60f8      	str	r0, [r7, #12]
      break;
 800968e:	e112      	b.n	80098b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	7c1b      	ldrb	r3, [r3, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10d      	bne.n	80096b4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800969e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a0:	f107 0208 	add.w	r2, r7, #8
 80096a4:	4610      	mov	r0, r2
 80096a6:	4798      	blx	r3
 80096a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3301      	adds	r3, #1
 80096ae:	2202      	movs	r2, #2
 80096b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096b2:	e100      	b.n	80098b6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096bc:	f107 0208 	add.w	r2, r7, #8
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
 80096c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3301      	adds	r3, #1
 80096ca:	2202      	movs	r2, #2
 80096cc:	701a      	strb	r2, [r3, #0]
      break;
 80096ce:	e0f2      	b.n	80098b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	885b      	ldrh	r3, [r3, #2]
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b05      	cmp	r3, #5
 80096d8:	f200 80ac 	bhi.w	8009834 <USBD_GetDescriptor+0x204>
 80096dc:	a201      	add	r2, pc, #4	; (adr r2, 80096e4 <USBD_GetDescriptor+0xb4>)
 80096de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e2:	bf00      	nop
 80096e4:	080096fd 	.word	0x080096fd
 80096e8:	08009731 	.word	0x08009731
 80096ec:	08009765 	.word	0x08009765
 80096f0:	08009799 	.word	0x08009799
 80096f4:	080097cd 	.word	0x080097cd
 80096f8:	08009801 	.word	0x08009801
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00b      	beq.n	8009720 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	7c12      	ldrb	r2, [r2, #16]
 8009714:	f107 0108 	add.w	r1, r7, #8
 8009718:	4610      	mov	r0, r2
 800971a:	4798      	blx	r3
 800971c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800971e:	e091      	b.n	8009844 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009720:	6839      	ldr	r1, [r7, #0]
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 facb 	bl	8009cbe <USBD_CtlError>
            err++;
 8009728:	7afb      	ldrb	r3, [r7, #11]
 800972a:	3301      	adds	r3, #1
 800972c:	72fb      	strb	r3, [r7, #11]
          break;
 800972e:	e089      	b.n	8009844 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00b      	beq.n	8009754 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	7c12      	ldrb	r2, [r2, #16]
 8009748:	f107 0108 	add.w	r1, r7, #8
 800974c:	4610      	mov	r0, r2
 800974e:	4798      	blx	r3
 8009750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009752:	e077      	b.n	8009844 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 fab1 	bl	8009cbe <USBD_CtlError>
            err++;
 800975c:	7afb      	ldrb	r3, [r7, #11]
 800975e:	3301      	adds	r3, #1
 8009760:	72fb      	strb	r3, [r7, #11]
          break;
 8009762:	e06f      	b.n	8009844 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00b      	beq.n	8009788 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	7c12      	ldrb	r2, [r2, #16]
 800977c:	f107 0108 	add.w	r1, r7, #8
 8009780:	4610      	mov	r0, r2
 8009782:	4798      	blx	r3
 8009784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009786:	e05d      	b.n	8009844 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fa97 	bl	8009cbe <USBD_CtlError>
            err++;
 8009790:	7afb      	ldrb	r3, [r7, #11]
 8009792:	3301      	adds	r3, #1
 8009794:	72fb      	strb	r3, [r7, #11]
          break;
 8009796:	e055      	b.n	8009844 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00b      	beq.n	80097bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	7c12      	ldrb	r2, [r2, #16]
 80097b0:	f107 0108 	add.w	r1, r7, #8
 80097b4:	4610      	mov	r0, r2
 80097b6:	4798      	blx	r3
 80097b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ba:	e043      	b.n	8009844 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fa7d 	bl	8009cbe <USBD_CtlError>
            err++;
 80097c4:	7afb      	ldrb	r3, [r7, #11]
 80097c6:	3301      	adds	r3, #1
 80097c8:	72fb      	strb	r3, [r7, #11]
          break;
 80097ca:	e03b      	b.n	8009844 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00b      	beq.n	80097f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097de:	695b      	ldr	r3, [r3, #20]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	7c12      	ldrb	r2, [r2, #16]
 80097e4:	f107 0108 	add.w	r1, r7, #8
 80097e8:	4610      	mov	r0, r2
 80097ea:	4798      	blx	r3
 80097ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ee:	e029      	b.n	8009844 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097f0:	6839      	ldr	r1, [r7, #0]
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fa63 	bl	8009cbe <USBD_CtlError>
            err++;
 80097f8:	7afb      	ldrb	r3, [r7, #11]
 80097fa:	3301      	adds	r3, #1
 80097fc:	72fb      	strb	r3, [r7, #11]
          break;
 80097fe:	e021      	b.n	8009844 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00b      	beq.n	8009824 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	7c12      	ldrb	r2, [r2, #16]
 8009818:	f107 0108 	add.w	r1, r7, #8
 800981c:	4610      	mov	r0, r2
 800981e:	4798      	blx	r3
 8009820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009822:	e00f      	b.n	8009844 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fa49 	bl	8009cbe <USBD_CtlError>
            err++;
 800982c:	7afb      	ldrb	r3, [r7, #11]
 800982e:	3301      	adds	r3, #1
 8009830:	72fb      	strb	r3, [r7, #11]
          break;
 8009832:	e007      	b.n	8009844 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fa41 	bl	8009cbe <USBD_CtlError>
          err++;
 800983c:	7afb      	ldrb	r3, [r7, #11]
 800983e:	3301      	adds	r3, #1
 8009840:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009842:	bf00      	nop
      }
      break;
 8009844:	e037      	b.n	80098b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	7c1b      	ldrb	r3, [r3, #16]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d109      	bne.n	8009862 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009856:	f107 0208 	add.w	r2, r7, #8
 800985a:	4610      	mov	r0, r2
 800985c:	4798      	blx	r3
 800985e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009860:	e029      	b.n	80098b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009862:	6839      	ldr	r1, [r7, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fa2a 	bl	8009cbe <USBD_CtlError>
        err++;
 800986a:	7afb      	ldrb	r3, [r7, #11]
 800986c:	3301      	adds	r3, #1
 800986e:	72fb      	strb	r3, [r7, #11]
      break;
 8009870:	e021      	b.n	80098b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	7c1b      	ldrb	r3, [r3, #16]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10d      	bne.n	8009896 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009882:	f107 0208 	add.w	r2, r7, #8
 8009886:	4610      	mov	r0, r2
 8009888:	4798      	blx	r3
 800988a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	3301      	adds	r3, #1
 8009890:	2207      	movs	r2, #7
 8009892:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009894:	e00f      	b.n	80098b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fa10 	bl	8009cbe <USBD_CtlError>
        err++;
 800989e:	7afb      	ldrb	r3, [r7, #11]
 80098a0:	3301      	adds	r3, #1
 80098a2:	72fb      	strb	r3, [r7, #11]
      break;
 80098a4:	e007      	b.n	80098b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fa08 	bl	8009cbe <USBD_CtlError>
      err++;
 80098ae:	7afb      	ldrb	r3, [r7, #11]
 80098b0:	3301      	adds	r3, #1
 80098b2:	72fb      	strb	r3, [r7, #11]
      break;
 80098b4:	bf00      	nop
  }

  if (err != 0U)
 80098b6:	7afb      	ldrb	r3, [r7, #11]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d11e      	bne.n	80098fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	88db      	ldrh	r3, [r3, #6]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d016      	beq.n	80098f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80098c4:	893b      	ldrh	r3, [r7, #8]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00e      	beq.n	80098e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	88da      	ldrh	r2, [r3, #6]
 80098ce:	893b      	ldrh	r3, [r7, #8]
 80098d0:	4293      	cmp	r3, r2
 80098d2:	bf28      	it	cs
 80098d4:	4613      	movcs	r3, r2
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098da:	893b      	ldrh	r3, [r7, #8]
 80098dc:	461a      	mov	r2, r3
 80098de:	68f9      	ldr	r1, [r7, #12]
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fa5d 	bl	8009da0 <USBD_CtlSendData>
 80098e6:	e009      	b.n	80098fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f9e7 	bl	8009cbe <USBD_CtlError>
 80098f0:	e004      	b.n	80098fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 faae 	bl	8009e54 <USBD_CtlSendStatus>
 80098f8:	e000      	b.n	80098fc <USBD_GetDescriptor+0x2cc>
    return;
 80098fa:	bf00      	nop
  }
}
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop

08009904 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	889b      	ldrh	r3, [r3, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d131      	bne.n	800997a <USBD_SetAddress+0x76>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	88db      	ldrh	r3, [r3, #6]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d12d      	bne.n	800997a <USBD_SetAddress+0x76>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	885b      	ldrh	r3, [r3, #2]
 8009922:	2b7f      	cmp	r3, #127	; 0x7f
 8009924:	d829      	bhi.n	800997a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	885b      	ldrh	r3, [r3, #2]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009930:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b03      	cmp	r3, #3
 800993c:	d104      	bne.n	8009948 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 f9bc 	bl	8009cbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009946:	e01d      	b.n	8009984 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	7bfa      	ldrb	r2, [r7, #15]
 800994c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f004 fce1 	bl	800e31c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fa7a 	bl	8009e54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d004      	beq.n	8009970 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2202      	movs	r2, #2
 800996a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800996e:	e009      	b.n	8009984 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009978:	e004      	b.n	8009984 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f99e 	bl	8009cbe <USBD_CtlError>
  }
}
 8009982:	bf00      	nop
 8009984:	bf00      	nop
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	885b      	ldrh	r3, [r3, #2]
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	4b4e      	ldr	r3, [pc, #312]	; (8009adc <USBD_SetConfig+0x150>)
 80099a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099a4:	4b4d      	ldr	r3, [pc, #308]	; (8009adc <USBD_SetConfig+0x150>)
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d905      	bls.n	80099b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f985 	bl	8009cbe <USBD_CtlError>
    return USBD_FAIL;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e08c      	b.n	8009ad2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d002      	beq.n	80099ca <USBD_SetConfig+0x3e>
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	d029      	beq.n	8009a1c <USBD_SetConfig+0x90>
 80099c8:	e075      	b.n	8009ab6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099ca:	4b44      	ldr	r3, [pc, #272]	; (8009adc <USBD_SetConfig+0x150>)
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d020      	beq.n	8009a14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80099d2:	4b42      	ldr	r3, [pc, #264]	; (8009adc <USBD_SetConfig+0x150>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099dc:	4b3f      	ldr	r3, [pc, #252]	; (8009adc <USBD_SetConfig+0x150>)
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7fe ffe1 	bl	80089aa <USBD_SetClassConfig>
 80099e8:	4603      	mov	r3, r0
 80099ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d008      	beq.n	8009a04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f962 	bl	8009cbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2202      	movs	r2, #2
 80099fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a02:	e065      	b.n	8009ad0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fa25 	bl	8009e54 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2203      	movs	r2, #3
 8009a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a12:	e05d      	b.n	8009ad0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fa1d 	bl	8009e54 <USBD_CtlSendStatus>
      break;
 8009a1a:	e059      	b.n	8009ad0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a1c:	4b2f      	ldr	r3, [pc, #188]	; (8009adc <USBD_SetConfig+0x150>)
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d112      	bne.n	8009a4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009a2c:	4b2b      	ldr	r3, [pc, #172]	; (8009adc <USBD_SetConfig+0x150>)
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	461a      	mov	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a36:	4b29      	ldr	r3, [pc, #164]	; (8009adc <USBD_SetConfig+0x150>)
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7fe ffd0 	bl	80089e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fa06 	bl	8009e54 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a48:	e042      	b.n	8009ad0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a4a:	4b24      	ldr	r3, [pc, #144]	; (8009adc <USBD_SetConfig+0x150>)
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d02a      	beq.n	8009aae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7fe ffbe 	bl	80089e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a66:	4b1d      	ldr	r3, [pc, #116]	; (8009adc <USBD_SetConfig+0x150>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a70:	4b1a      	ldr	r3, [pc, #104]	; (8009adc <USBD_SetConfig+0x150>)
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	4619      	mov	r1, r3
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7fe ff97 	bl	80089aa <USBD_SetClassConfig>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00f      	beq.n	8009aa6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f918 	bl	8009cbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7fe ffa3 	bl	80089e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009aa4:	e014      	b.n	8009ad0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f9d4 	bl	8009e54 <USBD_CtlSendStatus>
      break;
 8009aac:	e010      	b.n	8009ad0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f9d0 	bl	8009e54 <USBD_CtlSendStatus>
      break;
 8009ab4:	e00c      	b.n	8009ad0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009ab6:	6839      	ldr	r1, [r7, #0]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f900 	bl	8009cbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009abe:	4b07      	ldr	r3, [pc, #28]	; (8009adc <USBD_SetConfig+0x150>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7fe ff8c 	bl	80089e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009aca:	2303      	movs	r3, #3
 8009acc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ace:	bf00      	nop
  }

  return ret;
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	20002d80 	.word	0x20002d80

08009ae0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	88db      	ldrh	r3, [r3, #6]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d004      	beq.n	8009afc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f8e2 	bl	8009cbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009afa:	e023      	b.n	8009b44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	dc02      	bgt.n	8009b0e <USBD_GetConfig+0x2e>
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	dc03      	bgt.n	8009b14 <USBD_GetConfig+0x34>
 8009b0c:	e015      	b.n	8009b3a <USBD_GetConfig+0x5a>
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d00b      	beq.n	8009b2a <USBD_GetConfig+0x4a>
 8009b12:	e012      	b.n	8009b3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	2201      	movs	r2, #1
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f93c 	bl	8009da0 <USBD_CtlSendData>
        break;
 8009b28:	e00c      	b.n	8009b44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	3304      	adds	r3, #4
 8009b2e:	2201      	movs	r2, #1
 8009b30:	4619      	mov	r1, r3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f934 	bl	8009da0 <USBD_CtlSendData>
        break;
 8009b38:	e004      	b.n	8009b44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 f8be 	bl	8009cbe <USBD_CtlError>
        break;
 8009b42:	bf00      	nop
}
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d81e      	bhi.n	8009ba2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	88db      	ldrh	r3, [r3, #6]
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d004      	beq.n	8009b76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f8a5 	bl	8009cbe <USBD_CtlError>
        break;
 8009b74:	e01a      	b.n	8009bac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d005      	beq.n	8009b92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f043 0202 	orr.w	r2, r3, #2
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	330c      	adds	r3, #12
 8009b96:	2202      	movs	r2, #2
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f900 	bl	8009da0 <USBD_CtlSendData>
      break;
 8009ba0:	e004      	b.n	8009bac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f88a 	bl	8009cbe <USBD_CtlError>
      break;
 8009baa:	bf00      	nop
  }
}
 8009bac:	bf00      	nop
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	885b      	ldrh	r3, [r3, #2]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d107      	bne.n	8009bd6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f940 	bl	8009e54 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009bd4:	e013      	b.n	8009bfe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	885b      	ldrh	r3, [r3, #2]
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d10b      	bne.n	8009bf6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	889b      	ldrh	r3, [r3, #4]
 8009be2:	0a1b      	lsrs	r3, r3, #8
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f930 	bl	8009e54 <USBD_CtlSendStatus>
}
 8009bf4:	e003      	b.n	8009bfe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f860 	bl	8009cbe <USBD_CtlError>
}
 8009bfe:	bf00      	nop
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b082      	sub	sp, #8
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d80b      	bhi.n	8009c36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	885b      	ldrh	r3, [r3, #2]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d10c      	bne.n	8009c40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f910 	bl	8009e54 <USBD_CtlSendStatus>
      }
      break;
 8009c34:	e004      	b.n	8009c40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 f840 	bl	8009cbe <USBD_CtlError>
      break;
 8009c3e:	e000      	b.n	8009c42 <USBD_ClrFeature+0x3c>
      break;
 8009c40:	bf00      	nop
  }
}
 8009c42:	bf00      	nop
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b084      	sub	sp, #16
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	781a      	ldrb	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	3301      	adds	r3, #1
 8009c64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	781a      	ldrb	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3301      	adds	r3, #1
 8009c72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f7ff fa41 	bl	80090fc <SWAPBYTE>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3301      	adds	r3, #1
 8009c86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f7ff fa34 	bl	80090fc <SWAPBYTE>
 8009c94:	4603      	mov	r3, r0
 8009c96:	461a      	mov	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff fa27 	bl	80090fc <SWAPBYTE>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	80da      	strh	r2, [r3, #6]
}
 8009cb6:	bf00      	nop
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b082      	sub	sp, #8
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cc8:	2180      	movs	r1, #128	; 0x80
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f004 fabc 	bl	800e248 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f004 fab8 	bl	800e248 <USBD_LL_StallEP>
}
 8009cd8:	bf00      	nop
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cec:	2300      	movs	r3, #0
 8009cee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d036      	beq.n	8009d64 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009cfa:	6938      	ldr	r0, [r7, #16]
 8009cfc:	f000 f836 	bl	8009d6c <USBD_GetLen>
 8009d00:	4603      	mov	r3, r0
 8009d02:	3301      	adds	r3, #1
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	4413      	add	r3, r2
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	7812      	ldrb	r2, [r2, #0]
 8009d18:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	4413      	add	r3, r2
 8009d26:	2203      	movs	r2, #3
 8009d28:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d30:	e013      	b.n	8009d5a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	4413      	add	r3, r2
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	7812      	ldrb	r2, [r2, #0]
 8009d3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	3301      	adds	r3, #1
 8009d42:	613b      	str	r3, [r7, #16]
    idx++;
 8009d44:	7dfb      	ldrb	r3, [r7, #23]
 8009d46:	3301      	adds	r3, #1
 8009d48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	4413      	add	r3, r2
 8009d50:	2200      	movs	r2, #0
 8009d52:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
 8009d56:	3301      	adds	r3, #1
 8009d58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1e7      	bne.n	8009d32 <USBD_GetString+0x52>
 8009d62:	e000      	b.n	8009d66 <USBD_GetString+0x86>
    return;
 8009d64:	bf00      	nop
  }
}
 8009d66:	3718      	adds	r7, #24
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d7c:	e005      	b.n	8009d8a <USBD_GetLen+0x1e>
  {
    len++;
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	3301      	adds	r3, #1
 8009d82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	3301      	adds	r3, #1
 8009d88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1f5      	bne.n	8009d7e <USBD_GetLen+0x12>
  }

  return len;
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2202      	movs	r2, #2
 8009db0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f004 fac7 	bl	800e35a <USBD_LL_Transmit>

  return USBD_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b084      	sub	sp, #16
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	60f8      	str	r0, [r7, #12]
 8009dde:	60b9      	str	r1, [r7, #8]
 8009de0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	2100      	movs	r1, #0
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f004 fab6 	bl	800e35a <USBD_LL_Transmit>

  return USBD_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2203      	movs	r2, #3
 8009e08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	2100      	movs	r1, #0
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f004 faba 	bl	800e39c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	60f8      	str	r0, [r7, #12]
 8009e3a:	60b9      	str	r1, [r7, #8]
 8009e3c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	2100      	movs	r1, #0
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f004 faa9 	bl	800e39c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2204      	movs	r2, #4
 8009e60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e64:	2300      	movs	r3, #0
 8009e66:	2200      	movs	r2, #0
 8009e68:	2100      	movs	r1, #0
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f004 fa75 	bl	800e35a <USBD_LL_Transmit>

  return USBD_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b082      	sub	sp, #8
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2205      	movs	r2, #5
 8009e86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2100      	movs	r1, #0
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f004 fa83 	bl	800e39c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009eaa:	79fb      	ldrb	r3, [r7, #7]
 8009eac:	4a08      	ldr	r2, [pc, #32]	; (8009ed0 <disk_status+0x30>)
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	79fa      	ldrb	r2, [r7, #7]
 8009eb8:	4905      	ldr	r1, [pc, #20]	; (8009ed0 <disk_status+0x30>)
 8009eba:	440a      	add	r2, r1
 8009ebc:	7a12      	ldrb	r2, [r2, #8]
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	4798      	blx	r3
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	20002dac 	.word	0x20002dac

08009ed4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009ee2:	79fb      	ldrb	r3, [r7, #7]
 8009ee4:	4a0e      	ldr	r2, [pc, #56]	; (8009f20 <disk_initialize+0x4c>)
 8009ee6:	5cd3      	ldrb	r3, [r2, r3]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d114      	bne.n	8009f16 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009eec:	79fb      	ldrb	r3, [r7, #7]
 8009eee:	4a0c      	ldr	r2, [pc, #48]	; (8009f20 <disk_initialize+0x4c>)
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	79fa      	ldrb	r2, [r7, #7]
 8009efa:	4909      	ldr	r1, [pc, #36]	; (8009f20 <disk_initialize+0x4c>)
 8009efc:	440a      	add	r2, r1
 8009efe:	7a12      	ldrb	r2, [r2, #8]
 8009f00:	4610      	mov	r0, r2
 8009f02:	4798      	blx	r3
 8009f04:	4603      	mov	r3, r0
 8009f06:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d103      	bne.n	8009f16 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009f0e:	79fb      	ldrb	r3, [r7, #7]
 8009f10:	4a03      	ldr	r2, [pc, #12]	; (8009f20 <disk_initialize+0x4c>)
 8009f12:	2101      	movs	r1, #1
 8009f14:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	20002dac 	.word	0x20002dac

08009f24 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009f24:	b590      	push	{r4, r7, lr}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60b9      	str	r1, [r7, #8]
 8009f2c:	607a      	str	r2, [r7, #4]
 8009f2e:	603b      	str	r3, [r7, #0]
 8009f30:	4603      	mov	r3, r0
 8009f32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009f34:	7bfb      	ldrb	r3, [r7, #15]
 8009f36:	4a0a      	ldr	r2, [pc, #40]	; (8009f60 <disk_read+0x3c>)
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	689c      	ldr	r4, [r3, #8]
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
 8009f42:	4a07      	ldr	r2, [pc, #28]	; (8009f60 <disk_read+0x3c>)
 8009f44:	4413      	add	r3, r2
 8009f46:	7a18      	ldrb	r0, [r3, #8]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	68b9      	ldr	r1, [r7, #8]
 8009f4e:	47a0      	blx	r4
 8009f50:	4603      	mov	r3, r0
 8009f52:	75fb      	strb	r3, [r7, #23]
  return res;
 8009f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	371c      	adds	r7, #28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd90      	pop	{r4, r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20002dac 	.word	0x20002dac

08009f64 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009f64:	b590      	push	{r4, r7, lr}
 8009f66:	b087      	sub	sp, #28
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60b9      	str	r1, [r7, #8]
 8009f6c:	607a      	str	r2, [r7, #4]
 8009f6e:	603b      	str	r3, [r7, #0]
 8009f70:	4603      	mov	r3, r0
 8009f72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009f74:	7bfb      	ldrb	r3, [r7, #15]
 8009f76:	4a0a      	ldr	r2, [pc, #40]	; (8009fa0 <disk_write+0x3c>)
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	68dc      	ldr	r4, [r3, #12]
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
 8009f82:	4a07      	ldr	r2, [pc, #28]	; (8009fa0 <disk_write+0x3c>)
 8009f84:	4413      	add	r3, r2
 8009f86:	7a18      	ldrb	r0, [r3, #8]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	68b9      	ldr	r1, [r7, #8]
 8009f8e:	47a0      	blx	r4
 8009f90:	4603      	mov	r3, r0
 8009f92:	75fb      	strb	r3, [r7, #23]
  return res;
 8009f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	371c      	adds	r7, #28
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd90      	pop	{r4, r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	20002dac 	.word	0x20002dac

08009fa4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	4603      	mov	r3, r0
 8009fac:	603a      	str	r2, [r7, #0]
 8009fae:	71fb      	strb	r3, [r7, #7]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009fb4:	79fb      	ldrb	r3, [r7, #7]
 8009fb6:	4a09      	ldr	r2, [pc, #36]	; (8009fdc <disk_ioctl+0x38>)
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	79fa      	ldrb	r2, [r7, #7]
 8009fc2:	4906      	ldr	r1, [pc, #24]	; (8009fdc <disk_ioctl+0x38>)
 8009fc4:	440a      	add	r2, r1
 8009fc6:	7a10      	ldrb	r0, [r2, #8]
 8009fc8:	79b9      	ldrb	r1, [r7, #6]
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	4798      	blx	r3
 8009fce:	4603      	mov	r3, r0
 8009fd0:	73fb      	strb	r3, [r7, #15]
  return res;
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	20002dac 	.word	0x20002dac

08009fe0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	3301      	adds	r3, #1
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009ff0:	89fb      	ldrh	r3, [r7, #14]
 8009ff2:	021b      	lsls	r3, r3, #8
 8009ff4:	b21a      	sxth	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	b21b      	sxth	r3, r3
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	b21b      	sxth	r3, r3
 800a000:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a002:	89fb      	ldrh	r3, [r7, #14]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	3303      	adds	r3, #3
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	021b      	lsls	r3, r3, #8
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	3202      	adds	r2, #2
 800a028:	7812      	ldrb	r2, [r2, #0]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	021b      	lsls	r3, r3, #8
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	3201      	adds	r2, #1
 800a036:	7812      	ldrb	r2, [r2, #0]
 800a038:	4313      	orrs	r3, r2
 800a03a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	021b      	lsls	r3, r3, #8
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	7812      	ldrb	r2, [r2, #0]
 800a044:	4313      	orrs	r3, r2
 800a046:	60fb      	str	r3, [r7, #12]
	return rv;
 800a048:	68fb      	ldr	r3, [r7, #12]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	460b      	mov	r3, r1
 800a060:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	1c5a      	adds	r2, r3, #1
 800a066:	607a      	str	r2, [r7, #4]
 800a068:	887a      	ldrh	r2, [r7, #2]
 800a06a:	b2d2      	uxtb	r2, r2
 800a06c:	701a      	strb	r2, [r3, #0]
 800a06e:	887b      	ldrh	r3, [r7, #2]
 800a070:	0a1b      	lsrs	r3, r3, #8
 800a072:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	1c5a      	adds	r2, r3, #1
 800a078:	607a      	str	r2, [r7, #4]
 800a07a:	887a      	ldrh	r2, [r7, #2]
 800a07c:	b2d2      	uxtb	r2, r2
 800a07e:	701a      	strb	r2, [r3, #0]
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	1c5a      	adds	r2, r3, #1
 800a09a:	607a      	str	r2, [r7, #4]
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	b2d2      	uxtb	r2, r2
 800a0a0:	701a      	strb	r2, [r3, #0]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	0a1b      	lsrs	r3, r3, #8
 800a0a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	607a      	str	r2, [r7, #4]
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	b2d2      	uxtb	r2, r2
 800a0b2:	701a      	strb	r2, [r3, #0]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	0a1b      	lsrs	r3, r3, #8
 800a0b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	1c5a      	adds	r2, r3, #1
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	b2d2      	uxtb	r2, r2
 800a0c4:	701a      	strb	r2, [r3, #0]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	0a1b      	lsrs	r3, r3, #8
 800a0ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	1c5a      	adds	r2, r3, #1
 800a0d0:	607a      	str	r2, [r7, #4]
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	b2d2      	uxtb	r2, r2
 800a0d6:	701a      	strb	r2, [r3, #0]
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a0e4:	b480      	push	{r7}
 800a0e6:	b087      	sub	sp, #28
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00d      	beq.n	800a11a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	1c53      	adds	r3, r2, #1
 800a102:	613b      	str	r3, [r7, #16]
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	1c59      	adds	r1, r3, #1
 800a108:	6179      	str	r1, [r7, #20]
 800a10a:	7812      	ldrb	r2, [r2, #0]
 800a10c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	3b01      	subs	r3, #1
 800a112:	607b      	str	r3, [r7, #4]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1f1      	bne.n	800a0fe <mem_cpy+0x1a>
	}
}
 800a11a:	bf00      	nop
 800a11c:	371c      	adds	r7, #28
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a126:	b480      	push	{r7}
 800a128:	b087      	sub	sp, #28
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	60f8      	str	r0, [r7, #12]
 800a12e:	60b9      	str	r1, [r7, #8]
 800a130:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	1c5a      	adds	r2, r3, #1
 800a13a:	617a      	str	r2, [r7, #20]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	b2d2      	uxtb	r2, r2
 800a140:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3b01      	subs	r3, #1
 800a146:	607b      	str	r3, [r7, #4]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1f3      	bne.n	800a136 <mem_set+0x10>
}
 800a14e:	bf00      	nop
 800a150:	bf00      	nop
 800a152:	371c      	adds	r7, #28
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a15c:	b480      	push	{r7}
 800a15e:	b089      	sub	sp, #36	; 0x24
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	61fb      	str	r3, [r7, #28]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	61fa      	str	r2, [r7, #28]
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	4619      	mov	r1, r3
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	1c5a      	adds	r2, r3, #1
 800a182:	61ba      	str	r2, [r7, #24]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	1acb      	subs	r3, r1, r3
 800a188:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	3b01      	subs	r3, #1
 800a18e:	607b      	str	r3, [r7, #4]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d002      	beq.n	800a19c <mem_cmp+0x40>
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d0eb      	beq.n	800a174 <mem_cmp+0x18>

	return r;
 800a19c:	697b      	ldr	r3, [r7, #20]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3724      	adds	r7, #36	; 0x24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a1aa:	b480      	push	{r7}
 800a1ac:	b083      	sub	sp, #12
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a1b4:	e002      	b.n	800a1bc <chk_chr+0x12>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	607b      	str	r3, [r7, #4]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d005      	beq.n	800a1d0 <chk_chr+0x26>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d1f2      	bne.n	800a1b6 <chk_chr+0xc>
	return *str;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60bb      	str	r3, [r7, #8]
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	e029      	b.n	800a248 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a1f4:	4a27      	ldr	r2, [pc, #156]	; (800a294 <chk_lock+0xb4>)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	011b      	lsls	r3, r3, #4
 800a1fa:	4413      	add	r3, r2
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d01d      	beq.n	800a23e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a202:	4a24      	ldr	r2, [pc, #144]	; (800a294 <chk_lock+0xb4>)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	011b      	lsls	r3, r3, #4
 800a208:	4413      	add	r3, r2
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	429a      	cmp	r2, r3
 800a212:	d116      	bne.n	800a242 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a214:	4a1f      	ldr	r2, [pc, #124]	; (800a294 <chk_lock+0xb4>)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	011b      	lsls	r3, r3, #4
 800a21a:	4413      	add	r3, r2
 800a21c:	3304      	adds	r3, #4
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a224:	429a      	cmp	r2, r3
 800a226:	d10c      	bne.n	800a242 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a228:	4a1a      	ldr	r2, [pc, #104]	; (800a294 <chk_lock+0xb4>)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	011b      	lsls	r3, r3, #4
 800a22e:	4413      	add	r3, r2
 800a230:	3308      	adds	r3, #8
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a238:	429a      	cmp	r2, r3
 800a23a:	d102      	bne.n	800a242 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a23c:	e007      	b.n	800a24e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a23e:	2301      	movs	r3, #1
 800a240:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3301      	adds	r3, #1
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d9d2      	bls.n	800a1f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2b02      	cmp	r3, #2
 800a252:	d109      	bne.n	800a268 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d102      	bne.n	800a260 <chk_lock+0x80>
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d101      	bne.n	800a264 <chk_lock+0x84>
 800a260:	2300      	movs	r3, #0
 800a262:	e010      	b.n	800a286 <chk_lock+0xa6>
 800a264:	2312      	movs	r3, #18
 800a266:	e00e      	b.n	800a286 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d108      	bne.n	800a280 <chk_lock+0xa0>
 800a26e:	4a09      	ldr	r2, [pc, #36]	; (800a294 <chk_lock+0xb4>)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	011b      	lsls	r3, r3, #4
 800a274:	4413      	add	r3, r2
 800a276:	330c      	adds	r3, #12
 800a278:	881b      	ldrh	r3, [r3, #0]
 800a27a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a27e:	d101      	bne.n	800a284 <chk_lock+0xa4>
 800a280:	2310      	movs	r3, #16
 800a282:	e000      	b.n	800a286 <chk_lock+0xa6>
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	20002d8c 	.word	0x20002d8c

0800a298 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	607b      	str	r3, [r7, #4]
 800a2a2:	e002      	b.n	800a2aa <enq_lock+0x12>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	607b      	str	r3, [r7, #4]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d806      	bhi.n	800a2be <enq_lock+0x26>
 800a2b0:	4a09      	ldr	r2, [pc, #36]	; (800a2d8 <enq_lock+0x40>)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	011b      	lsls	r3, r3, #4
 800a2b6:	4413      	add	r3, r2
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1f2      	bne.n	800a2a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	bf14      	ite	ne
 800a2c4:	2301      	movne	r3, #1
 800a2c6:	2300      	moveq	r3, #0
 800a2c8:	b2db      	uxtb	r3, r3
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	20002d8c 	.word	0x20002d8c

0800a2dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	60fb      	str	r3, [r7, #12]
 800a2ea:	e01f      	b.n	800a32c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a2ec:	4a41      	ldr	r2, [pc, #260]	; (800a3f4 <inc_lock+0x118>)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	011b      	lsls	r3, r3, #4
 800a2f2:	4413      	add	r3, r2
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d113      	bne.n	800a326 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a2fe:	4a3d      	ldr	r2, [pc, #244]	; (800a3f4 <inc_lock+0x118>)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	011b      	lsls	r3, r3, #4
 800a304:	4413      	add	r3, r2
 800a306:	3304      	adds	r3, #4
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a30e:	429a      	cmp	r2, r3
 800a310:	d109      	bne.n	800a326 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a312:	4a38      	ldr	r2, [pc, #224]	; (800a3f4 <inc_lock+0x118>)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	011b      	lsls	r3, r3, #4
 800a318:	4413      	add	r3, r2
 800a31a:	3308      	adds	r3, #8
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a322:	429a      	cmp	r2, r3
 800a324:	d006      	beq.n	800a334 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	3301      	adds	r3, #1
 800a32a:	60fb      	str	r3, [r7, #12]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d9dc      	bls.n	800a2ec <inc_lock+0x10>
 800a332:	e000      	b.n	800a336 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a334:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d132      	bne.n	800a3a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a33c:	2300      	movs	r3, #0
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	e002      	b.n	800a348 <inc_lock+0x6c>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	3301      	adds	r3, #1
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d806      	bhi.n	800a35c <inc_lock+0x80>
 800a34e:	4a29      	ldr	r2, [pc, #164]	; (800a3f4 <inc_lock+0x118>)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	011b      	lsls	r3, r3, #4
 800a354:	4413      	add	r3, r2
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1f2      	bne.n	800a342 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d101      	bne.n	800a366 <inc_lock+0x8a>
 800a362:	2300      	movs	r3, #0
 800a364:	e040      	b.n	800a3e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	4922      	ldr	r1, [pc, #136]	; (800a3f4 <inc_lock+0x118>)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	011b      	lsls	r3, r3, #4
 800a370:	440b      	add	r3, r1
 800a372:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	689a      	ldr	r2, [r3, #8]
 800a378:	491e      	ldr	r1, [pc, #120]	; (800a3f4 <inc_lock+0x118>)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	011b      	lsls	r3, r3, #4
 800a37e:	440b      	add	r3, r1
 800a380:	3304      	adds	r3, #4
 800a382:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	695a      	ldr	r2, [r3, #20]
 800a388:	491a      	ldr	r1, [pc, #104]	; (800a3f4 <inc_lock+0x118>)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	011b      	lsls	r3, r3, #4
 800a38e:	440b      	add	r3, r1
 800a390:	3308      	adds	r3, #8
 800a392:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a394:	4a17      	ldr	r2, [pc, #92]	; (800a3f4 <inc_lock+0x118>)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	011b      	lsls	r3, r3, #4
 800a39a:	4413      	add	r3, r2
 800a39c:	330c      	adds	r3, #12
 800a39e:	2200      	movs	r2, #0
 800a3a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d009      	beq.n	800a3bc <inc_lock+0xe0>
 800a3a8:	4a12      	ldr	r2, [pc, #72]	; (800a3f4 <inc_lock+0x118>)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	011b      	lsls	r3, r3, #4
 800a3ae:	4413      	add	r3, r2
 800a3b0:	330c      	adds	r3, #12
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <inc_lock+0xe0>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	e015      	b.n	800a3e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d108      	bne.n	800a3d4 <inc_lock+0xf8>
 800a3c2:	4a0c      	ldr	r2, [pc, #48]	; (800a3f4 <inc_lock+0x118>)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	4413      	add	r3, r2
 800a3ca:	330c      	adds	r3, #12
 800a3cc:	881b      	ldrh	r3, [r3, #0]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	e001      	b.n	800a3d8 <inc_lock+0xfc>
 800a3d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3d8:	4906      	ldr	r1, [pc, #24]	; (800a3f4 <inc_lock+0x118>)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	011b      	lsls	r3, r3, #4
 800a3de:	440b      	add	r3, r1
 800a3e0:	330c      	adds	r3, #12
 800a3e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	3301      	adds	r3, #1
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3714      	adds	r7, #20
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr
 800a3f4:	20002d8c 	.word	0x20002d8c

0800a3f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	3b01      	subs	r3, #1
 800a404:	607b      	str	r3, [r7, #4]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d825      	bhi.n	800a458 <dec_lock+0x60>
		n = Files[i].ctr;
 800a40c:	4a17      	ldr	r2, [pc, #92]	; (800a46c <dec_lock+0x74>)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	011b      	lsls	r3, r3, #4
 800a412:	4413      	add	r3, r2
 800a414:	330c      	adds	r3, #12
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a41a:	89fb      	ldrh	r3, [r7, #14]
 800a41c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a420:	d101      	bne.n	800a426 <dec_lock+0x2e>
 800a422:	2300      	movs	r3, #0
 800a424:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a426:	89fb      	ldrh	r3, [r7, #14]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d002      	beq.n	800a432 <dec_lock+0x3a>
 800a42c:	89fb      	ldrh	r3, [r7, #14]
 800a42e:	3b01      	subs	r3, #1
 800a430:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a432:	4a0e      	ldr	r2, [pc, #56]	; (800a46c <dec_lock+0x74>)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	011b      	lsls	r3, r3, #4
 800a438:	4413      	add	r3, r2
 800a43a:	330c      	adds	r3, #12
 800a43c:	89fa      	ldrh	r2, [r7, #14]
 800a43e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a440:	89fb      	ldrh	r3, [r7, #14]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d105      	bne.n	800a452 <dec_lock+0x5a>
 800a446:	4a09      	ldr	r2, [pc, #36]	; (800a46c <dec_lock+0x74>)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	011b      	lsls	r3, r3, #4
 800a44c:	4413      	add	r3, r2
 800a44e:	2200      	movs	r2, #0
 800a450:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	737b      	strb	r3, [r7, #13]
 800a456:	e001      	b.n	800a45c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a458:	2302      	movs	r3, #2
 800a45a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a45c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3714      	adds	r7, #20
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	20002d8c 	.word	0x20002d8c

0800a470 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]
 800a47c:	e010      	b.n	800a4a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a47e:	4a0d      	ldr	r2, [pc, #52]	; (800a4b4 <clear_lock+0x44>)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	011b      	lsls	r3, r3, #4
 800a484:	4413      	add	r3, r2
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d105      	bne.n	800a49a <clear_lock+0x2a>
 800a48e:	4a09      	ldr	r2, [pc, #36]	; (800a4b4 <clear_lock+0x44>)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	011b      	lsls	r3, r3, #4
 800a494:	4413      	add	r3, r2
 800a496:	2200      	movs	r2, #0
 800a498:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3301      	adds	r3, #1
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d9eb      	bls.n	800a47e <clear_lock+0xe>
	}
}
 800a4a6:	bf00      	nop
 800a4a8:	bf00      	nop
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	20002d8c 	.word	0x20002d8c

0800a4b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	78db      	ldrb	r3, [r3, #3]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d034      	beq.n	800a536 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	7858      	ldrb	r0, [r3, #1]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a4dc:	2301      	movs	r3, #1
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	f7ff fd40 	bl	8009f64 <disk_write>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d002      	beq.n	800a4f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	73fb      	strb	r3, [r7, #15]
 800a4ee:	e022      	b.n	800a536 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	1ad2      	subs	r2, r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	429a      	cmp	r2, r3
 800a504:	d217      	bcs.n	800a536 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	789b      	ldrb	r3, [r3, #2]
 800a50a:	613b      	str	r3, [r7, #16]
 800a50c:	e010      	b.n	800a530 <sync_window+0x78>
					wsect += fs->fsize;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	69db      	ldr	r3, [r3, #28]
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	4413      	add	r3, r2
 800a516:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	7858      	ldrb	r0, [r3, #1]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a522:	2301      	movs	r3, #1
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	f7ff fd1d 	bl	8009f64 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	3b01      	subs	r3, #1
 800a52e:	613b      	str	r3, [r7, #16]
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	2b01      	cmp	r3, #1
 800a534:	d8eb      	bhi.n	800a50e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a536:	7bfb      	ldrb	r3, [r7, #15]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a552:	683a      	ldr	r2, [r7, #0]
 800a554:	429a      	cmp	r2, r3
 800a556:	d01b      	beq.n	800a590 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff ffad 	bl	800a4b8 <sync_window>
 800a55e:	4603      	mov	r3, r0
 800a560:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d113      	bne.n	800a590 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	7858      	ldrb	r0, [r3, #1]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a572:	2301      	movs	r3, #1
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	f7ff fcd5 	bl	8009f24 <disk_read>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d004      	beq.n	800a58a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a580:	f04f 33ff 	mov.w	r3, #4294967295
 800a584:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a586:	2301      	movs	r3, #1
 800a588:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a590:	7bfb      	ldrb	r3, [r7, #15]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f7ff ff87 	bl	800a4b8 <sync_window>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a5ae:	7bfb      	ldrb	r3, [r7, #15]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d158      	bne.n	800a666 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	2b03      	cmp	r3, #3
 800a5ba:	d148      	bne.n	800a64e <sync_fs+0xb2>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	791b      	ldrb	r3, [r3, #4]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d144      	bne.n	800a64e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3334      	adds	r3, #52	; 0x34
 800a5c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7ff fda9 	bl	800a126 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	3334      	adds	r3, #52	; 0x34
 800a5d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a5dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7ff fd38 	bl	800a056 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	3334      	adds	r3, #52	; 0x34
 800a5ea:	4921      	ldr	r1, [pc, #132]	; (800a670 <sync_fs+0xd4>)
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7ff fd4d 	bl	800a08c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	3334      	adds	r3, #52	; 0x34
 800a5f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a5fa:	491e      	ldr	r1, [pc, #120]	; (800a674 <sync_fs+0xd8>)
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff fd45 	bl	800a08c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3334      	adds	r3, #52	; 0x34
 800a606:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	4619      	mov	r1, r3
 800a610:	4610      	mov	r0, r2
 800a612:	f7ff fd3b 	bl	800a08c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	3334      	adds	r3, #52	; 0x34
 800a61a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	4619      	mov	r1, r3
 800a624:	4610      	mov	r0, r2
 800a626:	f7ff fd31 	bl	800a08c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	7858      	ldrb	r0, [r3, #1]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a642:	2301      	movs	r3, #1
 800a644:	f7ff fc8e 	bl	8009f64 <disk_write>
			fs->fsi_flag = 0;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	785b      	ldrb	r3, [r3, #1]
 800a652:	2200      	movs	r2, #0
 800a654:	2100      	movs	r1, #0
 800a656:	4618      	mov	r0, r3
 800a658:	f7ff fca4 	bl	8009fa4 <disk_ioctl>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <sync_fs+0xca>
 800a662:	2301      	movs	r3, #1
 800a664:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a666:	7bfb      	ldrb	r3, [r7, #15]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	41615252 	.word	0x41615252
 800a674:	61417272 	.word	0x61417272

0800a678 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	3b02      	subs	r3, #2
 800a686:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	3b02      	subs	r3, #2
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	429a      	cmp	r2, r3
 800a692:	d301      	bcc.n	800a698 <clust2sect+0x20>
 800a694:	2300      	movs	r3, #0
 800a696:	e008      	b.n	800a6aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	895b      	ldrh	r3, [r3, #10]
 800a69c:	461a      	mov	r2, r3
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	fb03 f202 	mul.w	r2, r3, r2
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a8:	4413      	add	r3, r2
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b086      	sub	sp, #24
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d904      	bls.n	800a6d6 <get_fat+0x20>
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	683a      	ldr	r2, [r7, #0]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d302      	bcc.n	800a6dc <get_fat+0x26>
		val = 1;	/* Internal error */
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	617b      	str	r3, [r7, #20]
 800a6da:	e08f      	b.n	800a7fc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	2b03      	cmp	r3, #3
 800a6e8:	d062      	beq.n	800a7b0 <get_fat+0xfa>
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	dc7c      	bgt.n	800a7e8 <get_fat+0x132>
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d002      	beq.n	800a6f8 <get_fat+0x42>
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d042      	beq.n	800a77c <get_fat+0xc6>
 800a6f6:	e077      	b.n	800a7e8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	085b      	lsrs	r3, r3, #1
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	0a5b      	lsrs	r3, r3, #9
 800a70e:	4413      	add	r3, r2
 800a710:	4619      	mov	r1, r3
 800a712:	6938      	ldr	r0, [r7, #16]
 800a714:	f7ff ff14 	bl	800a540 <move_window>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d167      	bne.n	800a7ee <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	1c5a      	adds	r2, r3, #1
 800a722:	60fa      	str	r2, [r7, #12]
 800a724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	4413      	add	r3, r2
 800a72c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a730:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	0a5b      	lsrs	r3, r3, #9
 800a73a:	4413      	add	r3, r2
 800a73c:	4619      	mov	r1, r3
 800a73e:	6938      	ldr	r0, [r7, #16]
 800a740:	f7ff fefe 	bl	800a540 <move_window>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d153      	bne.n	800a7f2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	4413      	add	r3, r2
 800a754:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a758:	021b      	lsls	r3, r3, #8
 800a75a:	461a      	mov	r2, r3
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	4313      	orrs	r3, r2
 800a760:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	f003 0301 	and.w	r3, r3, #1
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <get_fat+0xbc>
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	091b      	lsrs	r3, r3, #4
 800a770:	e002      	b.n	800a778 <get_fat+0xc2>
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a778:	617b      	str	r3, [r7, #20]
			break;
 800a77a:	e03f      	b.n	800a7fc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	0a1b      	lsrs	r3, r3, #8
 800a784:	4413      	add	r3, r2
 800a786:	4619      	mov	r1, r3
 800a788:	6938      	ldr	r0, [r7, #16]
 800a78a:	f7ff fed9 	bl	800a540 <move_window>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d130      	bne.n	800a7f6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	005b      	lsls	r3, r3, #1
 800a79e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a7a2:	4413      	add	r3, r2
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7ff fc1b 	bl	8009fe0 <ld_word>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	617b      	str	r3, [r7, #20]
			break;
 800a7ae:	e025      	b.n	800a7fc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	09db      	lsrs	r3, r3, #7
 800a7b8:	4413      	add	r3, r2
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	6938      	ldr	r0, [r7, #16]
 800a7be:	f7ff febf 	bl	800a540 <move_window>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d118      	bne.n	800a7fa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a7d6:	4413      	add	r3, r2
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff fc19 	bl	800a010 <ld_dword>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a7e4:	617b      	str	r3, [r7, #20]
			break;
 800a7e6:	e009      	b.n	800a7fc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	617b      	str	r3, [r7, #20]
 800a7ec:	e006      	b.n	800a7fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7ee:	bf00      	nop
 800a7f0:	e004      	b.n	800a7fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7f2:	bf00      	nop
 800a7f4:	e002      	b.n	800a7fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a7f6:	bf00      	nop
 800a7f8:	e000      	b.n	800a7fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a7fa:	bf00      	nop
		}
	}

	return val;
 800a7fc:	697b      	ldr	r3, [r7, #20]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3718      	adds	r7, #24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a806:	b590      	push	{r4, r7, lr}
 800a808:	b089      	sub	sp, #36	; 0x24
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	60f8      	str	r0, [r7, #12]
 800a80e:	60b9      	str	r1, [r7, #8]
 800a810:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a812:	2302      	movs	r3, #2
 800a814:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	f240 80d9 	bls.w	800a9d0 <put_fat+0x1ca>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	429a      	cmp	r2, r3
 800a826:	f080 80d3 	bcs.w	800a9d0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2b03      	cmp	r3, #3
 800a830:	f000 8096 	beq.w	800a960 <put_fat+0x15a>
 800a834:	2b03      	cmp	r3, #3
 800a836:	f300 80cb 	bgt.w	800a9d0 <put_fat+0x1ca>
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d002      	beq.n	800a844 <put_fat+0x3e>
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d06e      	beq.n	800a920 <put_fat+0x11a>
 800a842:	e0c5      	b.n	800a9d0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	61bb      	str	r3, [r7, #24]
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	085b      	lsrs	r3, r3, #1
 800a84c:	69ba      	ldr	r2, [r7, #24]
 800a84e:	4413      	add	r3, r2
 800a850:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	0a5b      	lsrs	r3, r3, #9
 800a85a:	4413      	add	r3, r2
 800a85c:	4619      	mov	r1, r3
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f7ff fe6e 	bl	800a540 <move_window>
 800a864:	4603      	mov	r3, r0
 800a866:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a868:	7ffb      	ldrb	r3, [r7, #31]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f040 80a9 	bne.w	800a9c2 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	1c59      	adds	r1, r3, #1
 800a87a:	61b9      	str	r1, [r7, #24]
 800a87c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a880:	4413      	add	r3, r2
 800a882:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00d      	beq.n	800a8aa <put_fat+0xa4>
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	b25b      	sxtb	r3, r3
 800a894:	f003 030f 	and.w	r3, r3, #15
 800a898:	b25a      	sxtb	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	011b      	lsls	r3, r3, #4
 800a8a0:	b25b      	sxtb	r3, r3
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	b25b      	sxtb	r3, r3
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	e001      	b.n	800a8ae <put_fat+0xa8>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	0a5b      	lsrs	r3, r3, #9
 800a8c0:	4413      	add	r3, r2
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f7ff fe3b 	bl	800a540 <move_window>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8ce:	7ffb      	ldrb	r3, [r7, #31]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d178      	bne.n	800a9c6 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e0:	4413      	add	r3, r2
 800a8e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <put_fat+0xf0>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	091b      	lsrs	r3, r3, #4
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	e00e      	b.n	800a914 <put_fat+0x10e>
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	b25b      	sxtb	r3, r3
 800a8fc:	f023 030f 	bic.w	r3, r3, #15
 800a900:	b25a      	sxtb	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	0a1b      	lsrs	r3, r3, #8
 800a906:	b25b      	sxtb	r3, r3
 800a908:	f003 030f 	and.w	r3, r3, #15
 800a90c:	b25b      	sxtb	r3, r3
 800a90e:	4313      	orrs	r3, r2
 800a910:	b25b      	sxtb	r3, r3
 800a912:	b2db      	uxtb	r3, r3
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2201      	movs	r2, #1
 800a91c:	70da      	strb	r2, [r3, #3]
			break;
 800a91e:	e057      	b.n	800a9d0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	0a1b      	lsrs	r3, r3, #8
 800a928:	4413      	add	r3, r2
 800a92a:	4619      	mov	r1, r3
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f7ff fe07 	bl	800a540 <move_window>
 800a932:	4603      	mov	r3, r0
 800a934:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a936:	7ffb      	ldrb	r3, [r7, #31]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d146      	bne.n	800a9ca <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	005b      	lsls	r3, r3, #1
 800a946:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a94a:	4413      	add	r3, r2
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	b292      	uxth	r2, r2
 800a950:	4611      	mov	r1, r2
 800a952:	4618      	mov	r0, r3
 800a954:	f7ff fb7f 	bl	800a056 <st_word>
			fs->wflag = 1;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2201      	movs	r2, #1
 800a95c:	70da      	strb	r2, [r3, #3]
			break;
 800a95e:	e037      	b.n	800a9d0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	09db      	lsrs	r3, r3, #7
 800a968:	4413      	add	r3, r2
 800a96a:	4619      	mov	r1, r3
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f7ff fde7 	bl	800a540 <move_window>
 800a972:	4603      	mov	r3, r0
 800a974:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a976:	7ffb      	ldrb	r3, [r7, #31]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d128      	bne.n	800a9ce <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a990:	4413      	add	r3, r2
 800a992:	4618      	mov	r0, r3
 800a994:	f7ff fb3c 	bl	800a010 <ld_dword>
 800a998:	4603      	mov	r3, r0
 800a99a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a99e:	4323      	orrs	r3, r4
 800a9a0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a9b0:	4413      	add	r3, r2
 800a9b2:	6879      	ldr	r1, [r7, #4]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7ff fb69 	bl	800a08c <st_dword>
			fs->wflag = 1;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	70da      	strb	r2, [r3, #3]
			break;
 800a9c0:	e006      	b.n	800a9d0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a9c2:	bf00      	nop
 800a9c4:	e004      	b.n	800a9d0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a9c6:	bf00      	nop
 800a9c8:	e002      	b.n	800a9d0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a9ca:	bf00      	nop
 800a9cc:	e000      	b.n	800a9d0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a9ce:	bf00      	nop
		}
	}
	return res;
 800a9d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3724      	adds	r7, #36	; 0x24
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd90      	pop	{r4, r7, pc}

0800a9da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b088      	sub	sp, #32
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	60f8      	str	r0, [r7, #12]
 800a9e2:	60b9      	str	r1, [r7, #8]
 800a9e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d904      	bls.n	800aa00 <remove_chain+0x26>
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d301      	bcc.n	800aa04 <remove_chain+0x2a>
 800aa00:	2302      	movs	r3, #2
 800aa02:	e04b      	b.n	800aa9c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00c      	beq.n	800aa24 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800aa0a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	69b8      	ldr	r0, [r7, #24]
 800aa12:	f7ff fef8 	bl	800a806 <put_fat>
 800aa16:	4603      	mov	r3, r0
 800aa18:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800aa1a:	7ffb      	ldrb	r3, [r7, #31]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d001      	beq.n	800aa24 <remove_chain+0x4a>
 800aa20:	7ffb      	ldrb	r3, [r7, #31]
 800aa22:	e03b      	b.n	800aa9c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800aa24:	68b9      	ldr	r1, [r7, #8]
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f7ff fe45 	bl	800a6b6 <get_fat>
 800aa2c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d031      	beq.n	800aa98 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d101      	bne.n	800aa3e <remove_chain+0x64>
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	e02e      	b.n	800aa9c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa44:	d101      	bne.n	800aa4a <remove_chain+0x70>
 800aa46:	2301      	movs	r3, #1
 800aa48:	e028      	b.n	800aa9c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	69b8      	ldr	r0, [r7, #24]
 800aa50:	f7ff fed9 	bl	800a806 <put_fat>
 800aa54:	4603      	mov	r3, r0
 800aa56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800aa58:	7ffb      	ldrb	r3, [r7, #31]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <remove_chain+0x88>
 800aa5e:	7ffb      	ldrb	r3, [r7, #31]
 800aa60:	e01c      	b.n	800aa9c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	695a      	ldr	r2, [r3, #20]
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	3b02      	subs	r3, #2
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d20b      	bcs.n	800aa88 <remove_chain+0xae>
			fs->free_clst++;
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	695b      	ldr	r3, [r3, #20]
 800aa74:	1c5a      	adds	r2, r3, #1
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	791b      	ldrb	r3, [r3, #4]
 800aa7e:	f043 0301 	orr.w	r3, r3, #1
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d3c6      	bcc.n	800aa24 <remove_chain+0x4a>
 800aa96:	e000      	b.n	800aa9a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800aa98:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3720      	adds	r7, #32
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10d      	bne.n	800aad6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d004      	beq.n	800aad0 <create_chain+0x2c>
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	69ba      	ldr	r2, [r7, #24]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d31b      	bcc.n	800ab08 <create_chain+0x64>
 800aad0:	2301      	movs	r3, #1
 800aad2:	61bb      	str	r3, [r7, #24]
 800aad4:	e018      	b.n	800ab08 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7ff fdec 	bl	800a6b6 <get_fat>
 800aade:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d801      	bhi.n	800aaea <create_chain+0x46>
 800aae6:	2301      	movs	r3, #1
 800aae8:	e070      	b.n	800abcc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf0:	d101      	bne.n	800aaf6 <create_chain+0x52>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	e06a      	b.n	800abcc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	699b      	ldr	r3, [r3, #24]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d201      	bcs.n	800ab04 <create_chain+0x60>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	e063      	b.n	800abcc <create_chain+0x128>
		scl = clst;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	69fa      	ldr	r2, [r7, #28]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d307      	bcc.n	800ab2c <create_chain+0x88>
				ncl = 2;
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ab20:	69fa      	ldr	r2, [r7, #28]
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d901      	bls.n	800ab2c <create_chain+0x88>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e04f      	b.n	800abcc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ab2c:	69f9      	ldr	r1, [r7, #28]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7ff fdc1 	bl	800a6b6 <get_fat>
 800ab34:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00e      	beq.n	800ab5a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d003      	beq.n	800ab4a <create_chain+0xa6>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab48:	d101      	bne.n	800ab4e <create_chain+0xaa>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	e03e      	b.n	800abcc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ab4e:	69fa      	ldr	r2, [r7, #28]
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d1da      	bne.n	800ab0c <create_chain+0x68>
 800ab56:	2300      	movs	r3, #0
 800ab58:	e038      	b.n	800abcc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ab5a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ab5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab60:	69f9      	ldr	r1, [r7, #28]
 800ab62:	6938      	ldr	r0, [r7, #16]
 800ab64:	f7ff fe4f 	bl	800a806 <put_fat>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d109      	bne.n	800ab86 <create_chain+0xe2>
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d006      	beq.n	800ab86 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ab78:	69fa      	ldr	r2, [r7, #28]
 800ab7a:	6839      	ldr	r1, [r7, #0]
 800ab7c:	6938      	ldr	r0, [r7, #16]
 800ab7e:	f7ff fe42 	bl	800a806 <put_fat>
 800ab82:	4603      	mov	r3, r0
 800ab84:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d116      	bne.n	800abba <create_chain+0x116>
		fs->last_clst = ncl;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	69fa      	ldr	r2, [r7, #28]
 800ab90:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	695a      	ldr	r2, [r3, #20]
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	3b02      	subs	r3, #2
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d804      	bhi.n	800abaa <create_chain+0x106>
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	1e5a      	subs	r2, r3, #1
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	791b      	ldrb	r3, [r3, #4]
 800abae:	f043 0301 	orr.w	r3, r3, #1
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	711a      	strb	r2, [r3, #4]
 800abb8:	e007      	b.n	800abca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800abba:	7dfb      	ldrb	r3, [r7, #23]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d102      	bne.n	800abc6 <create_chain+0x122>
 800abc0:	f04f 33ff 	mov.w	r3, #4294967295
 800abc4:	e000      	b.n	800abc8 <create_chain+0x124>
 800abc6:	2301      	movs	r3, #1
 800abc8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800abca:	69fb      	ldr	r3, [r7, #28]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3720      	adds	r7, #32
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b087      	sub	sp, #28
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe8:	3304      	adds	r3, #4
 800abea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	0a5b      	lsrs	r3, r3, #9
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	8952      	ldrh	r2, [r2, #10]
 800abf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800abf8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	1d1a      	adds	r2, r3, #4
 800abfe:	613a      	str	r2, [r7, #16]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d101      	bne.n	800ac0e <clmt_clust+0x3a>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	e010      	b.n	800ac30 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d307      	bcc.n	800ac26 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	1ad3      	subs	r3, r2, r3
 800ac1c:	617b      	str	r3, [r7, #20]
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	3304      	adds	r3, #4
 800ac22:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ac24:	e7e9      	b.n	800abfa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ac26:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	4413      	add	r3, r2
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	371c      	adds	r7, #28
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac52:	d204      	bcs.n	800ac5e <dir_sdi+0x22>
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	f003 031f 	and.w	r3, r3, #31
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ac5e:	2302      	movs	r3, #2
 800ac60:	e063      	b.n	800ad2a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d106      	bne.n	800ac82 <dir_sdi+0x46>
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d902      	bls.n	800ac82 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac80:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10c      	bne.n	800aca2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	095b      	lsrs	r3, r3, #5
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	8912      	ldrh	r2, [r2, #8]
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d301      	bcc.n	800ac98 <dir_sdi+0x5c>
 800ac94:	2302      	movs	r3, #2
 800ac96:	e048      	b.n	800ad2a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	61da      	str	r2, [r3, #28]
 800aca0:	e029      	b.n	800acf6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	895b      	ldrh	r3, [r3, #10]
 800aca6:	025b      	lsls	r3, r3, #9
 800aca8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800acaa:	e019      	b.n	800ace0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6979      	ldr	r1, [r7, #20]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7ff fd00 	bl	800a6b6 <get_fat>
 800acb6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acbe:	d101      	bne.n	800acc4 <dir_sdi+0x88>
 800acc0:	2301      	movs	r3, #1
 800acc2:	e032      	b.n	800ad2a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d904      	bls.n	800acd4 <dir_sdi+0x98>
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d301      	bcc.n	800acd8 <dir_sdi+0x9c>
 800acd4:	2302      	movs	r3, #2
 800acd6:	e028      	b.n	800ad2a <dir_sdi+0xee>
			ofs -= csz;
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d2e1      	bcs.n	800acac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ace8:	6979      	ldr	r1, [r7, #20]
 800acea:	6938      	ldr	r0, [r7, #16]
 800acec:	f7ff fcc4 	bl	800a678 <clust2sect>
 800acf0:	4602      	mov	r2, r0
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	697a      	ldr	r2, [r7, #20]
 800acfa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	69db      	ldr	r3, [r3, #28]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <dir_sdi+0xcc>
 800ad04:	2302      	movs	r3, #2
 800ad06:	e010      	b.n	800ad2a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	69da      	ldr	r2, [r3, #28]
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	0a5b      	lsrs	r3, r3, #9
 800ad10:	441a      	add	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad22:	441a      	add	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3718      	adds	r7, #24
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b086      	sub	sp, #24
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	695b      	ldr	r3, [r3, #20]
 800ad46:	3320      	adds	r3, #32
 800ad48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d003      	beq.n	800ad5a <dir_next+0x28>
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad58:	d301      	bcc.n	800ad5e <dir_next+0x2c>
 800ad5a:	2304      	movs	r3, #4
 800ad5c:	e0aa      	b.n	800aeb4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f040 8098 	bne.w	800ae9a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	699b      	ldr	r3, [r3, #24]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10b      	bne.n	800ad94 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	095b      	lsrs	r3, r3, #5
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	8912      	ldrh	r2, [r2, #8]
 800ad84:	4293      	cmp	r3, r2
 800ad86:	f0c0 8088 	bcc.w	800ae9a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	61da      	str	r2, [r3, #28]
 800ad90:	2304      	movs	r3, #4
 800ad92:	e08f      	b.n	800aeb4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	0a5b      	lsrs	r3, r3, #9
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	8952      	ldrh	r2, [r2, #10]
 800ad9c:	3a01      	subs	r2, #1
 800ad9e:	4013      	ands	r3, r2
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d17a      	bne.n	800ae9a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	699b      	ldr	r3, [r3, #24]
 800adaa:	4619      	mov	r1, r3
 800adac:	4610      	mov	r0, r2
 800adae:	f7ff fc82 	bl	800a6b6 <get_fat>
 800adb2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d801      	bhi.n	800adbe <dir_next+0x8c>
 800adba:	2302      	movs	r3, #2
 800adbc:	e07a      	b.n	800aeb4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc4:	d101      	bne.n	800adca <dir_next+0x98>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e074      	b.n	800aeb4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	699b      	ldr	r3, [r3, #24]
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	429a      	cmp	r2, r3
 800add2:	d358      	bcc.n	800ae86 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d104      	bne.n	800ade4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	61da      	str	r2, [r3, #28]
 800ade0:	2304      	movs	r3, #4
 800ade2:	e067      	b.n	800aeb4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	4619      	mov	r1, r3
 800adec:	4610      	mov	r0, r2
 800adee:	f7ff fe59 	bl	800aaa4 <create_chain>
 800adf2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <dir_next+0xcc>
 800adfa:	2307      	movs	r3, #7
 800adfc:	e05a      	b.n	800aeb4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d101      	bne.n	800ae08 <dir_next+0xd6>
 800ae04:	2302      	movs	r3, #2
 800ae06:	e055      	b.n	800aeb4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0e:	d101      	bne.n	800ae14 <dir_next+0xe2>
 800ae10:	2301      	movs	r3, #1
 800ae12:	e04f      	b.n	800aeb4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f7ff fb4f 	bl	800a4b8 <sync_window>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <dir_next+0xf2>
 800ae20:	2301      	movs	r3, #1
 800ae22:	e047      	b.n	800aeb4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	3334      	adds	r3, #52	; 0x34
 800ae28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7ff f979 	bl	800a126 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae34:	2300      	movs	r3, #0
 800ae36:	613b      	str	r3, [r7, #16]
 800ae38:	6979      	ldr	r1, [r7, #20]
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f7ff fc1c 	bl	800a678 <clust2sect>
 800ae40:	4602      	mov	r2, r0
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	631a      	str	r2, [r3, #48]	; 0x30
 800ae46:	e012      	b.n	800ae6e <dir_next+0x13c>
						fs->wflag = 1;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff fb32 	bl	800a4b8 <sync_window>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d001      	beq.n	800ae5e <dir_next+0x12c>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e02a      	b.n	800aeb4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	3301      	adds	r3, #1
 800ae62:	613b      	str	r3, [r7, #16]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae68:	1c5a      	adds	r2, r3, #1
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	631a      	str	r2, [r3, #48]	; 0x30
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	895b      	ldrh	r3, [r3, #10]
 800ae72:	461a      	mov	r2, r3
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d3e6      	bcc.n	800ae48 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	1ad2      	subs	r2, r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ae8c:	6979      	ldr	r1, [r7, #20]
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f7ff fbf2 	bl	800a678 <clust2sect>
 800ae94:	4602      	mov	r2, r0
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeac:	441a      	add	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3718      	adds	r7, #24
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aecc:	2100      	movs	r1, #0
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7ff feb4 	bl	800ac3c <dir_sdi>
 800aed4:	4603      	mov	r3, r0
 800aed6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d12b      	bne.n	800af36 <dir_alloc+0x7a>
		n = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	4619      	mov	r1, r3
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f7ff fb29 	bl	800a540 <move_window>
 800aeee:	4603      	mov	r3, r0
 800aef0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d11d      	bne.n	800af34 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a1b      	ldr	r3, [r3, #32]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	2be5      	cmp	r3, #229	; 0xe5
 800af00:	d004      	beq.n	800af0c <dir_alloc+0x50>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d107      	bne.n	800af1c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	3301      	adds	r3, #1
 800af10:	613b      	str	r3, [r7, #16]
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	429a      	cmp	r2, r3
 800af18:	d102      	bne.n	800af20 <dir_alloc+0x64>
 800af1a:	e00c      	b.n	800af36 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800af1c:	2300      	movs	r3, #0
 800af1e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800af20:	2101      	movs	r1, #1
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f7ff ff05 	bl	800ad32 <dir_next>
 800af28:	4603      	mov	r3, r0
 800af2a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800af2c:	7dfb      	ldrb	r3, [r7, #23]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0d7      	beq.n	800aee2 <dir_alloc+0x26>
 800af32:	e000      	b.n	800af36 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800af34:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800af36:	7dfb      	ldrb	r3, [r7, #23]
 800af38:	2b04      	cmp	r3, #4
 800af3a:	d101      	bne.n	800af40 <dir_alloc+0x84>
 800af3c:	2307      	movs	r3, #7
 800af3e:	75fb      	strb	r3, [r7, #23]
	return res;
 800af40:	7dfb      	ldrb	r3, [r7, #23]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b084      	sub	sp, #16
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	331a      	adds	r3, #26
 800af58:	4618      	mov	r0, r3
 800af5a:	f7ff f841 	bl	8009fe0 <ld_word>
 800af5e:	4603      	mov	r3, r0
 800af60:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	2b03      	cmp	r3, #3
 800af68:	d109      	bne.n	800af7e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	3314      	adds	r3, #20
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff f836 	bl	8009fe0 <ld_word>
 800af74:	4603      	mov	r3, r0
 800af76:	041b      	lsls	r3, r3, #16
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800af7e:	68fb      	ldr	r3, [r7, #12]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	331a      	adds	r3, #26
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	b292      	uxth	r2, r2
 800af9c:	4611      	mov	r1, r2
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7ff f859 	bl	800a056 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	2b03      	cmp	r3, #3
 800afaa:	d109      	bne.n	800afc0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	f103 0214 	add.w	r2, r3, #20
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	0c1b      	lsrs	r3, r3, #16
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	4619      	mov	r1, r3
 800afba:	4610      	mov	r0, r2
 800afbc:	f7ff f84b 	bl	800a056 <st_word>
	}
}
 800afc0:	bf00      	nop
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800afc8:	b590      	push	{r4, r7, lr}
 800afca:	b087      	sub	sp, #28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	331a      	adds	r3, #26
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7ff f802 	bl	8009fe0 <ld_word>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <cmp_lfn+0x1e>
 800afe2:	2300      	movs	r3, #0
 800afe4:	e059      	b.n	800b09a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afee:	1e5a      	subs	r2, r3, #1
 800aff0:	4613      	mov	r3, r2
 800aff2:	005b      	lsls	r3, r3, #1
 800aff4:	4413      	add	r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800affc:	2301      	movs	r3, #1
 800affe:	81fb      	strh	r3, [r7, #14]
 800b000:	2300      	movs	r3, #0
 800b002:	613b      	str	r3, [r7, #16]
 800b004:	e033      	b.n	800b06e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b006:	4a27      	ldr	r2, [pc, #156]	; (800b0a4 <cmp_lfn+0xdc>)
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	4413      	add	r3, r2
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	4413      	add	r3, r2
 800b014:	4618      	mov	r0, r3
 800b016:	f7fe ffe3 	bl	8009fe0 <ld_word>
 800b01a:	4603      	mov	r3, r0
 800b01c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b01e:	89fb      	ldrh	r3, [r7, #14]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d01a      	beq.n	800b05a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	2bfe      	cmp	r3, #254	; 0xfe
 800b028:	d812      	bhi.n	800b050 <cmp_lfn+0x88>
 800b02a:	89bb      	ldrh	r3, [r7, #12]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f002 fc61 	bl	800d8f4 <ff_wtoupper>
 800b032:	4603      	mov	r3, r0
 800b034:	461c      	mov	r4, r3
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	1c5a      	adds	r2, r3, #1
 800b03a:	617a      	str	r2, [r7, #20]
 800b03c:	005b      	lsls	r3, r3, #1
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	4413      	add	r3, r2
 800b042:	881b      	ldrh	r3, [r3, #0]
 800b044:	4618      	mov	r0, r3
 800b046:	f002 fc55 	bl	800d8f4 <ff_wtoupper>
 800b04a:	4603      	mov	r3, r0
 800b04c:	429c      	cmp	r4, r3
 800b04e:	d001      	beq.n	800b054 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b050:	2300      	movs	r3, #0
 800b052:	e022      	b.n	800b09a <cmp_lfn+0xd2>
			}
			wc = uc;
 800b054:	89bb      	ldrh	r3, [r7, #12]
 800b056:	81fb      	strh	r3, [r7, #14]
 800b058:	e006      	b.n	800b068 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b05a:	89bb      	ldrh	r3, [r7, #12]
 800b05c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b060:	4293      	cmp	r3, r2
 800b062:	d001      	beq.n	800b068 <cmp_lfn+0xa0>
 800b064:	2300      	movs	r3, #0
 800b066:	e018      	b.n	800b09a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	3301      	adds	r3, #1
 800b06c:	613b      	str	r3, [r7, #16]
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	2b0c      	cmp	r3, #12
 800b072:	d9c8      	bls.n	800b006 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00b      	beq.n	800b098 <cmp_lfn+0xd0>
 800b080:	89fb      	ldrh	r3, [r7, #14]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d008      	beq.n	800b098 <cmp_lfn+0xd0>
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	4413      	add	r3, r2
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <cmp_lfn+0xd0>
 800b094:	2300      	movs	r3, #0
 800b096:	e000      	b.n	800b09a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b098:	2301      	movs	r3, #1
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	371c      	adds	r7, #28
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd90      	pop	{r4, r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	0800fac4 	.word	0x0800fac4

0800b0a8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b088      	sub	sp, #32
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	4611      	mov	r1, r2
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	71fb      	strb	r3, [r7, #7]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	330d      	adds	r3, #13
 800b0c2:	79ba      	ldrb	r2, [r7, #6]
 800b0c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	330b      	adds	r3, #11
 800b0ca:	220f      	movs	r2, #15
 800b0cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	330c      	adds	r3, #12
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	331a      	adds	r3, #26
 800b0da:	2100      	movs	r1, #0
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fe ffba 	bl	800a056 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b0e2:	79fb      	ldrb	r3, [r7, #7]
 800b0e4:	1e5a      	subs	r2, r3, #1
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	4413      	add	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	82fb      	strh	r3, [r7, #22]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b0fa:	8afb      	ldrh	r3, [r7, #22]
 800b0fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b100:	4293      	cmp	r3, r2
 800b102:	d007      	beq.n	800b114 <put_lfn+0x6c>
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	1c5a      	adds	r2, r3, #1
 800b108:	61fa      	str	r2, [r7, #28]
 800b10a:	005b      	lsls	r3, r3, #1
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	4413      	add	r3, r2
 800b110:	881b      	ldrh	r3, [r3, #0]
 800b112:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b114:	4a17      	ldr	r2, [pc, #92]	; (800b174 <put_lfn+0xcc>)
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	4413      	add	r3, r2
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	461a      	mov	r2, r3
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	4413      	add	r3, r2
 800b122:	8afa      	ldrh	r2, [r7, #22]
 800b124:	4611      	mov	r1, r2
 800b126:	4618      	mov	r0, r3
 800b128:	f7fe ff95 	bl	800a056 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b12c:	8afb      	ldrh	r3, [r7, #22]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d102      	bne.n	800b138 <put_lfn+0x90>
 800b132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b136:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	3301      	adds	r3, #1
 800b13c:	61bb      	str	r3, [r7, #24]
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	2b0c      	cmp	r3, #12
 800b142:	d9da      	bls.n	800b0fa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b144:	8afb      	ldrh	r3, [r7, #22]
 800b146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d006      	beq.n	800b15c <put_lfn+0xb4>
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	005b      	lsls	r3, r3, #1
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	4413      	add	r3, r2
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d103      	bne.n	800b164 <put_lfn+0xbc>
 800b15c:	79fb      	ldrb	r3, [r7, #7]
 800b15e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b162:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	79fa      	ldrb	r2, [r7, #7]
 800b168:	701a      	strb	r2, [r3, #0]
}
 800b16a:	bf00      	nop
 800b16c:	3720      	adds	r7, #32
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	0800fac4 	.word	0x0800fac4

0800b178 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b08c      	sub	sp, #48	; 0x30
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	607a      	str	r2, [r7, #4]
 800b184:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b186:	220b      	movs	r2, #11
 800b188:	68b9      	ldr	r1, [r7, #8]
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f7fe ffaa 	bl	800a0e4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	2b05      	cmp	r3, #5
 800b194:	d92b      	bls.n	800b1ee <gen_numname+0x76>
		sr = seq;
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b19a:	e022      	b.n	800b1e2 <gen_numname+0x6a>
			wc = *lfn++;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	1c9a      	adds	r2, r3, #2
 800b1a0:	607a      	str	r2, [r7, #4]
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1aa:	e017      	b.n	800b1dc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	005a      	lsls	r2, r3, #1
 800b1b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1b2:	f003 0301 	and.w	r3, r3, #1
 800b1b6:	4413      	add	r3, r2
 800b1b8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b1ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1bc:	085b      	lsrs	r3, r3, #1
 800b1be:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d005      	beq.n	800b1d6 <gen_numname+0x5e>
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b1d0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b1d4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	3301      	adds	r3, #1
 800b1da:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	2b0f      	cmp	r3, #15
 800b1e0:	d9e4      	bls.n	800b1ac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	881b      	ldrh	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d1d8      	bne.n	800b19c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b1ee:	2307      	movs	r3, #7
 800b1f0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	f003 030f 	and.w	r3, r3, #15
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	3330      	adds	r3, #48	; 0x30
 800b1fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b206:	2b39      	cmp	r3, #57	; 0x39
 800b208:	d904      	bls.n	800b214 <gen_numname+0x9c>
 800b20a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b20e:	3307      	adds	r3, #7
 800b210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	1e5a      	subs	r2, r3, #1
 800b218:	62ba      	str	r2, [r7, #40]	; 0x28
 800b21a:	3330      	adds	r3, #48	; 0x30
 800b21c:	443b      	add	r3, r7
 800b21e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b222:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	091b      	lsrs	r3, r3, #4
 800b22a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1df      	bne.n	800b1f2 <gen_numname+0x7a>
	ns[i] = '~';
 800b232:	f107 0214 	add.w	r2, r7, #20
 800b236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b238:	4413      	add	r3, r2
 800b23a:	227e      	movs	r2, #126	; 0x7e
 800b23c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b23e:	2300      	movs	r3, #0
 800b240:	627b      	str	r3, [r7, #36]	; 0x24
 800b242:	e002      	b.n	800b24a <gen_numname+0xd2>
 800b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b246:	3301      	adds	r3, #1
 800b248:	627b      	str	r3, [r7, #36]	; 0x24
 800b24a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24e:	429a      	cmp	r2, r3
 800b250:	d205      	bcs.n	800b25e <gen_numname+0xe6>
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	4413      	add	r3, r2
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	2b20      	cmp	r3, #32
 800b25c:	d1f2      	bne.n	800b244 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b260:	2b07      	cmp	r3, #7
 800b262:	d807      	bhi.n	800b274 <gen_numname+0xfc>
 800b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b266:	1c5a      	adds	r2, r3, #1
 800b268:	62ba      	str	r2, [r7, #40]	; 0x28
 800b26a:	3330      	adds	r3, #48	; 0x30
 800b26c:	443b      	add	r3, r7
 800b26e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b272:	e000      	b.n	800b276 <gen_numname+0xfe>
 800b274:	2120      	movs	r1, #32
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	627a      	str	r2, [r7, #36]	; 0x24
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	4413      	add	r3, r2
 800b280:	460a      	mov	r2, r1
 800b282:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	2b07      	cmp	r3, #7
 800b288:	d9e9      	bls.n	800b25e <gen_numname+0xe6>
}
 800b28a:	bf00      	nop
 800b28c:	bf00      	nop
 800b28e:	3730      	adds	r7, #48	; 0x30
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b2a0:	230b      	movs	r3, #11
 800b2a2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	0852      	lsrs	r2, r2, #1
 800b2aa:	01db      	lsls	r3, r3, #7
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	b2da      	uxtb	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	1c59      	adds	r1, r3, #1
 800b2b4:	6079      	str	r1, [r7, #4]
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	60bb      	str	r3, [r7, #8]
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1ed      	bne.n	800b2a4 <sum_sfn+0x10>
	return sum;
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b086      	sub	sp, #24
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7ff fca8 	bl	800ac3c <dir_sdi>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b2f0:	7dfb      	ldrb	r3, [r7, #23]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d001      	beq.n	800b2fa <dir_find+0x24>
 800b2f6:	7dfb      	ldrb	r3, [r7, #23]
 800b2f8:	e0a9      	b.n	800b44e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b2fa:	23ff      	movs	r3, #255	; 0xff
 800b2fc:	753b      	strb	r3, [r7, #20]
 800b2fe:	7d3b      	ldrb	r3, [r7, #20]
 800b300:	757b      	strb	r3, [r7, #21]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f04f 32ff 	mov.w	r2, #4294967295
 800b308:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	69db      	ldr	r3, [r3, #28]
 800b30e:	4619      	mov	r1, r3
 800b310:	6938      	ldr	r0, [r7, #16]
 800b312:	f7ff f915 	bl	800a540 <move_window>
 800b316:	4603      	mov	r3, r0
 800b318:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b31a:	7dfb      	ldrb	r3, [r7, #23]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f040 8090 	bne.w	800b442 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b32a:	7dbb      	ldrb	r3, [r7, #22]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d102      	bne.n	800b336 <dir_find+0x60>
 800b330:	2304      	movs	r3, #4
 800b332:	75fb      	strb	r3, [r7, #23]
 800b334:	e08a      	b.n	800b44c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	330b      	adds	r3, #11
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b342:	73fb      	strb	r3, [r7, #15]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	7bfa      	ldrb	r2, [r7, #15]
 800b348:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b34a:	7dbb      	ldrb	r3, [r7, #22]
 800b34c:	2be5      	cmp	r3, #229	; 0xe5
 800b34e:	d007      	beq.n	800b360 <dir_find+0x8a>
 800b350:	7bfb      	ldrb	r3, [r7, #15]
 800b352:	f003 0308 	and.w	r3, r3, #8
 800b356:	2b00      	cmp	r3, #0
 800b358:	d009      	beq.n	800b36e <dir_find+0x98>
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
 800b35c:	2b0f      	cmp	r3, #15
 800b35e:	d006      	beq.n	800b36e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b360:	23ff      	movs	r3, #255	; 0xff
 800b362:	757b      	strb	r3, [r7, #21]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f04f 32ff 	mov.w	r2, #4294967295
 800b36a:	631a      	str	r2, [r3, #48]	; 0x30
 800b36c:	e05e      	b.n	800b42c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b36e:	7bfb      	ldrb	r3, [r7, #15]
 800b370:	2b0f      	cmp	r3, #15
 800b372:	d136      	bne.n	800b3e2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d154      	bne.n	800b42c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b382:	7dbb      	ldrb	r3, [r7, #22]
 800b384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00d      	beq.n	800b3a8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a1b      	ldr	r3, [r3, #32]
 800b390:	7b5b      	ldrb	r3, [r3, #13]
 800b392:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b394:	7dbb      	ldrb	r3, [r7, #22]
 800b396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b39a:	75bb      	strb	r3, [r7, #22]
 800b39c:	7dbb      	ldrb	r3, [r7, #22]
 800b39e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	695a      	ldr	r2, [r3, #20]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b3a8:	7dba      	ldrb	r2, [r7, #22]
 800b3aa:	7d7b      	ldrb	r3, [r7, #21]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d115      	bne.n	800b3dc <dir_find+0x106>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6a1b      	ldr	r3, [r3, #32]
 800b3b4:	330d      	adds	r3, #13
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	7d3a      	ldrb	r2, [r7, #20]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d10e      	bne.n	800b3dc <dir_find+0x106>
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	68da      	ldr	r2, [r3, #12]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6a1b      	ldr	r3, [r3, #32]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	f7ff fdfd 	bl	800afc8 <cmp_lfn>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d003      	beq.n	800b3dc <dir_find+0x106>
 800b3d4:	7d7b      	ldrb	r3, [r7, #21]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	e000      	b.n	800b3de <dir_find+0x108>
 800b3dc:	23ff      	movs	r3, #255	; 0xff
 800b3de:	757b      	strb	r3, [r7, #21]
 800b3e0:	e024      	b.n	800b42c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b3e2:	7d7b      	ldrb	r3, [r7, #21]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d109      	bne.n	800b3fc <dir_find+0x126>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6a1b      	ldr	r3, [r3, #32]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7ff ff51 	bl	800b294 <sum_sfn>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	7d3b      	ldrb	r3, [r7, #20]
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d024      	beq.n	800b446 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b402:	f003 0301 	and.w	r3, r3, #1
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10a      	bne.n	800b420 <dir_find+0x14a>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a18      	ldr	r0, [r3, #32]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	3324      	adds	r3, #36	; 0x24
 800b412:	220b      	movs	r2, #11
 800b414:	4619      	mov	r1, r3
 800b416:	f7fe fea1 	bl	800a15c <mem_cmp>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d014      	beq.n	800b44a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b420:	23ff      	movs	r3, #255	; 0xff
 800b422:	757b      	strb	r3, [r7, #21]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f04f 32ff 	mov.w	r2, #4294967295
 800b42a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b42c:	2100      	movs	r1, #0
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7ff fc7f 	bl	800ad32 <dir_next>
 800b434:	4603      	mov	r3, r0
 800b436:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b438:	7dfb      	ldrb	r3, [r7, #23]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f43f af65 	beq.w	800b30a <dir_find+0x34>
 800b440:	e004      	b.n	800b44c <dir_find+0x176>
		if (res != FR_OK) break;
 800b442:	bf00      	nop
 800b444:	e002      	b.n	800b44c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b446:	bf00      	nop
 800b448:	e000      	b.n	800b44c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b44a:	bf00      	nop

	return res;
 800b44c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3718      	adds	r7, #24
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
	...

0800b458 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08c      	sub	sp, #48	; 0x30
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b46c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d001      	beq.n	800b478 <dir_register+0x20>
 800b474:	2306      	movs	r3, #6
 800b476:	e0e0      	b.n	800b63a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b478:	2300      	movs	r3, #0
 800b47a:	627b      	str	r3, [r7, #36]	; 0x24
 800b47c:	e002      	b.n	800b484 <dir_register+0x2c>
 800b47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b480:	3301      	adds	r3, #1
 800b482:	627b      	str	r3, [r7, #36]	; 0x24
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	68da      	ldr	r2, [r3, #12]
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48a:	005b      	lsls	r3, r3, #1
 800b48c:	4413      	add	r3, r2
 800b48e:	881b      	ldrh	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1f4      	bne.n	800b47e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b49a:	f107 030c 	add.w	r3, r7, #12
 800b49e:	220c      	movs	r2, #12
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fe fe1f 	bl	800a0e4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b4a6:	7dfb      	ldrb	r3, [r7, #23]
 800b4a8:	f003 0301 	and.w	r3, r3, #1
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d032      	beq.n	800b516 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2240      	movs	r2, #64	; 0x40
 800b4b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4bc:	e016      	b.n	800b4ec <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	68da      	ldr	r2, [r3, #12]
 800b4c8:	f107 010c 	add.w	r1, r7, #12
 800b4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ce:	f7ff fe53 	bl	800b178 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f7ff feff 	bl	800b2d6 <dir_find>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b4de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d106      	bne.n	800b4f4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ee:	2b63      	cmp	r3, #99	; 0x63
 800b4f0:	d9e5      	bls.n	800b4be <dir_register+0x66>
 800b4f2:	e000      	b.n	800b4f6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b4f4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f8:	2b64      	cmp	r3, #100	; 0x64
 800b4fa:	d101      	bne.n	800b500 <dir_register+0xa8>
 800b4fc:	2307      	movs	r3, #7
 800b4fe:	e09c      	b.n	800b63a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b500:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b504:	2b04      	cmp	r3, #4
 800b506:	d002      	beq.n	800b50e <dir_register+0xb6>
 800b508:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b50c:	e095      	b.n	800b63a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b50e:	7dfa      	ldrb	r2, [r7, #23]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b516:	7dfb      	ldrb	r3, [r7, #23]
 800b518:	f003 0302 	and.w	r3, r3, #2
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d007      	beq.n	800b530 <dir_register+0xd8>
 800b520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b522:	330c      	adds	r3, #12
 800b524:	4a47      	ldr	r2, [pc, #284]	; (800b644 <dir_register+0x1ec>)
 800b526:	fba2 2303 	umull	r2, r3, r2, r3
 800b52a:	089b      	lsrs	r3, r3, #2
 800b52c:	3301      	adds	r3, #1
 800b52e:	e000      	b.n	800b532 <dir_register+0xda>
 800b530:	2301      	movs	r3, #1
 800b532:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b534:	6a39      	ldr	r1, [r7, #32]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7ff fcc0 	bl	800aebc <dir_alloc>
 800b53c:	4603      	mov	r3, r0
 800b53e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b542:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b546:	2b00      	cmp	r3, #0
 800b548:	d148      	bne.n	800b5dc <dir_register+0x184>
 800b54a:	6a3b      	ldr	r3, [r7, #32]
 800b54c:	3b01      	subs	r3, #1
 800b54e:	623b      	str	r3, [r7, #32]
 800b550:	6a3b      	ldr	r3, [r7, #32]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d042      	beq.n	800b5dc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	695a      	ldr	r2, [r3, #20]
 800b55a:	6a3b      	ldr	r3, [r7, #32]
 800b55c:	015b      	lsls	r3, r3, #5
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	4619      	mov	r1, r3
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7ff fb6a 	bl	800ac3c <dir_sdi>
 800b568:	4603      	mov	r3, r0
 800b56a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b56e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b572:	2b00      	cmp	r3, #0
 800b574:	d132      	bne.n	800b5dc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3324      	adds	r3, #36	; 0x24
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7ff fe8a 	bl	800b294 <sum_sfn>
 800b580:	4603      	mov	r3, r0
 800b582:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	69db      	ldr	r3, [r3, #28]
 800b588:	4619      	mov	r1, r3
 800b58a:	69f8      	ldr	r0, [r7, #28]
 800b58c:	f7fe ffd8 	bl	800a540 <move_window>
 800b590:	4603      	mov	r3, r0
 800b592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d11d      	bne.n	800b5da <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	68d8      	ldr	r0, [r3, #12]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a19      	ldr	r1, [r3, #32]
 800b5a6:	6a3b      	ldr	r3, [r7, #32]
 800b5a8:	b2da      	uxtb	r2, r3
 800b5aa:	7efb      	ldrb	r3, [r7, #27]
 800b5ac:	f7ff fd7c 	bl	800b0a8 <put_lfn>
				fs->wflag = 1;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff fbba 	bl	800ad32 <dir_next>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b5c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d107      	bne.n	800b5dc <dir_register+0x184>
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	623b      	str	r3, [r7, #32]
 800b5d2:	6a3b      	ldr	r3, [r7, #32]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1d5      	bne.n	800b584 <dir_register+0x12c>
 800b5d8:	e000      	b.n	800b5dc <dir_register+0x184>
				if (res != FR_OK) break;
 800b5da:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b5dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d128      	bne.n	800b636 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	69db      	ldr	r3, [r3, #28]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	69f8      	ldr	r0, [r7, #28]
 800b5ec:	f7fe ffa8 	bl	800a540 <move_window>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b5f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d11b      	bne.n	800b636 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	2220      	movs	r2, #32
 800b604:	2100      	movs	r1, #0
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe fd8d 	bl	800a126 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a18      	ldr	r0, [r3, #32]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	3324      	adds	r3, #36	; 0x24
 800b614:	220b      	movs	r2, #11
 800b616:	4619      	mov	r1, r3
 800b618:	f7fe fd64 	bl	800a0e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a1b      	ldr	r3, [r3, #32]
 800b626:	330c      	adds	r3, #12
 800b628:	f002 0218 	and.w	r2, r2, #24
 800b62c:	b2d2      	uxtb	r2, r2
 800b62e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	2201      	movs	r2, #1
 800b634:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3730      	adds	r7, #48	; 0x30
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	4ec4ec4f 	.word	0x4ec4ec4f

0800b648 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b088      	sub	sp, #32
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	2200      	movs	r2, #0
 800b65c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	69db      	ldr	r3, [r3, #28]
 800b662:	2b00      	cmp	r3, #0
 800b664:	f000 80c9 	beq.w	800b7fa <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b670:	d032      	beq.n	800b6d8 <get_fileinfo+0x90>
			i = j = 0;
 800b672:	2300      	movs	r3, #0
 800b674:	61bb      	str	r3, [r7, #24]
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b67a:	e01b      	b.n	800b6b4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b67c:	89fb      	ldrh	r3, [r7, #14]
 800b67e:	2100      	movs	r1, #0
 800b680:	4618      	mov	r0, r3
 800b682:	f002 f8fb 	bl	800d87c <ff_convert>
 800b686:	4603      	mov	r3, r0
 800b688:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b68a:	89fb      	ldrh	r3, [r7, #14]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d102      	bne.n	800b696 <get_fileinfo+0x4e>
 800b690:	2300      	movs	r3, #0
 800b692:	61fb      	str	r3, [r7, #28]
 800b694:	e01a      	b.n	800b6cc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	2bfe      	cmp	r3, #254	; 0xfe
 800b69a:	d902      	bls.n	800b6a2 <get_fileinfo+0x5a>
 800b69c:	2300      	movs	r3, #0
 800b69e:	61fb      	str	r3, [r7, #28]
 800b6a0:	e014      	b.n	800b6cc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	1c5a      	adds	r2, r3, #1
 800b6a6:	61fa      	str	r2, [r7, #28]
 800b6a8:	89fa      	ldrh	r2, [r7, #14]
 800b6aa:	b2d1      	uxtb	r1, r2
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	460a      	mov	r2, r1
 800b6b2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	68da      	ldr	r2, [r3, #12]
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	1c59      	adds	r1, r3, #1
 800b6bc:	61b9      	str	r1, [r7, #24]
 800b6be:	005b      	lsls	r3, r3, #1
 800b6c0:	4413      	add	r3, r2
 800b6c2:	881b      	ldrh	r3, [r3, #0]
 800b6c4:	81fb      	strh	r3, [r7, #14]
 800b6c6:	89fb      	ldrh	r3, [r7, #14]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1d7      	bne.n	800b67c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b6cc:	683a      	ldr	r2, [r7, #0]
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	3316      	adds	r3, #22
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	61bb      	str	r3, [r7, #24]
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	3316      	adds	r3, #22
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b6ec:	e04c      	b.n	800b788 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a1a      	ldr	r2, [r3, #32]
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	1c59      	adds	r1, r3, #1
 800b6f6:	61f9      	str	r1, [r7, #28]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b6fe:	7dfb      	ldrb	r3, [r7, #23]
 800b700:	2b20      	cmp	r3, #32
 800b702:	d100      	bne.n	800b706 <get_fileinfo+0xbe>
 800b704:	e040      	b.n	800b788 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b706:	7dfb      	ldrb	r3, [r7, #23]
 800b708:	2b05      	cmp	r3, #5
 800b70a:	d101      	bne.n	800b710 <get_fileinfo+0xc8>
 800b70c:	23e5      	movs	r3, #229	; 0xe5
 800b70e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	2b09      	cmp	r3, #9
 800b714:	d10f      	bne.n	800b736 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800b716:	89bb      	ldrh	r3, [r7, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d105      	bne.n	800b728 <get_fileinfo+0xe0>
 800b71c:	683a      	ldr	r2, [r7, #0]
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	4413      	add	r3, r2
 800b722:	3316      	adds	r3, #22
 800b724:	222e      	movs	r2, #46	; 0x2e
 800b726:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	1c5a      	adds	r2, r3, #1
 800b72c:	61ba      	str	r2, [r7, #24]
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	4413      	add	r3, r2
 800b732:	222e      	movs	r2, #46	; 0x2e
 800b734:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	4413      	add	r3, r2
 800b73c:	3309      	adds	r3, #9
 800b73e:	7dfa      	ldrb	r2, [r7, #23]
 800b740:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b742:	89bb      	ldrh	r3, [r7, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d11c      	bne.n	800b782 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b748:	7dfb      	ldrb	r3, [r7, #23]
 800b74a:	2b40      	cmp	r3, #64	; 0x40
 800b74c:	d913      	bls.n	800b776 <get_fileinfo+0x12e>
 800b74e:	7dfb      	ldrb	r3, [r7, #23]
 800b750:	2b5a      	cmp	r3, #90	; 0x5a
 800b752:	d810      	bhi.n	800b776 <get_fileinfo+0x12e>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6a1b      	ldr	r3, [r3, #32]
 800b758:	330c      	adds	r3, #12
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	461a      	mov	r2, r3
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	2b08      	cmp	r3, #8
 800b762:	d901      	bls.n	800b768 <get_fileinfo+0x120>
 800b764:	2310      	movs	r3, #16
 800b766:	e000      	b.n	800b76a <get_fileinfo+0x122>
 800b768:	2308      	movs	r3, #8
 800b76a:	4013      	ands	r3, r2
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d002      	beq.n	800b776 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800b770:	7dfb      	ldrb	r3, [r7, #23]
 800b772:	3320      	adds	r3, #32
 800b774:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	4413      	add	r3, r2
 800b77c:	3316      	adds	r3, #22
 800b77e:	7dfa      	ldrb	r2, [r7, #23]
 800b780:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	3301      	adds	r3, #1
 800b786:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	2b0a      	cmp	r3, #10
 800b78c:	d9af      	bls.n	800b6ee <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800b78e:	89bb      	ldrh	r3, [r7, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d10d      	bne.n	800b7b0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	4413      	add	r3, r2
 800b79a:	3316      	adds	r3, #22
 800b79c:	2200      	movs	r2, #0
 800b79e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a1b      	ldr	r3, [r3, #32]
 800b7a4:	330c      	adds	r3, #12
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d101      	bne.n	800b7b0 <get_fileinfo+0x168>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b7b0:	683a      	ldr	r2, [r7, #0]
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	3309      	adds	r3, #9
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6a1b      	ldr	r3, [r3, #32]
 800b7c0:	7ada      	ldrb	r2, [r3, #11]
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	331c      	adds	r3, #28
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fe fc1f 	bl	800a010 <ld_dword>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6a1b      	ldr	r3, [r3, #32]
 800b7dc:	3316      	adds	r3, #22
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fe fc16 	bl	800a010 <ld_dword>
 800b7e4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	80da      	strh	r2, [r3, #6]
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	0c1b      	lsrs	r3, r3, #16
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	809a      	strh	r2, [r3, #4]
 800b7f8:	e000      	b.n	800b7fc <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b7fa:	bf00      	nop
}
 800b7fc:	3720      	adds	r7, #32
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b08a      	sub	sp, #40	; 0x28
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	613b      	str	r3, [r7, #16]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	60fb      	str	r3, [r7, #12]
 800b81c:	2300      	movs	r3, #0
 800b81e:	617b      	str	r3, [r7, #20]
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	1c5a      	adds	r2, r3, #1
 800b828:	61ba      	str	r2, [r7, #24]
 800b82a:	693a      	ldr	r2, [r7, #16]
 800b82c:	4413      	add	r3, r2
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b834:	2b1f      	cmp	r3, #31
 800b836:	d940      	bls.n	800b8ba <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b83a:	2b2f      	cmp	r3, #47	; 0x2f
 800b83c:	d006      	beq.n	800b84c <create_name+0x48>
 800b83e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b840:	2b5c      	cmp	r3, #92	; 0x5c
 800b842:	d110      	bne.n	800b866 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b844:	e002      	b.n	800b84c <create_name+0x48>
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	3301      	adds	r3, #1
 800b84a:	61bb      	str	r3, [r7, #24]
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	4413      	add	r3, r2
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	2b2f      	cmp	r3, #47	; 0x2f
 800b856:	d0f6      	beq.n	800b846 <create_name+0x42>
 800b858:	693a      	ldr	r2, [r7, #16]
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	4413      	add	r3, r2
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	2b5c      	cmp	r3, #92	; 0x5c
 800b862:	d0f0      	beq.n	800b846 <create_name+0x42>
			break;
 800b864:	e02a      	b.n	800b8bc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	2bfe      	cmp	r3, #254	; 0xfe
 800b86a:	d901      	bls.n	800b870 <create_name+0x6c>
 800b86c:	2306      	movs	r3, #6
 800b86e:	e17d      	b.n	800bb6c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b872:	b2db      	uxtb	r3, r3
 800b874:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b876:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b878:	2101      	movs	r1, #1
 800b87a:	4618      	mov	r0, r3
 800b87c:	f001 fffe 	bl	800d87c <ff_convert>
 800b880:	4603      	mov	r3, r0
 800b882:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b884:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <create_name+0x8a>
 800b88a:	2306      	movs	r3, #6
 800b88c:	e16e      	b.n	800bb6c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b88e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b890:	2b7f      	cmp	r3, #127	; 0x7f
 800b892:	d809      	bhi.n	800b8a8 <create_name+0xa4>
 800b894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b896:	4619      	mov	r1, r3
 800b898:	488d      	ldr	r0, [pc, #564]	; (800bad0 <create_name+0x2cc>)
 800b89a:	f7fe fc86 	bl	800a1aa <chk_chr>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d001      	beq.n	800b8a8 <create_name+0xa4>
 800b8a4:	2306      	movs	r3, #6
 800b8a6:	e161      	b.n	800bb6c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	1c5a      	adds	r2, r3, #1
 800b8ac:	617a      	str	r2, [r7, #20]
 800b8ae:	005b      	lsls	r3, r3, #1
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b8b6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b8b8:	e7b4      	b.n	800b824 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b8ba:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	441a      	add	r2, r3
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b8c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8c8:	2b1f      	cmp	r3, #31
 800b8ca:	d801      	bhi.n	800b8d0 <create_name+0xcc>
 800b8cc:	2304      	movs	r3, #4
 800b8ce:	e000      	b.n	800b8d2 <create_name+0xce>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b8d6:	e011      	b.n	800b8fc <create_name+0xf8>
		w = lfn[di - 1];
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	881b      	ldrh	r3, [r3, #0]
 800b8e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b8ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8ec:	2b20      	cmp	r3, #32
 800b8ee:	d002      	beq.n	800b8f6 <create_name+0xf2>
 800b8f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8f2:	2b2e      	cmp	r3, #46	; 0x2e
 800b8f4:	d106      	bne.n	800b904 <create_name+0x100>
		di--;
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1ea      	bne.n	800b8d8 <create_name+0xd4>
 800b902:	e000      	b.n	800b906 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b904:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	005b      	lsls	r3, r3, #1
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	4413      	add	r3, r2
 800b90e:	2200      	movs	r2, #0
 800b910:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <create_name+0x118>
 800b918:	2306      	movs	r3, #6
 800b91a:	e127      	b.n	800bb6c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	3324      	adds	r3, #36	; 0x24
 800b920:	220b      	movs	r2, #11
 800b922:	2120      	movs	r1, #32
 800b924:	4618      	mov	r0, r3
 800b926:	f7fe fbfe 	bl	800a126 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b92a:	2300      	movs	r3, #0
 800b92c:	61bb      	str	r3, [r7, #24]
 800b92e:	e002      	b.n	800b936 <create_name+0x132>
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	3301      	adds	r3, #1
 800b934:	61bb      	str	r3, [r7, #24]
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	005b      	lsls	r3, r3, #1
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	4413      	add	r3, r2
 800b93e:	881b      	ldrh	r3, [r3, #0]
 800b940:	2b20      	cmp	r3, #32
 800b942:	d0f5      	beq.n	800b930 <create_name+0x12c>
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	005b      	lsls	r3, r3, #1
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	4413      	add	r3, r2
 800b94c:	881b      	ldrh	r3, [r3, #0]
 800b94e:	2b2e      	cmp	r3, #46	; 0x2e
 800b950:	d0ee      	beq.n	800b930 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d009      	beq.n	800b96c <create_name+0x168>
 800b958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b95c:	f043 0303 	orr.w	r3, r3, #3
 800b960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b964:	e002      	b.n	800b96c <create_name+0x168>
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	3b01      	subs	r3, #1
 800b96a:	617b      	str	r3, [r7, #20]
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d009      	beq.n	800b986 <create_name+0x182>
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b978:	3b01      	subs	r3, #1
 800b97a:	005b      	lsls	r3, r3, #1
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	4413      	add	r3, r2
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	2b2e      	cmp	r3, #46	; 0x2e
 800b984:	d1ef      	bne.n	800b966 <create_name+0x162>

	i = b = 0; ni = 8;
 800b986:	2300      	movs	r3, #0
 800b988:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b98c:	2300      	movs	r3, #0
 800b98e:	623b      	str	r3, [r7, #32]
 800b990:	2308      	movs	r3, #8
 800b992:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	1c5a      	adds	r2, r3, #1
 800b998:	61ba      	str	r2, [r7, #24]
 800b99a:	005b      	lsls	r3, r3, #1
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	4413      	add	r3, r2
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b9a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f000 8090 	beq.w	800bacc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b9ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9ae:	2b20      	cmp	r3, #32
 800b9b0:	d006      	beq.n	800b9c0 <create_name+0x1bc>
 800b9b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9b4:	2b2e      	cmp	r3, #46	; 0x2e
 800b9b6:	d10a      	bne.n	800b9ce <create_name+0x1ca>
 800b9b8:	69ba      	ldr	r2, [r7, #24]
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d006      	beq.n	800b9ce <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9c4:	f043 0303 	orr.w	r3, r3, #3
 800b9c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9cc:	e07d      	b.n	800baca <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b9ce:	6a3a      	ldr	r2, [r7, #32]
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d203      	bcs.n	800b9de <create_name+0x1da>
 800b9d6:	69ba      	ldr	r2, [r7, #24]
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d123      	bne.n	800ba26 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	2b0b      	cmp	r3, #11
 800b9e2:	d106      	bne.n	800b9f2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9e8:	f043 0303 	orr.w	r3, r3, #3
 800b9ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9f0:	e075      	b.n	800bade <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b9f2:	69ba      	ldr	r2, [r7, #24]
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d005      	beq.n	800ba06 <create_name+0x202>
 800b9fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9fe:	f043 0303 	orr.w	r3, r3, #3
 800ba02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ba06:	69ba      	ldr	r2, [r7, #24]
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d866      	bhi.n	800badc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	61bb      	str	r3, [r7, #24]
 800ba12:	2308      	movs	r3, #8
 800ba14:	623b      	str	r3, [r7, #32]
 800ba16:	230b      	movs	r3, #11
 800ba18:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ba1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ba24:	e051      	b.n	800baca <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ba26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba28:	2b7f      	cmp	r3, #127	; 0x7f
 800ba2a:	d914      	bls.n	800ba56 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ba2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba2e:	2100      	movs	r1, #0
 800ba30:	4618      	mov	r0, r3
 800ba32:	f001 ff23 	bl	800d87c <ff_convert>
 800ba36:	4603      	mov	r3, r0
 800ba38:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ba3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d004      	beq.n	800ba4a <create_name+0x246>
 800ba40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba42:	3b80      	subs	r3, #128	; 0x80
 800ba44:	4a23      	ldr	r2, [pc, #140]	; (800bad4 <create_name+0x2d0>)
 800ba46:	5cd3      	ldrb	r3, [r2, r3]
 800ba48:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ba4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba4e:	f043 0302 	orr.w	r3, r3, #2
 800ba52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ba56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d007      	beq.n	800ba6c <create_name+0x268>
 800ba5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba5e:	4619      	mov	r1, r3
 800ba60:	481d      	ldr	r0, [pc, #116]	; (800bad8 <create_name+0x2d4>)
 800ba62:	f7fe fba2 	bl	800a1aa <chk_chr>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d008      	beq.n	800ba7e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ba6c:	235f      	movs	r3, #95	; 0x5f
 800ba6e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ba70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba74:	f043 0303 	orr.w	r3, r3, #3
 800ba78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba7c:	e01b      	b.n	800bab6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ba7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba80:	2b40      	cmp	r3, #64	; 0x40
 800ba82:	d909      	bls.n	800ba98 <create_name+0x294>
 800ba84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba86:	2b5a      	cmp	r3, #90	; 0x5a
 800ba88:	d806      	bhi.n	800ba98 <create_name+0x294>
					b |= 2;
 800ba8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba8e:	f043 0302 	orr.w	r3, r3, #2
 800ba92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ba96:	e00e      	b.n	800bab6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ba98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba9a:	2b60      	cmp	r3, #96	; 0x60
 800ba9c:	d90b      	bls.n	800bab6 <create_name+0x2b2>
 800ba9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baa0:	2b7a      	cmp	r3, #122	; 0x7a
 800baa2:	d808      	bhi.n	800bab6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800baa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800baa8:	f043 0301 	orr.w	r3, r3, #1
 800baac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bab2:	3b20      	subs	r3, #32
 800bab4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bab6:	6a3b      	ldr	r3, [r7, #32]
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	623a      	str	r2, [r7, #32]
 800babc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800babe:	b2d1      	uxtb	r1, r2
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	4413      	add	r3, r2
 800bac4:	460a      	mov	r2, r1
 800bac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800baca:	e763      	b.n	800b994 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800bacc:	bf00      	nop
 800bace:	e006      	b.n	800bade <create_name+0x2da>
 800bad0:	0800f948 	.word	0x0800f948
 800bad4:	0800fa44 	.word	0x0800fa44
 800bad8:	0800f954 	.word	0x0800f954
			if (si > di) break;			/* No extension */
 800badc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bae4:	2be5      	cmp	r3, #229	; 0xe5
 800bae6:	d103      	bne.n	800baf0 <create_name+0x2ec>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2205      	movs	r2, #5
 800baec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	2b08      	cmp	r3, #8
 800baf4:	d104      	bne.n	800bb00 <create_name+0x2fc>
 800baf6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bb00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb04:	f003 030c 	and.w	r3, r3, #12
 800bb08:	2b0c      	cmp	r3, #12
 800bb0a:	d005      	beq.n	800bb18 <create_name+0x314>
 800bb0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb10:	f003 0303 	and.w	r3, r3, #3
 800bb14:	2b03      	cmp	r3, #3
 800bb16:	d105      	bne.n	800bb24 <create_name+0x320>
 800bb18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb1c:	f043 0302 	orr.w	r3, r3, #2
 800bb20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bb24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb28:	f003 0302 	and.w	r3, r3, #2
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d117      	bne.n	800bb60 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bb30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb34:	f003 0303 	and.w	r3, r3, #3
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d105      	bne.n	800bb48 <create_name+0x344>
 800bb3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb40:	f043 0310 	orr.w	r3, r3, #16
 800bb44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bb48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb4c:	f003 030c 	and.w	r3, r3, #12
 800bb50:	2b04      	cmp	r3, #4
 800bb52:	d105      	bne.n	800bb60 <create_name+0x35c>
 800bb54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb58:	f043 0308 	orr.w	r3, r3, #8
 800bb5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bb66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800bb6a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3728      	adds	r7, #40	; 0x28
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bb88:	e002      	b.n	800bb90 <follow_path+0x1c>
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	603b      	str	r3, [r7, #0]
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	2b2f      	cmp	r3, #47	; 0x2f
 800bb96:	d0f8      	beq.n	800bb8a <follow_path+0x16>
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b5c      	cmp	r3, #92	; 0x5c
 800bb9e:	d0f4      	beq.n	800bb8a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	2200      	movs	r2, #0
 800bba4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	2b1f      	cmp	r3, #31
 800bbac:	d80a      	bhi.n	800bbc4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2280      	movs	r2, #128	; 0x80
 800bbb2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f7ff f83f 	bl	800ac3c <dir_sdi>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	75fb      	strb	r3, [r7, #23]
 800bbc2:	e043      	b.n	800bc4c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bbc4:	463b      	mov	r3, r7
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f7ff fe1b 	bl	800b804 <create_name>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bbd2:	7dfb      	ldrb	r3, [r7, #23]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d134      	bne.n	800bc42 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f7ff fb7c 	bl	800b2d6 <dir_find>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bbe8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d00a      	beq.n	800bc06 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bbf0:	7dfb      	ldrb	r3, [r7, #23]
 800bbf2:	2b04      	cmp	r3, #4
 800bbf4:	d127      	bne.n	800bc46 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bbf6:	7afb      	ldrb	r3, [r7, #11]
 800bbf8:	f003 0304 	and.w	r3, r3, #4
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d122      	bne.n	800bc46 <follow_path+0xd2>
 800bc00:	2305      	movs	r3, #5
 800bc02:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bc04:	e01f      	b.n	800bc46 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc06:	7afb      	ldrb	r3, [r7, #11]
 800bc08:	f003 0304 	and.w	r3, r3, #4
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d11c      	bne.n	800bc4a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	799b      	ldrb	r3, [r3, #6]
 800bc14:	f003 0310 	and.w	r3, r3, #16
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d102      	bne.n	800bc22 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bc1c:	2305      	movs	r3, #5
 800bc1e:	75fb      	strb	r3, [r7, #23]
 800bc20:	e014      	b.n	800bc4c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	695b      	ldr	r3, [r3, #20]
 800bc2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc30:	4413      	add	r3, r2
 800bc32:	4619      	mov	r1, r3
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f7ff f988 	bl	800af4a <ld_clust>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bc40:	e7c0      	b.n	800bbc4 <follow_path+0x50>
			if (res != FR_OK) break;
 800bc42:	bf00      	nop
 800bc44:	e002      	b.n	800bc4c <follow_path+0xd8>
				break;
 800bc46:	bf00      	nop
 800bc48:	e000      	b.n	800bc4c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc4a:	bf00      	nop
			}
		}
	}

	return res;
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b087      	sub	sp, #28
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bc5e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc62:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d031      	beq.n	800bcd0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	617b      	str	r3, [r7, #20]
 800bc72:	e002      	b.n	800bc7a <get_ldnumber+0x24>
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	3301      	adds	r3, #1
 800bc78:	617b      	str	r3, [r7, #20]
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	2b1f      	cmp	r3, #31
 800bc80:	d903      	bls.n	800bc8a <get_ldnumber+0x34>
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	2b3a      	cmp	r3, #58	; 0x3a
 800bc88:	d1f4      	bne.n	800bc74 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	2b3a      	cmp	r3, #58	; 0x3a
 800bc90:	d11c      	bne.n	800bccc <get_ldnumber+0x76>
			tp = *path;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	1c5a      	adds	r2, r3, #1
 800bc9c:	60fa      	str	r2, [r7, #12]
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	3b30      	subs	r3, #48	; 0x30
 800bca2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2b09      	cmp	r3, #9
 800bca8:	d80e      	bhi.n	800bcc8 <get_ldnumber+0x72>
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d10a      	bne.n	800bcc8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d107      	bne.n	800bcc8 <get_ldnumber+0x72>
					vol = (int)i;
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	617b      	str	r3, [r7, #20]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	e002      	b.n	800bcd2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bccc:	2300      	movs	r3, #0
 800bcce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bcd0:	693b      	ldr	r3, [r7, #16]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	371c      	adds	r7, #28
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
	...

0800bce0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	70da      	strb	r2, [r3, #3]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bcf8:	6839      	ldr	r1, [r7, #0]
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7fe fc20 	bl	800a540 <move_window>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <check_fs+0x2a>
 800bd06:	2304      	movs	r3, #4
 800bd08:	e038      	b.n	800bd7c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	3334      	adds	r3, #52	; 0x34
 800bd0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fe f964 	bl	8009fe0 <ld_word>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d001      	beq.n	800bd28 <check_fs+0x48>
 800bd24:	2303      	movs	r3, #3
 800bd26:	e029      	b.n	800bd7c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd2e:	2be9      	cmp	r3, #233	; 0xe9
 800bd30:	d009      	beq.n	800bd46 <check_fs+0x66>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd38:	2beb      	cmp	r3, #235	; 0xeb
 800bd3a:	d11e      	bne.n	800bd7a <check_fs+0x9a>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bd42:	2b90      	cmp	r3, #144	; 0x90
 800bd44:	d119      	bne.n	800bd7a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	3334      	adds	r3, #52	; 0x34
 800bd4a:	3336      	adds	r3, #54	; 0x36
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7fe f95f 	bl	800a010 <ld_dword>
 800bd52:	4603      	mov	r3, r0
 800bd54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bd58:	4a0a      	ldr	r2, [pc, #40]	; (800bd84 <check_fs+0xa4>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d101      	bne.n	800bd62 <check_fs+0x82>
 800bd5e:	2300      	movs	r3, #0
 800bd60:	e00c      	b.n	800bd7c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	3334      	adds	r3, #52	; 0x34
 800bd66:	3352      	adds	r3, #82	; 0x52
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7fe f951 	bl	800a010 <ld_dword>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	4a05      	ldr	r2, [pc, #20]	; (800bd88 <check_fs+0xa8>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d101      	bne.n	800bd7a <check_fs+0x9a>
 800bd76:	2300      	movs	r3, #0
 800bd78:	e000      	b.n	800bd7c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bd7a:	2302      	movs	r3, #2
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	00544146 	.word	0x00544146
 800bd88:	33544146 	.word	0x33544146

0800bd8c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b096      	sub	sp, #88	; 0x58
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	4613      	mov	r3, r2
 800bd98:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f7ff ff58 	bl	800bc56 <get_ldnumber>
 800bda6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bda8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	da01      	bge.n	800bdb2 <find_volume+0x26>
 800bdae:	230b      	movs	r3, #11
 800bdb0:	e22d      	b.n	800c20e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bdb2:	4aa1      	ldr	r2, [pc, #644]	; (800c038 <find_volume+0x2ac>)
 800bdb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d101      	bne.n	800bdc6 <find_volume+0x3a>
 800bdc2:	230c      	movs	r3, #12
 800bdc4:	e223      	b.n	800c20e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bdcc:	79fb      	ldrb	r3, [r7, #7]
 800bdce:	f023 0301 	bic.w	r3, r3, #1
 800bdd2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d01a      	beq.n	800be12 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdde:	785b      	ldrb	r3, [r3, #1]
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7fe f85d 	bl	8009ea0 <disk_status>
 800bde6:	4603      	mov	r3, r0
 800bde8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bdec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdf0:	f003 0301 	and.w	r3, r3, #1
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10c      	bne.n	800be12 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bdf8:	79fb      	ldrb	r3, [r7, #7]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d007      	beq.n	800be0e <find_volume+0x82>
 800bdfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be02:	f003 0304 	and.w	r3, r3, #4
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800be0a:	230a      	movs	r3, #10
 800be0c:	e1ff      	b.n	800c20e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800be0e:	2300      	movs	r3, #0
 800be10:	e1fd      	b.n	800c20e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800be12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be14:	2200      	movs	r2, #0
 800be16:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800be18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be1a:	b2da      	uxtb	r2, r3
 800be1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800be20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be22:	785b      	ldrb	r3, [r3, #1]
 800be24:	4618      	mov	r0, r3
 800be26:	f7fe f855 	bl	8009ed4 <disk_initialize>
 800be2a:	4603      	mov	r3, r0
 800be2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800be30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be34:	f003 0301 	and.w	r3, r3, #1
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d001      	beq.n	800be40 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800be3c:	2303      	movs	r3, #3
 800be3e:	e1e6      	b.n	800c20e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800be40:	79fb      	ldrb	r3, [r7, #7]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d007      	beq.n	800be56 <find_volume+0xca>
 800be46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be4a:	f003 0304 	and.w	r3, r3, #4
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d001      	beq.n	800be56 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800be52:	230a      	movs	r3, #10
 800be54:	e1db      	b.n	800c20e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800be56:	2300      	movs	r3, #0
 800be58:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800be5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be5e:	f7ff ff3f 	bl	800bce0 <check_fs>
 800be62:	4603      	mov	r3, r0
 800be64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800be68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be6c:	2b02      	cmp	r3, #2
 800be6e:	d149      	bne.n	800bf04 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be70:	2300      	movs	r3, #0
 800be72:	643b      	str	r3, [r7, #64]	; 0x40
 800be74:	e01e      	b.n	800beb4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800be76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800be7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be7e:	011b      	lsls	r3, r3, #4
 800be80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800be84:	4413      	add	r3, r2
 800be86:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8a:	3304      	adds	r3, #4
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d006      	beq.n	800bea0 <find_volume+0x114>
 800be92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be94:	3308      	adds	r3, #8
 800be96:	4618      	mov	r0, r3
 800be98:	f7fe f8ba 	bl	800a010 <ld_dword>
 800be9c:	4602      	mov	r2, r0
 800be9e:	e000      	b.n	800bea2 <find_volume+0x116>
 800bea0:	2200      	movs	r2, #0
 800bea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	3358      	adds	r3, #88	; 0x58
 800bea8:	443b      	add	r3, r7
 800beaa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800beae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beb0:	3301      	adds	r3, #1
 800beb2:	643b      	str	r3, [r7, #64]	; 0x40
 800beb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beb6:	2b03      	cmp	r3, #3
 800beb8:	d9dd      	bls.n	800be76 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800beba:	2300      	movs	r3, #0
 800bebc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d002      	beq.n	800beca <find_volume+0x13e>
 800bec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bec6:	3b01      	subs	r3, #1
 800bec8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800beca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	3358      	adds	r3, #88	; 0x58
 800bed0:	443b      	add	r3, r7
 800bed2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bed6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d005      	beq.n	800beea <find_volume+0x15e>
 800bede:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bee0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bee2:	f7ff fefd 	bl	800bce0 <check_fs>
 800bee6:	4603      	mov	r3, r0
 800bee8:	e000      	b.n	800beec <find_volume+0x160>
 800beea:	2303      	movs	r3, #3
 800beec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bef0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d905      	bls.n	800bf04 <find_volume+0x178>
 800bef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800befa:	3301      	adds	r3, #1
 800befc:	643b      	str	r3, [r7, #64]	; 0x40
 800befe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf00:	2b03      	cmp	r3, #3
 800bf02:	d9e2      	bls.n	800beca <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bf04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf08:	2b04      	cmp	r3, #4
 800bf0a:	d101      	bne.n	800bf10 <find_volume+0x184>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e17e      	b.n	800c20e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bf10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d901      	bls.n	800bf1c <find_volume+0x190>
 800bf18:	230d      	movs	r3, #13
 800bf1a:	e178      	b.n	800c20e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1e:	3334      	adds	r3, #52	; 0x34
 800bf20:	330b      	adds	r3, #11
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fe f85c 	bl	8009fe0 <ld_word>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf2e:	d001      	beq.n	800bf34 <find_volume+0x1a8>
 800bf30:	230d      	movs	r3, #13
 800bf32:	e16c      	b.n	800c20e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf36:	3334      	adds	r3, #52	; 0x34
 800bf38:	3316      	adds	r3, #22
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fe f850 	bl	8009fe0 <ld_word>
 800bf40:	4603      	mov	r3, r0
 800bf42:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bf44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d106      	bne.n	800bf58 <find_volume+0x1cc>
 800bf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4c:	3334      	adds	r3, #52	; 0x34
 800bf4e:	3324      	adds	r3, #36	; 0x24
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fe f85d 	bl	800a010 <ld_dword>
 800bf56:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bf58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf5c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf60:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800bf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf66:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	789b      	ldrb	r3, [r3, #2]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d005      	beq.n	800bf7c <find_volume+0x1f0>
 800bf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf72:	789b      	ldrb	r3, [r3, #2]
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d001      	beq.n	800bf7c <find_volume+0x1f0>
 800bf78:	230d      	movs	r3, #13
 800bf7a:	e148      	b.n	800c20e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bf7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7e:	789b      	ldrb	r3, [r3, #2]
 800bf80:	461a      	mov	r2, r3
 800bf82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf84:	fb02 f303 	mul.w	r3, r2, r3
 800bf88:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf94:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf98:	895b      	ldrh	r3, [r3, #10]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d008      	beq.n	800bfb0 <find_volume+0x224>
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa0:	895b      	ldrh	r3, [r3, #10]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	895b      	ldrh	r3, [r3, #10]
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	4013      	ands	r3, r2
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d001      	beq.n	800bfb4 <find_volume+0x228>
 800bfb0:	230d      	movs	r3, #13
 800bfb2:	e12c      	b.n	800c20e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb6:	3334      	adds	r3, #52	; 0x34
 800bfb8:	3311      	adds	r3, #17
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fe f810 	bl	8009fe0 <ld_word>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfca:	891b      	ldrh	r3, [r3, #8]
 800bfcc:	f003 030f 	and.w	r3, r3, #15
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d001      	beq.n	800bfda <find_volume+0x24e>
 800bfd6:	230d      	movs	r3, #13
 800bfd8:	e119      	b.n	800c20e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfdc:	3334      	adds	r3, #52	; 0x34
 800bfde:	3313      	adds	r3, #19
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fd fffd 	bl	8009fe0 <ld_word>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bfea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d106      	bne.n	800bffe <find_volume+0x272>
 800bff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff2:	3334      	adds	r3, #52	; 0x34
 800bff4:	3320      	adds	r3, #32
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7fe f80a 	bl	800a010 <ld_dword>
 800bffc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c000:	3334      	adds	r3, #52	; 0x34
 800c002:	330e      	adds	r3, #14
 800c004:	4618      	mov	r0, r3
 800c006:	f7fd ffeb 	bl	8009fe0 <ld_word>
 800c00a:	4603      	mov	r3, r0
 800c00c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c00e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c010:	2b00      	cmp	r3, #0
 800c012:	d101      	bne.n	800c018 <find_volume+0x28c>
 800c014:	230d      	movs	r3, #13
 800c016:	e0fa      	b.n	800c20e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c018:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c01c:	4413      	add	r3, r2
 800c01e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c020:	8912      	ldrh	r2, [r2, #8]
 800c022:	0912      	lsrs	r2, r2, #4
 800c024:	b292      	uxth	r2, r2
 800c026:	4413      	add	r3, r2
 800c028:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c02a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02e:	429a      	cmp	r2, r3
 800c030:	d204      	bcs.n	800c03c <find_volume+0x2b0>
 800c032:	230d      	movs	r3, #13
 800c034:	e0eb      	b.n	800c20e <find_volume+0x482>
 800c036:	bf00      	nop
 800c038:	20002d84 	.word	0x20002d84
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c03c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c044:	8952      	ldrh	r2, [r2, #10]
 800c046:	fbb3 f3f2 	udiv	r3, r3, r2
 800c04a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <find_volume+0x2ca>
 800c052:	230d      	movs	r3, #13
 800c054:	e0db      	b.n	800c20e <find_volume+0x482>
		fmt = FS_FAT32;
 800c056:	2303      	movs	r3, #3
 800c058:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c062:	4293      	cmp	r3, r2
 800c064:	d802      	bhi.n	800c06c <find_volume+0x2e0>
 800c066:	2302      	movs	r3, #2
 800c068:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c072:	4293      	cmp	r3, r2
 800c074:	d802      	bhi.n	800c07c <find_volume+0x2f0>
 800c076:	2301      	movs	r3, #1
 800c078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07e:	1c9a      	adds	r2, r3, #2
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c086:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c088:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c08a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c08c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c08e:	441a      	add	r2, r3
 800c090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c092:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c094:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c098:	441a      	add	r2, r3
 800c09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c09e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c0a2:	2b03      	cmp	r3, #3
 800c0a4:	d11e      	bne.n	800c0e4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a8:	3334      	adds	r3, #52	; 0x34
 800c0aa:	332a      	adds	r3, #42	; 0x2a
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7fd ff97 	bl	8009fe0 <ld_word>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d001      	beq.n	800c0bc <find_volume+0x330>
 800c0b8:	230d      	movs	r3, #13
 800c0ba:	e0a8      	b.n	800c20e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0be:	891b      	ldrh	r3, [r3, #8]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d001      	beq.n	800c0c8 <find_volume+0x33c>
 800c0c4:	230d      	movs	r3, #13
 800c0c6:	e0a2      	b.n	800c20e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	3334      	adds	r3, #52	; 0x34
 800c0cc:	332c      	adds	r3, #44	; 0x2c
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fd ff9e 	bl	800a010 <ld_dword>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	647b      	str	r3, [r7, #68]	; 0x44
 800c0e2:	e01f      	b.n	800c124 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e6:	891b      	ldrh	r3, [r3, #8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d101      	bne.n	800c0f0 <find_volume+0x364>
 800c0ec:	230d      	movs	r3, #13
 800c0ee:	e08e      	b.n	800c20e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0f6:	441a      	add	r2, r3
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c0fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c100:	2b02      	cmp	r3, #2
 800c102:	d103      	bne.n	800c10c <find_volume+0x380>
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	699b      	ldr	r3, [r3, #24]
 800c108:	005b      	lsls	r3, r3, #1
 800c10a:	e00a      	b.n	800c122 <find_volume+0x396>
 800c10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10e:	699a      	ldr	r2, [r3, #24]
 800c110:	4613      	mov	r3, r2
 800c112:	005b      	lsls	r3, r3, #1
 800c114:	4413      	add	r3, r2
 800c116:	085a      	lsrs	r2, r3, #1
 800c118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11a:	699b      	ldr	r3, [r3, #24]
 800c11c:	f003 0301 	and.w	r3, r3, #1
 800c120:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c122:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c126:	69da      	ldr	r2, [r3, #28]
 800c128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c12a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c12e:	0a5b      	lsrs	r3, r3, #9
 800c130:	429a      	cmp	r2, r3
 800c132:	d201      	bcs.n	800c138 <find_volume+0x3ac>
 800c134:	230d      	movs	r3, #13
 800c136:	e06a      	b.n	800c20e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13a:	f04f 32ff 	mov.w	r2, #4294967295
 800c13e:	615a      	str	r2, [r3, #20]
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	695a      	ldr	r2, [r3, #20]
 800c144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c146:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14a:	2280      	movs	r2, #128	; 0x80
 800c14c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c14e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c152:	2b03      	cmp	r3, #3
 800c154:	d149      	bne.n	800c1ea <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c158:	3334      	adds	r3, #52	; 0x34
 800c15a:	3330      	adds	r3, #48	; 0x30
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7fd ff3f 	bl	8009fe0 <ld_word>
 800c162:	4603      	mov	r3, r0
 800c164:	2b01      	cmp	r3, #1
 800c166:	d140      	bne.n	800c1ea <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c16a:	3301      	adds	r3, #1
 800c16c:	4619      	mov	r1, r3
 800c16e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c170:	f7fe f9e6 	bl	800a540 <move_window>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d137      	bne.n	800c1ea <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17c:	2200      	movs	r2, #0
 800c17e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c182:	3334      	adds	r3, #52	; 0x34
 800c184:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fd ff29 	bl	8009fe0 <ld_word>
 800c18e:	4603      	mov	r3, r0
 800c190:	461a      	mov	r2, r3
 800c192:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c196:	429a      	cmp	r2, r3
 800c198:	d127      	bne.n	800c1ea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19c:	3334      	adds	r3, #52	; 0x34
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fd ff36 	bl	800a010 <ld_dword>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	4a1c      	ldr	r2, [pc, #112]	; (800c218 <find_volume+0x48c>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d11e      	bne.n	800c1ea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ae:	3334      	adds	r3, #52	; 0x34
 800c1b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7fd ff2b 	bl	800a010 <ld_dword>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	4a17      	ldr	r2, [pc, #92]	; (800c21c <find_volume+0x490>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d113      	bne.n	800c1ea <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c4:	3334      	adds	r3, #52	; 0x34
 800c1c6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fd ff20 	bl	800a010 <ld_dword>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d8:	3334      	adds	r3, #52	; 0x34
 800c1da:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fd ff16 	bl	800a010 <ld_dword>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ec:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c1f0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c1f2:	4b0b      	ldr	r3, [pc, #44]	; (800c220 <find_volume+0x494>)
 800c1f4:	881b      	ldrh	r3, [r3, #0]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	4b09      	ldr	r3, [pc, #36]	; (800c220 <find_volume+0x494>)
 800c1fc:	801a      	strh	r2, [r3, #0]
 800c1fe:	4b08      	ldr	r3, [pc, #32]	; (800c220 <find_volume+0x494>)
 800c200:	881a      	ldrh	r2, [r3, #0]
 800c202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c204:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c206:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c208:	f7fe f932 	bl	800a470 <clear_lock>
#endif
	return FR_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3758      	adds	r7, #88	; 0x58
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	41615252 	.word	0x41615252
 800c21c:	61417272 	.word	0x61417272
 800c220:	20002d88 	.word	0x20002d88

0800c224 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c22e:	2309      	movs	r3, #9
 800c230:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d01c      	beq.n	800c272 <validate+0x4e>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d018      	beq.n	800c272 <validate+0x4e>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d013      	beq.n	800c272 <validate+0x4e>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	889a      	ldrh	r2, [r3, #4]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	88db      	ldrh	r3, [r3, #6]
 800c254:	429a      	cmp	r2, r3
 800c256:	d10c      	bne.n	800c272 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	785b      	ldrb	r3, [r3, #1]
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fd fe1e 	bl	8009ea0 <disk_status>
 800c264:	4603      	mov	r3, r0
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d101      	bne.n	800c272 <validate+0x4e>
			res = FR_OK;
 800c26e:	2300      	movs	r3, #0
 800c270:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c272:	7bfb      	ldrb	r3, [r7, #15]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d102      	bne.n	800c27e <validate+0x5a>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	e000      	b.n	800c280 <validate+0x5c>
 800c27e:	2300      	movs	r3, #0
 800c280:	683a      	ldr	r2, [r7, #0]
 800c282:	6013      	str	r3, [r2, #0]
	return res;
 800c284:	7bfb      	ldrb	r3, [r7, #15]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
	...

0800c290 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	4613      	mov	r3, r2
 800c29c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c2a2:	f107 0310 	add.w	r3, r7, #16
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7ff fcd5 	bl	800bc56 <get_ldnumber>
 800c2ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	da01      	bge.n	800c2b8 <f_mount+0x28>
 800c2b4:	230b      	movs	r3, #11
 800c2b6:	e02b      	b.n	800c310 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c2b8:	4a17      	ldr	r2, [pc, #92]	; (800c318 <f_mount+0x88>)
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d005      	beq.n	800c2d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c2c8:	69b8      	ldr	r0, [r7, #24]
 800c2ca:	f7fe f8d1 	bl	800a470 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d002      	beq.n	800c2e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	490d      	ldr	r1, [pc, #52]	; (800c318 <f_mount+0x88>)
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d002      	beq.n	800c2f6 <f_mount+0x66>
 800c2f0:	79fb      	ldrb	r3, [r7, #7]
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d001      	beq.n	800c2fa <f_mount+0x6a>
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	e00a      	b.n	800c310 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c2fa:	f107 010c 	add.w	r1, r7, #12
 800c2fe:	f107 0308 	add.w	r3, r7, #8
 800c302:	2200      	movs	r2, #0
 800c304:	4618      	mov	r0, r3
 800c306:	f7ff fd41 	bl	800bd8c <find_volume>
 800c30a:	4603      	mov	r3, r0
 800c30c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c30e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3720      	adds	r7, #32
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	20002d84 	.word	0x20002d84

0800c31c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b09a      	sub	sp, #104	; 0x68
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	4613      	mov	r3, r2
 800c328:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d101      	bne.n	800c334 <f_open+0x18>
 800c330:	2309      	movs	r3, #9
 800c332:	e1bd      	b.n	800c6b0 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c334:	79fb      	ldrb	r3, [r7, #7]
 800c336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c33a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c33c:	79fa      	ldrb	r2, [r7, #7]
 800c33e:	f107 0110 	add.w	r1, r7, #16
 800c342:	f107 0308 	add.w	r3, r7, #8
 800c346:	4618      	mov	r0, r3
 800c348:	f7ff fd20 	bl	800bd8c <find_volume>
 800c34c:	4603      	mov	r3, r0
 800c34e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c352:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c356:	2b00      	cmp	r3, #0
 800c358:	f040 81a1 	bne.w	800c69e <f_open+0x382>
		dj.obj.fs = fs;
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800c360:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c364:	f001 fb50 	bl	800da08 <ff_memalloc>
 800c368:	65b8      	str	r0, [r7, #88]	; 0x58
 800c36a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d101      	bne.n	800c374 <f_open+0x58>
 800c370:	2311      	movs	r3, #17
 800c372:	e19d      	b.n	800c6b0 <f_open+0x394>
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c378:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	f107 0314 	add.w	r3, r7, #20
 800c380:	4611      	mov	r1, r2
 800c382:	4618      	mov	r0, r3
 800c384:	f7ff fbf6 	bl	800bb74 <follow_path>
 800c388:	4603      	mov	r3, r0
 800c38a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c38e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c392:	2b00      	cmp	r3, #0
 800c394:	d11a      	bne.n	800c3cc <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c396:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c39a:	b25b      	sxtb	r3, r3
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	da03      	bge.n	800c3a8 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800c3a0:	2306      	movs	r3, #6
 800c3a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c3a6:	e011      	b.n	800c3cc <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c3a8:	79fb      	ldrb	r3, [r7, #7]
 800c3aa:	f023 0301 	bic.w	r3, r3, #1
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	bf14      	ite	ne
 800c3b2:	2301      	movne	r3, #1
 800c3b4:	2300      	moveq	r3, #0
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	f107 0314 	add.w	r3, r7, #20
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fd ff0d 	bl	800a1e0 <chk_lock>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c3cc:	79fb      	ldrb	r3, [r7, #7]
 800c3ce:	f003 031c 	and.w	r3, r3, #28
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d07f      	beq.n	800c4d6 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800c3d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d017      	beq.n	800c40e <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c3de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c3e2:	2b04      	cmp	r3, #4
 800c3e4:	d10e      	bne.n	800c404 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c3e6:	f7fd ff57 	bl	800a298 <enq_lock>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d006      	beq.n	800c3fe <f_open+0xe2>
 800c3f0:	f107 0314 	add.w	r3, r7, #20
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff f82f 	bl	800b458 <dir_register>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	e000      	b.n	800c400 <f_open+0xe4>
 800c3fe:	2312      	movs	r3, #18
 800c400:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c404:	79fb      	ldrb	r3, [r7, #7]
 800c406:	f043 0308 	orr.w	r3, r3, #8
 800c40a:	71fb      	strb	r3, [r7, #7]
 800c40c:	e010      	b.n	800c430 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c40e:	7ebb      	ldrb	r3, [r7, #26]
 800c410:	f003 0311 	and.w	r3, r3, #17
 800c414:	2b00      	cmp	r3, #0
 800c416:	d003      	beq.n	800c420 <f_open+0x104>
					res = FR_DENIED;
 800c418:	2307      	movs	r3, #7
 800c41a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c41e:	e007      	b.n	800c430 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c420:	79fb      	ldrb	r3, [r7, #7]
 800c422:	f003 0304 	and.w	r3, r3, #4
 800c426:	2b00      	cmp	r3, #0
 800c428:	d002      	beq.n	800c430 <f_open+0x114>
 800c42a:	2308      	movs	r3, #8
 800c42c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c430:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c434:	2b00      	cmp	r3, #0
 800c436:	d168      	bne.n	800c50a <f_open+0x1ee>
 800c438:	79fb      	ldrb	r3, [r7, #7]
 800c43a:	f003 0308 	and.w	r3, r3, #8
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d063      	beq.n	800c50a <f_open+0x1ee>
				dw = GET_FATTIME();
 800c442:	f7fb fd5c 	bl	8007efe <get_fattime>
 800c446:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c44a:	330e      	adds	r3, #14
 800c44c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c44e:	4618      	mov	r0, r3
 800c450:	f7fd fe1c 	bl	800a08c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c456:	3316      	adds	r3, #22
 800c458:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7fd fe16 	bl	800a08c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c462:	330b      	adds	r3, #11
 800c464:	2220      	movs	r2, #32
 800c466:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c46c:	4611      	mov	r1, r2
 800c46e:	4618      	mov	r0, r3
 800c470:	f7fe fd6b 	bl	800af4a <ld_clust>
 800c474:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c47a:	2200      	movs	r2, #0
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7fe fd83 	bl	800af88 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c484:	331c      	adds	r3, #28
 800c486:	2100      	movs	r1, #0
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fd fdff 	bl	800a08c <st_dword>
					fs->wflag = 1;
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	2201      	movs	r2, #1
 800c492:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c496:	2b00      	cmp	r3, #0
 800c498:	d037      	beq.n	800c50a <f_open+0x1ee>
						dw = fs->winsect;
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c49e:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800c4a0:	f107 0314 	add.w	r3, r7, #20
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7fe fa96 	bl	800a9da <remove_chain>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c4b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d126      	bne.n	800c50a <f_open+0x1ee>
							res = move_window(fs, dw);
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fe f83d 	bl	800a540 <move_window>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c4d0:	3a01      	subs	r2, #1
 800c4d2:	611a      	str	r2, [r3, #16]
 800c4d4:	e019      	b.n	800c50a <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c4d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d115      	bne.n	800c50a <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c4de:	7ebb      	ldrb	r3, [r7, #26]
 800c4e0:	f003 0310 	and.w	r3, r3, #16
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d003      	beq.n	800c4f0 <f_open+0x1d4>
					res = FR_NO_FILE;
 800c4e8:	2304      	movs	r3, #4
 800c4ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c4ee:	e00c      	b.n	800c50a <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c4f0:	79fb      	ldrb	r3, [r7, #7]
 800c4f2:	f003 0302 	and.w	r3, r3, #2
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d007      	beq.n	800c50a <f_open+0x1ee>
 800c4fa:	7ebb      	ldrb	r3, [r7, #26]
 800c4fc:	f003 0301 	and.w	r3, r3, #1
 800c500:	2b00      	cmp	r3, #0
 800c502:	d002      	beq.n	800c50a <f_open+0x1ee>
						res = FR_DENIED;
 800c504:	2307      	movs	r3, #7
 800c506:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c50a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d128      	bne.n	800c564 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	f003 0308 	and.w	r3, r3, #8
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d003      	beq.n	800c524 <f_open+0x208>
				mode |= FA_MODIFIED;
 800c51c:	79fb      	ldrb	r3, [r7, #7]
 800c51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c522:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c52c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c532:	79fb      	ldrb	r3, [r7, #7]
 800c534:	f023 0301 	bic.w	r3, r3, #1
 800c538:	2b00      	cmp	r3, #0
 800c53a:	bf14      	ite	ne
 800c53c:	2301      	movne	r3, #1
 800c53e:	2300      	moveq	r3, #0
 800c540:	b2db      	uxtb	r3, r3
 800c542:	461a      	mov	r2, r3
 800c544:	f107 0314 	add.w	r3, r7, #20
 800c548:	4611      	mov	r1, r2
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7fd fec6 	bl	800a2dc <inc_lock>
 800c550:	4602      	mov	r2, r0
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d102      	bne.n	800c564 <f_open+0x248>
 800c55e:	2302      	movs	r3, #2
 800c560:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c564:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f040 8095 	bne.w	800c698 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c572:	4611      	mov	r1, r2
 800c574:	4618      	mov	r0, r3
 800c576:	f7fe fce8 	bl	800af4a <ld_clust>
 800c57a:	4602      	mov	r2, r0
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c582:	331c      	adds	r3, #28
 800c584:	4618      	mov	r0, r3
 800c586:	f7fd fd43 	bl	800a010 <ld_dword>
 800c58a:	4602      	mov	r2, r0
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c596:	693a      	ldr	r2, [r7, #16]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	88da      	ldrh	r2, [r3, #6]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	79fa      	ldrb	r2, [r7, #7]
 800c5a8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	3330      	adds	r3, #48	; 0x30
 800c5c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fd fdad 	bl	800a126 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c5cc:	79fb      	ldrb	r3, [r7, #7]
 800c5ce:	f003 0320 	and.w	r3, r3, #32
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d060      	beq.n	800c698 <f_open+0x37c>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d05c      	beq.n	800c698 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	68da      	ldr	r2, [r3, #12]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	895b      	ldrh	r3, [r3, #10]
 800c5ea:	025b      	lsls	r3, r3, #9
 800c5ec:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5fa:	e016      	b.n	800c62a <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c600:	4618      	mov	r0, r3
 800c602:	f7fe f858 	bl	800a6b6 <get_fat>
 800c606:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d802      	bhi.n	800c614 <f_open+0x2f8>
 800c60e:	2302      	movs	r3, #2
 800c610:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c61a:	d102      	bne.n	800c622 <f_open+0x306>
 800c61c:	2301      	movs	r3, #1
 800c61e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c622:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c62a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d103      	bne.n	800c63a <f_open+0x31e>
 800c632:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c636:	429a      	cmp	r2, r3
 800c638:	d8e0      	bhi.n	800c5fc <f_open+0x2e0>
				}
				fp->clust = clst;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c63e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c640:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c644:	2b00      	cmp	r3, #0
 800c646:	d127      	bne.n	800c698 <f_open+0x37c>
 800c648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d022      	beq.n	800c698 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c656:	4618      	mov	r0, r3
 800c658:	f7fe f80e 	bl	800a678 <clust2sect>
 800c65c:	64b8      	str	r0, [r7, #72]	; 0x48
 800c65e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c660:	2b00      	cmp	r3, #0
 800c662:	d103      	bne.n	800c66c <f_open+0x350>
						res = FR_INT_ERR;
 800c664:	2302      	movs	r3, #2
 800c666:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c66a:	e015      	b.n	800c698 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c66c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c66e:	0a5a      	lsrs	r2, r3, #9
 800c670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c672:	441a      	add	r2, r3
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	7858      	ldrb	r0, [r3, #1]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6a1a      	ldr	r2, [r3, #32]
 800c686:	2301      	movs	r3, #1
 800c688:	f7fd fc4c 	bl	8009f24 <disk_read>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d002      	beq.n	800c698 <f_open+0x37c>
 800c692:	2301      	movs	r3, #1
 800c694:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800c698:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c69a:	f001 f9c1 	bl	800da20 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c69e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d002      	beq.n	800c6ac <f_open+0x390>
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c6ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3768      	adds	r7, #104	; 0x68
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b08e      	sub	sp, #56	; 0x38
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	607a      	str	r2, [r7, #4]
 800c6c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f107 0214 	add.w	r2, r7, #20
 800c6d6:	4611      	mov	r1, r2
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7ff fda3 	bl	800c224 <validate>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c6e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d107      	bne.n	800c6fc <f_read+0x44>
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	7d5b      	ldrb	r3, [r3, #21]
 800c6f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c6f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <f_read+0x4a>
 800c6fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c700:	e115      	b.n	800c92e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	7d1b      	ldrb	r3, [r3, #20]
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d101      	bne.n	800c712 <f_read+0x5a>
 800c70e:	2307      	movs	r3, #7
 800c710:	e10d      	b.n	800c92e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	68da      	ldr	r2, [r3, #12]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	699b      	ldr	r3, [r3, #24]
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	6a3b      	ldr	r3, [r7, #32]
 800c722:	429a      	cmp	r2, r3
 800c724:	f240 80fe 	bls.w	800c924 <f_read+0x26c>
 800c728:	6a3b      	ldr	r3, [r7, #32]
 800c72a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c72c:	e0fa      	b.n	800c924 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	699b      	ldr	r3, [r3, #24]
 800c732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c736:	2b00      	cmp	r3, #0
 800c738:	f040 80c6 	bne.w	800c8c8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	699b      	ldr	r3, [r3, #24]
 800c740:	0a5b      	lsrs	r3, r3, #9
 800c742:	697a      	ldr	r2, [r7, #20]
 800c744:	8952      	ldrh	r2, [r2, #10]
 800c746:	3a01      	subs	r2, #1
 800c748:	4013      	ands	r3, r2
 800c74a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d12f      	bne.n	800c7b2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d103      	bne.n	800c762 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	633b      	str	r3, [r7, #48]	; 0x30
 800c760:	e013      	b.n	800c78a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c766:	2b00      	cmp	r3, #0
 800c768:	d007      	beq.n	800c77a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	699b      	ldr	r3, [r3, #24]
 800c76e:	4619      	mov	r1, r3
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f7fe fa2f 	bl	800abd4 <clmt_clust>
 800c776:	6338      	str	r0, [r7, #48]	; 0x30
 800c778:	e007      	b.n	800c78a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	69db      	ldr	r3, [r3, #28]
 800c780:	4619      	mov	r1, r3
 800c782:	4610      	mov	r0, r2
 800c784:	f7fd ff97 	bl	800a6b6 <get_fat>
 800c788:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d804      	bhi.n	800c79a <f_read+0xe2>
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2202      	movs	r2, #2
 800c794:	755a      	strb	r2, [r3, #21]
 800c796:	2302      	movs	r3, #2
 800c798:	e0c9      	b.n	800c92e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a0:	d104      	bne.n	800c7ac <f_read+0xf4>
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	755a      	strb	r2, [r3, #21]
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e0c0      	b.n	800c92e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7b0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c7b2:	697a      	ldr	r2, [r7, #20]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	69db      	ldr	r3, [r3, #28]
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	f7fd ff5c 	bl	800a678 <clust2sect>
 800c7c0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d104      	bne.n	800c7d2 <f_read+0x11a>
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2202      	movs	r2, #2
 800c7cc:	755a      	strb	r2, [r3, #21]
 800c7ce:	2302      	movs	r3, #2
 800c7d0:	e0ad      	b.n	800c92e <f_read+0x276>
			sect += csect;
 800c7d2:	69ba      	ldr	r2, [r7, #24]
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	0a5b      	lsrs	r3, r3, #9
 800c7de:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d039      	beq.n	800c85a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c7e6:	69fa      	ldr	r2, [r7, #28]
 800c7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ea:	4413      	add	r3, r2
 800c7ec:	697a      	ldr	r2, [r7, #20]
 800c7ee:	8952      	ldrh	r2, [r2, #10]
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d905      	bls.n	800c800 <f_read+0x148>
					cc = fs->csize - csect;
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	895b      	ldrh	r3, [r3, #10]
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	1ad3      	subs	r3, r2, r3
 800c7fe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	7858      	ldrb	r0, [r3, #1]
 800c804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c806:	69ba      	ldr	r2, [r7, #24]
 800c808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c80a:	f7fd fb8b 	bl	8009f24 <disk_read>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d004      	beq.n	800c81e <f_read+0x166>
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2201      	movs	r2, #1
 800c818:	755a      	strb	r2, [r3, #21]
 800c81a:	2301      	movs	r3, #1
 800c81c:	e087      	b.n	800c92e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	7d1b      	ldrb	r3, [r3, #20]
 800c822:	b25b      	sxtb	r3, r3
 800c824:	2b00      	cmp	r3, #0
 800c826:	da14      	bge.n	800c852 <f_read+0x19a>
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6a1a      	ldr	r2, [r3, #32]
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	1ad3      	subs	r3, r2, r3
 800c830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c832:	429a      	cmp	r2, r3
 800c834:	d90d      	bls.n	800c852 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6a1a      	ldr	r2, [r3, #32]
 800c83a:	69bb      	ldr	r3, [r7, #24]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	025b      	lsls	r3, r3, #9
 800c840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c842:	18d0      	adds	r0, r2, r3
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3330      	adds	r3, #48	; 0x30
 800c848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c84c:	4619      	mov	r1, r3
 800c84e:	f7fd fc49 	bl	800a0e4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c854:	025b      	lsls	r3, r3, #9
 800c856:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c858:	e050      	b.n	800c8fc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6a1b      	ldr	r3, [r3, #32]
 800c85e:	69ba      	ldr	r2, [r7, #24]
 800c860:	429a      	cmp	r2, r3
 800c862:	d02e      	beq.n	800c8c2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	7d1b      	ldrb	r3, [r3, #20]
 800c868:	b25b      	sxtb	r3, r3
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	da18      	bge.n	800c8a0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	7858      	ldrb	r0, [r3, #1]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6a1a      	ldr	r2, [r3, #32]
 800c87c:	2301      	movs	r3, #1
 800c87e:	f7fd fb71 	bl	8009f64 <disk_write>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	d004      	beq.n	800c892 <f_read+0x1da>
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2201      	movs	r2, #1
 800c88c:	755a      	strb	r2, [r3, #21]
 800c88e:	2301      	movs	r3, #1
 800c890:	e04d      	b.n	800c92e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	7d1b      	ldrb	r3, [r3, #20]
 800c896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c89a:	b2da      	uxtb	r2, r3
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	7858      	ldrb	r0, [r3, #1]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	69ba      	ldr	r2, [r7, #24]
 800c8ae:	f7fd fb39 	bl	8009f24 <disk_read>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d004      	beq.n	800c8c2 <f_read+0x20a>
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	755a      	strb	r2, [r3, #21]
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e035      	b.n	800c92e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	69ba      	ldr	r2, [r7, #24]
 800c8c6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	699b      	ldr	r3, [r3, #24]
 800c8cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8d0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c8d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d901      	bls.n	800c8e2 <f_read+0x22a>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	699b      	ldr	r3, [r3, #24]
 800c8ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f0:	4413      	add	r3, r2
 800c8f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8f8:	f7fd fbf4 	bl	800a0e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c8fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c900:	4413      	add	r3, r2
 800c902:	627b      	str	r3, [r7, #36]	; 0x24
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	699a      	ldr	r2, [r3, #24]
 800c908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90a:	441a      	add	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	619a      	str	r2, [r3, #24]
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c916:	441a      	add	r2, r3
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	601a      	str	r2, [r3, #0]
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c920:	1ad3      	subs	r3, r2, r3
 800c922:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	f47f af01 	bne.w	800c72e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3738      	adds	r7, #56	; 0x38
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b08c      	sub	sp, #48	; 0x30
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	60f8      	str	r0, [r7, #12]
 800c93e:	60b9      	str	r1, [r7, #8]
 800c940:	607a      	str	r2, [r7, #4]
 800c942:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	2200      	movs	r2, #0
 800c94c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f107 0210 	add.w	r2, r7, #16
 800c954:	4611      	mov	r1, r2
 800c956:	4618      	mov	r0, r3
 800c958:	f7ff fc64 	bl	800c224 <validate>
 800c95c:	4603      	mov	r3, r0
 800c95e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c966:	2b00      	cmp	r3, #0
 800c968:	d107      	bne.n	800c97a <f_write+0x44>
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	7d5b      	ldrb	r3, [r3, #21]
 800c96e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c976:	2b00      	cmp	r3, #0
 800c978:	d002      	beq.n	800c980 <f_write+0x4a>
 800c97a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c97e:	e14b      	b.n	800cc18 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	7d1b      	ldrb	r3, [r3, #20]
 800c984:	f003 0302 	and.w	r3, r3, #2
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d101      	bne.n	800c990 <f_write+0x5a>
 800c98c:	2307      	movs	r3, #7
 800c98e:	e143      	b.n	800cc18 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	699a      	ldr	r2, [r3, #24]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	441a      	add	r2, r3
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	699b      	ldr	r3, [r3, #24]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	f080 812d 	bcs.w	800cbfc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	699b      	ldr	r3, [r3, #24]
 800c9a6:	43db      	mvns	r3, r3
 800c9a8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c9aa:	e127      	b.n	800cbfc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	699b      	ldr	r3, [r3, #24]
 800c9b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f040 80e3 	bne.w	800cb80 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	699b      	ldr	r3, [r3, #24]
 800c9be:	0a5b      	lsrs	r3, r3, #9
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	8952      	ldrh	r2, [r2, #10]
 800c9c4:	3a01      	subs	r2, #1
 800c9c6:	4013      	ands	r3, r2
 800c9c8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d143      	bne.n	800ca58 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	699b      	ldr	r3, [r3, #24]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10c      	bne.n	800c9f2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d11a      	bne.n	800ca1a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fe f85b 	bl	800aaa4 <create_chain>
 800c9ee:	62b8      	str	r0, [r7, #40]	; 0x28
 800c9f0:	e013      	b.n	800ca1a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d007      	beq.n	800ca0a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	699b      	ldr	r3, [r3, #24]
 800c9fe:	4619      	mov	r1, r3
 800ca00:	68f8      	ldr	r0, [r7, #12]
 800ca02:	f7fe f8e7 	bl	800abd4 <clmt_clust>
 800ca06:	62b8      	str	r0, [r7, #40]	; 0x28
 800ca08:	e007      	b.n	800ca1a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	69db      	ldr	r3, [r3, #28]
 800ca10:	4619      	mov	r1, r3
 800ca12:	4610      	mov	r0, r2
 800ca14:	f7fe f846 	bl	800aaa4 <create_chain>
 800ca18:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ca1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f000 80f2 	beq.w	800cc06 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ca22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d104      	bne.n	800ca32 <f_write+0xfc>
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2202      	movs	r2, #2
 800ca2c:	755a      	strb	r2, [r3, #21]
 800ca2e:	2302      	movs	r3, #2
 800ca30:	e0f2      	b.n	800cc18 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca38:	d104      	bne.n	800ca44 <f_write+0x10e>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	755a      	strb	r2, [r3, #21]
 800ca40:	2301      	movs	r3, #1
 800ca42:	e0e9      	b.n	800cc18 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca48:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	689b      	ldr	r3, [r3, #8]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d102      	bne.n	800ca58 <f_write+0x122>
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca56:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	7d1b      	ldrb	r3, [r3, #20]
 800ca5c:	b25b      	sxtb	r3, r3
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	da18      	bge.n	800ca94 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	7858      	ldrb	r0, [r3, #1]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6a1a      	ldr	r2, [r3, #32]
 800ca70:	2301      	movs	r3, #1
 800ca72:	f7fd fa77 	bl	8009f64 <disk_write>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d004      	beq.n	800ca86 <f_write+0x150>
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	755a      	strb	r2, [r3, #21]
 800ca82:	2301      	movs	r3, #1
 800ca84:	e0c8      	b.n	800cc18 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	7d1b      	ldrb	r3, [r3, #20]
 800ca8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ca94:	693a      	ldr	r2, [r7, #16]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	69db      	ldr	r3, [r3, #28]
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	4610      	mov	r0, r2
 800ca9e:	f7fd fdeb 	bl	800a678 <clust2sect>
 800caa2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d104      	bne.n	800cab4 <f_write+0x17e>
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2202      	movs	r2, #2
 800caae:	755a      	strb	r2, [r3, #21]
 800cab0:	2302      	movs	r3, #2
 800cab2:	e0b1      	b.n	800cc18 <f_write+0x2e2>
			sect += csect;
 800cab4:	697a      	ldr	r2, [r7, #20]
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	4413      	add	r3, r2
 800caba:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	0a5b      	lsrs	r3, r3, #9
 800cac0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cac2:	6a3b      	ldr	r3, [r7, #32]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d03c      	beq.n	800cb42 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cac8:	69ba      	ldr	r2, [r7, #24]
 800caca:	6a3b      	ldr	r3, [r7, #32]
 800cacc:	4413      	add	r3, r2
 800cace:	693a      	ldr	r2, [r7, #16]
 800cad0:	8952      	ldrh	r2, [r2, #10]
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d905      	bls.n	800cae2 <f_write+0x1ac>
					cc = fs->csize - csect;
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	895b      	ldrh	r3, [r3, #10]
 800cada:	461a      	mov	r2, r3
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	7858      	ldrb	r0, [r3, #1]
 800cae6:	6a3b      	ldr	r3, [r7, #32]
 800cae8:	697a      	ldr	r2, [r7, #20]
 800caea:	69f9      	ldr	r1, [r7, #28]
 800caec:	f7fd fa3a 	bl	8009f64 <disk_write>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d004      	beq.n	800cb00 <f_write+0x1ca>
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2201      	movs	r2, #1
 800cafa:	755a      	strb	r2, [r3, #21]
 800cafc:	2301      	movs	r3, #1
 800cafe:	e08b      	b.n	800cc18 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6a1a      	ldr	r2, [r3, #32]
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	1ad3      	subs	r3, r2, r3
 800cb08:	6a3a      	ldr	r2, [r7, #32]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d915      	bls.n	800cb3a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	6a1a      	ldr	r2, [r3, #32]
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	1ad3      	subs	r3, r2, r3
 800cb1c:	025b      	lsls	r3, r3, #9
 800cb1e:	69fa      	ldr	r2, [r7, #28]
 800cb20:	4413      	add	r3, r2
 800cb22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb26:	4619      	mov	r1, r3
 800cb28:	f7fd fadc 	bl	800a0e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	7d1b      	ldrb	r3, [r3, #20]
 800cb30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb34:	b2da      	uxtb	r2, r3
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cb3a:	6a3b      	ldr	r3, [r7, #32]
 800cb3c:	025b      	lsls	r3, r3, #9
 800cb3e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800cb40:	e03f      	b.n	800cbc2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6a1b      	ldr	r3, [r3, #32]
 800cb46:	697a      	ldr	r2, [r7, #20]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d016      	beq.n	800cb7a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	699a      	ldr	r2, [r3, #24]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d210      	bcs.n	800cb7a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	7858      	ldrb	r0, [r3, #1]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb62:	2301      	movs	r3, #1
 800cb64:	697a      	ldr	r2, [r7, #20]
 800cb66:	f7fd f9dd 	bl	8009f24 <disk_read>
 800cb6a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d004      	beq.n	800cb7a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2201      	movs	r2, #1
 800cb74:	755a      	strb	r2, [r3, #21]
 800cb76:	2301      	movs	r3, #1
 800cb78:	e04e      	b.n	800cc18 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	697a      	ldr	r2, [r7, #20]
 800cb7e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb88:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cb8c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cb8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d901      	bls.n	800cb9a <f_write+0x264>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	699b      	ldr	r3, [r3, #24]
 800cba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cba8:	4413      	add	r3, r2
 800cbaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbac:	69f9      	ldr	r1, [r7, #28]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fd fa98 	bl	800a0e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	7d1b      	ldrb	r3, [r3, #20]
 800cbb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cbbc:	b2da      	uxtb	r2, r3
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cbc2:	69fa      	ldr	r2, [r7, #28]
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc6:	4413      	add	r3, r2
 800cbc8:	61fb      	str	r3, [r7, #28]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	699a      	ldr	r2, [r3, #24]
 800cbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd0:	441a      	add	r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	619a      	str	r2, [r3, #24]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	68da      	ldr	r2, [r3, #12]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	bf38      	it	cc
 800cbe2:	461a      	movcc	r2, r3
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	60da      	str	r2, [r3, #12]
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbee:	441a      	add	r2, r3
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f47f aed4 	bne.w	800c9ac <f_write+0x76>
 800cc04:	e000      	b.n	800cc08 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cc06:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	7d1b      	ldrb	r3, [r3, #20]
 800cc0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc10:	b2da      	uxtb	r2, r3
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3730      	adds	r7, #48	; 0x30
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b086      	sub	sp, #24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f107 0208 	add.w	r2, r7, #8
 800cc2e:	4611      	mov	r1, r2
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7ff faf7 	bl	800c224 <validate>
 800cc36:	4603      	mov	r3, r0
 800cc38:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc3a:	7dfb      	ldrb	r3, [r7, #23]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d168      	bne.n	800cd12 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	7d1b      	ldrb	r3, [r3, #20]
 800cc44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d062      	beq.n	800cd12 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	7d1b      	ldrb	r3, [r3, #20]
 800cc50:	b25b      	sxtb	r3, r3
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	da15      	bge.n	800cc82 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	7858      	ldrb	r0, [r3, #1]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6a1a      	ldr	r2, [r3, #32]
 800cc64:	2301      	movs	r3, #1
 800cc66:	f7fd f97d 	bl	8009f64 <disk_write>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d001      	beq.n	800cc74 <f_sync+0x54>
 800cc70:	2301      	movs	r3, #1
 800cc72:	e04f      	b.n	800cd14 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	7d1b      	ldrb	r3, [r3, #20]
 800cc78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc7c:	b2da      	uxtb	r2, r3
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cc82:	f7fb f93c 	bl	8007efe <get_fattime>
 800cc86:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cc88:	68ba      	ldr	r2, [r7, #8]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc8e:	4619      	mov	r1, r3
 800cc90:	4610      	mov	r0, r2
 800cc92:	f7fd fc55 	bl	800a540 <move_window>
 800cc96:	4603      	mov	r3, r0
 800cc98:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d138      	bne.n	800cd12 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	330b      	adds	r3, #11
 800ccaa:	781a      	ldrb	r2, [r3, #0]
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	330b      	adds	r3, #11
 800ccb0:	f042 0220 	orr.w	r2, r2, #32
 800ccb4:	b2d2      	uxtb	r2, r2
 800ccb6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6818      	ldr	r0, [r3, #0]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	68f9      	ldr	r1, [r7, #12]
 800ccc4:	f7fe f960 	bl	800af88 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f103 021c 	add.w	r2, r3, #28
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	f7fd f9d9 	bl	800a08c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	3316      	adds	r3, #22
 800ccde:	6939      	ldr	r1, [r7, #16]
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7fd f9d3 	bl	800a08c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	3312      	adds	r3, #18
 800ccea:	2100      	movs	r1, #0
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7fd f9b2 	bl	800a056 <st_word>
					fs->wflag = 1;
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fd fc4e 	bl	800a59c <sync_fs>
 800cd00:	4603      	mov	r3, r0
 800cd02:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	7d1b      	ldrb	r3, [r3, #20]
 800cd08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd0c:	b2da      	uxtb	r2, r3
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cd12:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3718      	adds	r7, #24
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f7ff ff7b 	bl	800cc20 <f_sync>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d118      	bne.n	800cd66 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f107 0208 	add.w	r2, r7, #8
 800cd3a:	4611      	mov	r1, r2
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7ff fa71 	bl	800c224 <validate>
 800cd42:	4603      	mov	r3, r0
 800cd44:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cd46:	7bfb      	ldrb	r3, [r7, #15]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d10c      	bne.n	800cd66 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	691b      	ldr	r3, [r3, #16]
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fd fb51 	bl	800a3f8 <dec_lock>
 800cd56:	4603      	mov	r3, r0
 800cd58:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d102      	bne.n	800cd66 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b092      	sub	sp, #72	; 0x48
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800cd7a:	f107 010c 	add.w	r1, r7, #12
 800cd7e:	1d3b      	adds	r3, r7, #4
 800cd80:	2200      	movs	r2, #0
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7ff f802 	bl	800bd8c <find_volume>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800cd8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d12f      	bne.n	800cdf6 <f_stat+0x86>
		INIT_NAMBUF(dj.obj.fs);
 800cd96:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cd9a:	f000 fe35 	bl	800da08 <ff_memalloc>
 800cd9e:	6438      	str	r0, [r7, #64]	; 0x40
 800cda0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d101      	bne.n	800cdaa <f_stat+0x3a>
 800cda6:	2311      	movs	r3, #17
 800cda8:	e027      	b.n	800cdfa <f_stat+0x8a>
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdae:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	f107 030c 	add.w	r3, r7, #12
 800cdb6:	4611      	mov	r1, r2
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7fe fedb 	bl	800bb74 <follow_path>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {				/* Follow completed */
 800cdc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d111      	bne.n	800cdf0 <f_stat+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800cdcc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cdd0:	b25b      	sxtb	r3, r3
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	da03      	bge.n	800cdde <f_stat+0x6e>
				res = FR_INVALID_NAME;
 800cdd6:	2306      	movs	r3, #6
 800cdd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cddc:	e008      	b.n	800cdf0 <f_stat+0x80>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d005      	beq.n	800cdf0 <f_stat+0x80>
 800cde4:	f107 030c 	add.w	r3, r7, #12
 800cde8:	6839      	ldr	r1, [r7, #0]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fe fc2c 	bl	800b648 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 800cdf0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cdf2:	f000 fe15 	bl	800da20 <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 800cdf6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3748      	adds	r7, #72	; 0x48
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b092      	sub	sp, #72	; 0x48
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	60f8      	str	r0, [r7, #12]
 800ce0a:	60b9      	str	r1, [r7, #8]
 800ce0c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800ce0e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ce12:	f107 030c 	add.w	r3, r7, #12
 800ce16:	2200      	movs	r2, #0
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fe ffb7 	bl	800bd8c <find_volume>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800ce24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f040 8099 	bne.w	800cf60 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800ce2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800ce34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce36:	695a      	ldr	r2, [r3, #20]
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3a:	699b      	ldr	r3, [r3, #24]
 800ce3c:	3b02      	subs	r3, #2
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d804      	bhi.n	800ce4c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800ce42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce44:	695a      	ldr	r2, [r3, #20]
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	601a      	str	r2, [r3, #0]
 800ce4a:	e089      	b.n	800cf60 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ce50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d128      	bne.n	800ceaa <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ce58:	2302      	movs	r3, #2
 800ce5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ce60:	f107 0314 	add.w	r3, r7, #20
 800ce64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fd fc25 	bl	800a6b6 <get_fat>
 800ce6c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ce6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce74:	d103      	bne.n	800ce7e <f_getfree+0x7c>
 800ce76:	2301      	movs	r3, #1
 800ce78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ce7c:	e063      	b.n	800cf46 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ce7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d103      	bne.n	800ce8c <f_getfree+0x8a>
 800ce84:	2302      	movs	r3, #2
 800ce86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ce8a:	e05c      	b.n	800cf46 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ce8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d102      	bne.n	800ce98 <f_getfree+0x96>
 800ce92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce94:	3301      	adds	r3, #1
 800ce96:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800ce98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea0:	699b      	ldr	r3, [r3, #24]
 800cea2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d3db      	bcc.n	800ce60 <f_getfree+0x5e>
 800cea8:	e04d      	b.n	800cf46 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ceaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ceb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	637b      	str	r3, [r7, #52]	; 0x34
 800ceba:	2300      	movs	r3, #0
 800cebc:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800cebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d113      	bne.n	800ceec <f_getfree+0xea>
							res = move_window(fs, sect++);
 800cec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec8:	1c5a      	adds	r2, r3, #1
 800ceca:	63ba      	str	r2, [r7, #56]	; 0x38
 800cecc:	4619      	mov	r1, r3
 800cece:	f7fd fb37 	bl	800a540 <move_window>
 800ced2:	4603      	mov	r3, r0
 800ced4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800ced8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d131      	bne.n	800cf44 <f_getfree+0x142>
							p = fs->win;
 800cee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee2:	3334      	adds	r3, #52	; 0x34
 800cee4:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800cee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ceea:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ceec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	d10f      	bne.n	800cf14 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800cef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cef6:	f7fd f873 	bl	8009fe0 <ld_word>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d102      	bne.n	800cf06 <f_getfree+0x104>
 800cf00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf02:	3301      	adds	r3, #1
 800cf04:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800cf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf08:	3302      	adds	r3, #2
 800cf0a:	633b      	str	r3, [r7, #48]	; 0x30
 800cf0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf0e:	3b02      	subs	r3, #2
 800cf10:	637b      	str	r3, [r7, #52]	; 0x34
 800cf12:	e010      	b.n	800cf36 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800cf14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf16:	f7fd f87b 	bl	800a010 <ld_dword>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d102      	bne.n	800cf2a <f_getfree+0x128>
 800cf24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf26:	3301      	adds	r3, #1
 800cf28:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2c:	3304      	adds	r3, #4
 800cf2e:	633b      	str	r3, [r7, #48]	; 0x30
 800cf30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf32:	3b04      	subs	r3, #4
 800cf34:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800cf36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1bd      	bne.n	800cebe <f_getfree+0xbc>
 800cf42:	e000      	b.n	800cf46 <f_getfree+0x144>
							if (res != FR_OK) break;
 800cf44:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf4a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800cf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf50:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800cf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf54:	791a      	ldrb	r2, [r3, #4]
 800cf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf58:	f042 0201 	orr.w	r2, r2, #1
 800cf5c:	b2d2      	uxtb	r2, r2
 800cf5e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800cf60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3748      	adds	r7, #72	; 0x48
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800cf6c:	b590      	push	{r4, r7, lr}
 800cf6e:	b09d      	sub	sp, #116	; 0x74
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	607a      	str	r2, [r7, #4]
 800cf76:	603b      	str	r3, [r7, #0]
 800cf78:	460b      	mov	r3, r1
 800cf7a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800cf80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf84:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800cf86:	f107 030c 	add.w	r3, r7, #12
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fe fe63 	bl	800bc56 <get_ldnumber>
 800cf90:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	da02      	bge.n	800cf9e <f_mkfs+0x32>
 800cf98:	230b      	movs	r3, #11
 800cf9a:	f000 bc0d 	b.w	800d7b8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800cf9e:	4a94      	ldr	r2, [pc, #592]	; (800d1f0 <f_mkfs+0x284>)
 800cfa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d005      	beq.n	800cfb6 <f_mkfs+0x4a>
 800cfaa:	4a91      	ldr	r2, [pc, #580]	; (800d1f0 <f_mkfs+0x284>)
 800cfac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800cfb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfb8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800cfc2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fc ff84 	bl	8009ed4 <disk_initialize>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800cfd2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cfd6:	f003 0301 	and.w	r3, r3, #1
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d001      	beq.n	800cfe2 <f_mkfs+0x76>
 800cfde:	2303      	movs	r3, #3
 800cfe0:	e3ea      	b.n	800d7b8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800cfe2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cfe6:	f003 0304 	and.w	r3, r3, #4
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d001      	beq.n	800cff2 <f_mkfs+0x86>
 800cfee:	230a      	movs	r3, #10
 800cff0:	e3e2      	b.n	800d7b8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800cff2:	f107 0214 	add.w	r2, r7, #20
 800cff6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cffa:	2103      	movs	r1, #3
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fc ffd1 	bl	8009fa4 <disk_ioctl>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d10c      	bne.n	800d022 <f_mkfs+0xb6>
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d009      	beq.n	800d022 <f_mkfs+0xb6>
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d014:	d805      	bhi.n	800d022 <f_mkfs+0xb6>
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	1e5a      	subs	r2, r3, #1
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	4013      	ands	r3, r2
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d001      	beq.n	800d026 <f_mkfs+0xba>
 800d022:	2301      	movs	r3, #1
 800d024:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800d026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d02a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d003      	beq.n	800d03a <f_mkfs+0xce>
 800d032:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	429a      	cmp	r2, r3
 800d038:	d309      	bcc.n	800d04e <f_mkfs+0xe2>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d040:	d805      	bhi.n	800d04e <f_mkfs+0xe2>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	1e5a      	subs	r2, r3, #1
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	4013      	ands	r3, r2
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d001      	beq.n	800d052 <f_mkfs+0xe6>
 800d04e:	2313      	movs	r3, #19
 800d050:	e3b2      	b.n	800d7b8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800d052:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	fbb2 f3f3 	udiv	r3, r2, r3
 800d05a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800d060:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d062:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d066:	fbb2 f3f3 	udiv	r3, r2, r3
 800d06a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800d06c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d070:	fb02 f303 	mul.w	r3, r2, r3
 800d074:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d101      	bne.n	800d080 <f_mkfs+0x114>
 800d07c:	230e      	movs	r3, #14
 800d07e:	e39b      	b.n	800d7b8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800d080:	f107 0210 	add.w	r2, r7, #16
 800d084:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d088:	2101      	movs	r1, #1
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fc ff8a 	bl	8009fa4 <disk_ioctl>
 800d090:	4603      	mov	r3, r0
 800d092:	2b00      	cmp	r3, #0
 800d094:	d001      	beq.n	800d09a <f_mkfs+0x12e>
 800d096:	2301      	movs	r3, #1
 800d098:	e38e      	b.n	800d7b8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800d09a:	7afb      	ldrb	r3, [r7, #11]
 800d09c:	f003 0308 	and.w	r3, r3, #8
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <f_mkfs+0x13c>
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	e000      	b.n	800d0aa <f_mkfs+0x13e>
 800d0a8:	233f      	movs	r3, #63	; 0x3f
 800d0aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d901      	bls.n	800d0b8 <f_mkfs+0x14c>
 800d0b4:	230e      	movs	r3, #14
 800d0b6:	e37f      	b.n	800d7b8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800d0b8:	693a      	ldr	r2, [r7, #16]
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	1ad3      	subs	r3, r2, r3
 800d0be:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	2b7f      	cmp	r3, #127	; 0x7f
 800d0c4:	d801      	bhi.n	800d0ca <f_mkfs+0x15e>
 800d0c6:	230e      	movs	r3, #14
 800d0c8:	e376      	b.n	800d7b8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2b80      	cmp	r3, #128	; 0x80
 800d0ce:	d901      	bls.n	800d0d4 <f_mkfs+0x168>
 800d0d0:	2313      	movs	r3, #19
 800d0d2:	e371      	b.n	800d7b8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800d0d4:	7afb      	ldrb	r3, [r7, #11]
 800d0d6:	f003 0302 	and.w	r3, r3, #2
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00d      	beq.n	800d0fa <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800d0de:	7afb      	ldrb	r3, [r7, #11]
 800d0e0:	f003 0307 	and.w	r3, r3, #7
 800d0e4:	2b02      	cmp	r3, #2
 800d0e6:	d004      	beq.n	800d0f2 <f_mkfs+0x186>
 800d0e8:	7afb      	ldrb	r3, [r7, #11]
 800d0ea:	f003 0301 	and.w	r3, r3, #1
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d103      	bne.n	800d0fa <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800d0f2:	2303      	movs	r3, #3
 800d0f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d0f8:	e009      	b.n	800d10e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800d0fa:	7afb      	ldrb	r3, [r7, #11]
 800d0fc:	f003 0301 	and.w	r3, r3, #1
 800d100:	2b00      	cmp	r3, #0
 800d102:	d101      	bne.n	800d108 <f_mkfs+0x19c>
 800d104:	2313      	movs	r3, #19
 800d106:	e357      	b.n	800d7b8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800d108:	2302      	movs	r3, #2
 800d10a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800d112:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d116:	2b03      	cmp	r3, #3
 800d118:	d13c      	bne.n	800d194 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800d11a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d11b      	bne.n	800d158 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	0c5b      	lsrs	r3, r3, #17
 800d124:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d126:	2300      	movs	r3, #0
 800d128:	64bb      	str	r3, [r7, #72]	; 0x48
 800d12a:	2301      	movs	r3, #1
 800d12c:	653b      	str	r3, [r7, #80]	; 0x50
 800d12e:	e005      	b.n	800d13c <f_mkfs+0x1d0>
 800d130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d132:	3301      	adds	r3, #1
 800d134:	64bb      	str	r3, [r7, #72]	; 0x48
 800d136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d138:	005b      	lsls	r3, r3, #1
 800d13a:	653b      	str	r3, [r7, #80]	; 0x50
 800d13c:	4a2d      	ldr	r2, [pc, #180]	; (800d1f4 <f_mkfs+0x288>)
 800d13e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d007      	beq.n	800d158 <f_mkfs+0x1ec>
 800d148:	4a2a      	ldr	r2, [pc, #168]	; (800d1f4 <f_mkfs+0x288>)
 800d14a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d14c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d150:	461a      	mov	r2, r3
 800d152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d154:	4293      	cmp	r3, r2
 800d156:	d2eb      	bcs.n	800d130 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800d158:	693a      	ldr	r2, [r7, #16]
 800d15a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d15c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d160:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800d162:	6a3b      	ldr	r3, [r7, #32]
 800d164:	3302      	adds	r3, #2
 800d166:	009a      	lsls	r2, r3, #2
 800d168:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d16a:	4413      	add	r3, r2
 800d16c:	1e5a      	subs	r2, r3, #1
 800d16e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d170:	fbb2 f3f3 	udiv	r3, r2, r3
 800d174:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800d176:	2320      	movs	r3, #32
 800d178:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800d17a:	2300      	movs	r3, #0
 800d17c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800d17e:	6a3b      	ldr	r3, [r7, #32]
 800d180:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d184:	4293      	cmp	r3, r2
 800d186:	d903      	bls.n	800d190 <f_mkfs+0x224>
 800d188:	6a3b      	ldr	r3, [r7, #32]
 800d18a:	4a1b      	ldr	r2, [pc, #108]	; (800d1f8 <f_mkfs+0x28c>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d952      	bls.n	800d236 <f_mkfs+0x2ca>
 800d190:	230e      	movs	r3, #14
 800d192:	e311      	b.n	800d7b8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800d194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d196:	2b00      	cmp	r3, #0
 800d198:	d11b      	bne.n	800d1d2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	0b1b      	lsrs	r3, r3, #12
 800d19e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	653b      	str	r3, [r7, #80]	; 0x50
 800d1a8:	e005      	b.n	800d1b6 <f_mkfs+0x24a>
 800d1aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1b2:	005b      	lsls	r3, r3, #1
 800d1b4:	653b      	str	r3, [r7, #80]	; 0x50
 800d1b6:	4a11      	ldr	r2, [pc, #68]	; (800d1fc <f_mkfs+0x290>)
 800d1b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d007      	beq.n	800d1d2 <f_mkfs+0x266>
 800d1c2:	4a0e      	ldr	r2, [pc, #56]	; (800d1fc <f_mkfs+0x290>)
 800d1c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d2eb      	bcs.n	800d1aa <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800d1d2:	693a      	ldr	r2, [r7, #16]
 800d1d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1da:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d90c      	bls.n	800d200 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800d1e6:	6a3b      	ldr	r3, [r7, #32]
 800d1e8:	3302      	adds	r3, #2
 800d1ea:	005b      	lsls	r3, r3, #1
 800d1ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1ee:	e012      	b.n	800d216 <f_mkfs+0x2aa>
 800d1f0:	20002d84 	.word	0x20002d84
 800d1f4:	0800fad4 	.word	0x0800fad4
 800d1f8:	0ffffff5 	.word	0x0ffffff5
 800d1fc:	0800fae4 	.word	0x0800fae4
				} else {
					fmt = FS_FAT12;
 800d200:	2301      	movs	r3, #1
 800d202:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800d206:	6a3a      	ldr	r2, [r7, #32]
 800d208:	4613      	mov	r3, r2
 800d20a:	005b      	lsls	r3, r3, #1
 800d20c:	4413      	add	r3, r2
 800d20e:	3301      	adds	r3, #1
 800d210:	085b      	lsrs	r3, r3, #1
 800d212:	3303      	adds	r3, #3
 800d214:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800d216:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d21a:	4413      	add	r3, r2
 800d21c:	1e5a      	subs	r2, r3, #1
 800d21e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d220:	fbb2 f3f3 	udiv	r3, r2, r3
 800d224:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800d226:	2301      	movs	r3, #1
 800d228:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800d22a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d22c:	015a      	lsls	r2, r3, #5
 800d22e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d230:	fbb2 f3f3 	udiv	r3, r2, r3
 800d234:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800d236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d23a:	4413      	add	r3, r2
 800d23c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800d23e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d240:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d242:	fb03 f202 	mul.w	r2, r3, r2
 800d246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d248:	4413      	add	r3, r2
 800d24a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d24c:	4413      	add	r3, r2
 800d24e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800d250:	697a      	ldr	r2, [r7, #20]
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	4413      	add	r3, r2
 800d256:	1e5a      	subs	r2, r3, #1
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	425b      	negs	r3, r3
 800d25c:	401a      	ands	r2, r3
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	1ad3      	subs	r3, r2, r3
 800d262:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800d264:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d268:	2b03      	cmp	r3, #3
 800d26a:	d108      	bne.n	800d27e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800d26c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d26e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d270:	4413      	add	r3, r2
 800d272:	657b      	str	r3, [r7, #84]	; 0x54
 800d274:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d278:	4413      	add	r3, r2
 800d27a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d27c:	e006      	b.n	800d28c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800d27e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d282:	fbb2 f3f3 	udiv	r3, r2, r3
 800d286:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d288:	4413      	add	r3, r2
 800d28a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800d28c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d28e:	011a      	lsls	r2, r3, #4
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	441a      	add	r2, r3
 800d294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d296:	1ad2      	subs	r2, r2, r3
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d901      	bls.n	800d2a2 <f_mkfs+0x336>
 800d29e:	230e      	movs	r3, #14
 800d2a0:	e28a      	b.n	800d7b8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800d2a2:	693a      	ldr	r2, [r7, #16]
 800d2a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2a6:	1ad2      	subs	r2, r2, r3
 800d2a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2ac:	fb01 f303 	mul.w	r3, r1, r3
 800d2b0:	1ad2      	subs	r2, r2, r3
 800d2b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2b4:	1ad2      	subs	r2, r2, r3
 800d2b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2bc:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800d2be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d2c2:	2b03      	cmp	r3, #3
 800d2c4:	d10f      	bne.n	800d2e6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800d2c6:	6a3b      	ldr	r3, [r7, #32]
 800d2c8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d80a      	bhi.n	800d2e6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d105      	bne.n	800d2e2 <f_mkfs+0x376>
 800d2d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2d8:	085b      	lsrs	r3, r3, #1
 800d2da:	607b      	str	r3, [r7, #4]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d144      	bne.n	800d36c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800d2e2:	230e      	movs	r3, #14
 800d2e4:	e268      	b.n	800d7b8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800d2e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d133      	bne.n	800d356 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800d2ee:	6a3b      	ldr	r3, [r7, #32]
 800d2f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d91e      	bls.n	800d336 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d107      	bne.n	800d30e <f_mkfs+0x3a2>
 800d2fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d300:	005b      	lsls	r3, r3, #1
 800d302:	2b40      	cmp	r3, #64	; 0x40
 800d304:	d803      	bhi.n	800d30e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800d306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d308:	005b      	lsls	r3, r3, #1
 800d30a:	607b      	str	r3, [r7, #4]
 800d30c:	e033      	b.n	800d376 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800d30e:	7afb      	ldrb	r3, [r7, #11]
 800d310:	f003 0302 	and.w	r3, r3, #2
 800d314:	2b00      	cmp	r3, #0
 800d316:	d003      	beq.n	800d320 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800d318:	2303      	movs	r3, #3
 800d31a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d31e:	e02a      	b.n	800d376 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d105      	bne.n	800d332 <f_mkfs+0x3c6>
 800d326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d328:	005b      	lsls	r3, r3, #1
 800d32a:	607b      	str	r3, [r7, #4]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b80      	cmp	r3, #128	; 0x80
 800d330:	d91e      	bls.n	800d370 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800d332:	230e      	movs	r3, #14
 800d334:	e240      	b.n	800d7b8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800d336:	6a3b      	ldr	r3, [r7, #32]
 800d338:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d80a      	bhi.n	800d356 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d105      	bne.n	800d352 <f_mkfs+0x3e6>
 800d346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d348:	005b      	lsls	r3, r3, #1
 800d34a:	607b      	str	r3, [r7, #4]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2b80      	cmp	r3, #128	; 0x80
 800d350:	d910      	bls.n	800d374 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800d352:	230e      	movs	r3, #14
 800d354:	e230      	b.n	800d7b8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800d356:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d10c      	bne.n	800d378 <f_mkfs+0x40c>
 800d35e:	6a3b      	ldr	r3, [r7, #32]
 800d360:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d364:	4293      	cmp	r3, r2
 800d366:	d907      	bls.n	800d378 <f_mkfs+0x40c>
 800d368:	230e      	movs	r3, #14
 800d36a:	e225      	b.n	800d7b8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d36c:	bf00      	nop
 800d36e:	e6ce      	b.n	800d10e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d370:	bf00      	nop
 800d372:	e6cc      	b.n	800d10e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d374:	bf00      	nop
			pau = au;
 800d376:	e6ca      	b.n	800d10e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800d378:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800d37a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d37c:	461a      	mov	r2, r3
 800d37e:	2100      	movs	r1, #0
 800d380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d382:	f7fc fed0 	bl	800a126 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800d386:	220b      	movs	r2, #11
 800d388:	49b2      	ldr	r1, [pc, #712]	; (800d654 <f_mkfs+0x6e8>)
 800d38a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d38c:	f7fc feaa 	bl	800a0e4 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d392:	330b      	adds	r3, #11
 800d394:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d396:	4611      	mov	r1, r2
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fc fe5c 	bl	800a056 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800d39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a0:	330d      	adds	r3, #13
 800d3a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3a4:	b2d2      	uxtb	r2, r2
 800d3a6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800d3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3aa:	330e      	adds	r3, #14
 800d3ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d3ae:	b292      	uxth	r2, r2
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7fc fe4f 	bl	800a056 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ba:	3310      	adds	r3, #16
 800d3bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3be:	b2d2      	uxtb	r2, r2
 800d3c0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c4:	f103 0211 	add.w	r2, r3, #17
 800d3c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d3cc:	2b03      	cmp	r3, #3
 800d3ce:	d002      	beq.n	800d3d6 <f_mkfs+0x46a>
 800d3d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	e000      	b.n	800d3d8 <f_mkfs+0x46c>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	4619      	mov	r1, r3
 800d3da:	4610      	mov	r0, r2
 800d3dc:	f7fc fe3b 	bl	800a056 <st_word>
		if (sz_vol < 0x10000) {
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3e6:	d208      	bcs.n	800d3fa <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800d3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ea:	3313      	adds	r3, #19
 800d3ec:	693a      	ldr	r2, [r7, #16]
 800d3ee:	b292      	uxth	r2, r2
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7fc fe2f 	bl	800a056 <st_word>
 800d3f8:	e006      	b.n	800d408 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fc:	3320      	adds	r3, #32
 800d3fe:	693a      	ldr	r2, [r7, #16]
 800d400:	4611      	mov	r1, r2
 800d402:	4618      	mov	r0, r3
 800d404:	f7fc fe42 	bl	800a08c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800d408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40a:	3315      	adds	r3, #21
 800d40c:	22f8      	movs	r2, #248	; 0xf8
 800d40e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800d410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d412:	3318      	adds	r3, #24
 800d414:	213f      	movs	r1, #63	; 0x3f
 800d416:	4618      	mov	r0, r3
 800d418:	f7fc fe1d 	bl	800a056 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800d41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41e:	331a      	adds	r3, #26
 800d420:	21ff      	movs	r1, #255	; 0xff
 800d422:	4618      	mov	r0, r3
 800d424:	f7fc fe17 	bl	800a056 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800d428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42a:	331c      	adds	r3, #28
 800d42c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fc fe2c 	bl	800a08c <st_dword>
		if (fmt == FS_FAT32) {
 800d434:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d438:	2b03      	cmp	r3, #3
 800d43a:	d131      	bne.n	800d4a0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800d43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800d442:	f7fa fd5c 	bl	8007efe <get_fattime>
 800d446:	4603      	mov	r3, r0
 800d448:	4619      	mov	r1, r3
 800d44a:	4620      	mov	r0, r4
 800d44c:	f7fc fe1e 	bl	800a08c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800d450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d452:	3324      	adds	r3, #36	; 0x24
 800d454:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d456:	4618      	mov	r0, r3
 800d458:	f7fc fe18 	bl	800a08c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800d45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45e:	332c      	adds	r3, #44	; 0x2c
 800d460:	2102      	movs	r1, #2
 800d462:	4618      	mov	r0, r3
 800d464:	f7fc fe12 	bl	800a08c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800d468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46a:	3330      	adds	r3, #48	; 0x30
 800d46c:	2101      	movs	r1, #1
 800d46e:	4618      	mov	r0, r3
 800d470:	f7fc fdf1 	bl	800a056 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800d474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d476:	3332      	adds	r3, #50	; 0x32
 800d478:	2106      	movs	r1, #6
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7fc fdeb 	bl	800a056 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800d480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d482:	3340      	adds	r3, #64	; 0x40
 800d484:	2280      	movs	r2, #128	; 0x80
 800d486:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800d488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48a:	3342      	adds	r3, #66	; 0x42
 800d48c:	2229      	movs	r2, #41	; 0x29
 800d48e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800d490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d492:	3347      	adds	r3, #71	; 0x47
 800d494:	2213      	movs	r2, #19
 800d496:	4970      	ldr	r1, [pc, #448]	; (800d658 <f_mkfs+0x6ec>)
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fc fe23 	bl	800a0e4 <mem_cpy>
 800d49e:	e020      	b.n	800d4e2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800d4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a2:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800d4a6:	f7fa fd2a 	bl	8007efe <get_fattime>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	f7fc fdec 	bl	800a08c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800d4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b6:	3316      	adds	r3, #22
 800d4b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d4ba:	b292      	uxth	r2, r2
 800d4bc:	4611      	mov	r1, r2
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fc fdc9 	bl	800a056 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800d4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c6:	3324      	adds	r3, #36	; 0x24
 800d4c8:	2280      	movs	r2, #128	; 0x80
 800d4ca:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800d4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ce:	3326      	adds	r3, #38	; 0x26
 800d4d0:	2229      	movs	r2, #41	; 0x29
 800d4d2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d6:	332b      	adds	r3, #43	; 0x2b
 800d4d8:	2213      	movs	r2, #19
 800d4da:	4960      	ldr	r1, [pc, #384]	; (800d65c <f_mkfs+0x6f0>)
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7fc fe01 	bl	800a0e4 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800d4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d4e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fc fdb2 	bl	800a056 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800d4f2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4fc:	f7fc fd32 	bl	8009f64 <disk_write>
 800d500:	4603      	mov	r3, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	d001      	beq.n	800d50a <f_mkfs+0x59e>
 800d506:	2301      	movs	r3, #1
 800d508:	e156      	b.n	800d7b8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800d50a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d50e:	2b03      	cmp	r3, #3
 800d510:	d140      	bne.n	800d594 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800d512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d514:	1d9a      	adds	r2, r3, #6
 800d516:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d51a:	2301      	movs	r3, #1
 800d51c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d51e:	f7fc fd21 	bl	8009f64 <disk_write>
			mem_set(buf, 0, ss);
 800d522:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d524:	461a      	mov	r2, r3
 800d526:	2100      	movs	r1, #0
 800d528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d52a:	f7fc fdfc 	bl	800a126 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800d52e:	494c      	ldr	r1, [pc, #304]	; (800d660 <f_mkfs+0x6f4>)
 800d530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d532:	f7fc fdab 	bl	800a08c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800d536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d538:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d53c:	4949      	ldr	r1, [pc, #292]	; (800d664 <f_mkfs+0x6f8>)
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fc fda4 	bl	800a08c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800d544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d546:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d54a:	6a3b      	ldr	r3, [r7, #32]
 800d54c:	3b01      	subs	r3, #1
 800d54e:	4619      	mov	r1, r3
 800d550:	4610      	mov	r0, r2
 800d552:	f7fc fd9b 	bl	800a08c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800d556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d558:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d55c:	2102      	movs	r1, #2
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fc fd94 	bl	800a08c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800d564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d566:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d56a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d56e:	4618      	mov	r0, r3
 800d570:	f7fc fd71 	bl	800a056 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	1dda      	adds	r2, r3, #7
 800d578:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d57c:	2301      	movs	r3, #1
 800d57e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d580:	f7fc fcf0 	bl	8009f64 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d586:	1c5a      	adds	r2, r3, #1
 800d588:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d58c:	2301      	movs	r3, #1
 800d58e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d590:	f7fc fce8 	bl	8009f64 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800d594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d596:	2100      	movs	r1, #0
 800d598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d59a:	f7fc fdc4 	bl	800a126 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800d59e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5a0:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d5a6:	e04b      	b.n	800d640 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800d5a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d5ac:	2b03      	cmp	r3, #3
 800d5ae:	d113      	bne.n	800d5d8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800d5b0:	f06f 0107 	mvn.w	r1, #7
 800d5b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5b6:	f7fc fd69 	bl	800a08c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800d5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5bc:	3304      	adds	r3, #4
 800d5be:	f04f 31ff 	mov.w	r1, #4294967295
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7fc fd62 	bl	800a08c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800d5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ca:	3308      	adds	r3, #8
 800d5cc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fc fd5b 	bl	800a08c <st_dword>
 800d5d6:	e00b      	b.n	800d5f0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800d5d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d101      	bne.n	800d5e4 <f_mkfs+0x678>
 800d5e0:	4b21      	ldr	r3, [pc, #132]	; (800d668 <f_mkfs+0x6fc>)
 800d5e2:	e001      	b.n	800d5e8 <f_mkfs+0x67c>
 800d5e4:	f06f 0307 	mvn.w	r3, #7
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5ec:	f7fc fd4e 	bl	800a08c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800d5f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5f2:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800d5f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	bf28      	it	cs
 800d5fc:	4613      	movcs	r3, r2
 800d5fe:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d600:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d606:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d60a:	f7fc fcab 	bl	8009f64 <disk_write>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d001      	beq.n	800d618 <f_mkfs+0x6ac>
 800d614:	2301      	movs	r3, #1
 800d616:	e0cf      	b.n	800d7b8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800d618:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d61a:	461a      	mov	r2, r3
 800d61c:	2100      	movs	r1, #0
 800d61e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d620:	f7fc fd81 	bl	800a126 <mem_set>
				sect += n; nsect -= n;
 800d624:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d628:	4413      	add	r3, r2
 800d62a:	667b      	str	r3, [r7, #100]	; 0x64
 800d62c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d62e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d630:	1ad3      	subs	r3, r2, r3
 800d632:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800d634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1dc      	bne.n	800d5f4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d63a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d63c:	3301      	adds	r3, #1
 800d63e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d644:	429a      	cmp	r2, r3
 800d646:	d3af      	bcc.n	800d5a8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800d648:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d64c:	2b03      	cmp	r3, #3
 800d64e:	d10d      	bne.n	800d66c <f_mkfs+0x700>
 800d650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d652:	e00c      	b.n	800d66e <f_mkfs+0x702>
 800d654:	0800f95c 	.word	0x0800f95c
 800d658:	0800f968 	.word	0x0800f968
 800d65c:	0800f97c 	.word	0x0800f97c
 800d660:	41615252 	.word	0x41615252
 800d664:	61417272 	.word	0x61417272
 800d668:	00fffff8 	.word	0x00fffff8
 800d66c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d66e:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800d670:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d674:	4293      	cmp	r3, r2
 800d676:	bf28      	it	cs
 800d678:	4613      	movcs	r3, r2
 800d67a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d67c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d682:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d684:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d686:	f7fc fc6d 	bl	8009f64 <disk_write>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d001      	beq.n	800d694 <f_mkfs+0x728>
 800d690:	2301      	movs	r3, #1
 800d692:	e091      	b.n	800d7b8 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800d694:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d698:	4413      	add	r3, r2
 800d69a:	667b      	str	r3, [r7, #100]	; 0x64
 800d69c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d69e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800d6a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1e2      	bne.n	800d670 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800d6aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d6ae:	2b03      	cmp	r3, #3
 800d6b0:	d103      	bne.n	800d6ba <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800d6b2:	230c      	movs	r3, #12
 800d6b4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d6b8:	e010      	b.n	800d6dc <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6c0:	d303      	bcc.n	800d6ca <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800d6c2:	2306      	movs	r3, #6
 800d6c4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d6c8:	e008      	b.n	800d6dc <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800d6ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d6ce:	2b02      	cmp	r3, #2
 800d6d0:	d101      	bne.n	800d6d6 <f_mkfs+0x76a>
 800d6d2:	2304      	movs	r3, #4
 800d6d4:	e000      	b.n	800d6d8 <f_mkfs+0x76c>
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800d6dc:	7afb      	ldrb	r3, [r7, #11]
 800d6de:	f003 0308 	and.w	r3, r3, #8
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d15b      	bne.n	800d79e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800d6e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6ee:	f7fc fd1a 	bl	800a126 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800d6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d6f8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fc fcaa 	bl	800a056 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800d702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d704:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d708:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800d70a:	69bb      	ldr	r3, [r7, #24]
 800d70c:	2200      	movs	r2, #0
 800d70e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	3301      	adds	r3, #1
 800d714:	2201      	movs	r2, #1
 800d716:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	3302      	adds	r3, #2
 800d71c:	2201      	movs	r2, #1
 800d71e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	3303      	adds	r3, #3
 800d724:	2200      	movs	r2, #0
 800d726:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800d728:	69bb      	ldr	r3, [r7, #24]
 800d72a:	3304      	adds	r3, #4
 800d72c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800d730:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800d732:	693a      	ldr	r2, [r7, #16]
 800d734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d736:	441a      	add	r2, r3
 800d738:	4b21      	ldr	r3, [pc, #132]	; (800d7c0 <f_mkfs+0x854>)
 800d73a:	fba3 1302 	umull	r1, r3, r3, r2
 800d73e:	1ad2      	subs	r2, r2, r3
 800d740:	0852      	lsrs	r2, r2, #1
 800d742:	4413      	add	r3, r2
 800d744:	0b5b      	lsrs	r3, r3, #13
 800d746:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	3305      	adds	r3, #5
 800d74c:	22fe      	movs	r2, #254	; 0xfe
 800d74e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800d750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d752:	089b      	lsrs	r3, r3, #2
 800d754:	b2da      	uxtb	r2, r3
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	3306      	adds	r3, #6
 800d75a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800d75e:	b2d2      	uxtb	r2, r2
 800d760:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	3307      	adds	r3, #7
 800d766:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d768:	b2d2      	uxtb	r2, r2
 800d76a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	3308      	adds	r3, #8
 800d770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d772:	4618      	mov	r0, r3
 800d774:	f7fc fc8a 	bl	800a08c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800d778:	69bb      	ldr	r3, [r7, #24]
 800d77a:	330c      	adds	r3, #12
 800d77c:	693a      	ldr	r2, [r7, #16]
 800d77e:	4611      	mov	r1, r2
 800d780:	4618      	mov	r0, r3
 800d782:	f7fc fc83 	bl	800a08c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800d786:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d78a:	2301      	movs	r3, #1
 800d78c:	2200      	movs	r2, #0
 800d78e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d790:	f7fc fbe8 	bl	8009f64 <disk_write>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d001      	beq.n	800d79e <f_mkfs+0x832>
 800d79a:	2301      	movs	r3, #1
 800d79c:	e00c      	b.n	800d7b8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800d79e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fc fbfc 	bl	8009fa4 <disk_ioctl>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d001      	beq.n	800d7b6 <f_mkfs+0x84a>
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	e000      	b.n	800d7b8 <f_mkfs+0x84c>

	return FR_OK;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3774      	adds	r7, #116	; 0x74
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd90      	pop	{r4, r7, pc}
 800d7c0:	0515565b 	.word	0x0515565b

0800d7c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b087      	sub	sp, #28
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d7da:	4b1f      	ldr	r3, [pc, #124]	; (800d858 <FATFS_LinkDriverEx+0x94>)
 800d7dc:	7a5b      	ldrb	r3, [r3, #9]
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d131      	bne.n	800d848 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d7e4:	4b1c      	ldr	r3, [pc, #112]	; (800d858 <FATFS_LinkDriverEx+0x94>)
 800d7e6:	7a5b      	ldrb	r3, [r3, #9]
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	4b1a      	ldr	r3, [pc, #104]	; (800d858 <FATFS_LinkDriverEx+0x94>)
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d7f2:	4b19      	ldr	r3, [pc, #100]	; (800d858 <FATFS_LinkDriverEx+0x94>)
 800d7f4:	7a5b      	ldrb	r3, [r3, #9]
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	4a17      	ldr	r2, [pc, #92]	; (800d858 <FATFS_LinkDriverEx+0x94>)
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	4413      	add	r3, r2
 800d7fe:	68fa      	ldr	r2, [r7, #12]
 800d800:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d802:	4b15      	ldr	r3, [pc, #84]	; (800d858 <FATFS_LinkDriverEx+0x94>)
 800d804:	7a5b      	ldrb	r3, [r3, #9]
 800d806:	b2db      	uxtb	r3, r3
 800d808:	461a      	mov	r2, r3
 800d80a:	4b13      	ldr	r3, [pc, #76]	; (800d858 <FATFS_LinkDriverEx+0x94>)
 800d80c:	4413      	add	r3, r2
 800d80e:	79fa      	ldrb	r2, [r7, #7]
 800d810:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d812:	4b11      	ldr	r3, [pc, #68]	; (800d858 <FATFS_LinkDriverEx+0x94>)
 800d814:	7a5b      	ldrb	r3, [r3, #9]
 800d816:	b2db      	uxtb	r3, r3
 800d818:	1c5a      	adds	r2, r3, #1
 800d81a:	b2d1      	uxtb	r1, r2
 800d81c:	4a0e      	ldr	r2, [pc, #56]	; (800d858 <FATFS_LinkDriverEx+0x94>)
 800d81e:	7251      	strb	r1, [r2, #9]
 800d820:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d822:	7dbb      	ldrb	r3, [r7, #22]
 800d824:	3330      	adds	r3, #48	; 0x30
 800d826:	b2da      	uxtb	r2, r3
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	3301      	adds	r3, #1
 800d830:	223a      	movs	r2, #58	; 0x3a
 800d832:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	3302      	adds	r3, #2
 800d838:	222f      	movs	r2, #47	; 0x2f
 800d83a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	3303      	adds	r3, #3
 800d840:	2200      	movs	r2, #0
 800d842:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d844:	2300      	movs	r3, #0
 800d846:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d848:	7dfb      	ldrb	r3, [r7, #23]
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	371c      	adds	r7, #28
 800d84e:	46bd      	mov	sp, r7
 800d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d854:	4770      	bx	lr
 800d856:	bf00      	nop
 800d858:	20002dac 	.word	0x20002dac

0800d85c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d866:	2200      	movs	r2, #0
 800d868:	6839      	ldr	r1, [r7, #0]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7ff ffaa 	bl	800d7c4 <FATFS_LinkDriverEx>
 800d870:	4603      	mov	r3, r0
}
 800d872:	4618      	mov	r0, r3
 800d874:	3708      	adds	r7, #8
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
	...

0800d87c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	4603      	mov	r3, r0
 800d884:	6039      	str	r1, [r7, #0]
 800d886:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d888:	88fb      	ldrh	r3, [r7, #6]
 800d88a:	2b7f      	cmp	r3, #127	; 0x7f
 800d88c:	d802      	bhi.n	800d894 <ff_convert+0x18>
		c = chr;
 800d88e:	88fb      	ldrh	r3, [r7, #6]
 800d890:	81fb      	strh	r3, [r7, #14]
 800d892:	e025      	b.n	800d8e0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d00b      	beq.n	800d8b2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d89a:	88fb      	ldrh	r3, [r7, #6]
 800d89c:	2bff      	cmp	r3, #255	; 0xff
 800d89e:	d805      	bhi.n	800d8ac <ff_convert+0x30>
 800d8a0:	88fb      	ldrh	r3, [r7, #6]
 800d8a2:	3b80      	subs	r3, #128	; 0x80
 800d8a4:	4a12      	ldr	r2, [pc, #72]	; (800d8f0 <ff_convert+0x74>)
 800d8a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8aa:	e000      	b.n	800d8ae <ff_convert+0x32>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	81fb      	strh	r3, [r7, #14]
 800d8b0:	e016      	b.n	800d8e0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	81fb      	strh	r3, [r7, #14]
 800d8b6:	e009      	b.n	800d8cc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d8b8:	89fb      	ldrh	r3, [r7, #14]
 800d8ba:	4a0d      	ldr	r2, [pc, #52]	; (800d8f0 <ff_convert+0x74>)
 800d8bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8c0:	88fa      	ldrh	r2, [r7, #6]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d006      	beq.n	800d8d4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d8c6:	89fb      	ldrh	r3, [r7, #14]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	81fb      	strh	r3, [r7, #14]
 800d8cc:	89fb      	ldrh	r3, [r7, #14]
 800d8ce:	2b7f      	cmp	r3, #127	; 0x7f
 800d8d0:	d9f2      	bls.n	800d8b8 <ff_convert+0x3c>
 800d8d2:	e000      	b.n	800d8d6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d8d4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d8d6:	89fb      	ldrh	r3, [r7, #14]
 800d8d8:	3380      	adds	r3, #128	; 0x80
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d8e0:	89fb      	ldrh	r3, [r7, #14]
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3714      	adds	r7, #20
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop
 800d8f0:	0800faf4 	.word	0x0800faf4

0800d8f4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b087      	sub	sp, #28
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d8fe:	88fb      	ldrh	r3, [r7, #6]
 800d900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d904:	d201      	bcs.n	800d90a <ff_wtoupper+0x16>
 800d906:	4b3e      	ldr	r3, [pc, #248]	; (800da00 <ff_wtoupper+0x10c>)
 800d908:	e000      	b.n	800d90c <ff_wtoupper+0x18>
 800d90a:	4b3e      	ldr	r3, [pc, #248]	; (800da04 <ff_wtoupper+0x110>)
 800d90c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	1c9a      	adds	r2, r3, #2
 800d912:	617a      	str	r2, [r7, #20]
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d918:	8a7b      	ldrh	r3, [r7, #18]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d068      	beq.n	800d9f0 <ff_wtoupper+0xfc>
 800d91e:	88fa      	ldrh	r2, [r7, #6]
 800d920:	8a7b      	ldrh	r3, [r7, #18]
 800d922:	429a      	cmp	r2, r3
 800d924:	d364      	bcc.n	800d9f0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	1c9a      	adds	r2, r3, #2
 800d92a:	617a      	str	r2, [r7, #20]
 800d92c:	881b      	ldrh	r3, [r3, #0]
 800d92e:	823b      	strh	r3, [r7, #16]
 800d930:	8a3b      	ldrh	r3, [r7, #16]
 800d932:	0a1b      	lsrs	r3, r3, #8
 800d934:	81fb      	strh	r3, [r7, #14]
 800d936:	8a3b      	ldrh	r3, [r7, #16]
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d93c:	88fa      	ldrh	r2, [r7, #6]
 800d93e:	8a79      	ldrh	r1, [r7, #18]
 800d940:	8a3b      	ldrh	r3, [r7, #16]
 800d942:	440b      	add	r3, r1
 800d944:	429a      	cmp	r2, r3
 800d946:	da49      	bge.n	800d9dc <ff_wtoupper+0xe8>
			switch (cmd) {
 800d948:	89fb      	ldrh	r3, [r7, #14]
 800d94a:	2b08      	cmp	r3, #8
 800d94c:	d84f      	bhi.n	800d9ee <ff_wtoupper+0xfa>
 800d94e:	a201      	add	r2, pc, #4	; (adr r2, 800d954 <ff_wtoupper+0x60>)
 800d950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d954:	0800d979 	.word	0x0800d979
 800d958:	0800d98b 	.word	0x0800d98b
 800d95c:	0800d9a1 	.word	0x0800d9a1
 800d960:	0800d9a9 	.word	0x0800d9a9
 800d964:	0800d9b1 	.word	0x0800d9b1
 800d968:	0800d9b9 	.word	0x0800d9b9
 800d96c:	0800d9c1 	.word	0x0800d9c1
 800d970:	0800d9c9 	.word	0x0800d9c9
 800d974:	0800d9d1 	.word	0x0800d9d1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d978:	88fa      	ldrh	r2, [r7, #6]
 800d97a:	8a7b      	ldrh	r3, [r7, #18]
 800d97c:	1ad3      	subs	r3, r2, r3
 800d97e:	005b      	lsls	r3, r3, #1
 800d980:	697a      	ldr	r2, [r7, #20]
 800d982:	4413      	add	r3, r2
 800d984:	881b      	ldrh	r3, [r3, #0]
 800d986:	80fb      	strh	r3, [r7, #6]
 800d988:	e027      	b.n	800d9da <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d98a:	88fa      	ldrh	r2, [r7, #6]
 800d98c:	8a7b      	ldrh	r3, [r7, #18]
 800d98e:	1ad3      	subs	r3, r2, r3
 800d990:	b29b      	uxth	r3, r3
 800d992:	f003 0301 	and.w	r3, r3, #1
 800d996:	b29b      	uxth	r3, r3
 800d998:	88fa      	ldrh	r2, [r7, #6]
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	80fb      	strh	r3, [r7, #6]
 800d99e:	e01c      	b.n	800d9da <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d9a0:	88fb      	ldrh	r3, [r7, #6]
 800d9a2:	3b10      	subs	r3, #16
 800d9a4:	80fb      	strh	r3, [r7, #6]
 800d9a6:	e018      	b.n	800d9da <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d9a8:	88fb      	ldrh	r3, [r7, #6]
 800d9aa:	3b20      	subs	r3, #32
 800d9ac:	80fb      	strh	r3, [r7, #6]
 800d9ae:	e014      	b.n	800d9da <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d9b0:	88fb      	ldrh	r3, [r7, #6]
 800d9b2:	3b30      	subs	r3, #48	; 0x30
 800d9b4:	80fb      	strh	r3, [r7, #6]
 800d9b6:	e010      	b.n	800d9da <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d9b8:	88fb      	ldrh	r3, [r7, #6]
 800d9ba:	3b1a      	subs	r3, #26
 800d9bc:	80fb      	strh	r3, [r7, #6]
 800d9be:	e00c      	b.n	800d9da <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d9c0:	88fb      	ldrh	r3, [r7, #6]
 800d9c2:	3308      	adds	r3, #8
 800d9c4:	80fb      	strh	r3, [r7, #6]
 800d9c6:	e008      	b.n	800d9da <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d9c8:	88fb      	ldrh	r3, [r7, #6]
 800d9ca:	3b50      	subs	r3, #80	; 0x50
 800d9cc:	80fb      	strh	r3, [r7, #6]
 800d9ce:	e004      	b.n	800d9da <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d9d0:	88fb      	ldrh	r3, [r7, #6]
 800d9d2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d9d6:	80fb      	strh	r3, [r7, #6]
 800d9d8:	bf00      	nop
			}
			break;
 800d9da:	e008      	b.n	800d9ee <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d9dc:	89fb      	ldrh	r3, [r7, #14]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d195      	bne.n	800d90e <ff_wtoupper+0x1a>
 800d9e2:	8a3b      	ldrh	r3, [r7, #16]
 800d9e4:	005b      	lsls	r3, r3, #1
 800d9e6:	697a      	ldr	r2, [r7, #20]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d9ec:	e78f      	b.n	800d90e <ff_wtoupper+0x1a>
			break;
 800d9ee:	bf00      	nop
	}

	return chr;
 800d9f0:	88fb      	ldrh	r3, [r7, #6]
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	371c      	adds	r7, #28
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop
 800da00:	0800fbf4 	.word	0x0800fbf4
 800da04:	0800fde8 	.word	0x0800fde8

0800da08 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 fd3b 	bl	800e48c <malloc>
 800da16:	4603      	mov	r3, r0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 fd37 	bl	800e49c <free>
}
 800da2e:	bf00      	nop
 800da30:	3708      	adds	r7, #8
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
	...

0800da38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800da3c:	2200      	movs	r2, #0
 800da3e:	4912      	ldr	r1, [pc, #72]	; (800da88 <MX_USB_DEVICE_Init+0x50>)
 800da40:	4812      	ldr	r0, [pc, #72]	; (800da8c <MX_USB_DEVICE_Init+0x54>)
 800da42:	f7fa ff35 	bl	80088b0 <USBD_Init>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d001      	beq.n	800da50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800da4c:	f7f2 fffa 	bl	8000a44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800da50:	490f      	ldr	r1, [pc, #60]	; (800da90 <MX_USB_DEVICE_Init+0x58>)
 800da52:	480e      	ldr	r0, [pc, #56]	; (800da8c <MX_USB_DEVICE_Init+0x54>)
 800da54:	f7fa ff5c 	bl	8008910 <USBD_RegisterClass>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d001      	beq.n	800da62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800da5e:	f7f2 fff1 	bl	8000a44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800da62:	490c      	ldr	r1, [pc, #48]	; (800da94 <MX_USB_DEVICE_Init+0x5c>)
 800da64:	4809      	ldr	r0, [pc, #36]	; (800da8c <MX_USB_DEVICE_Init+0x54>)
 800da66:	f7fa fe53 	bl	8008710 <USBD_CDC_RegisterInterface>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d001      	beq.n	800da74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800da70:	f7f2 ffe8 	bl	8000a44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800da74:	4805      	ldr	r0, [pc, #20]	; (800da8c <MX_USB_DEVICE_Init+0x54>)
 800da76:	f7fa ff81 	bl	800897c <USBD_Start>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d001      	beq.n	800da84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800da80:	f7f2 ffe0 	bl	8000a44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800da84:	bf00      	nop
 800da86:	bd80      	pop	{r7, pc}
 800da88:	200000ac 	.word	0x200000ac
 800da8c:	20002db8 	.word	0x20002db8
 800da90:	20000018 	.word	0x20000018
 800da94:	20000098 	.word	0x20000098

0800da98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800da9c:	2200      	movs	r2, #0
 800da9e:	4905      	ldr	r1, [pc, #20]	; (800dab4 <CDC_Init_FS+0x1c>)
 800daa0:	4805      	ldr	r0, [pc, #20]	; (800dab8 <CDC_Init_FS+0x20>)
 800daa2:	f7fa fe4f 	bl	8008744 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800daa6:	4905      	ldr	r1, [pc, #20]	; (800dabc <CDC_Init_FS+0x24>)
 800daa8:	4803      	ldr	r0, [pc, #12]	; (800dab8 <CDC_Init_FS+0x20>)
 800daaa:	f7fa fe6d 	bl	8008788 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800daae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	20003894 	.word	0x20003894
 800dab8:	20002db8 	.word	0x20002db8
 800dabc:	20003094 	.word	0x20003094

0800dac0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dac0:	b480      	push	{r7}
 800dac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dac4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	4603      	mov	r3, r0
 800dad8:	6039      	str	r1, [r7, #0]
 800dada:	71fb      	strb	r3, [r7, #7]
 800dadc:	4613      	mov	r3, r2
 800dade:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dae0:	79fb      	ldrb	r3, [r7, #7]
 800dae2:	2b23      	cmp	r3, #35	; 0x23
 800dae4:	d84a      	bhi.n	800db7c <CDC_Control_FS+0xac>
 800dae6:	a201      	add	r2, pc, #4	; (adr r2, 800daec <CDC_Control_FS+0x1c>)
 800dae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daec:	0800db7d 	.word	0x0800db7d
 800daf0:	0800db7d 	.word	0x0800db7d
 800daf4:	0800db7d 	.word	0x0800db7d
 800daf8:	0800db7d 	.word	0x0800db7d
 800dafc:	0800db7d 	.word	0x0800db7d
 800db00:	0800db7d 	.word	0x0800db7d
 800db04:	0800db7d 	.word	0x0800db7d
 800db08:	0800db7d 	.word	0x0800db7d
 800db0c:	0800db7d 	.word	0x0800db7d
 800db10:	0800db7d 	.word	0x0800db7d
 800db14:	0800db7d 	.word	0x0800db7d
 800db18:	0800db7d 	.word	0x0800db7d
 800db1c:	0800db7d 	.word	0x0800db7d
 800db20:	0800db7d 	.word	0x0800db7d
 800db24:	0800db7d 	.word	0x0800db7d
 800db28:	0800db7d 	.word	0x0800db7d
 800db2c:	0800db7d 	.word	0x0800db7d
 800db30:	0800db7d 	.word	0x0800db7d
 800db34:	0800db7d 	.word	0x0800db7d
 800db38:	0800db7d 	.word	0x0800db7d
 800db3c:	0800db7d 	.word	0x0800db7d
 800db40:	0800db7d 	.word	0x0800db7d
 800db44:	0800db7d 	.word	0x0800db7d
 800db48:	0800db7d 	.word	0x0800db7d
 800db4c:	0800db7d 	.word	0x0800db7d
 800db50:	0800db7d 	.word	0x0800db7d
 800db54:	0800db7d 	.word	0x0800db7d
 800db58:	0800db7d 	.word	0x0800db7d
 800db5c:	0800db7d 	.word	0x0800db7d
 800db60:	0800db7d 	.word	0x0800db7d
 800db64:	0800db7d 	.word	0x0800db7d
 800db68:	0800db7d 	.word	0x0800db7d
 800db6c:	0800db7d 	.word	0x0800db7d
 800db70:	0800db7d 	.word	0x0800db7d
 800db74:	0800db7d 	.word	0x0800db7d
 800db78:	0800db7d 	.word	0x0800db7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800db7c:	bf00      	nop
  }

  return (USBD_OK);
 800db7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800db80:	4618      	mov	r0, r3
 800db82:	370c      	adds	r7, #12
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr

0800db8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b084      	sub	sp, #16
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800db96:	6879      	ldr	r1, [r7, #4]
 800db98:	4810      	ldr	r0, [pc, #64]	; (800dbdc <CDC_Receive_FS+0x50>)
 800db9a:	f7fa fdf5 	bl	8008788 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800db9e:	480f      	ldr	r0, [pc, #60]	; (800dbdc <CDC_Receive_FS+0x50>)
 800dba0:	f7fa fe50 	bl	8008844 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	73fb      	strb	r3, [r7, #15]
  FalgReadyPacketRx = true;
 800dbaa:	4b0d      	ldr	r3, [pc, #52]	; (800dbe0 <CDC_Receive_FS+0x54>)
 800dbac:	2201      	movs	r2, #1
 800dbae:	701a      	strb	r2, [r3, #0]
  memset(BufferReceive, '\0', 64);
 800dbb0:	2240      	movs	r2, #64	; 0x40
 800dbb2:	2100      	movs	r1, #0
 800dbb4:	480b      	ldr	r0, [pc, #44]	; (800dbe4 <CDC_Receive_FS+0x58>)
 800dbb6:	f000 ff3d 	bl	800ea34 <memset>
  memcpy(BufferReceive, Buf, len);
 800dbba:	7bfb      	ldrb	r3, [r7, #15]
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	6879      	ldr	r1, [r7, #4]
 800dbc0:	4808      	ldr	r0, [pc, #32]	; (800dbe4 <CDC_Receive_FS+0x58>)
 800dbc2:	f000 ffc2 	bl	800eb4a <memcpy>
  memset(Buf, '\0', len);
 800dbc6:	7bfb      	ldrb	r3, [r7, #15]
 800dbc8:	461a      	mov	r2, r3
 800dbca:	2100      	movs	r1, #0
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f000 ff31 	bl	800ea34 <memset>
  return (USBD_OK);
 800dbd2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3710      	adds	r7, #16
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	20002db8 	.word	0x20002db8
 800dbe0:	20000179 	.word	0x20000179
 800dbe4:	20000188 	.word	0x20000188

0800dbe8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dbf8:	4b0d      	ldr	r3, [pc, #52]	; (800dc30 <CDC_Transmit_FS+0x48>)
 800dbfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbfe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d001      	beq.n	800dc0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	e00b      	b.n	800dc26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dc0e:	887b      	ldrh	r3, [r7, #2]
 800dc10:	461a      	mov	r2, r3
 800dc12:	6879      	ldr	r1, [r7, #4]
 800dc14:	4806      	ldr	r0, [pc, #24]	; (800dc30 <CDC_Transmit_FS+0x48>)
 800dc16:	f7fa fd95 	bl	8008744 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dc1a:	4805      	ldr	r0, [pc, #20]	; (800dc30 <CDC_Transmit_FS+0x48>)
 800dc1c:	f7fa fdd2 	bl	80087c4 <USBD_CDC_TransmitPacket>
 800dc20:	4603      	mov	r3, r0
 800dc22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3710      	adds	r7, #16
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	20002db8 	.word	0x20002db8

0800dc34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b087      	sub	sp, #28
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	4613      	mov	r3, r2
 800dc40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dc42:	2300      	movs	r3, #0
 800dc44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dc46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	371c      	adds	r7, #28
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr
	...

0800dc58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	4603      	mov	r3, r0
 800dc60:	6039      	str	r1, [r7, #0]
 800dc62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	2212      	movs	r2, #18
 800dc68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dc6a:	4b03      	ldr	r3, [pc, #12]	; (800dc78 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr
 800dc78:	200000c8 	.word	0x200000c8

0800dc7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	4603      	mov	r3, r0
 800dc84:	6039      	str	r1, [r7, #0]
 800dc86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	2204      	movs	r2, #4
 800dc8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dc8e:	4b03      	ldr	r3, [pc, #12]	; (800dc9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr
 800dc9c:	200000dc 	.word	0x200000dc

0800dca0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	4603      	mov	r3, r0
 800dca8:	6039      	str	r1, [r7, #0]
 800dcaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dcac:	79fb      	ldrb	r3, [r7, #7]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d105      	bne.n	800dcbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dcb2:	683a      	ldr	r2, [r7, #0]
 800dcb4:	4907      	ldr	r1, [pc, #28]	; (800dcd4 <USBD_FS_ProductStrDescriptor+0x34>)
 800dcb6:	4808      	ldr	r0, [pc, #32]	; (800dcd8 <USBD_FS_ProductStrDescriptor+0x38>)
 800dcb8:	f7fc f812 	bl	8009ce0 <USBD_GetString>
 800dcbc:	e004      	b.n	800dcc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dcbe:	683a      	ldr	r2, [r7, #0]
 800dcc0:	4904      	ldr	r1, [pc, #16]	; (800dcd4 <USBD_FS_ProductStrDescriptor+0x34>)
 800dcc2:	4805      	ldr	r0, [pc, #20]	; (800dcd8 <USBD_FS_ProductStrDescriptor+0x38>)
 800dcc4:	f7fc f80c 	bl	8009ce0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dcc8:	4b02      	ldr	r3, [pc, #8]	; (800dcd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3708      	adds	r7, #8
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	20004094 	.word	0x20004094
 800dcd8:	0800f990 	.word	0x0800f990

0800dcdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	4603      	mov	r3, r0
 800dce4:	6039      	str	r1, [r7, #0]
 800dce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dce8:	683a      	ldr	r2, [r7, #0]
 800dcea:	4904      	ldr	r1, [pc, #16]	; (800dcfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dcec:	4804      	ldr	r0, [pc, #16]	; (800dd00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dcee:	f7fb fff7 	bl	8009ce0 <USBD_GetString>
  return USBD_StrDesc;
 800dcf2:	4b02      	ldr	r3, [pc, #8]	; (800dcfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3708      	adds	r7, #8
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	20004094 	.word	0x20004094
 800dd00:	0800f9a4 	.word	0x0800f9a4

0800dd04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	6039      	str	r1, [r7, #0]
 800dd0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	221a      	movs	r2, #26
 800dd14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd16:	f000 f843 	bl	800dda0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dd1a:	4b02      	ldr	r3, [pc, #8]	; (800dd24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	200000e0 	.word	0x200000e0

0800dd28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	4603      	mov	r3, r0
 800dd30:	6039      	str	r1, [r7, #0]
 800dd32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dd34:	79fb      	ldrb	r3, [r7, #7]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d105      	bne.n	800dd46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd3a:	683a      	ldr	r2, [r7, #0]
 800dd3c:	4907      	ldr	r1, [pc, #28]	; (800dd5c <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd3e:	4808      	ldr	r0, [pc, #32]	; (800dd60 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd40:	f7fb ffce 	bl	8009ce0 <USBD_GetString>
 800dd44:	e004      	b.n	800dd50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd46:	683a      	ldr	r2, [r7, #0]
 800dd48:	4904      	ldr	r1, [pc, #16]	; (800dd5c <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd4a:	4805      	ldr	r0, [pc, #20]	; (800dd60 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd4c:	f7fb ffc8 	bl	8009ce0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd50:	4b02      	ldr	r3, [pc, #8]	; (800dd5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	20004094 	.word	0x20004094
 800dd60:	0800f9b8 	.word	0x0800f9b8

0800dd64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	6039      	str	r1, [r7, #0]
 800dd6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd70:	79fb      	ldrb	r3, [r7, #7]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d105      	bne.n	800dd82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	4907      	ldr	r1, [pc, #28]	; (800dd98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dd7a:	4808      	ldr	r0, [pc, #32]	; (800dd9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dd7c:	f7fb ffb0 	bl	8009ce0 <USBD_GetString>
 800dd80:	e004      	b.n	800dd8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dd82:	683a      	ldr	r2, [r7, #0]
 800dd84:	4904      	ldr	r1, [pc, #16]	; (800dd98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dd86:	4805      	ldr	r0, [pc, #20]	; (800dd9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dd88:	f7fb ffaa 	bl	8009ce0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd8c:	4b02      	ldr	r3, [pc, #8]	; (800dd98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20004094 	.word	0x20004094
 800dd9c:	0800f9c4 	.word	0x0800f9c4

0800dda0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b084      	sub	sp, #16
 800dda4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dda6:	4b0f      	ldr	r3, [pc, #60]	; (800dde4 <Get_SerialNum+0x44>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ddac:	4b0e      	ldr	r3, [pc, #56]	; (800dde8 <Get_SerialNum+0x48>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ddb2:	4b0e      	ldr	r3, [pc, #56]	; (800ddec <Get_SerialNum+0x4c>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d009      	beq.n	800ddda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ddc6:	2208      	movs	r2, #8
 800ddc8:	4909      	ldr	r1, [pc, #36]	; (800ddf0 <Get_SerialNum+0x50>)
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	f000 f814 	bl	800ddf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ddd0:	2204      	movs	r2, #4
 800ddd2:	4908      	ldr	r1, [pc, #32]	; (800ddf4 <Get_SerialNum+0x54>)
 800ddd4:	68b8      	ldr	r0, [r7, #8]
 800ddd6:	f000 f80f 	bl	800ddf8 <IntToUnicode>
  }
}
 800ddda:	bf00      	nop
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	1fff7a10 	.word	0x1fff7a10
 800dde8:	1fff7a14 	.word	0x1fff7a14
 800ddec:	1fff7a18 	.word	0x1fff7a18
 800ddf0:	200000e2 	.word	0x200000e2
 800ddf4:	200000f2 	.word	0x200000f2

0800ddf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b087      	sub	sp, #28
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	4613      	mov	r3, r2
 800de04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de06:	2300      	movs	r3, #0
 800de08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800de0a:	2300      	movs	r3, #0
 800de0c:	75fb      	strb	r3, [r7, #23]
 800de0e:	e027      	b.n	800de60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	0f1b      	lsrs	r3, r3, #28
 800de14:	2b09      	cmp	r3, #9
 800de16:	d80b      	bhi.n	800de30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	0f1b      	lsrs	r3, r3, #28
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	7dfb      	ldrb	r3, [r7, #23]
 800de20:	005b      	lsls	r3, r3, #1
 800de22:	4619      	mov	r1, r3
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	440b      	add	r3, r1
 800de28:	3230      	adds	r2, #48	; 0x30
 800de2a:	b2d2      	uxtb	r2, r2
 800de2c:	701a      	strb	r2, [r3, #0]
 800de2e:	e00a      	b.n	800de46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	0f1b      	lsrs	r3, r3, #28
 800de34:	b2da      	uxtb	r2, r3
 800de36:	7dfb      	ldrb	r3, [r7, #23]
 800de38:	005b      	lsls	r3, r3, #1
 800de3a:	4619      	mov	r1, r3
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	440b      	add	r3, r1
 800de40:	3237      	adds	r2, #55	; 0x37
 800de42:	b2d2      	uxtb	r2, r2
 800de44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	011b      	lsls	r3, r3, #4
 800de4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800de4c:	7dfb      	ldrb	r3, [r7, #23]
 800de4e:	005b      	lsls	r3, r3, #1
 800de50:	3301      	adds	r3, #1
 800de52:	68ba      	ldr	r2, [r7, #8]
 800de54:	4413      	add	r3, r2
 800de56:	2200      	movs	r2, #0
 800de58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800de5a:	7dfb      	ldrb	r3, [r7, #23]
 800de5c:	3301      	adds	r3, #1
 800de5e:	75fb      	strb	r3, [r7, #23]
 800de60:	7dfa      	ldrb	r2, [r7, #23]
 800de62:	79fb      	ldrb	r3, [r7, #7]
 800de64:	429a      	cmp	r2, r3
 800de66:	d3d3      	bcc.n	800de10 <IntToUnicode+0x18>
  }
}
 800de68:	bf00      	nop
 800de6a:	bf00      	nop
 800de6c:	371c      	adds	r7, #28
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr
	...

0800de78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b08a      	sub	sp, #40	; 0x28
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de80:	f107 0314 	add.w	r3, r7, #20
 800de84:	2200      	movs	r2, #0
 800de86:	601a      	str	r2, [r3, #0]
 800de88:	605a      	str	r2, [r3, #4]
 800de8a:	609a      	str	r2, [r3, #8]
 800de8c:	60da      	str	r2, [r3, #12]
 800de8e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800de98:	d13a      	bne.n	800df10 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de9a:	2300      	movs	r3, #0
 800de9c:	613b      	str	r3, [r7, #16]
 800de9e:	4b1e      	ldr	r3, [pc, #120]	; (800df18 <HAL_PCD_MspInit+0xa0>)
 800dea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dea2:	4a1d      	ldr	r2, [pc, #116]	; (800df18 <HAL_PCD_MspInit+0xa0>)
 800dea4:	f043 0301 	orr.w	r3, r3, #1
 800dea8:	6313      	str	r3, [r2, #48]	; 0x30
 800deaa:	4b1b      	ldr	r3, [pc, #108]	; (800df18 <HAL_PCD_MspInit+0xa0>)
 800deac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deae:	f003 0301 	and.w	r3, r3, #1
 800deb2:	613b      	str	r3, [r7, #16]
 800deb4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800deb6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800deba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800debc:	2302      	movs	r3, #2
 800debe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dec0:	2300      	movs	r3, #0
 800dec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dec4:	2303      	movs	r3, #3
 800dec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dec8:	230a      	movs	r3, #10
 800deca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800decc:	f107 0314 	add.w	r3, r7, #20
 800ded0:	4619      	mov	r1, r3
 800ded2:	4812      	ldr	r0, [pc, #72]	; (800df1c <HAL_PCD_MspInit+0xa4>)
 800ded4:	f7f5 f892 	bl	8002ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ded8:	4b0f      	ldr	r3, [pc, #60]	; (800df18 <HAL_PCD_MspInit+0xa0>)
 800deda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dedc:	4a0e      	ldr	r2, [pc, #56]	; (800df18 <HAL_PCD_MspInit+0xa0>)
 800dede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dee2:	6353      	str	r3, [r2, #52]	; 0x34
 800dee4:	2300      	movs	r3, #0
 800dee6:	60fb      	str	r3, [r7, #12]
 800dee8:	4b0b      	ldr	r3, [pc, #44]	; (800df18 <HAL_PCD_MspInit+0xa0>)
 800deea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deec:	4a0a      	ldr	r2, [pc, #40]	; (800df18 <HAL_PCD_MspInit+0xa0>)
 800deee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800def2:	6453      	str	r3, [r2, #68]	; 0x44
 800def4:	4b08      	ldr	r3, [pc, #32]	; (800df18 <HAL_PCD_MspInit+0xa0>)
 800def6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800def8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800defc:	60fb      	str	r3, [r7, #12]
 800defe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800df00:	2200      	movs	r2, #0
 800df02:	2100      	movs	r1, #0
 800df04:	2043      	movs	r0, #67	; 0x43
 800df06:	f7f4 fcd2 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800df0a:	2043      	movs	r0, #67	; 0x43
 800df0c:	f7f4 fceb 	bl	80028e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800df10:	bf00      	nop
 800df12:	3728      	adds	r7, #40	; 0x28
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	40023800 	.word	0x40023800
 800df1c:	40020000 	.word	0x40020000

0800df20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800df34:	4619      	mov	r1, r3
 800df36:	4610      	mov	r0, r2
 800df38:	f7fa fd6d 	bl	8008a16 <USBD_LL_SetupStage>
}
 800df3c:	bf00      	nop
 800df3e:	3708      	adds	r7, #8
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	460b      	mov	r3, r1
 800df4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800df56:	78fa      	ldrb	r2, [r7, #3]
 800df58:	6879      	ldr	r1, [r7, #4]
 800df5a:	4613      	mov	r3, r2
 800df5c:	00db      	lsls	r3, r3, #3
 800df5e:	4413      	add	r3, r2
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	440b      	add	r3, r1
 800df64:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	78fb      	ldrb	r3, [r7, #3]
 800df6c:	4619      	mov	r1, r3
 800df6e:	f7fa fda7 	bl	8008ac0 <USBD_LL_DataOutStage>
}
 800df72:	bf00      	nop
 800df74:	3708      	adds	r7, #8
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df7a:	b580      	push	{r7, lr}
 800df7c:	b082      	sub	sp, #8
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
 800df82:	460b      	mov	r3, r1
 800df84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800df8c:	78fa      	ldrb	r2, [r7, #3]
 800df8e:	6879      	ldr	r1, [r7, #4]
 800df90:	4613      	mov	r3, r2
 800df92:	00db      	lsls	r3, r3, #3
 800df94:	4413      	add	r3, r2
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	440b      	add	r3, r1
 800df9a:	3320      	adds	r3, #32
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	78fb      	ldrb	r3, [r7, #3]
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	f7fa fe40 	bl	8008c26 <USBD_LL_DataInStage>
}
 800dfa6:	bf00      	nop
 800dfa8:	3708      	adds	r7, #8
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b082      	sub	sp, #8
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7fa ff7a 	bl	8008eb6 <USBD_LL_SOF>
}
 800dfc2:	bf00      	nop
 800dfc4:	3708      	adds	r7, #8
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}

0800dfca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfca:	b580      	push	{r7, lr}
 800dfcc:	b084      	sub	sp, #16
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	79db      	ldrb	r3, [r3, #7]
 800dfda:	2b02      	cmp	r3, #2
 800dfdc:	d001      	beq.n	800dfe2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dfde:	f7f2 fd31 	bl	8000a44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dfe8:	7bfa      	ldrb	r2, [r7, #15]
 800dfea:	4611      	mov	r1, r2
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fa ff1e 	bl	8008e2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fa fec6 	bl	8008d8a <USBD_LL_Reset>
}
 800dffe:	bf00      	nop
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
	...

0800e008 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e016:	4618      	mov	r0, r3
 800e018:	f7fa ff19 	bl	8008e4e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	6812      	ldr	r2, [r2, #0]
 800e02a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e02e:	f043 0301 	orr.w	r3, r3, #1
 800e032:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	7adb      	ldrb	r3, [r3, #11]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d005      	beq.n	800e048 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e03c:	4b04      	ldr	r3, [pc, #16]	; (800e050 <HAL_PCD_SuspendCallback+0x48>)
 800e03e:	691b      	ldr	r3, [r3, #16]
 800e040:	4a03      	ldr	r2, [pc, #12]	; (800e050 <HAL_PCD_SuspendCallback+0x48>)
 800e042:	f043 0306 	orr.w	r3, r3, #6
 800e046:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e048:	bf00      	nop
 800e04a:	3708      	adds	r7, #8
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	e000ed00 	.word	0xe000ed00

0800e054 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e062:	4618      	mov	r0, r3
 800e064:	f7fa ff0f 	bl	8008e86 <USBD_LL_Resume>
}
 800e068:	bf00      	nop
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	460b      	mov	r3, r1
 800e07a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e082:	78fa      	ldrb	r2, [r7, #3]
 800e084:	4611      	mov	r1, r2
 800e086:	4618      	mov	r0, r3
 800e088:	f7fa ff67 	bl	8008f5a <USBD_LL_IsoOUTIncomplete>
}
 800e08c:	bf00      	nop
 800e08e:	3708      	adds	r7, #8
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	460b      	mov	r3, r1
 800e09e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e0a6:	78fa      	ldrb	r2, [r7, #3]
 800e0a8:	4611      	mov	r1, r2
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7fa ff23 	bl	8008ef6 <USBD_LL_IsoINIncomplete>
}
 800e0b0:	bf00      	nop
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fa ff79 	bl	8008fbe <USBD_LL_DevConnected>
}
 800e0cc:	bf00      	nop
 800e0ce:	3708      	adds	r7, #8
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fa ff76 	bl	8008fd4 <USBD_LL_DevDisconnected>
}
 800e0e8:	bf00      	nop
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d13c      	bne.n	800e17a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e100:	4a20      	ldr	r2, [pc, #128]	; (800e184 <USBD_LL_Init+0x94>)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	4a1e      	ldr	r2, [pc, #120]	; (800e184 <USBD_LL_Init+0x94>)
 800e10c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e110:	4b1c      	ldr	r3, [pc, #112]	; (800e184 <USBD_LL_Init+0x94>)
 800e112:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e116:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e118:	4b1a      	ldr	r3, [pc, #104]	; (800e184 <USBD_LL_Init+0x94>)
 800e11a:	2204      	movs	r2, #4
 800e11c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e11e:	4b19      	ldr	r3, [pc, #100]	; (800e184 <USBD_LL_Init+0x94>)
 800e120:	2202      	movs	r2, #2
 800e122:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e124:	4b17      	ldr	r3, [pc, #92]	; (800e184 <USBD_LL_Init+0x94>)
 800e126:	2200      	movs	r2, #0
 800e128:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e12a:	4b16      	ldr	r3, [pc, #88]	; (800e184 <USBD_LL_Init+0x94>)
 800e12c:	2202      	movs	r2, #2
 800e12e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e130:	4b14      	ldr	r3, [pc, #80]	; (800e184 <USBD_LL_Init+0x94>)
 800e132:	2200      	movs	r2, #0
 800e134:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e136:	4b13      	ldr	r3, [pc, #76]	; (800e184 <USBD_LL_Init+0x94>)
 800e138:	2200      	movs	r2, #0
 800e13a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e13c:	4b11      	ldr	r3, [pc, #68]	; (800e184 <USBD_LL_Init+0x94>)
 800e13e:	2200      	movs	r2, #0
 800e140:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e142:	4b10      	ldr	r3, [pc, #64]	; (800e184 <USBD_LL_Init+0x94>)
 800e144:	2200      	movs	r2, #0
 800e146:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e148:	4b0e      	ldr	r3, [pc, #56]	; (800e184 <USBD_LL_Init+0x94>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e14e:	480d      	ldr	r0, [pc, #52]	; (800e184 <USBD_LL_Init+0x94>)
 800e150:	f7f5 f90a 	bl	8003368 <HAL_PCD_Init>
 800e154:	4603      	mov	r3, r0
 800e156:	2b00      	cmp	r3, #0
 800e158:	d001      	beq.n	800e15e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e15a:	f7f2 fc73 	bl	8000a44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e15e:	2180      	movs	r1, #128	; 0x80
 800e160:	4808      	ldr	r0, [pc, #32]	; (800e184 <USBD_LL_Init+0x94>)
 800e162:	f7f6 fb34 	bl	80047ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e166:	2240      	movs	r2, #64	; 0x40
 800e168:	2100      	movs	r1, #0
 800e16a:	4806      	ldr	r0, [pc, #24]	; (800e184 <USBD_LL_Init+0x94>)
 800e16c:	f7f6 fae8 	bl	8004740 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e170:	2280      	movs	r2, #128	; 0x80
 800e172:	2101      	movs	r1, #1
 800e174:	4803      	ldr	r0, [pc, #12]	; (800e184 <USBD_LL_Init+0x94>)
 800e176:	f7f6 fae3 	bl	8004740 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	20004294 	.word	0x20004294

0800e188 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e190:	2300      	movs	r3, #0
 800e192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e194:	2300      	movs	r3, #0
 800e196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7f5 f9f1 	bl	8003586 <HAL_PCD_Start>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1a8:	7bfb      	ldrb	r3, [r7, #15]
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f000 f942 	bl	800e434 <USBD_Get_USB_Status>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3710      	adds	r7, #16
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b084      	sub	sp, #16
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
 800e1c6:	4608      	mov	r0, r1
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	70fb      	strb	r3, [r7, #3]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	70bb      	strb	r3, [r7, #2]
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e1e6:	78bb      	ldrb	r3, [r7, #2]
 800e1e8:	883a      	ldrh	r2, [r7, #0]
 800e1ea:	78f9      	ldrb	r1, [r7, #3]
 800e1ec:	f7f5 fec5 	bl	8003f7a <HAL_PCD_EP_Open>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1f4:	7bfb      	ldrb	r3, [r7, #15]
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f000 f91c 	bl	800e434 <USBD_Get_USB_Status>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e200:	7bbb      	ldrb	r3, [r7, #14]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b084      	sub	sp, #16
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
 800e212:	460b      	mov	r3, r1
 800e214:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e216:	2300      	movs	r3, #0
 800e218:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e21a:	2300      	movs	r3, #0
 800e21c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e224:	78fa      	ldrb	r2, [r7, #3]
 800e226:	4611      	mov	r1, r2
 800e228:	4618      	mov	r0, r3
 800e22a:	f7f5 ff0e 	bl	800404a <HAL_PCD_EP_Close>
 800e22e:	4603      	mov	r3, r0
 800e230:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e232:	7bfb      	ldrb	r3, [r7, #15]
 800e234:	4618      	mov	r0, r3
 800e236:	f000 f8fd 	bl	800e434 <USBD_Get_USB_Status>
 800e23a:	4603      	mov	r3, r0
 800e23c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e23e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e240:	4618      	mov	r0, r3
 800e242:	3710      	adds	r7, #16
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	460b      	mov	r3, r1
 800e252:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e254:	2300      	movs	r3, #0
 800e256:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e258:	2300      	movs	r3, #0
 800e25a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e262:	78fa      	ldrb	r2, [r7, #3]
 800e264:	4611      	mov	r1, r2
 800e266:	4618      	mov	r0, r3
 800e268:	f7f5 ffc6 	bl	80041f8 <HAL_PCD_EP_SetStall>
 800e26c:	4603      	mov	r3, r0
 800e26e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e270:	7bfb      	ldrb	r3, [r7, #15]
 800e272:	4618      	mov	r0, r3
 800e274:	f000 f8de 	bl	800e434 <USBD_Get_USB_Status>
 800e278:	4603      	mov	r3, r0
 800e27a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e27c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3710      	adds	r7, #16
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}

0800e286 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e286:	b580      	push	{r7, lr}
 800e288:	b084      	sub	sp, #16
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
 800e28e:	460b      	mov	r3, r1
 800e290:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e292:	2300      	movs	r3, #0
 800e294:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e296:	2300      	movs	r3, #0
 800e298:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e2a0:	78fa      	ldrb	r2, [r7, #3]
 800e2a2:	4611      	mov	r1, r2
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7f6 f80a 	bl	80042be <HAL_PCD_EP_ClrStall>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2ae:	7bfb      	ldrb	r3, [r7, #15]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f000 f8bf 	bl	800e434 <USBD_Get_USB_Status>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3710      	adds	r7, #16
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b085      	sub	sp, #20
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e2d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e2d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	da0b      	bge.n	800e2f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e2e0:	78fb      	ldrb	r3, [r7, #3]
 800e2e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2e6:	68f9      	ldr	r1, [r7, #12]
 800e2e8:	4613      	mov	r3, r2
 800e2ea:	00db      	lsls	r3, r3, #3
 800e2ec:	4413      	add	r3, r2
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	440b      	add	r3, r1
 800e2f2:	3316      	adds	r3, #22
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	e00b      	b.n	800e310 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e2f8:	78fb      	ldrb	r3, [r7, #3]
 800e2fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2fe:	68f9      	ldr	r1, [r7, #12]
 800e300:	4613      	mov	r3, r2
 800e302:	00db      	lsls	r3, r3, #3
 800e304:	4413      	add	r3, r2
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	440b      	add	r3, r1
 800e30a:	f203 2356 	addw	r3, r3, #598	; 0x256
 800e30e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e310:	4618      	mov	r0, r3
 800e312:	3714      	adds	r7, #20
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	460b      	mov	r3, r1
 800e326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e328:	2300      	movs	r3, #0
 800e32a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e32c:	2300      	movs	r3, #0
 800e32e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e336:	78fa      	ldrb	r2, [r7, #3]
 800e338:	4611      	mov	r1, r2
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7f5 fdf9 	bl	8003f32 <HAL_PCD_SetAddress>
 800e340:	4603      	mov	r3, r0
 800e342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e344:	7bfb      	ldrb	r3, [r7, #15]
 800e346:	4618      	mov	r0, r3
 800e348:	f000 f874 	bl	800e434 <USBD_Get_USB_Status>
 800e34c:	4603      	mov	r3, r0
 800e34e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e350:	7bbb      	ldrb	r3, [r7, #14]
}
 800e352:	4618      	mov	r0, r3
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b086      	sub	sp, #24
 800e35e:	af00      	add	r7, sp, #0
 800e360:	60f8      	str	r0, [r7, #12]
 800e362:	607a      	str	r2, [r7, #4]
 800e364:	603b      	str	r3, [r7, #0]
 800e366:	460b      	mov	r3, r1
 800e368:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e36a:	2300      	movs	r3, #0
 800e36c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e378:	7af9      	ldrb	r1, [r7, #11]
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	f7f5 ff01 	bl	8004184 <HAL_PCD_EP_Transmit>
 800e382:	4603      	mov	r3, r0
 800e384:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e386:	7dfb      	ldrb	r3, [r7, #23]
 800e388:	4618      	mov	r0, r3
 800e38a:	f000 f853 	bl	800e434 <USBD_Get_USB_Status>
 800e38e:	4603      	mov	r3, r0
 800e390:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e392:	7dbb      	ldrb	r3, [r7, #22]
}
 800e394:	4618      	mov	r0, r3
 800e396:	3718      	adds	r7, #24
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b086      	sub	sp, #24
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	607a      	str	r2, [r7, #4]
 800e3a6:	603b      	str	r3, [r7, #0]
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e3ba:	7af9      	ldrb	r1, [r7, #11]
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	f7f5 fe8d 	bl	80040de <HAL_PCD_EP_Receive>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3c8:	7dfb      	ldrb	r3, [r7, #23]
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f000 f832 	bl	800e434 <USBD_Get_USB_Status>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3d4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3718      	adds	r7, #24
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b082      	sub	sp, #8
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3f0:	78fa      	ldrb	r2, [r7, #3]
 800e3f2:	4611      	mov	r1, r2
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7f5 fead 	bl	8004154 <HAL_PCD_EP_GetRxCount>
 800e3fa:	4603      	mov	r3, r0
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3708      	adds	r7, #8
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e40c:	4b03      	ldr	r3, [pc, #12]	; (800e41c <USBD_static_malloc+0x18>)
}
 800e40e:	4618      	mov	r0, r3
 800e410:	370c      	adds	r7, #12
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	20004778 	.word	0x20004778

0800e420 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]

}
 800e428:	bf00      	nop
 800e42a:	370c      	adds	r7, #12
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr

0800e434 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e434:	b480      	push	{r7}
 800e436:	b085      	sub	sp, #20
 800e438:	af00      	add	r7, sp, #0
 800e43a:	4603      	mov	r3, r0
 800e43c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e43e:	2300      	movs	r3, #0
 800e440:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e442:	79fb      	ldrb	r3, [r7, #7]
 800e444:	2b03      	cmp	r3, #3
 800e446:	d817      	bhi.n	800e478 <USBD_Get_USB_Status+0x44>
 800e448:	a201      	add	r2, pc, #4	; (adr r2, 800e450 <USBD_Get_USB_Status+0x1c>)
 800e44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e44e:	bf00      	nop
 800e450:	0800e461 	.word	0x0800e461
 800e454:	0800e467 	.word	0x0800e467
 800e458:	0800e46d 	.word	0x0800e46d
 800e45c:	0800e473 	.word	0x0800e473
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e460:	2300      	movs	r3, #0
 800e462:	73fb      	strb	r3, [r7, #15]
    break;
 800e464:	e00b      	b.n	800e47e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e466:	2303      	movs	r3, #3
 800e468:	73fb      	strb	r3, [r7, #15]
    break;
 800e46a:	e008      	b.n	800e47e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e46c:	2301      	movs	r3, #1
 800e46e:	73fb      	strb	r3, [r7, #15]
    break;
 800e470:	e005      	b.n	800e47e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e472:	2303      	movs	r3, #3
 800e474:	73fb      	strb	r3, [r7, #15]
    break;
 800e476:	e002      	b.n	800e47e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e478:	2303      	movs	r3, #3
 800e47a:	73fb      	strb	r3, [r7, #15]
    break;
 800e47c:	bf00      	nop
  }
  return usb_status;
 800e47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e480:	4618      	mov	r0, r3
 800e482:	3714      	adds	r7, #20
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <malloc>:
 800e48c:	4b02      	ldr	r3, [pc, #8]	; (800e498 <malloc+0xc>)
 800e48e:	4601      	mov	r1, r0
 800e490:	6818      	ldr	r0, [r3, #0]
 800e492:	f000 b82b 	b.w	800e4ec <_malloc_r>
 800e496:	bf00      	nop
 800e498:	20000154 	.word	0x20000154

0800e49c <free>:
 800e49c:	4b02      	ldr	r3, [pc, #8]	; (800e4a8 <free+0xc>)
 800e49e:	4601      	mov	r1, r0
 800e4a0:	6818      	ldr	r0, [r3, #0]
 800e4a2:	f000 bb61 	b.w	800eb68 <_free_r>
 800e4a6:	bf00      	nop
 800e4a8:	20000154 	.word	0x20000154

0800e4ac <sbrk_aligned>:
 800e4ac:	b570      	push	{r4, r5, r6, lr}
 800e4ae:	4e0e      	ldr	r6, [pc, #56]	; (800e4e8 <sbrk_aligned+0x3c>)
 800e4b0:	460c      	mov	r4, r1
 800e4b2:	6831      	ldr	r1, [r6, #0]
 800e4b4:	4605      	mov	r5, r0
 800e4b6:	b911      	cbnz	r1, 800e4be <sbrk_aligned+0x12>
 800e4b8:	f000 faf8 	bl	800eaac <_sbrk_r>
 800e4bc:	6030      	str	r0, [r6, #0]
 800e4be:	4621      	mov	r1, r4
 800e4c0:	4628      	mov	r0, r5
 800e4c2:	f000 faf3 	bl	800eaac <_sbrk_r>
 800e4c6:	1c43      	adds	r3, r0, #1
 800e4c8:	d00a      	beq.n	800e4e0 <sbrk_aligned+0x34>
 800e4ca:	1cc4      	adds	r4, r0, #3
 800e4cc:	f024 0403 	bic.w	r4, r4, #3
 800e4d0:	42a0      	cmp	r0, r4
 800e4d2:	d007      	beq.n	800e4e4 <sbrk_aligned+0x38>
 800e4d4:	1a21      	subs	r1, r4, r0
 800e4d6:	4628      	mov	r0, r5
 800e4d8:	f000 fae8 	bl	800eaac <_sbrk_r>
 800e4dc:	3001      	adds	r0, #1
 800e4de:	d101      	bne.n	800e4e4 <sbrk_aligned+0x38>
 800e4e0:	f04f 34ff 	mov.w	r4, #4294967295
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	bd70      	pop	{r4, r5, r6, pc}
 800e4e8:	2000499c 	.word	0x2000499c

0800e4ec <_malloc_r>:
 800e4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4f0:	1ccd      	adds	r5, r1, #3
 800e4f2:	f025 0503 	bic.w	r5, r5, #3
 800e4f6:	3508      	adds	r5, #8
 800e4f8:	2d0c      	cmp	r5, #12
 800e4fa:	bf38      	it	cc
 800e4fc:	250c      	movcc	r5, #12
 800e4fe:	2d00      	cmp	r5, #0
 800e500:	4607      	mov	r7, r0
 800e502:	db01      	blt.n	800e508 <_malloc_r+0x1c>
 800e504:	42a9      	cmp	r1, r5
 800e506:	d905      	bls.n	800e514 <_malloc_r+0x28>
 800e508:	230c      	movs	r3, #12
 800e50a:	603b      	str	r3, [r7, #0]
 800e50c:	2600      	movs	r6, #0
 800e50e:	4630      	mov	r0, r6
 800e510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e514:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e5e8 <_malloc_r+0xfc>
 800e518:	f000 f868 	bl	800e5ec <__malloc_lock>
 800e51c:	f8d8 3000 	ldr.w	r3, [r8]
 800e520:	461c      	mov	r4, r3
 800e522:	bb5c      	cbnz	r4, 800e57c <_malloc_r+0x90>
 800e524:	4629      	mov	r1, r5
 800e526:	4638      	mov	r0, r7
 800e528:	f7ff ffc0 	bl	800e4ac <sbrk_aligned>
 800e52c:	1c43      	adds	r3, r0, #1
 800e52e:	4604      	mov	r4, r0
 800e530:	d155      	bne.n	800e5de <_malloc_r+0xf2>
 800e532:	f8d8 4000 	ldr.w	r4, [r8]
 800e536:	4626      	mov	r6, r4
 800e538:	2e00      	cmp	r6, #0
 800e53a:	d145      	bne.n	800e5c8 <_malloc_r+0xdc>
 800e53c:	2c00      	cmp	r4, #0
 800e53e:	d048      	beq.n	800e5d2 <_malloc_r+0xe6>
 800e540:	6823      	ldr	r3, [r4, #0]
 800e542:	4631      	mov	r1, r6
 800e544:	4638      	mov	r0, r7
 800e546:	eb04 0903 	add.w	r9, r4, r3
 800e54a:	f000 faaf 	bl	800eaac <_sbrk_r>
 800e54e:	4581      	cmp	r9, r0
 800e550:	d13f      	bne.n	800e5d2 <_malloc_r+0xe6>
 800e552:	6821      	ldr	r1, [r4, #0]
 800e554:	1a6d      	subs	r5, r5, r1
 800e556:	4629      	mov	r1, r5
 800e558:	4638      	mov	r0, r7
 800e55a:	f7ff ffa7 	bl	800e4ac <sbrk_aligned>
 800e55e:	3001      	adds	r0, #1
 800e560:	d037      	beq.n	800e5d2 <_malloc_r+0xe6>
 800e562:	6823      	ldr	r3, [r4, #0]
 800e564:	442b      	add	r3, r5
 800e566:	6023      	str	r3, [r4, #0]
 800e568:	f8d8 3000 	ldr.w	r3, [r8]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d038      	beq.n	800e5e2 <_malloc_r+0xf6>
 800e570:	685a      	ldr	r2, [r3, #4]
 800e572:	42a2      	cmp	r2, r4
 800e574:	d12b      	bne.n	800e5ce <_malloc_r+0xe2>
 800e576:	2200      	movs	r2, #0
 800e578:	605a      	str	r2, [r3, #4]
 800e57a:	e00f      	b.n	800e59c <_malloc_r+0xb0>
 800e57c:	6822      	ldr	r2, [r4, #0]
 800e57e:	1b52      	subs	r2, r2, r5
 800e580:	d41f      	bmi.n	800e5c2 <_malloc_r+0xd6>
 800e582:	2a0b      	cmp	r2, #11
 800e584:	d917      	bls.n	800e5b6 <_malloc_r+0xca>
 800e586:	1961      	adds	r1, r4, r5
 800e588:	42a3      	cmp	r3, r4
 800e58a:	6025      	str	r5, [r4, #0]
 800e58c:	bf18      	it	ne
 800e58e:	6059      	strne	r1, [r3, #4]
 800e590:	6863      	ldr	r3, [r4, #4]
 800e592:	bf08      	it	eq
 800e594:	f8c8 1000 	streq.w	r1, [r8]
 800e598:	5162      	str	r2, [r4, r5]
 800e59a:	604b      	str	r3, [r1, #4]
 800e59c:	4638      	mov	r0, r7
 800e59e:	f104 060b 	add.w	r6, r4, #11
 800e5a2:	f000 f829 	bl	800e5f8 <__malloc_unlock>
 800e5a6:	f026 0607 	bic.w	r6, r6, #7
 800e5aa:	1d23      	adds	r3, r4, #4
 800e5ac:	1af2      	subs	r2, r6, r3
 800e5ae:	d0ae      	beq.n	800e50e <_malloc_r+0x22>
 800e5b0:	1b9b      	subs	r3, r3, r6
 800e5b2:	50a3      	str	r3, [r4, r2]
 800e5b4:	e7ab      	b.n	800e50e <_malloc_r+0x22>
 800e5b6:	42a3      	cmp	r3, r4
 800e5b8:	6862      	ldr	r2, [r4, #4]
 800e5ba:	d1dd      	bne.n	800e578 <_malloc_r+0x8c>
 800e5bc:	f8c8 2000 	str.w	r2, [r8]
 800e5c0:	e7ec      	b.n	800e59c <_malloc_r+0xb0>
 800e5c2:	4623      	mov	r3, r4
 800e5c4:	6864      	ldr	r4, [r4, #4]
 800e5c6:	e7ac      	b.n	800e522 <_malloc_r+0x36>
 800e5c8:	4634      	mov	r4, r6
 800e5ca:	6876      	ldr	r6, [r6, #4]
 800e5cc:	e7b4      	b.n	800e538 <_malloc_r+0x4c>
 800e5ce:	4613      	mov	r3, r2
 800e5d0:	e7cc      	b.n	800e56c <_malloc_r+0x80>
 800e5d2:	230c      	movs	r3, #12
 800e5d4:	603b      	str	r3, [r7, #0]
 800e5d6:	4638      	mov	r0, r7
 800e5d8:	f000 f80e 	bl	800e5f8 <__malloc_unlock>
 800e5dc:	e797      	b.n	800e50e <_malloc_r+0x22>
 800e5de:	6025      	str	r5, [r4, #0]
 800e5e0:	e7dc      	b.n	800e59c <_malloc_r+0xb0>
 800e5e2:	605b      	str	r3, [r3, #4]
 800e5e4:	deff      	udf	#255	; 0xff
 800e5e6:	bf00      	nop
 800e5e8:	20004998 	.word	0x20004998

0800e5ec <__malloc_lock>:
 800e5ec:	4801      	ldr	r0, [pc, #4]	; (800e5f4 <__malloc_lock+0x8>)
 800e5ee:	f000 baaa 	b.w	800eb46 <__retarget_lock_acquire_recursive>
 800e5f2:	bf00      	nop
 800e5f4:	20004ae0 	.word	0x20004ae0

0800e5f8 <__malloc_unlock>:
 800e5f8:	4801      	ldr	r0, [pc, #4]	; (800e600 <__malloc_unlock+0x8>)
 800e5fa:	f000 baa5 	b.w	800eb48 <__retarget_lock_release_recursive>
 800e5fe:	bf00      	nop
 800e600:	20004ae0 	.word	0x20004ae0

0800e604 <std>:
 800e604:	2300      	movs	r3, #0
 800e606:	b510      	push	{r4, lr}
 800e608:	4604      	mov	r4, r0
 800e60a:	e9c0 3300 	strd	r3, r3, [r0]
 800e60e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e612:	6083      	str	r3, [r0, #8]
 800e614:	8181      	strh	r1, [r0, #12]
 800e616:	6643      	str	r3, [r0, #100]	; 0x64
 800e618:	81c2      	strh	r2, [r0, #14]
 800e61a:	6183      	str	r3, [r0, #24]
 800e61c:	4619      	mov	r1, r3
 800e61e:	2208      	movs	r2, #8
 800e620:	305c      	adds	r0, #92	; 0x5c
 800e622:	f000 fa07 	bl	800ea34 <memset>
 800e626:	4b0d      	ldr	r3, [pc, #52]	; (800e65c <std+0x58>)
 800e628:	6263      	str	r3, [r4, #36]	; 0x24
 800e62a:	4b0d      	ldr	r3, [pc, #52]	; (800e660 <std+0x5c>)
 800e62c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e62e:	4b0d      	ldr	r3, [pc, #52]	; (800e664 <std+0x60>)
 800e630:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e632:	4b0d      	ldr	r3, [pc, #52]	; (800e668 <std+0x64>)
 800e634:	6323      	str	r3, [r4, #48]	; 0x30
 800e636:	4b0d      	ldr	r3, [pc, #52]	; (800e66c <std+0x68>)
 800e638:	6224      	str	r4, [r4, #32]
 800e63a:	429c      	cmp	r4, r3
 800e63c:	d006      	beq.n	800e64c <std+0x48>
 800e63e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e642:	4294      	cmp	r4, r2
 800e644:	d002      	beq.n	800e64c <std+0x48>
 800e646:	33d0      	adds	r3, #208	; 0xd0
 800e648:	429c      	cmp	r4, r3
 800e64a:	d105      	bne.n	800e658 <std+0x54>
 800e64c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e654:	f000 ba76 	b.w	800eb44 <__retarget_lock_init_recursive>
 800e658:	bd10      	pop	{r4, pc}
 800e65a:	bf00      	nop
 800e65c:	0800e865 	.word	0x0800e865
 800e660:	0800e887 	.word	0x0800e887
 800e664:	0800e8bf 	.word	0x0800e8bf
 800e668:	0800e8e3 	.word	0x0800e8e3
 800e66c:	200049a0 	.word	0x200049a0

0800e670 <stdio_exit_handler>:
 800e670:	4a02      	ldr	r2, [pc, #8]	; (800e67c <stdio_exit_handler+0xc>)
 800e672:	4903      	ldr	r1, [pc, #12]	; (800e680 <stdio_exit_handler+0x10>)
 800e674:	4803      	ldr	r0, [pc, #12]	; (800e684 <stdio_exit_handler+0x14>)
 800e676:	f000 b869 	b.w	800e74c <_fwalk_sglue>
 800e67a:	bf00      	nop
 800e67c:	200000fc 	.word	0x200000fc
 800e680:	0800f2b5 	.word	0x0800f2b5
 800e684:	20000108 	.word	0x20000108

0800e688 <cleanup_stdio>:
 800e688:	6841      	ldr	r1, [r0, #4]
 800e68a:	4b0c      	ldr	r3, [pc, #48]	; (800e6bc <cleanup_stdio+0x34>)
 800e68c:	4299      	cmp	r1, r3
 800e68e:	b510      	push	{r4, lr}
 800e690:	4604      	mov	r4, r0
 800e692:	d001      	beq.n	800e698 <cleanup_stdio+0x10>
 800e694:	f000 fe0e 	bl	800f2b4 <_fflush_r>
 800e698:	68a1      	ldr	r1, [r4, #8]
 800e69a:	4b09      	ldr	r3, [pc, #36]	; (800e6c0 <cleanup_stdio+0x38>)
 800e69c:	4299      	cmp	r1, r3
 800e69e:	d002      	beq.n	800e6a6 <cleanup_stdio+0x1e>
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	f000 fe07 	bl	800f2b4 <_fflush_r>
 800e6a6:	68e1      	ldr	r1, [r4, #12]
 800e6a8:	4b06      	ldr	r3, [pc, #24]	; (800e6c4 <cleanup_stdio+0x3c>)
 800e6aa:	4299      	cmp	r1, r3
 800e6ac:	d004      	beq.n	800e6b8 <cleanup_stdio+0x30>
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6b4:	f000 bdfe 	b.w	800f2b4 <_fflush_r>
 800e6b8:	bd10      	pop	{r4, pc}
 800e6ba:	bf00      	nop
 800e6bc:	200049a0 	.word	0x200049a0
 800e6c0:	20004a08 	.word	0x20004a08
 800e6c4:	20004a70 	.word	0x20004a70

0800e6c8 <global_stdio_init.part.0>:
 800e6c8:	b510      	push	{r4, lr}
 800e6ca:	4b0b      	ldr	r3, [pc, #44]	; (800e6f8 <global_stdio_init.part.0+0x30>)
 800e6cc:	4c0b      	ldr	r4, [pc, #44]	; (800e6fc <global_stdio_init.part.0+0x34>)
 800e6ce:	4a0c      	ldr	r2, [pc, #48]	; (800e700 <global_stdio_init.part.0+0x38>)
 800e6d0:	601a      	str	r2, [r3, #0]
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	2104      	movs	r1, #4
 800e6d8:	f7ff ff94 	bl	800e604 <std>
 800e6dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	2109      	movs	r1, #9
 800e6e4:	f7ff ff8e 	bl	800e604 <std>
 800e6e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e6ec:	2202      	movs	r2, #2
 800e6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6f2:	2112      	movs	r1, #18
 800e6f4:	f7ff bf86 	b.w	800e604 <std>
 800e6f8:	20004ad8 	.word	0x20004ad8
 800e6fc:	200049a0 	.word	0x200049a0
 800e700:	0800e671 	.word	0x0800e671

0800e704 <__sfp_lock_acquire>:
 800e704:	4801      	ldr	r0, [pc, #4]	; (800e70c <__sfp_lock_acquire+0x8>)
 800e706:	f000 ba1e 	b.w	800eb46 <__retarget_lock_acquire_recursive>
 800e70a:	bf00      	nop
 800e70c:	20004ae1 	.word	0x20004ae1

0800e710 <__sfp_lock_release>:
 800e710:	4801      	ldr	r0, [pc, #4]	; (800e718 <__sfp_lock_release+0x8>)
 800e712:	f000 ba19 	b.w	800eb48 <__retarget_lock_release_recursive>
 800e716:	bf00      	nop
 800e718:	20004ae1 	.word	0x20004ae1

0800e71c <__sinit>:
 800e71c:	b510      	push	{r4, lr}
 800e71e:	4604      	mov	r4, r0
 800e720:	f7ff fff0 	bl	800e704 <__sfp_lock_acquire>
 800e724:	6a23      	ldr	r3, [r4, #32]
 800e726:	b11b      	cbz	r3, 800e730 <__sinit+0x14>
 800e728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e72c:	f7ff bff0 	b.w	800e710 <__sfp_lock_release>
 800e730:	4b04      	ldr	r3, [pc, #16]	; (800e744 <__sinit+0x28>)
 800e732:	6223      	str	r3, [r4, #32]
 800e734:	4b04      	ldr	r3, [pc, #16]	; (800e748 <__sinit+0x2c>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1f5      	bne.n	800e728 <__sinit+0xc>
 800e73c:	f7ff ffc4 	bl	800e6c8 <global_stdio_init.part.0>
 800e740:	e7f2      	b.n	800e728 <__sinit+0xc>
 800e742:	bf00      	nop
 800e744:	0800e689 	.word	0x0800e689
 800e748:	20004ad8 	.word	0x20004ad8

0800e74c <_fwalk_sglue>:
 800e74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e750:	4607      	mov	r7, r0
 800e752:	4688      	mov	r8, r1
 800e754:	4614      	mov	r4, r2
 800e756:	2600      	movs	r6, #0
 800e758:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e75c:	f1b9 0901 	subs.w	r9, r9, #1
 800e760:	d505      	bpl.n	800e76e <_fwalk_sglue+0x22>
 800e762:	6824      	ldr	r4, [r4, #0]
 800e764:	2c00      	cmp	r4, #0
 800e766:	d1f7      	bne.n	800e758 <_fwalk_sglue+0xc>
 800e768:	4630      	mov	r0, r6
 800e76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e76e:	89ab      	ldrh	r3, [r5, #12]
 800e770:	2b01      	cmp	r3, #1
 800e772:	d907      	bls.n	800e784 <_fwalk_sglue+0x38>
 800e774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e778:	3301      	adds	r3, #1
 800e77a:	d003      	beq.n	800e784 <_fwalk_sglue+0x38>
 800e77c:	4629      	mov	r1, r5
 800e77e:	4638      	mov	r0, r7
 800e780:	47c0      	blx	r8
 800e782:	4306      	orrs	r6, r0
 800e784:	3568      	adds	r5, #104	; 0x68
 800e786:	e7e9      	b.n	800e75c <_fwalk_sglue+0x10>

0800e788 <iprintf>:
 800e788:	b40f      	push	{r0, r1, r2, r3}
 800e78a:	b507      	push	{r0, r1, r2, lr}
 800e78c:	4906      	ldr	r1, [pc, #24]	; (800e7a8 <iprintf+0x20>)
 800e78e:	ab04      	add	r3, sp, #16
 800e790:	6808      	ldr	r0, [r1, #0]
 800e792:	f853 2b04 	ldr.w	r2, [r3], #4
 800e796:	6881      	ldr	r1, [r0, #8]
 800e798:	9301      	str	r3, [sp, #4]
 800e79a:	f000 fa5b 	bl	800ec54 <_vfiprintf_r>
 800e79e:	b003      	add	sp, #12
 800e7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7a4:	b004      	add	sp, #16
 800e7a6:	4770      	bx	lr
 800e7a8:	20000154 	.word	0x20000154

0800e7ac <_puts_r>:
 800e7ac:	6a03      	ldr	r3, [r0, #32]
 800e7ae:	b570      	push	{r4, r5, r6, lr}
 800e7b0:	6884      	ldr	r4, [r0, #8]
 800e7b2:	4605      	mov	r5, r0
 800e7b4:	460e      	mov	r6, r1
 800e7b6:	b90b      	cbnz	r3, 800e7bc <_puts_r+0x10>
 800e7b8:	f7ff ffb0 	bl	800e71c <__sinit>
 800e7bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7be:	07db      	lsls	r3, r3, #31
 800e7c0:	d405      	bmi.n	800e7ce <_puts_r+0x22>
 800e7c2:	89a3      	ldrh	r3, [r4, #12]
 800e7c4:	0598      	lsls	r0, r3, #22
 800e7c6:	d402      	bmi.n	800e7ce <_puts_r+0x22>
 800e7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7ca:	f000 f9bc 	bl	800eb46 <__retarget_lock_acquire_recursive>
 800e7ce:	89a3      	ldrh	r3, [r4, #12]
 800e7d0:	0719      	lsls	r1, r3, #28
 800e7d2:	d513      	bpl.n	800e7fc <_puts_r+0x50>
 800e7d4:	6923      	ldr	r3, [r4, #16]
 800e7d6:	b18b      	cbz	r3, 800e7fc <_puts_r+0x50>
 800e7d8:	3e01      	subs	r6, #1
 800e7da:	68a3      	ldr	r3, [r4, #8]
 800e7dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	60a3      	str	r3, [r4, #8]
 800e7e4:	b9e9      	cbnz	r1, 800e822 <_puts_r+0x76>
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	da2e      	bge.n	800e848 <_puts_r+0x9c>
 800e7ea:	4622      	mov	r2, r4
 800e7ec:	210a      	movs	r1, #10
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	f000 f87b 	bl	800e8ea <__swbuf_r>
 800e7f4:	3001      	adds	r0, #1
 800e7f6:	d007      	beq.n	800e808 <_puts_r+0x5c>
 800e7f8:	250a      	movs	r5, #10
 800e7fa:	e007      	b.n	800e80c <_puts_r+0x60>
 800e7fc:	4621      	mov	r1, r4
 800e7fe:	4628      	mov	r0, r5
 800e800:	f000 f8b0 	bl	800e964 <__swsetup_r>
 800e804:	2800      	cmp	r0, #0
 800e806:	d0e7      	beq.n	800e7d8 <_puts_r+0x2c>
 800e808:	f04f 35ff 	mov.w	r5, #4294967295
 800e80c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e80e:	07da      	lsls	r2, r3, #31
 800e810:	d405      	bmi.n	800e81e <_puts_r+0x72>
 800e812:	89a3      	ldrh	r3, [r4, #12]
 800e814:	059b      	lsls	r3, r3, #22
 800e816:	d402      	bmi.n	800e81e <_puts_r+0x72>
 800e818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e81a:	f000 f995 	bl	800eb48 <__retarget_lock_release_recursive>
 800e81e:	4628      	mov	r0, r5
 800e820:	bd70      	pop	{r4, r5, r6, pc}
 800e822:	2b00      	cmp	r3, #0
 800e824:	da04      	bge.n	800e830 <_puts_r+0x84>
 800e826:	69a2      	ldr	r2, [r4, #24]
 800e828:	429a      	cmp	r2, r3
 800e82a:	dc06      	bgt.n	800e83a <_puts_r+0x8e>
 800e82c:	290a      	cmp	r1, #10
 800e82e:	d004      	beq.n	800e83a <_puts_r+0x8e>
 800e830:	6823      	ldr	r3, [r4, #0]
 800e832:	1c5a      	adds	r2, r3, #1
 800e834:	6022      	str	r2, [r4, #0]
 800e836:	7019      	strb	r1, [r3, #0]
 800e838:	e7cf      	b.n	800e7da <_puts_r+0x2e>
 800e83a:	4622      	mov	r2, r4
 800e83c:	4628      	mov	r0, r5
 800e83e:	f000 f854 	bl	800e8ea <__swbuf_r>
 800e842:	3001      	adds	r0, #1
 800e844:	d1c9      	bne.n	800e7da <_puts_r+0x2e>
 800e846:	e7df      	b.n	800e808 <_puts_r+0x5c>
 800e848:	6823      	ldr	r3, [r4, #0]
 800e84a:	250a      	movs	r5, #10
 800e84c:	1c5a      	adds	r2, r3, #1
 800e84e:	6022      	str	r2, [r4, #0]
 800e850:	701d      	strb	r5, [r3, #0]
 800e852:	e7db      	b.n	800e80c <_puts_r+0x60>

0800e854 <puts>:
 800e854:	4b02      	ldr	r3, [pc, #8]	; (800e860 <puts+0xc>)
 800e856:	4601      	mov	r1, r0
 800e858:	6818      	ldr	r0, [r3, #0]
 800e85a:	f7ff bfa7 	b.w	800e7ac <_puts_r>
 800e85e:	bf00      	nop
 800e860:	20000154 	.word	0x20000154

0800e864 <__sread>:
 800e864:	b510      	push	{r4, lr}
 800e866:	460c      	mov	r4, r1
 800e868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e86c:	f000 f90c 	bl	800ea88 <_read_r>
 800e870:	2800      	cmp	r0, #0
 800e872:	bfab      	itete	ge
 800e874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e876:	89a3      	ldrhlt	r3, [r4, #12]
 800e878:	181b      	addge	r3, r3, r0
 800e87a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e87e:	bfac      	ite	ge
 800e880:	6563      	strge	r3, [r4, #84]	; 0x54
 800e882:	81a3      	strhlt	r3, [r4, #12]
 800e884:	bd10      	pop	{r4, pc}

0800e886 <__swrite>:
 800e886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e88a:	461f      	mov	r7, r3
 800e88c:	898b      	ldrh	r3, [r1, #12]
 800e88e:	05db      	lsls	r3, r3, #23
 800e890:	4605      	mov	r5, r0
 800e892:	460c      	mov	r4, r1
 800e894:	4616      	mov	r6, r2
 800e896:	d505      	bpl.n	800e8a4 <__swrite+0x1e>
 800e898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e89c:	2302      	movs	r3, #2
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f000 f8e0 	bl	800ea64 <_lseek_r>
 800e8a4:	89a3      	ldrh	r3, [r4, #12]
 800e8a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e8ae:	81a3      	strh	r3, [r4, #12]
 800e8b0:	4632      	mov	r2, r6
 800e8b2:	463b      	mov	r3, r7
 800e8b4:	4628      	mov	r0, r5
 800e8b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ba:	f000 b907 	b.w	800eacc <_write_r>

0800e8be <__sseek>:
 800e8be:	b510      	push	{r4, lr}
 800e8c0:	460c      	mov	r4, r1
 800e8c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8c6:	f000 f8cd 	bl	800ea64 <_lseek_r>
 800e8ca:	1c43      	adds	r3, r0, #1
 800e8cc:	89a3      	ldrh	r3, [r4, #12]
 800e8ce:	bf15      	itete	ne
 800e8d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e8d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e8d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e8da:	81a3      	strheq	r3, [r4, #12]
 800e8dc:	bf18      	it	ne
 800e8de:	81a3      	strhne	r3, [r4, #12]
 800e8e0:	bd10      	pop	{r4, pc}

0800e8e2 <__sclose>:
 800e8e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8e6:	f000 b8ad 	b.w	800ea44 <_close_r>

0800e8ea <__swbuf_r>:
 800e8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ec:	460e      	mov	r6, r1
 800e8ee:	4614      	mov	r4, r2
 800e8f0:	4605      	mov	r5, r0
 800e8f2:	b118      	cbz	r0, 800e8fc <__swbuf_r+0x12>
 800e8f4:	6a03      	ldr	r3, [r0, #32]
 800e8f6:	b90b      	cbnz	r3, 800e8fc <__swbuf_r+0x12>
 800e8f8:	f7ff ff10 	bl	800e71c <__sinit>
 800e8fc:	69a3      	ldr	r3, [r4, #24]
 800e8fe:	60a3      	str	r3, [r4, #8]
 800e900:	89a3      	ldrh	r3, [r4, #12]
 800e902:	071a      	lsls	r2, r3, #28
 800e904:	d525      	bpl.n	800e952 <__swbuf_r+0x68>
 800e906:	6923      	ldr	r3, [r4, #16]
 800e908:	b31b      	cbz	r3, 800e952 <__swbuf_r+0x68>
 800e90a:	6823      	ldr	r3, [r4, #0]
 800e90c:	6922      	ldr	r2, [r4, #16]
 800e90e:	1a98      	subs	r0, r3, r2
 800e910:	6963      	ldr	r3, [r4, #20]
 800e912:	b2f6      	uxtb	r6, r6
 800e914:	4283      	cmp	r3, r0
 800e916:	4637      	mov	r7, r6
 800e918:	dc04      	bgt.n	800e924 <__swbuf_r+0x3a>
 800e91a:	4621      	mov	r1, r4
 800e91c:	4628      	mov	r0, r5
 800e91e:	f000 fcc9 	bl	800f2b4 <_fflush_r>
 800e922:	b9e0      	cbnz	r0, 800e95e <__swbuf_r+0x74>
 800e924:	68a3      	ldr	r3, [r4, #8]
 800e926:	3b01      	subs	r3, #1
 800e928:	60a3      	str	r3, [r4, #8]
 800e92a:	6823      	ldr	r3, [r4, #0]
 800e92c:	1c5a      	adds	r2, r3, #1
 800e92e:	6022      	str	r2, [r4, #0]
 800e930:	701e      	strb	r6, [r3, #0]
 800e932:	6962      	ldr	r2, [r4, #20]
 800e934:	1c43      	adds	r3, r0, #1
 800e936:	429a      	cmp	r2, r3
 800e938:	d004      	beq.n	800e944 <__swbuf_r+0x5a>
 800e93a:	89a3      	ldrh	r3, [r4, #12]
 800e93c:	07db      	lsls	r3, r3, #31
 800e93e:	d506      	bpl.n	800e94e <__swbuf_r+0x64>
 800e940:	2e0a      	cmp	r6, #10
 800e942:	d104      	bne.n	800e94e <__swbuf_r+0x64>
 800e944:	4621      	mov	r1, r4
 800e946:	4628      	mov	r0, r5
 800e948:	f000 fcb4 	bl	800f2b4 <_fflush_r>
 800e94c:	b938      	cbnz	r0, 800e95e <__swbuf_r+0x74>
 800e94e:	4638      	mov	r0, r7
 800e950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e952:	4621      	mov	r1, r4
 800e954:	4628      	mov	r0, r5
 800e956:	f000 f805 	bl	800e964 <__swsetup_r>
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d0d5      	beq.n	800e90a <__swbuf_r+0x20>
 800e95e:	f04f 37ff 	mov.w	r7, #4294967295
 800e962:	e7f4      	b.n	800e94e <__swbuf_r+0x64>

0800e964 <__swsetup_r>:
 800e964:	b538      	push	{r3, r4, r5, lr}
 800e966:	4b2a      	ldr	r3, [pc, #168]	; (800ea10 <__swsetup_r+0xac>)
 800e968:	4605      	mov	r5, r0
 800e96a:	6818      	ldr	r0, [r3, #0]
 800e96c:	460c      	mov	r4, r1
 800e96e:	b118      	cbz	r0, 800e978 <__swsetup_r+0x14>
 800e970:	6a03      	ldr	r3, [r0, #32]
 800e972:	b90b      	cbnz	r3, 800e978 <__swsetup_r+0x14>
 800e974:	f7ff fed2 	bl	800e71c <__sinit>
 800e978:	89a3      	ldrh	r3, [r4, #12]
 800e97a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e97e:	0718      	lsls	r0, r3, #28
 800e980:	d422      	bmi.n	800e9c8 <__swsetup_r+0x64>
 800e982:	06d9      	lsls	r1, r3, #27
 800e984:	d407      	bmi.n	800e996 <__swsetup_r+0x32>
 800e986:	2309      	movs	r3, #9
 800e988:	602b      	str	r3, [r5, #0]
 800e98a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e98e:	81a3      	strh	r3, [r4, #12]
 800e990:	f04f 30ff 	mov.w	r0, #4294967295
 800e994:	e034      	b.n	800ea00 <__swsetup_r+0x9c>
 800e996:	0758      	lsls	r0, r3, #29
 800e998:	d512      	bpl.n	800e9c0 <__swsetup_r+0x5c>
 800e99a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e99c:	b141      	cbz	r1, 800e9b0 <__swsetup_r+0x4c>
 800e99e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9a2:	4299      	cmp	r1, r3
 800e9a4:	d002      	beq.n	800e9ac <__swsetup_r+0x48>
 800e9a6:	4628      	mov	r0, r5
 800e9a8:	f000 f8de 	bl	800eb68 <_free_r>
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	6363      	str	r3, [r4, #52]	; 0x34
 800e9b0:	89a3      	ldrh	r3, [r4, #12]
 800e9b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e9b6:	81a3      	strh	r3, [r4, #12]
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	6063      	str	r3, [r4, #4]
 800e9bc:	6923      	ldr	r3, [r4, #16]
 800e9be:	6023      	str	r3, [r4, #0]
 800e9c0:	89a3      	ldrh	r3, [r4, #12]
 800e9c2:	f043 0308 	orr.w	r3, r3, #8
 800e9c6:	81a3      	strh	r3, [r4, #12]
 800e9c8:	6923      	ldr	r3, [r4, #16]
 800e9ca:	b94b      	cbnz	r3, 800e9e0 <__swsetup_r+0x7c>
 800e9cc:	89a3      	ldrh	r3, [r4, #12]
 800e9ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e9d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9d6:	d003      	beq.n	800e9e0 <__swsetup_r+0x7c>
 800e9d8:	4621      	mov	r1, r4
 800e9da:	4628      	mov	r0, r5
 800e9dc:	f000 fcb8 	bl	800f350 <__smakebuf_r>
 800e9e0:	89a0      	ldrh	r0, [r4, #12]
 800e9e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e9e6:	f010 0301 	ands.w	r3, r0, #1
 800e9ea:	d00a      	beq.n	800ea02 <__swsetup_r+0x9e>
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	60a3      	str	r3, [r4, #8]
 800e9f0:	6963      	ldr	r3, [r4, #20]
 800e9f2:	425b      	negs	r3, r3
 800e9f4:	61a3      	str	r3, [r4, #24]
 800e9f6:	6923      	ldr	r3, [r4, #16]
 800e9f8:	b943      	cbnz	r3, 800ea0c <__swsetup_r+0xa8>
 800e9fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e9fe:	d1c4      	bne.n	800e98a <__swsetup_r+0x26>
 800ea00:	bd38      	pop	{r3, r4, r5, pc}
 800ea02:	0781      	lsls	r1, r0, #30
 800ea04:	bf58      	it	pl
 800ea06:	6963      	ldrpl	r3, [r4, #20]
 800ea08:	60a3      	str	r3, [r4, #8]
 800ea0a:	e7f4      	b.n	800e9f6 <__swsetup_r+0x92>
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	e7f7      	b.n	800ea00 <__swsetup_r+0x9c>
 800ea10:	20000154 	.word	0x20000154

0800ea14 <memcmp>:
 800ea14:	b510      	push	{r4, lr}
 800ea16:	3901      	subs	r1, #1
 800ea18:	4402      	add	r2, r0
 800ea1a:	4290      	cmp	r0, r2
 800ea1c:	d101      	bne.n	800ea22 <memcmp+0xe>
 800ea1e:	2000      	movs	r0, #0
 800ea20:	e005      	b.n	800ea2e <memcmp+0x1a>
 800ea22:	7803      	ldrb	r3, [r0, #0]
 800ea24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ea28:	42a3      	cmp	r3, r4
 800ea2a:	d001      	beq.n	800ea30 <memcmp+0x1c>
 800ea2c:	1b18      	subs	r0, r3, r4
 800ea2e:	bd10      	pop	{r4, pc}
 800ea30:	3001      	adds	r0, #1
 800ea32:	e7f2      	b.n	800ea1a <memcmp+0x6>

0800ea34 <memset>:
 800ea34:	4402      	add	r2, r0
 800ea36:	4603      	mov	r3, r0
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d100      	bne.n	800ea3e <memset+0xa>
 800ea3c:	4770      	bx	lr
 800ea3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ea42:	e7f9      	b.n	800ea38 <memset+0x4>

0800ea44 <_close_r>:
 800ea44:	b538      	push	{r3, r4, r5, lr}
 800ea46:	4d06      	ldr	r5, [pc, #24]	; (800ea60 <_close_r+0x1c>)
 800ea48:	2300      	movs	r3, #0
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	4608      	mov	r0, r1
 800ea4e:	602b      	str	r3, [r5, #0]
 800ea50:	f7f3 fc63 	bl	800231a <_close>
 800ea54:	1c43      	adds	r3, r0, #1
 800ea56:	d102      	bne.n	800ea5e <_close_r+0x1a>
 800ea58:	682b      	ldr	r3, [r5, #0]
 800ea5a:	b103      	cbz	r3, 800ea5e <_close_r+0x1a>
 800ea5c:	6023      	str	r3, [r4, #0]
 800ea5e:	bd38      	pop	{r3, r4, r5, pc}
 800ea60:	20004adc 	.word	0x20004adc

0800ea64 <_lseek_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4d07      	ldr	r5, [pc, #28]	; (800ea84 <_lseek_r+0x20>)
 800ea68:	4604      	mov	r4, r0
 800ea6a:	4608      	mov	r0, r1
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	2200      	movs	r2, #0
 800ea70:	602a      	str	r2, [r5, #0]
 800ea72:	461a      	mov	r2, r3
 800ea74:	f7f3 fc78 	bl	8002368 <_lseek>
 800ea78:	1c43      	adds	r3, r0, #1
 800ea7a:	d102      	bne.n	800ea82 <_lseek_r+0x1e>
 800ea7c:	682b      	ldr	r3, [r5, #0]
 800ea7e:	b103      	cbz	r3, 800ea82 <_lseek_r+0x1e>
 800ea80:	6023      	str	r3, [r4, #0]
 800ea82:	bd38      	pop	{r3, r4, r5, pc}
 800ea84:	20004adc 	.word	0x20004adc

0800ea88 <_read_r>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	4d07      	ldr	r5, [pc, #28]	; (800eaa8 <_read_r+0x20>)
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	4608      	mov	r0, r1
 800ea90:	4611      	mov	r1, r2
 800ea92:	2200      	movs	r2, #0
 800ea94:	602a      	str	r2, [r5, #0]
 800ea96:	461a      	mov	r2, r3
 800ea98:	f7f3 fc22 	bl	80022e0 <_read>
 800ea9c:	1c43      	adds	r3, r0, #1
 800ea9e:	d102      	bne.n	800eaa6 <_read_r+0x1e>
 800eaa0:	682b      	ldr	r3, [r5, #0]
 800eaa2:	b103      	cbz	r3, 800eaa6 <_read_r+0x1e>
 800eaa4:	6023      	str	r3, [r4, #0]
 800eaa6:	bd38      	pop	{r3, r4, r5, pc}
 800eaa8:	20004adc 	.word	0x20004adc

0800eaac <_sbrk_r>:
 800eaac:	b538      	push	{r3, r4, r5, lr}
 800eaae:	4d06      	ldr	r5, [pc, #24]	; (800eac8 <_sbrk_r+0x1c>)
 800eab0:	2300      	movs	r3, #0
 800eab2:	4604      	mov	r4, r0
 800eab4:	4608      	mov	r0, r1
 800eab6:	602b      	str	r3, [r5, #0]
 800eab8:	f7f3 fc64 	bl	8002384 <_sbrk>
 800eabc:	1c43      	adds	r3, r0, #1
 800eabe:	d102      	bne.n	800eac6 <_sbrk_r+0x1a>
 800eac0:	682b      	ldr	r3, [r5, #0]
 800eac2:	b103      	cbz	r3, 800eac6 <_sbrk_r+0x1a>
 800eac4:	6023      	str	r3, [r4, #0]
 800eac6:	bd38      	pop	{r3, r4, r5, pc}
 800eac8:	20004adc 	.word	0x20004adc

0800eacc <_write_r>:
 800eacc:	b538      	push	{r3, r4, r5, lr}
 800eace:	4d07      	ldr	r5, [pc, #28]	; (800eaec <_write_r+0x20>)
 800ead0:	4604      	mov	r4, r0
 800ead2:	4608      	mov	r0, r1
 800ead4:	4611      	mov	r1, r2
 800ead6:	2200      	movs	r2, #0
 800ead8:	602a      	str	r2, [r5, #0]
 800eada:	461a      	mov	r2, r3
 800eadc:	f7f1 fd62 	bl	80005a4 <_write>
 800eae0:	1c43      	adds	r3, r0, #1
 800eae2:	d102      	bne.n	800eaea <_write_r+0x1e>
 800eae4:	682b      	ldr	r3, [r5, #0]
 800eae6:	b103      	cbz	r3, 800eaea <_write_r+0x1e>
 800eae8:	6023      	str	r3, [r4, #0]
 800eaea:	bd38      	pop	{r3, r4, r5, pc}
 800eaec:	20004adc 	.word	0x20004adc

0800eaf0 <__errno>:
 800eaf0:	4b01      	ldr	r3, [pc, #4]	; (800eaf8 <__errno+0x8>)
 800eaf2:	6818      	ldr	r0, [r3, #0]
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	20000154 	.word	0x20000154

0800eafc <__libc_init_array>:
 800eafc:	b570      	push	{r4, r5, r6, lr}
 800eafe:	4d0d      	ldr	r5, [pc, #52]	; (800eb34 <__libc_init_array+0x38>)
 800eb00:	4c0d      	ldr	r4, [pc, #52]	; (800eb38 <__libc_init_array+0x3c>)
 800eb02:	1b64      	subs	r4, r4, r5
 800eb04:	10a4      	asrs	r4, r4, #2
 800eb06:	2600      	movs	r6, #0
 800eb08:	42a6      	cmp	r6, r4
 800eb0a:	d109      	bne.n	800eb20 <__libc_init_array+0x24>
 800eb0c:	4d0b      	ldr	r5, [pc, #44]	; (800eb3c <__libc_init_array+0x40>)
 800eb0e:	4c0c      	ldr	r4, [pc, #48]	; (800eb40 <__libc_init_array+0x44>)
 800eb10:	f000 fcbe 	bl	800f490 <_init>
 800eb14:	1b64      	subs	r4, r4, r5
 800eb16:	10a4      	asrs	r4, r4, #2
 800eb18:	2600      	movs	r6, #0
 800eb1a:	42a6      	cmp	r6, r4
 800eb1c:	d105      	bne.n	800eb2a <__libc_init_array+0x2e>
 800eb1e:	bd70      	pop	{r4, r5, r6, pc}
 800eb20:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb24:	4798      	blx	r3
 800eb26:	3601      	adds	r6, #1
 800eb28:	e7ee      	b.n	800eb08 <__libc_init_array+0xc>
 800eb2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb2e:	4798      	blx	r3
 800eb30:	3601      	adds	r6, #1
 800eb32:	e7f2      	b.n	800eb1a <__libc_init_array+0x1e>
 800eb34:	0800fee0 	.word	0x0800fee0
 800eb38:	0800fee0 	.word	0x0800fee0
 800eb3c:	0800fee0 	.word	0x0800fee0
 800eb40:	0800fee4 	.word	0x0800fee4

0800eb44 <__retarget_lock_init_recursive>:
 800eb44:	4770      	bx	lr

0800eb46 <__retarget_lock_acquire_recursive>:
 800eb46:	4770      	bx	lr

0800eb48 <__retarget_lock_release_recursive>:
 800eb48:	4770      	bx	lr

0800eb4a <memcpy>:
 800eb4a:	440a      	add	r2, r1
 800eb4c:	4291      	cmp	r1, r2
 800eb4e:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb52:	d100      	bne.n	800eb56 <memcpy+0xc>
 800eb54:	4770      	bx	lr
 800eb56:	b510      	push	{r4, lr}
 800eb58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb60:	4291      	cmp	r1, r2
 800eb62:	d1f9      	bne.n	800eb58 <memcpy+0xe>
 800eb64:	bd10      	pop	{r4, pc}
	...

0800eb68 <_free_r>:
 800eb68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb6a:	2900      	cmp	r1, #0
 800eb6c:	d044      	beq.n	800ebf8 <_free_r+0x90>
 800eb6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb72:	9001      	str	r0, [sp, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f1a1 0404 	sub.w	r4, r1, #4
 800eb7a:	bfb8      	it	lt
 800eb7c:	18e4      	addlt	r4, r4, r3
 800eb7e:	f7ff fd35 	bl	800e5ec <__malloc_lock>
 800eb82:	4a1e      	ldr	r2, [pc, #120]	; (800ebfc <_free_r+0x94>)
 800eb84:	9801      	ldr	r0, [sp, #4]
 800eb86:	6813      	ldr	r3, [r2, #0]
 800eb88:	b933      	cbnz	r3, 800eb98 <_free_r+0x30>
 800eb8a:	6063      	str	r3, [r4, #4]
 800eb8c:	6014      	str	r4, [r2, #0]
 800eb8e:	b003      	add	sp, #12
 800eb90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb94:	f7ff bd30 	b.w	800e5f8 <__malloc_unlock>
 800eb98:	42a3      	cmp	r3, r4
 800eb9a:	d908      	bls.n	800ebae <_free_r+0x46>
 800eb9c:	6825      	ldr	r5, [r4, #0]
 800eb9e:	1961      	adds	r1, r4, r5
 800eba0:	428b      	cmp	r3, r1
 800eba2:	bf01      	itttt	eq
 800eba4:	6819      	ldreq	r1, [r3, #0]
 800eba6:	685b      	ldreq	r3, [r3, #4]
 800eba8:	1949      	addeq	r1, r1, r5
 800ebaa:	6021      	streq	r1, [r4, #0]
 800ebac:	e7ed      	b.n	800eb8a <_free_r+0x22>
 800ebae:	461a      	mov	r2, r3
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	b10b      	cbz	r3, 800ebb8 <_free_r+0x50>
 800ebb4:	42a3      	cmp	r3, r4
 800ebb6:	d9fa      	bls.n	800ebae <_free_r+0x46>
 800ebb8:	6811      	ldr	r1, [r2, #0]
 800ebba:	1855      	adds	r5, r2, r1
 800ebbc:	42a5      	cmp	r5, r4
 800ebbe:	d10b      	bne.n	800ebd8 <_free_r+0x70>
 800ebc0:	6824      	ldr	r4, [r4, #0]
 800ebc2:	4421      	add	r1, r4
 800ebc4:	1854      	adds	r4, r2, r1
 800ebc6:	42a3      	cmp	r3, r4
 800ebc8:	6011      	str	r1, [r2, #0]
 800ebca:	d1e0      	bne.n	800eb8e <_free_r+0x26>
 800ebcc:	681c      	ldr	r4, [r3, #0]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	6053      	str	r3, [r2, #4]
 800ebd2:	440c      	add	r4, r1
 800ebd4:	6014      	str	r4, [r2, #0]
 800ebd6:	e7da      	b.n	800eb8e <_free_r+0x26>
 800ebd8:	d902      	bls.n	800ebe0 <_free_r+0x78>
 800ebda:	230c      	movs	r3, #12
 800ebdc:	6003      	str	r3, [r0, #0]
 800ebde:	e7d6      	b.n	800eb8e <_free_r+0x26>
 800ebe0:	6825      	ldr	r5, [r4, #0]
 800ebe2:	1961      	adds	r1, r4, r5
 800ebe4:	428b      	cmp	r3, r1
 800ebe6:	bf04      	itt	eq
 800ebe8:	6819      	ldreq	r1, [r3, #0]
 800ebea:	685b      	ldreq	r3, [r3, #4]
 800ebec:	6063      	str	r3, [r4, #4]
 800ebee:	bf04      	itt	eq
 800ebf0:	1949      	addeq	r1, r1, r5
 800ebf2:	6021      	streq	r1, [r4, #0]
 800ebf4:	6054      	str	r4, [r2, #4]
 800ebf6:	e7ca      	b.n	800eb8e <_free_r+0x26>
 800ebf8:	b003      	add	sp, #12
 800ebfa:	bd30      	pop	{r4, r5, pc}
 800ebfc:	20004998 	.word	0x20004998

0800ec00 <__sfputc_r>:
 800ec00:	6893      	ldr	r3, [r2, #8]
 800ec02:	3b01      	subs	r3, #1
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	b410      	push	{r4}
 800ec08:	6093      	str	r3, [r2, #8]
 800ec0a:	da08      	bge.n	800ec1e <__sfputc_r+0x1e>
 800ec0c:	6994      	ldr	r4, [r2, #24]
 800ec0e:	42a3      	cmp	r3, r4
 800ec10:	db01      	blt.n	800ec16 <__sfputc_r+0x16>
 800ec12:	290a      	cmp	r1, #10
 800ec14:	d103      	bne.n	800ec1e <__sfputc_r+0x1e>
 800ec16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec1a:	f7ff be66 	b.w	800e8ea <__swbuf_r>
 800ec1e:	6813      	ldr	r3, [r2, #0]
 800ec20:	1c58      	adds	r0, r3, #1
 800ec22:	6010      	str	r0, [r2, #0]
 800ec24:	7019      	strb	r1, [r3, #0]
 800ec26:	4608      	mov	r0, r1
 800ec28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec2c:	4770      	bx	lr

0800ec2e <__sfputs_r>:
 800ec2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec30:	4606      	mov	r6, r0
 800ec32:	460f      	mov	r7, r1
 800ec34:	4614      	mov	r4, r2
 800ec36:	18d5      	adds	r5, r2, r3
 800ec38:	42ac      	cmp	r4, r5
 800ec3a:	d101      	bne.n	800ec40 <__sfputs_r+0x12>
 800ec3c:	2000      	movs	r0, #0
 800ec3e:	e007      	b.n	800ec50 <__sfputs_r+0x22>
 800ec40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec44:	463a      	mov	r2, r7
 800ec46:	4630      	mov	r0, r6
 800ec48:	f7ff ffda 	bl	800ec00 <__sfputc_r>
 800ec4c:	1c43      	adds	r3, r0, #1
 800ec4e:	d1f3      	bne.n	800ec38 <__sfputs_r+0xa>
 800ec50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec54 <_vfiprintf_r>:
 800ec54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec58:	460d      	mov	r5, r1
 800ec5a:	b09d      	sub	sp, #116	; 0x74
 800ec5c:	4614      	mov	r4, r2
 800ec5e:	4698      	mov	r8, r3
 800ec60:	4606      	mov	r6, r0
 800ec62:	b118      	cbz	r0, 800ec6c <_vfiprintf_r+0x18>
 800ec64:	6a03      	ldr	r3, [r0, #32]
 800ec66:	b90b      	cbnz	r3, 800ec6c <_vfiprintf_r+0x18>
 800ec68:	f7ff fd58 	bl	800e71c <__sinit>
 800ec6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec6e:	07d9      	lsls	r1, r3, #31
 800ec70:	d405      	bmi.n	800ec7e <_vfiprintf_r+0x2a>
 800ec72:	89ab      	ldrh	r3, [r5, #12]
 800ec74:	059a      	lsls	r2, r3, #22
 800ec76:	d402      	bmi.n	800ec7e <_vfiprintf_r+0x2a>
 800ec78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec7a:	f7ff ff64 	bl	800eb46 <__retarget_lock_acquire_recursive>
 800ec7e:	89ab      	ldrh	r3, [r5, #12]
 800ec80:	071b      	lsls	r3, r3, #28
 800ec82:	d501      	bpl.n	800ec88 <_vfiprintf_r+0x34>
 800ec84:	692b      	ldr	r3, [r5, #16]
 800ec86:	b99b      	cbnz	r3, 800ecb0 <_vfiprintf_r+0x5c>
 800ec88:	4629      	mov	r1, r5
 800ec8a:	4630      	mov	r0, r6
 800ec8c:	f7ff fe6a 	bl	800e964 <__swsetup_r>
 800ec90:	b170      	cbz	r0, 800ecb0 <_vfiprintf_r+0x5c>
 800ec92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec94:	07dc      	lsls	r4, r3, #31
 800ec96:	d504      	bpl.n	800eca2 <_vfiprintf_r+0x4e>
 800ec98:	f04f 30ff 	mov.w	r0, #4294967295
 800ec9c:	b01d      	add	sp, #116	; 0x74
 800ec9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca2:	89ab      	ldrh	r3, [r5, #12]
 800eca4:	0598      	lsls	r0, r3, #22
 800eca6:	d4f7      	bmi.n	800ec98 <_vfiprintf_r+0x44>
 800eca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecaa:	f7ff ff4d 	bl	800eb48 <__retarget_lock_release_recursive>
 800ecae:	e7f3      	b.n	800ec98 <_vfiprintf_r+0x44>
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	9309      	str	r3, [sp, #36]	; 0x24
 800ecb4:	2320      	movs	r3, #32
 800ecb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ecba:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecbe:	2330      	movs	r3, #48	; 0x30
 800ecc0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ee74 <_vfiprintf_r+0x220>
 800ecc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ecc8:	f04f 0901 	mov.w	r9, #1
 800eccc:	4623      	mov	r3, r4
 800ecce:	469a      	mov	sl, r3
 800ecd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecd4:	b10a      	cbz	r2, 800ecda <_vfiprintf_r+0x86>
 800ecd6:	2a25      	cmp	r2, #37	; 0x25
 800ecd8:	d1f9      	bne.n	800ecce <_vfiprintf_r+0x7a>
 800ecda:	ebba 0b04 	subs.w	fp, sl, r4
 800ecde:	d00b      	beq.n	800ecf8 <_vfiprintf_r+0xa4>
 800ece0:	465b      	mov	r3, fp
 800ece2:	4622      	mov	r2, r4
 800ece4:	4629      	mov	r1, r5
 800ece6:	4630      	mov	r0, r6
 800ece8:	f7ff ffa1 	bl	800ec2e <__sfputs_r>
 800ecec:	3001      	adds	r0, #1
 800ecee:	f000 80a9 	beq.w	800ee44 <_vfiprintf_r+0x1f0>
 800ecf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ecf4:	445a      	add	r2, fp
 800ecf6:	9209      	str	r2, [sp, #36]	; 0x24
 800ecf8:	f89a 3000 	ldrb.w	r3, [sl]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f000 80a1 	beq.w	800ee44 <_vfiprintf_r+0x1f0>
 800ed02:	2300      	movs	r3, #0
 800ed04:	f04f 32ff 	mov.w	r2, #4294967295
 800ed08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed0c:	f10a 0a01 	add.w	sl, sl, #1
 800ed10:	9304      	str	r3, [sp, #16]
 800ed12:	9307      	str	r3, [sp, #28]
 800ed14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed18:	931a      	str	r3, [sp, #104]	; 0x68
 800ed1a:	4654      	mov	r4, sl
 800ed1c:	2205      	movs	r2, #5
 800ed1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed22:	4854      	ldr	r0, [pc, #336]	; (800ee74 <_vfiprintf_r+0x220>)
 800ed24:	f7f1 fa5c 	bl	80001e0 <memchr>
 800ed28:	9a04      	ldr	r2, [sp, #16]
 800ed2a:	b9d8      	cbnz	r0, 800ed64 <_vfiprintf_r+0x110>
 800ed2c:	06d1      	lsls	r1, r2, #27
 800ed2e:	bf44      	itt	mi
 800ed30:	2320      	movmi	r3, #32
 800ed32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed36:	0713      	lsls	r3, r2, #28
 800ed38:	bf44      	itt	mi
 800ed3a:	232b      	movmi	r3, #43	; 0x2b
 800ed3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed40:	f89a 3000 	ldrb.w	r3, [sl]
 800ed44:	2b2a      	cmp	r3, #42	; 0x2a
 800ed46:	d015      	beq.n	800ed74 <_vfiprintf_r+0x120>
 800ed48:	9a07      	ldr	r2, [sp, #28]
 800ed4a:	4654      	mov	r4, sl
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	f04f 0c0a 	mov.w	ip, #10
 800ed52:	4621      	mov	r1, r4
 800ed54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed58:	3b30      	subs	r3, #48	; 0x30
 800ed5a:	2b09      	cmp	r3, #9
 800ed5c:	d94d      	bls.n	800edfa <_vfiprintf_r+0x1a6>
 800ed5e:	b1b0      	cbz	r0, 800ed8e <_vfiprintf_r+0x13a>
 800ed60:	9207      	str	r2, [sp, #28]
 800ed62:	e014      	b.n	800ed8e <_vfiprintf_r+0x13a>
 800ed64:	eba0 0308 	sub.w	r3, r0, r8
 800ed68:	fa09 f303 	lsl.w	r3, r9, r3
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	9304      	str	r3, [sp, #16]
 800ed70:	46a2      	mov	sl, r4
 800ed72:	e7d2      	b.n	800ed1a <_vfiprintf_r+0xc6>
 800ed74:	9b03      	ldr	r3, [sp, #12]
 800ed76:	1d19      	adds	r1, r3, #4
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	9103      	str	r1, [sp, #12]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	bfbb      	ittet	lt
 800ed80:	425b      	neglt	r3, r3
 800ed82:	f042 0202 	orrlt.w	r2, r2, #2
 800ed86:	9307      	strge	r3, [sp, #28]
 800ed88:	9307      	strlt	r3, [sp, #28]
 800ed8a:	bfb8      	it	lt
 800ed8c:	9204      	strlt	r2, [sp, #16]
 800ed8e:	7823      	ldrb	r3, [r4, #0]
 800ed90:	2b2e      	cmp	r3, #46	; 0x2e
 800ed92:	d10c      	bne.n	800edae <_vfiprintf_r+0x15a>
 800ed94:	7863      	ldrb	r3, [r4, #1]
 800ed96:	2b2a      	cmp	r3, #42	; 0x2a
 800ed98:	d134      	bne.n	800ee04 <_vfiprintf_r+0x1b0>
 800ed9a:	9b03      	ldr	r3, [sp, #12]
 800ed9c:	1d1a      	adds	r2, r3, #4
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	9203      	str	r2, [sp, #12]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	bfb8      	it	lt
 800eda6:	f04f 33ff 	movlt.w	r3, #4294967295
 800edaa:	3402      	adds	r4, #2
 800edac:	9305      	str	r3, [sp, #20]
 800edae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ee84 <_vfiprintf_r+0x230>
 800edb2:	7821      	ldrb	r1, [r4, #0]
 800edb4:	2203      	movs	r2, #3
 800edb6:	4650      	mov	r0, sl
 800edb8:	f7f1 fa12 	bl	80001e0 <memchr>
 800edbc:	b138      	cbz	r0, 800edce <_vfiprintf_r+0x17a>
 800edbe:	9b04      	ldr	r3, [sp, #16]
 800edc0:	eba0 000a 	sub.w	r0, r0, sl
 800edc4:	2240      	movs	r2, #64	; 0x40
 800edc6:	4082      	lsls	r2, r0
 800edc8:	4313      	orrs	r3, r2
 800edca:	3401      	adds	r4, #1
 800edcc:	9304      	str	r3, [sp, #16]
 800edce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edd2:	4829      	ldr	r0, [pc, #164]	; (800ee78 <_vfiprintf_r+0x224>)
 800edd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800edd8:	2206      	movs	r2, #6
 800edda:	f7f1 fa01 	bl	80001e0 <memchr>
 800edde:	2800      	cmp	r0, #0
 800ede0:	d03f      	beq.n	800ee62 <_vfiprintf_r+0x20e>
 800ede2:	4b26      	ldr	r3, [pc, #152]	; (800ee7c <_vfiprintf_r+0x228>)
 800ede4:	bb1b      	cbnz	r3, 800ee2e <_vfiprintf_r+0x1da>
 800ede6:	9b03      	ldr	r3, [sp, #12]
 800ede8:	3307      	adds	r3, #7
 800edea:	f023 0307 	bic.w	r3, r3, #7
 800edee:	3308      	adds	r3, #8
 800edf0:	9303      	str	r3, [sp, #12]
 800edf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edf4:	443b      	add	r3, r7
 800edf6:	9309      	str	r3, [sp, #36]	; 0x24
 800edf8:	e768      	b.n	800eccc <_vfiprintf_r+0x78>
 800edfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800edfe:	460c      	mov	r4, r1
 800ee00:	2001      	movs	r0, #1
 800ee02:	e7a6      	b.n	800ed52 <_vfiprintf_r+0xfe>
 800ee04:	2300      	movs	r3, #0
 800ee06:	3401      	adds	r4, #1
 800ee08:	9305      	str	r3, [sp, #20]
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	f04f 0c0a 	mov.w	ip, #10
 800ee10:	4620      	mov	r0, r4
 800ee12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee16:	3a30      	subs	r2, #48	; 0x30
 800ee18:	2a09      	cmp	r2, #9
 800ee1a:	d903      	bls.n	800ee24 <_vfiprintf_r+0x1d0>
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d0c6      	beq.n	800edae <_vfiprintf_r+0x15a>
 800ee20:	9105      	str	r1, [sp, #20]
 800ee22:	e7c4      	b.n	800edae <_vfiprintf_r+0x15a>
 800ee24:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee28:	4604      	mov	r4, r0
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	e7f0      	b.n	800ee10 <_vfiprintf_r+0x1bc>
 800ee2e:	ab03      	add	r3, sp, #12
 800ee30:	9300      	str	r3, [sp, #0]
 800ee32:	462a      	mov	r2, r5
 800ee34:	4b12      	ldr	r3, [pc, #72]	; (800ee80 <_vfiprintf_r+0x22c>)
 800ee36:	a904      	add	r1, sp, #16
 800ee38:	4630      	mov	r0, r6
 800ee3a:	f3af 8000 	nop.w
 800ee3e:	4607      	mov	r7, r0
 800ee40:	1c78      	adds	r0, r7, #1
 800ee42:	d1d6      	bne.n	800edf2 <_vfiprintf_r+0x19e>
 800ee44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee46:	07d9      	lsls	r1, r3, #31
 800ee48:	d405      	bmi.n	800ee56 <_vfiprintf_r+0x202>
 800ee4a:	89ab      	ldrh	r3, [r5, #12]
 800ee4c:	059a      	lsls	r2, r3, #22
 800ee4e:	d402      	bmi.n	800ee56 <_vfiprintf_r+0x202>
 800ee50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee52:	f7ff fe79 	bl	800eb48 <__retarget_lock_release_recursive>
 800ee56:	89ab      	ldrh	r3, [r5, #12]
 800ee58:	065b      	lsls	r3, r3, #25
 800ee5a:	f53f af1d 	bmi.w	800ec98 <_vfiprintf_r+0x44>
 800ee5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee60:	e71c      	b.n	800ec9c <_vfiprintf_r+0x48>
 800ee62:	ab03      	add	r3, sp, #12
 800ee64:	9300      	str	r3, [sp, #0]
 800ee66:	462a      	mov	r2, r5
 800ee68:	4b05      	ldr	r3, [pc, #20]	; (800ee80 <_vfiprintf_r+0x22c>)
 800ee6a:	a904      	add	r1, sp, #16
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	f000 f879 	bl	800ef64 <_printf_i>
 800ee72:	e7e4      	b.n	800ee3e <_vfiprintf_r+0x1ea>
 800ee74:	0800fea4 	.word	0x0800fea4
 800ee78:	0800feae 	.word	0x0800feae
 800ee7c:	00000000 	.word	0x00000000
 800ee80:	0800ec2f 	.word	0x0800ec2f
 800ee84:	0800feaa 	.word	0x0800feaa

0800ee88 <_printf_common>:
 800ee88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee8c:	4616      	mov	r6, r2
 800ee8e:	4699      	mov	r9, r3
 800ee90:	688a      	ldr	r2, [r1, #8]
 800ee92:	690b      	ldr	r3, [r1, #16]
 800ee94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	bfb8      	it	lt
 800ee9c:	4613      	movlt	r3, r2
 800ee9e:	6033      	str	r3, [r6, #0]
 800eea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eea4:	4607      	mov	r7, r0
 800eea6:	460c      	mov	r4, r1
 800eea8:	b10a      	cbz	r2, 800eeae <_printf_common+0x26>
 800eeaa:	3301      	adds	r3, #1
 800eeac:	6033      	str	r3, [r6, #0]
 800eeae:	6823      	ldr	r3, [r4, #0]
 800eeb0:	0699      	lsls	r1, r3, #26
 800eeb2:	bf42      	ittt	mi
 800eeb4:	6833      	ldrmi	r3, [r6, #0]
 800eeb6:	3302      	addmi	r3, #2
 800eeb8:	6033      	strmi	r3, [r6, #0]
 800eeba:	6825      	ldr	r5, [r4, #0]
 800eebc:	f015 0506 	ands.w	r5, r5, #6
 800eec0:	d106      	bne.n	800eed0 <_printf_common+0x48>
 800eec2:	f104 0a19 	add.w	sl, r4, #25
 800eec6:	68e3      	ldr	r3, [r4, #12]
 800eec8:	6832      	ldr	r2, [r6, #0]
 800eeca:	1a9b      	subs	r3, r3, r2
 800eecc:	42ab      	cmp	r3, r5
 800eece:	dc26      	bgt.n	800ef1e <_printf_common+0x96>
 800eed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eed4:	1e13      	subs	r3, r2, #0
 800eed6:	6822      	ldr	r2, [r4, #0]
 800eed8:	bf18      	it	ne
 800eeda:	2301      	movne	r3, #1
 800eedc:	0692      	lsls	r2, r2, #26
 800eede:	d42b      	bmi.n	800ef38 <_printf_common+0xb0>
 800eee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eee4:	4649      	mov	r1, r9
 800eee6:	4638      	mov	r0, r7
 800eee8:	47c0      	blx	r8
 800eeea:	3001      	adds	r0, #1
 800eeec:	d01e      	beq.n	800ef2c <_printf_common+0xa4>
 800eeee:	6823      	ldr	r3, [r4, #0]
 800eef0:	6922      	ldr	r2, [r4, #16]
 800eef2:	f003 0306 	and.w	r3, r3, #6
 800eef6:	2b04      	cmp	r3, #4
 800eef8:	bf02      	ittt	eq
 800eefa:	68e5      	ldreq	r5, [r4, #12]
 800eefc:	6833      	ldreq	r3, [r6, #0]
 800eefe:	1aed      	subeq	r5, r5, r3
 800ef00:	68a3      	ldr	r3, [r4, #8]
 800ef02:	bf0c      	ite	eq
 800ef04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef08:	2500      	movne	r5, #0
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	bfc4      	itt	gt
 800ef0e:	1a9b      	subgt	r3, r3, r2
 800ef10:	18ed      	addgt	r5, r5, r3
 800ef12:	2600      	movs	r6, #0
 800ef14:	341a      	adds	r4, #26
 800ef16:	42b5      	cmp	r5, r6
 800ef18:	d11a      	bne.n	800ef50 <_printf_common+0xc8>
 800ef1a:	2000      	movs	r0, #0
 800ef1c:	e008      	b.n	800ef30 <_printf_common+0xa8>
 800ef1e:	2301      	movs	r3, #1
 800ef20:	4652      	mov	r2, sl
 800ef22:	4649      	mov	r1, r9
 800ef24:	4638      	mov	r0, r7
 800ef26:	47c0      	blx	r8
 800ef28:	3001      	adds	r0, #1
 800ef2a:	d103      	bne.n	800ef34 <_printf_common+0xac>
 800ef2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef34:	3501      	adds	r5, #1
 800ef36:	e7c6      	b.n	800eec6 <_printf_common+0x3e>
 800ef38:	18e1      	adds	r1, r4, r3
 800ef3a:	1c5a      	adds	r2, r3, #1
 800ef3c:	2030      	movs	r0, #48	; 0x30
 800ef3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef42:	4422      	add	r2, r4
 800ef44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef4c:	3302      	adds	r3, #2
 800ef4e:	e7c7      	b.n	800eee0 <_printf_common+0x58>
 800ef50:	2301      	movs	r3, #1
 800ef52:	4622      	mov	r2, r4
 800ef54:	4649      	mov	r1, r9
 800ef56:	4638      	mov	r0, r7
 800ef58:	47c0      	blx	r8
 800ef5a:	3001      	adds	r0, #1
 800ef5c:	d0e6      	beq.n	800ef2c <_printf_common+0xa4>
 800ef5e:	3601      	adds	r6, #1
 800ef60:	e7d9      	b.n	800ef16 <_printf_common+0x8e>
	...

0800ef64 <_printf_i>:
 800ef64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef68:	7e0f      	ldrb	r7, [r1, #24]
 800ef6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ef6c:	2f78      	cmp	r7, #120	; 0x78
 800ef6e:	4691      	mov	r9, r2
 800ef70:	4680      	mov	r8, r0
 800ef72:	460c      	mov	r4, r1
 800ef74:	469a      	mov	sl, r3
 800ef76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ef7a:	d807      	bhi.n	800ef8c <_printf_i+0x28>
 800ef7c:	2f62      	cmp	r7, #98	; 0x62
 800ef7e:	d80a      	bhi.n	800ef96 <_printf_i+0x32>
 800ef80:	2f00      	cmp	r7, #0
 800ef82:	f000 80d4 	beq.w	800f12e <_printf_i+0x1ca>
 800ef86:	2f58      	cmp	r7, #88	; 0x58
 800ef88:	f000 80c0 	beq.w	800f10c <_printf_i+0x1a8>
 800ef8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef94:	e03a      	b.n	800f00c <_printf_i+0xa8>
 800ef96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef9a:	2b15      	cmp	r3, #21
 800ef9c:	d8f6      	bhi.n	800ef8c <_printf_i+0x28>
 800ef9e:	a101      	add	r1, pc, #4	; (adr r1, 800efa4 <_printf_i+0x40>)
 800efa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800efa4:	0800effd 	.word	0x0800effd
 800efa8:	0800f011 	.word	0x0800f011
 800efac:	0800ef8d 	.word	0x0800ef8d
 800efb0:	0800ef8d 	.word	0x0800ef8d
 800efb4:	0800ef8d 	.word	0x0800ef8d
 800efb8:	0800ef8d 	.word	0x0800ef8d
 800efbc:	0800f011 	.word	0x0800f011
 800efc0:	0800ef8d 	.word	0x0800ef8d
 800efc4:	0800ef8d 	.word	0x0800ef8d
 800efc8:	0800ef8d 	.word	0x0800ef8d
 800efcc:	0800ef8d 	.word	0x0800ef8d
 800efd0:	0800f115 	.word	0x0800f115
 800efd4:	0800f03d 	.word	0x0800f03d
 800efd8:	0800f0cf 	.word	0x0800f0cf
 800efdc:	0800ef8d 	.word	0x0800ef8d
 800efe0:	0800ef8d 	.word	0x0800ef8d
 800efe4:	0800f137 	.word	0x0800f137
 800efe8:	0800ef8d 	.word	0x0800ef8d
 800efec:	0800f03d 	.word	0x0800f03d
 800eff0:	0800ef8d 	.word	0x0800ef8d
 800eff4:	0800ef8d 	.word	0x0800ef8d
 800eff8:	0800f0d7 	.word	0x0800f0d7
 800effc:	682b      	ldr	r3, [r5, #0]
 800effe:	1d1a      	adds	r2, r3, #4
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	602a      	str	r2, [r5, #0]
 800f004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f00c:	2301      	movs	r3, #1
 800f00e:	e09f      	b.n	800f150 <_printf_i+0x1ec>
 800f010:	6820      	ldr	r0, [r4, #0]
 800f012:	682b      	ldr	r3, [r5, #0]
 800f014:	0607      	lsls	r7, r0, #24
 800f016:	f103 0104 	add.w	r1, r3, #4
 800f01a:	6029      	str	r1, [r5, #0]
 800f01c:	d501      	bpl.n	800f022 <_printf_i+0xbe>
 800f01e:	681e      	ldr	r6, [r3, #0]
 800f020:	e003      	b.n	800f02a <_printf_i+0xc6>
 800f022:	0646      	lsls	r6, r0, #25
 800f024:	d5fb      	bpl.n	800f01e <_printf_i+0xba>
 800f026:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f02a:	2e00      	cmp	r6, #0
 800f02c:	da03      	bge.n	800f036 <_printf_i+0xd2>
 800f02e:	232d      	movs	r3, #45	; 0x2d
 800f030:	4276      	negs	r6, r6
 800f032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f036:	485a      	ldr	r0, [pc, #360]	; (800f1a0 <_printf_i+0x23c>)
 800f038:	230a      	movs	r3, #10
 800f03a:	e012      	b.n	800f062 <_printf_i+0xfe>
 800f03c:	682b      	ldr	r3, [r5, #0]
 800f03e:	6820      	ldr	r0, [r4, #0]
 800f040:	1d19      	adds	r1, r3, #4
 800f042:	6029      	str	r1, [r5, #0]
 800f044:	0605      	lsls	r5, r0, #24
 800f046:	d501      	bpl.n	800f04c <_printf_i+0xe8>
 800f048:	681e      	ldr	r6, [r3, #0]
 800f04a:	e002      	b.n	800f052 <_printf_i+0xee>
 800f04c:	0641      	lsls	r1, r0, #25
 800f04e:	d5fb      	bpl.n	800f048 <_printf_i+0xe4>
 800f050:	881e      	ldrh	r6, [r3, #0]
 800f052:	4853      	ldr	r0, [pc, #332]	; (800f1a0 <_printf_i+0x23c>)
 800f054:	2f6f      	cmp	r7, #111	; 0x6f
 800f056:	bf0c      	ite	eq
 800f058:	2308      	moveq	r3, #8
 800f05a:	230a      	movne	r3, #10
 800f05c:	2100      	movs	r1, #0
 800f05e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f062:	6865      	ldr	r5, [r4, #4]
 800f064:	60a5      	str	r5, [r4, #8]
 800f066:	2d00      	cmp	r5, #0
 800f068:	bfa2      	ittt	ge
 800f06a:	6821      	ldrge	r1, [r4, #0]
 800f06c:	f021 0104 	bicge.w	r1, r1, #4
 800f070:	6021      	strge	r1, [r4, #0]
 800f072:	b90e      	cbnz	r6, 800f078 <_printf_i+0x114>
 800f074:	2d00      	cmp	r5, #0
 800f076:	d04b      	beq.n	800f110 <_printf_i+0x1ac>
 800f078:	4615      	mov	r5, r2
 800f07a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f07e:	fb03 6711 	mls	r7, r3, r1, r6
 800f082:	5dc7      	ldrb	r7, [r0, r7]
 800f084:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f088:	4637      	mov	r7, r6
 800f08a:	42bb      	cmp	r3, r7
 800f08c:	460e      	mov	r6, r1
 800f08e:	d9f4      	bls.n	800f07a <_printf_i+0x116>
 800f090:	2b08      	cmp	r3, #8
 800f092:	d10b      	bne.n	800f0ac <_printf_i+0x148>
 800f094:	6823      	ldr	r3, [r4, #0]
 800f096:	07de      	lsls	r6, r3, #31
 800f098:	d508      	bpl.n	800f0ac <_printf_i+0x148>
 800f09a:	6923      	ldr	r3, [r4, #16]
 800f09c:	6861      	ldr	r1, [r4, #4]
 800f09e:	4299      	cmp	r1, r3
 800f0a0:	bfde      	ittt	le
 800f0a2:	2330      	movle	r3, #48	; 0x30
 800f0a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f0a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f0ac:	1b52      	subs	r2, r2, r5
 800f0ae:	6122      	str	r2, [r4, #16]
 800f0b0:	f8cd a000 	str.w	sl, [sp]
 800f0b4:	464b      	mov	r3, r9
 800f0b6:	aa03      	add	r2, sp, #12
 800f0b8:	4621      	mov	r1, r4
 800f0ba:	4640      	mov	r0, r8
 800f0bc:	f7ff fee4 	bl	800ee88 <_printf_common>
 800f0c0:	3001      	adds	r0, #1
 800f0c2:	d14a      	bne.n	800f15a <_printf_i+0x1f6>
 800f0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c8:	b004      	add	sp, #16
 800f0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0ce:	6823      	ldr	r3, [r4, #0]
 800f0d0:	f043 0320 	orr.w	r3, r3, #32
 800f0d4:	6023      	str	r3, [r4, #0]
 800f0d6:	4833      	ldr	r0, [pc, #204]	; (800f1a4 <_printf_i+0x240>)
 800f0d8:	2778      	movs	r7, #120	; 0x78
 800f0da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f0de:	6823      	ldr	r3, [r4, #0]
 800f0e0:	6829      	ldr	r1, [r5, #0]
 800f0e2:	061f      	lsls	r7, r3, #24
 800f0e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f0e8:	d402      	bmi.n	800f0f0 <_printf_i+0x18c>
 800f0ea:	065f      	lsls	r7, r3, #25
 800f0ec:	bf48      	it	mi
 800f0ee:	b2b6      	uxthmi	r6, r6
 800f0f0:	07df      	lsls	r7, r3, #31
 800f0f2:	bf48      	it	mi
 800f0f4:	f043 0320 	orrmi.w	r3, r3, #32
 800f0f8:	6029      	str	r1, [r5, #0]
 800f0fa:	bf48      	it	mi
 800f0fc:	6023      	strmi	r3, [r4, #0]
 800f0fe:	b91e      	cbnz	r6, 800f108 <_printf_i+0x1a4>
 800f100:	6823      	ldr	r3, [r4, #0]
 800f102:	f023 0320 	bic.w	r3, r3, #32
 800f106:	6023      	str	r3, [r4, #0]
 800f108:	2310      	movs	r3, #16
 800f10a:	e7a7      	b.n	800f05c <_printf_i+0xf8>
 800f10c:	4824      	ldr	r0, [pc, #144]	; (800f1a0 <_printf_i+0x23c>)
 800f10e:	e7e4      	b.n	800f0da <_printf_i+0x176>
 800f110:	4615      	mov	r5, r2
 800f112:	e7bd      	b.n	800f090 <_printf_i+0x12c>
 800f114:	682b      	ldr	r3, [r5, #0]
 800f116:	6826      	ldr	r6, [r4, #0]
 800f118:	6961      	ldr	r1, [r4, #20]
 800f11a:	1d18      	adds	r0, r3, #4
 800f11c:	6028      	str	r0, [r5, #0]
 800f11e:	0635      	lsls	r5, r6, #24
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	d501      	bpl.n	800f128 <_printf_i+0x1c4>
 800f124:	6019      	str	r1, [r3, #0]
 800f126:	e002      	b.n	800f12e <_printf_i+0x1ca>
 800f128:	0670      	lsls	r0, r6, #25
 800f12a:	d5fb      	bpl.n	800f124 <_printf_i+0x1c0>
 800f12c:	8019      	strh	r1, [r3, #0]
 800f12e:	2300      	movs	r3, #0
 800f130:	6123      	str	r3, [r4, #16]
 800f132:	4615      	mov	r5, r2
 800f134:	e7bc      	b.n	800f0b0 <_printf_i+0x14c>
 800f136:	682b      	ldr	r3, [r5, #0]
 800f138:	1d1a      	adds	r2, r3, #4
 800f13a:	602a      	str	r2, [r5, #0]
 800f13c:	681d      	ldr	r5, [r3, #0]
 800f13e:	6862      	ldr	r2, [r4, #4]
 800f140:	2100      	movs	r1, #0
 800f142:	4628      	mov	r0, r5
 800f144:	f7f1 f84c 	bl	80001e0 <memchr>
 800f148:	b108      	cbz	r0, 800f14e <_printf_i+0x1ea>
 800f14a:	1b40      	subs	r0, r0, r5
 800f14c:	6060      	str	r0, [r4, #4]
 800f14e:	6863      	ldr	r3, [r4, #4]
 800f150:	6123      	str	r3, [r4, #16]
 800f152:	2300      	movs	r3, #0
 800f154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f158:	e7aa      	b.n	800f0b0 <_printf_i+0x14c>
 800f15a:	6923      	ldr	r3, [r4, #16]
 800f15c:	462a      	mov	r2, r5
 800f15e:	4649      	mov	r1, r9
 800f160:	4640      	mov	r0, r8
 800f162:	47d0      	blx	sl
 800f164:	3001      	adds	r0, #1
 800f166:	d0ad      	beq.n	800f0c4 <_printf_i+0x160>
 800f168:	6823      	ldr	r3, [r4, #0]
 800f16a:	079b      	lsls	r3, r3, #30
 800f16c:	d413      	bmi.n	800f196 <_printf_i+0x232>
 800f16e:	68e0      	ldr	r0, [r4, #12]
 800f170:	9b03      	ldr	r3, [sp, #12]
 800f172:	4298      	cmp	r0, r3
 800f174:	bfb8      	it	lt
 800f176:	4618      	movlt	r0, r3
 800f178:	e7a6      	b.n	800f0c8 <_printf_i+0x164>
 800f17a:	2301      	movs	r3, #1
 800f17c:	4632      	mov	r2, r6
 800f17e:	4649      	mov	r1, r9
 800f180:	4640      	mov	r0, r8
 800f182:	47d0      	blx	sl
 800f184:	3001      	adds	r0, #1
 800f186:	d09d      	beq.n	800f0c4 <_printf_i+0x160>
 800f188:	3501      	adds	r5, #1
 800f18a:	68e3      	ldr	r3, [r4, #12]
 800f18c:	9903      	ldr	r1, [sp, #12]
 800f18e:	1a5b      	subs	r3, r3, r1
 800f190:	42ab      	cmp	r3, r5
 800f192:	dcf2      	bgt.n	800f17a <_printf_i+0x216>
 800f194:	e7eb      	b.n	800f16e <_printf_i+0x20a>
 800f196:	2500      	movs	r5, #0
 800f198:	f104 0619 	add.w	r6, r4, #25
 800f19c:	e7f5      	b.n	800f18a <_printf_i+0x226>
 800f19e:	bf00      	nop
 800f1a0:	0800feb5 	.word	0x0800feb5
 800f1a4:	0800fec6 	.word	0x0800fec6

0800f1a8 <__sflush_r>:
 800f1a8:	898a      	ldrh	r2, [r1, #12]
 800f1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ae:	4605      	mov	r5, r0
 800f1b0:	0710      	lsls	r0, r2, #28
 800f1b2:	460c      	mov	r4, r1
 800f1b4:	d458      	bmi.n	800f268 <__sflush_r+0xc0>
 800f1b6:	684b      	ldr	r3, [r1, #4]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	dc05      	bgt.n	800f1c8 <__sflush_r+0x20>
 800f1bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	dc02      	bgt.n	800f1c8 <__sflush_r+0x20>
 800f1c2:	2000      	movs	r0, #0
 800f1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1ca:	2e00      	cmp	r6, #0
 800f1cc:	d0f9      	beq.n	800f1c2 <__sflush_r+0x1a>
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1d4:	682f      	ldr	r7, [r5, #0]
 800f1d6:	6a21      	ldr	r1, [r4, #32]
 800f1d8:	602b      	str	r3, [r5, #0]
 800f1da:	d032      	beq.n	800f242 <__sflush_r+0x9a>
 800f1dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1de:	89a3      	ldrh	r3, [r4, #12]
 800f1e0:	075a      	lsls	r2, r3, #29
 800f1e2:	d505      	bpl.n	800f1f0 <__sflush_r+0x48>
 800f1e4:	6863      	ldr	r3, [r4, #4]
 800f1e6:	1ac0      	subs	r0, r0, r3
 800f1e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1ea:	b10b      	cbz	r3, 800f1f0 <__sflush_r+0x48>
 800f1ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1ee:	1ac0      	subs	r0, r0, r3
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	4602      	mov	r2, r0
 800f1f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1f6:	6a21      	ldr	r1, [r4, #32]
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	47b0      	blx	r6
 800f1fc:	1c43      	adds	r3, r0, #1
 800f1fe:	89a3      	ldrh	r3, [r4, #12]
 800f200:	d106      	bne.n	800f210 <__sflush_r+0x68>
 800f202:	6829      	ldr	r1, [r5, #0]
 800f204:	291d      	cmp	r1, #29
 800f206:	d82b      	bhi.n	800f260 <__sflush_r+0xb8>
 800f208:	4a29      	ldr	r2, [pc, #164]	; (800f2b0 <__sflush_r+0x108>)
 800f20a:	410a      	asrs	r2, r1
 800f20c:	07d6      	lsls	r6, r2, #31
 800f20e:	d427      	bmi.n	800f260 <__sflush_r+0xb8>
 800f210:	2200      	movs	r2, #0
 800f212:	6062      	str	r2, [r4, #4]
 800f214:	04d9      	lsls	r1, r3, #19
 800f216:	6922      	ldr	r2, [r4, #16]
 800f218:	6022      	str	r2, [r4, #0]
 800f21a:	d504      	bpl.n	800f226 <__sflush_r+0x7e>
 800f21c:	1c42      	adds	r2, r0, #1
 800f21e:	d101      	bne.n	800f224 <__sflush_r+0x7c>
 800f220:	682b      	ldr	r3, [r5, #0]
 800f222:	b903      	cbnz	r3, 800f226 <__sflush_r+0x7e>
 800f224:	6560      	str	r0, [r4, #84]	; 0x54
 800f226:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f228:	602f      	str	r7, [r5, #0]
 800f22a:	2900      	cmp	r1, #0
 800f22c:	d0c9      	beq.n	800f1c2 <__sflush_r+0x1a>
 800f22e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f232:	4299      	cmp	r1, r3
 800f234:	d002      	beq.n	800f23c <__sflush_r+0x94>
 800f236:	4628      	mov	r0, r5
 800f238:	f7ff fc96 	bl	800eb68 <_free_r>
 800f23c:	2000      	movs	r0, #0
 800f23e:	6360      	str	r0, [r4, #52]	; 0x34
 800f240:	e7c0      	b.n	800f1c4 <__sflush_r+0x1c>
 800f242:	2301      	movs	r3, #1
 800f244:	4628      	mov	r0, r5
 800f246:	47b0      	blx	r6
 800f248:	1c41      	adds	r1, r0, #1
 800f24a:	d1c8      	bne.n	800f1de <__sflush_r+0x36>
 800f24c:	682b      	ldr	r3, [r5, #0]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d0c5      	beq.n	800f1de <__sflush_r+0x36>
 800f252:	2b1d      	cmp	r3, #29
 800f254:	d001      	beq.n	800f25a <__sflush_r+0xb2>
 800f256:	2b16      	cmp	r3, #22
 800f258:	d101      	bne.n	800f25e <__sflush_r+0xb6>
 800f25a:	602f      	str	r7, [r5, #0]
 800f25c:	e7b1      	b.n	800f1c2 <__sflush_r+0x1a>
 800f25e:	89a3      	ldrh	r3, [r4, #12]
 800f260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f264:	81a3      	strh	r3, [r4, #12]
 800f266:	e7ad      	b.n	800f1c4 <__sflush_r+0x1c>
 800f268:	690f      	ldr	r7, [r1, #16]
 800f26a:	2f00      	cmp	r7, #0
 800f26c:	d0a9      	beq.n	800f1c2 <__sflush_r+0x1a>
 800f26e:	0793      	lsls	r3, r2, #30
 800f270:	680e      	ldr	r6, [r1, #0]
 800f272:	bf08      	it	eq
 800f274:	694b      	ldreq	r3, [r1, #20]
 800f276:	600f      	str	r7, [r1, #0]
 800f278:	bf18      	it	ne
 800f27a:	2300      	movne	r3, #0
 800f27c:	eba6 0807 	sub.w	r8, r6, r7
 800f280:	608b      	str	r3, [r1, #8]
 800f282:	f1b8 0f00 	cmp.w	r8, #0
 800f286:	dd9c      	ble.n	800f1c2 <__sflush_r+0x1a>
 800f288:	6a21      	ldr	r1, [r4, #32]
 800f28a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f28c:	4643      	mov	r3, r8
 800f28e:	463a      	mov	r2, r7
 800f290:	4628      	mov	r0, r5
 800f292:	47b0      	blx	r6
 800f294:	2800      	cmp	r0, #0
 800f296:	dc06      	bgt.n	800f2a6 <__sflush_r+0xfe>
 800f298:	89a3      	ldrh	r3, [r4, #12]
 800f29a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f29e:	81a3      	strh	r3, [r4, #12]
 800f2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2a4:	e78e      	b.n	800f1c4 <__sflush_r+0x1c>
 800f2a6:	4407      	add	r7, r0
 800f2a8:	eba8 0800 	sub.w	r8, r8, r0
 800f2ac:	e7e9      	b.n	800f282 <__sflush_r+0xda>
 800f2ae:	bf00      	nop
 800f2b0:	dfbffffe 	.word	0xdfbffffe

0800f2b4 <_fflush_r>:
 800f2b4:	b538      	push	{r3, r4, r5, lr}
 800f2b6:	690b      	ldr	r3, [r1, #16]
 800f2b8:	4605      	mov	r5, r0
 800f2ba:	460c      	mov	r4, r1
 800f2bc:	b913      	cbnz	r3, 800f2c4 <_fflush_r+0x10>
 800f2be:	2500      	movs	r5, #0
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	bd38      	pop	{r3, r4, r5, pc}
 800f2c4:	b118      	cbz	r0, 800f2ce <_fflush_r+0x1a>
 800f2c6:	6a03      	ldr	r3, [r0, #32]
 800f2c8:	b90b      	cbnz	r3, 800f2ce <_fflush_r+0x1a>
 800f2ca:	f7ff fa27 	bl	800e71c <__sinit>
 800f2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d0f3      	beq.n	800f2be <_fflush_r+0xa>
 800f2d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2d8:	07d0      	lsls	r0, r2, #31
 800f2da:	d404      	bmi.n	800f2e6 <_fflush_r+0x32>
 800f2dc:	0599      	lsls	r1, r3, #22
 800f2de:	d402      	bmi.n	800f2e6 <_fflush_r+0x32>
 800f2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2e2:	f7ff fc30 	bl	800eb46 <__retarget_lock_acquire_recursive>
 800f2e6:	4628      	mov	r0, r5
 800f2e8:	4621      	mov	r1, r4
 800f2ea:	f7ff ff5d 	bl	800f1a8 <__sflush_r>
 800f2ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2f0:	07da      	lsls	r2, r3, #31
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	d4e4      	bmi.n	800f2c0 <_fflush_r+0xc>
 800f2f6:	89a3      	ldrh	r3, [r4, #12]
 800f2f8:	059b      	lsls	r3, r3, #22
 800f2fa:	d4e1      	bmi.n	800f2c0 <_fflush_r+0xc>
 800f2fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2fe:	f7ff fc23 	bl	800eb48 <__retarget_lock_release_recursive>
 800f302:	e7dd      	b.n	800f2c0 <_fflush_r+0xc>

0800f304 <__swhatbuf_r>:
 800f304:	b570      	push	{r4, r5, r6, lr}
 800f306:	460c      	mov	r4, r1
 800f308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f30c:	2900      	cmp	r1, #0
 800f30e:	b096      	sub	sp, #88	; 0x58
 800f310:	4615      	mov	r5, r2
 800f312:	461e      	mov	r6, r3
 800f314:	da0d      	bge.n	800f332 <__swhatbuf_r+0x2e>
 800f316:	89a3      	ldrh	r3, [r4, #12]
 800f318:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f31c:	f04f 0100 	mov.w	r1, #0
 800f320:	bf0c      	ite	eq
 800f322:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f326:	2340      	movne	r3, #64	; 0x40
 800f328:	2000      	movs	r0, #0
 800f32a:	6031      	str	r1, [r6, #0]
 800f32c:	602b      	str	r3, [r5, #0]
 800f32e:	b016      	add	sp, #88	; 0x58
 800f330:	bd70      	pop	{r4, r5, r6, pc}
 800f332:	466a      	mov	r2, sp
 800f334:	f000 f848 	bl	800f3c8 <_fstat_r>
 800f338:	2800      	cmp	r0, #0
 800f33a:	dbec      	blt.n	800f316 <__swhatbuf_r+0x12>
 800f33c:	9901      	ldr	r1, [sp, #4]
 800f33e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f342:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f346:	4259      	negs	r1, r3
 800f348:	4159      	adcs	r1, r3
 800f34a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f34e:	e7eb      	b.n	800f328 <__swhatbuf_r+0x24>

0800f350 <__smakebuf_r>:
 800f350:	898b      	ldrh	r3, [r1, #12]
 800f352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f354:	079d      	lsls	r5, r3, #30
 800f356:	4606      	mov	r6, r0
 800f358:	460c      	mov	r4, r1
 800f35a:	d507      	bpl.n	800f36c <__smakebuf_r+0x1c>
 800f35c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f360:	6023      	str	r3, [r4, #0]
 800f362:	6123      	str	r3, [r4, #16]
 800f364:	2301      	movs	r3, #1
 800f366:	6163      	str	r3, [r4, #20]
 800f368:	b002      	add	sp, #8
 800f36a:	bd70      	pop	{r4, r5, r6, pc}
 800f36c:	ab01      	add	r3, sp, #4
 800f36e:	466a      	mov	r2, sp
 800f370:	f7ff ffc8 	bl	800f304 <__swhatbuf_r>
 800f374:	9900      	ldr	r1, [sp, #0]
 800f376:	4605      	mov	r5, r0
 800f378:	4630      	mov	r0, r6
 800f37a:	f7ff f8b7 	bl	800e4ec <_malloc_r>
 800f37e:	b948      	cbnz	r0, 800f394 <__smakebuf_r+0x44>
 800f380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f384:	059a      	lsls	r2, r3, #22
 800f386:	d4ef      	bmi.n	800f368 <__smakebuf_r+0x18>
 800f388:	f023 0303 	bic.w	r3, r3, #3
 800f38c:	f043 0302 	orr.w	r3, r3, #2
 800f390:	81a3      	strh	r3, [r4, #12]
 800f392:	e7e3      	b.n	800f35c <__smakebuf_r+0xc>
 800f394:	89a3      	ldrh	r3, [r4, #12]
 800f396:	6020      	str	r0, [r4, #0]
 800f398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f39c:	81a3      	strh	r3, [r4, #12]
 800f39e:	9b00      	ldr	r3, [sp, #0]
 800f3a0:	6163      	str	r3, [r4, #20]
 800f3a2:	9b01      	ldr	r3, [sp, #4]
 800f3a4:	6120      	str	r0, [r4, #16]
 800f3a6:	b15b      	cbz	r3, 800f3c0 <__smakebuf_r+0x70>
 800f3a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	f000 f81d 	bl	800f3ec <_isatty_r>
 800f3b2:	b128      	cbz	r0, 800f3c0 <__smakebuf_r+0x70>
 800f3b4:	89a3      	ldrh	r3, [r4, #12]
 800f3b6:	f023 0303 	bic.w	r3, r3, #3
 800f3ba:	f043 0301 	orr.w	r3, r3, #1
 800f3be:	81a3      	strh	r3, [r4, #12]
 800f3c0:	89a3      	ldrh	r3, [r4, #12]
 800f3c2:	431d      	orrs	r5, r3
 800f3c4:	81a5      	strh	r5, [r4, #12]
 800f3c6:	e7cf      	b.n	800f368 <__smakebuf_r+0x18>

0800f3c8 <_fstat_r>:
 800f3c8:	b538      	push	{r3, r4, r5, lr}
 800f3ca:	4d07      	ldr	r5, [pc, #28]	; (800f3e8 <_fstat_r+0x20>)
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	4608      	mov	r0, r1
 800f3d2:	4611      	mov	r1, r2
 800f3d4:	602b      	str	r3, [r5, #0]
 800f3d6:	f7f2 ffac 	bl	8002332 <_fstat>
 800f3da:	1c43      	adds	r3, r0, #1
 800f3dc:	d102      	bne.n	800f3e4 <_fstat_r+0x1c>
 800f3de:	682b      	ldr	r3, [r5, #0]
 800f3e0:	b103      	cbz	r3, 800f3e4 <_fstat_r+0x1c>
 800f3e2:	6023      	str	r3, [r4, #0]
 800f3e4:	bd38      	pop	{r3, r4, r5, pc}
 800f3e6:	bf00      	nop
 800f3e8:	20004adc 	.word	0x20004adc

0800f3ec <_isatty_r>:
 800f3ec:	b538      	push	{r3, r4, r5, lr}
 800f3ee:	4d06      	ldr	r5, [pc, #24]	; (800f408 <_isatty_r+0x1c>)
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	4604      	mov	r4, r0
 800f3f4:	4608      	mov	r0, r1
 800f3f6:	602b      	str	r3, [r5, #0]
 800f3f8:	f7f2 ffab 	bl	8002352 <_isatty>
 800f3fc:	1c43      	adds	r3, r0, #1
 800f3fe:	d102      	bne.n	800f406 <_isatty_r+0x1a>
 800f400:	682b      	ldr	r3, [r5, #0]
 800f402:	b103      	cbz	r3, 800f406 <_isatty_r+0x1a>
 800f404:	6023      	str	r3, [r4, #0]
 800f406:	bd38      	pop	{r3, r4, r5, pc}
 800f408:	20004adc 	.word	0x20004adc

0800f40c <ceilf>:
 800f40c:	ee10 3a10 	vmov	r3, s0
 800f410:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f414:	3a7f      	subs	r2, #127	; 0x7f
 800f416:	2a16      	cmp	r2, #22
 800f418:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f41c:	dc2a      	bgt.n	800f474 <ceilf+0x68>
 800f41e:	2a00      	cmp	r2, #0
 800f420:	da11      	bge.n	800f446 <ceilf+0x3a>
 800f422:	eddf 7a19 	vldr	s15, [pc, #100]	; 800f488 <ceilf+0x7c>
 800f426:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f42a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f432:	dd05      	ble.n	800f440 <ceilf+0x34>
 800f434:	2b00      	cmp	r3, #0
 800f436:	db23      	blt.n	800f480 <ceilf+0x74>
 800f438:	2900      	cmp	r1, #0
 800f43a:	bf18      	it	ne
 800f43c:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800f440:	ee00 3a10 	vmov	s0, r3
 800f444:	4770      	bx	lr
 800f446:	4911      	ldr	r1, [pc, #68]	; (800f48c <ceilf+0x80>)
 800f448:	4111      	asrs	r1, r2
 800f44a:	420b      	tst	r3, r1
 800f44c:	d0fa      	beq.n	800f444 <ceilf+0x38>
 800f44e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800f488 <ceilf+0x7c>
 800f452:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f456:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f45e:	ddef      	ble.n	800f440 <ceilf+0x34>
 800f460:	2b00      	cmp	r3, #0
 800f462:	bfc2      	ittt	gt
 800f464:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800f468:	fa40 f202 	asrgt.w	r2, r0, r2
 800f46c:	189b      	addgt	r3, r3, r2
 800f46e:	ea23 0301 	bic.w	r3, r3, r1
 800f472:	e7e5      	b.n	800f440 <ceilf+0x34>
 800f474:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f478:	d3e4      	bcc.n	800f444 <ceilf+0x38>
 800f47a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f47e:	4770      	bx	lr
 800f480:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f484:	e7dc      	b.n	800f440 <ceilf+0x34>
 800f486:	bf00      	nop
 800f488:	7149f2ca 	.word	0x7149f2ca
 800f48c:	007fffff 	.word	0x007fffff

0800f490 <_init>:
 800f490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f492:	bf00      	nop
 800f494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f496:	bc08      	pop	{r3}
 800f498:	469e      	mov	lr, r3
 800f49a:	4770      	bx	lr

0800f49c <_fini>:
 800f49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f49e:	bf00      	nop
 800f4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4a2:	bc08      	pop	{r3}
 800f4a4:	469e      	mov	lr, r3
 800f4a6:	4770      	bx	lr
