
SpectralSubtraction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013380  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014720  08013520  08013520  00023520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027c40  08027c40  00040160  2**0
                  CONTENTS
  4 .ARM          00000008  08027c40  08027c40  00037c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027c48  08027c48  00040160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027c48  08027c48  00037c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027c4c  08027c4c  00037c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08027c50  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d9a0  20000160  08027db0  00040160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000db00  08027db0  0004db00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040190  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef1a  00000000  00000000  000401d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005398  00000000  00000000  0005f0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001850  00000000  00000000  00064488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000122b  00000000  00000000  00065cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e5a3  00000000  00000000  00066f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002868a  00000000  00000000  000854a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093ca9  00000000  00000000  000adb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a5c  00000000  00000000  001417dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00148238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013508 	.word	0x08013508

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	08013508 	.word	0x08013508

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b970 	b.w	8000db4 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	460d      	mov	r5, r1
 8000af4:	4604      	mov	r4, r0
 8000af6:	460f      	mov	r7, r1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d14a      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4694      	mov	ip, r2
 8000b00:	d965      	bls.n	8000bce <__udivmoddi4+0xe2>
 8000b02:	fab2 f382 	clz	r3, r2
 8000b06:	b143      	cbz	r3, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b0c:	f1c3 0220 	rsb	r2, r3, #32
 8000b10:	409f      	lsls	r7, r3
 8000b12:	fa20 f202 	lsr.w	r2, r0, r2
 8000b16:	4317      	orrs	r7, r2
 8000b18:	409c      	lsls	r4, r3
 8000b1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b1e:	fa1f f58c 	uxth.w	r5, ip
 8000b22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b26:	0c22      	lsrs	r2, r4, #16
 8000b28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b30:	fb01 f005 	mul.w	r0, r1, r5
 8000b34:	4290      	cmp	r0, r2
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x62>
 8000b38:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b40:	f080 811c 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b44:	4290      	cmp	r0, r2
 8000b46:	f240 8119 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b4a:	3902      	subs	r1, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a12      	subs	r2, r2, r0
 8000b50:	b2a4      	uxth	r4, r4
 8000b52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b5e:	fb00 f505 	mul.w	r5, r0, r5
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	d90a      	bls.n	8000b7c <__udivmoddi4+0x90>
 8000b66:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b6e:	f080 8107 	bcs.w	8000d80 <__udivmoddi4+0x294>
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	f240 8104 	bls.w	8000d80 <__udivmoddi4+0x294>
 8000b78:	4464      	add	r4, ip
 8000b7a:	3802      	subs	r0, #2
 8000b7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b80:	1b64      	subs	r4, r4, r5
 8000b82:	2100      	movs	r1, #0
 8000b84:	b11e      	cbz	r6, 8000b8e <__udivmoddi4+0xa2>
 8000b86:	40dc      	lsrs	r4, r3
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0xbc>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80ed 	beq.w	8000d76 <__udivmoddi4+0x28a>
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba8:	fab3 f183 	clz	r1, r3
 8000bac:	2900      	cmp	r1, #0
 8000bae:	d149      	bne.n	8000c44 <__udivmoddi4+0x158>
 8000bb0:	42ab      	cmp	r3, r5
 8000bb2:	d302      	bcc.n	8000bba <__udivmoddi4+0xce>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	f200 80f8 	bhi.w	8000daa <__udivmoddi4+0x2be>
 8000bba:	1a84      	subs	r4, r0, r2
 8000bbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d0e2      	beq.n	8000b8e <__udivmoddi4+0xa2>
 8000bc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bcc:	e7df      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000bce:	b902      	cbnz	r2, 8000bd2 <__udivmoddi4+0xe6>
 8000bd0:	deff      	udf	#255	; 0xff
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 8090 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bdc:	1a8a      	subs	r2, r1, r2
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f fe8c 	uxth.w	lr, ip
 8000be6:	2101      	movs	r1, #1
 8000be8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bec:	fb07 2015 	mls	r0, r7, r5, r2
 8000bf0:	0c22      	lsrs	r2, r4, #16
 8000bf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bf6:	fb0e f005 	mul.w	r0, lr, r5
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000bfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000c02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	f200 80cb 	bhi.w	8000da4 <__udivmoddi4+0x2b8>
 8000c0e:	4645      	mov	r5, r8
 8000c10:	1a12      	subs	r2, r2, r0
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c18:	fb07 2210 	mls	r2, r7, r0, r2
 8000c1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c20:	fb0e fe00 	mul.w	lr, lr, r0
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x14e>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x14c>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f200 80bb 	bhi.w	8000dae <__udivmoddi4+0x2c2>
 8000c38:	4610      	mov	r0, r2
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c42:	e79f      	b.n	8000b84 <__udivmoddi4+0x98>
 8000c44:	f1c1 0720 	rsb	r7, r1, #32
 8000c48:	408b      	lsls	r3, r1
 8000c4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c52:	fa05 f401 	lsl.w	r4, r5, r1
 8000c56:	fa20 f307 	lsr.w	r3, r0, r7
 8000c5a:	40fd      	lsrs	r5, r7
 8000c5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c60:	4323      	orrs	r3, r4
 8000c62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c6e:	0c1c      	lsrs	r4, r3, #16
 8000c70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c74:	fb08 f50e 	mul.w	r5, r8, lr
 8000c78:	42a5      	cmp	r5, r4
 8000c7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c8c:	f080 8088 	bcs.w	8000da0 <__udivmoddi4+0x2b4>
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	f240 8085 	bls.w	8000da0 <__udivmoddi4+0x2b4>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	4464      	add	r4, ip
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	b29d      	uxth	r5, r3
 8000ca0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ca4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ca8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cbc:	d26c      	bcs.n	8000d98 <__udivmoddi4+0x2ac>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	d96a      	bls.n	8000d98 <__udivmoddi4+0x2ac>
 8000cc2:	3b02      	subs	r3, #2
 8000cc4:	4464      	add	r4, ip
 8000cc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cca:	fba3 9502 	umull	r9, r5, r3, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	42ac      	cmp	r4, r5
 8000cd4:	46c8      	mov	r8, r9
 8000cd6:	46ae      	mov	lr, r5
 8000cd8:	d356      	bcc.n	8000d88 <__udivmoddi4+0x29c>
 8000cda:	d053      	beq.n	8000d84 <__udivmoddi4+0x298>
 8000cdc:	b156      	cbz	r6, 8000cf4 <__udivmoddi4+0x208>
 8000cde:	ebb0 0208 	subs.w	r2, r0, r8
 8000ce2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ce6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cea:	40ca      	lsrs	r2, r1
 8000cec:	40cc      	lsrs	r4, r1
 8000cee:	4317      	orrs	r7, r2
 8000cf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfc:	f1c3 0120 	rsb	r1, r3, #32
 8000d00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d04:	fa20 f201 	lsr.w	r2, r0, r1
 8000d08:	fa25 f101 	lsr.w	r1, r5, r1
 8000d0c:	409d      	lsls	r5, r3
 8000d0e:	432a      	orrs	r2, r5
 8000d10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d14:	fa1f fe8c 	uxth.w	lr, ip
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d20:	0c11      	lsrs	r1, r2, #16
 8000d22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d26:	fb00 f50e 	mul.w	r5, r0, lr
 8000d2a:	428d      	cmp	r5, r1
 8000d2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x258>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d3a:	d22f      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d3c:	428d      	cmp	r5, r1
 8000d3e:	d92d      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4461      	add	r1, ip
 8000d44:	1b49      	subs	r1, r1, r5
 8000d46:	b292      	uxth	r2, r2
 8000d48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d54:	fb05 f10e 	mul.w	r1, r5, lr
 8000d58:	4291      	cmp	r1, r2
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x282>
 8000d5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d64:	d216      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d66:	4291      	cmp	r1, r2
 8000d68:	d914      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d6a:	3d02      	subs	r5, #2
 8000d6c:	4462      	add	r2, ip
 8000d6e:	1a52      	subs	r2, r2, r1
 8000d70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d74:	e738      	b.n	8000be8 <__udivmoddi4+0xfc>
 8000d76:	4631      	mov	r1, r6
 8000d78:	4630      	mov	r0, r6
 8000d7a:	e708      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000d7c:	4639      	mov	r1, r7
 8000d7e:	e6e6      	b.n	8000b4e <__udivmoddi4+0x62>
 8000d80:	4610      	mov	r0, r2
 8000d82:	e6fb      	b.n	8000b7c <__udivmoddi4+0x90>
 8000d84:	4548      	cmp	r0, r9
 8000d86:	d2a9      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d88:	ebb9 0802 	subs.w	r8, r9, r2
 8000d8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d90:	3b01      	subs	r3, #1
 8000d92:	e7a3      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d94:	4645      	mov	r5, r8
 8000d96:	e7ea      	b.n	8000d6e <__udivmoddi4+0x282>
 8000d98:	462b      	mov	r3, r5
 8000d9a:	e794      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	e7d1      	b.n	8000d44 <__udivmoddi4+0x258>
 8000da0:	46d0      	mov	r8, sl
 8000da2:	e77b      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da4:	3d02      	subs	r5, #2
 8000da6:	4462      	add	r2, ip
 8000da8:	e732      	b.n	8000c10 <__udivmoddi4+0x124>
 8000daa:	4608      	mov	r0, r1
 8000dac:	e70a      	b.n	8000bc4 <__udivmoddi4+0xd8>
 8000dae:	4464      	add	r4, ip
 8000db0:	3802      	subs	r0, #2
 8000db2:	e742      	b.n	8000c3a <__udivmoddi4+0x14e>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <HAL_GPIO_EXTI_Callback>:
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_0) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d102      	bne.n	8000dce <HAL_GPIO_EXTI_Callback+0x16>
    {
    	FlagKey = true;
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x24>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	701a      	strb	r2, [r3, #0]
    }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000180 	.word	0x20000180

08000de0 <_write>:
static void MX_USART1_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */


int _write(int fd, unsigned char *buf, int len) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d002      	beq.n	8000df8 <_write+0x18>
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d107      	bne.n	8000e08 <_write+0x28>
    HAL_UART_Transmit(&huart1, buf, len, 999);  // Print to the UART
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	4804      	ldr	r0, [pc, #16]	; (8000e14 <_write+0x34>)
 8000e04:	f009 f83c 	bl	8009e80 <HAL_UART_Transmit>
  }
  return len;
 8000e08:	687b      	ldr	r3, [r7, #4]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000b334 	.word	0x2000b334

08000e18 <MagniNormal>:

void MagniNormal(float32_t *buf, uint32_t numSample){
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	float32_t norMagn = 2.0f / numSample;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	ee07 3a90 	vmov	s15, r3
 8000e28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e2c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e34:	edc7 7a02 	vstr	s15, [r7, #8]
	int i=0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
	*buf = *buf / numSample;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	edd3 6a00 	vldr	s13, [r3]
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	ee07 3a90 	vmov	s15, r3
 8000e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	edc3 7a00 	vstr	s15, [r3]
	buf++;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	607b      	str	r3, [r7, #4]
	i++;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	60fb      	str	r3, [r7, #12]
	while(i<numSample){
 8000e62:	e00f      	b.n	8000e84 <MagniNormal+0x6c>
		*buf = *buf * norMagn;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	ed93 7a00 	vldr	s14, [r3]
 8000e6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	edc3 7a00 	vstr	s15, [r3]
		buf++;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	607b      	str	r3, [r7, #4]
		i++;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
	while(i<numSample){
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8eb      	bhi.n	8000e64 <MagniNormal+0x4c>
	}
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	0000      	movs	r0, r0
 8000e9c:	0000      	movs	r0, r0
	...

08000ea0 <generateHammingWindow>:

bool generateHammingWindow(float32_t *window_array, int window_size) {
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
    if (window_size <= 0)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	dc01      	bgt.n	8000eb4 <generateHammingWindow+0x14>
        return false;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e03c      	b.n	8000f2e <generateHammingWindow+0x8e>

    for (int n = 0; n < window_size; n++) {
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	e034      	b.n	8000f24 <generateHammingWindow+0x84>
        window_array[n] = 0.54f - 0.46f * arm_cos_f32((2.0f * M_PI * n) / (window_size - 1));
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f7ff fb32 	bl	8000524 <__aeabi_i2d>
 8000ec0:	a31f      	add	r3, pc, #124	; (adr r3, 8000f40 <generateHammingWindow+0xa0>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f7ff fb97 	bl	80005f8 <__aeabi_dmul>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4614      	mov	r4, r2
 8000ed0:	461d      	mov	r5, r3
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fb24 	bl	8000524 <__aeabi_i2d>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	4629      	mov	r1, r5
 8000ee4:	f7ff fcb2 	bl	800084c <__aeabi_ddiv>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	4610      	mov	r0, r2
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f7ff fd94 	bl	8000a1c <__aeabi_d2f>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	ee00 3a10 	vmov	s0, r3
 8000efa:	f002 fb59 	bl	80035b0 <arm_cos_f32>
 8000efe:	eef0 7a40 	vmov.f32	s15, s0
 8000f02:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000f38 <generateHammingWindow+0x98>
 8000f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000f3c <generateHammingWindow+0x9c>
 8000f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f1a:	edc3 7a00 	vstr	s15, [r3]
    for (int n = 0; n < window_size; n++) {
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3301      	adds	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbc6      	blt.n	8000eba <generateHammingWindow+0x1a>
    }
    return true;
 8000f2c:	2301      	movs	r3, #1
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bdb0      	pop	{r4, r5, r7, pc}
 8000f36:	bf00      	nop
 8000f38:	3eeb851f 	.word	0x3eeb851f
 8000f3c:	3f0a3d71 	.word	0x3f0a3d71
 8000f40:	54442d18 	.word	0x54442d18
 8000f44:	401921fb 	.word	0x401921fb

08000f48 <CopyFloatArray>:

void CopyFloatArray(float32_t *str1_in, float32_t *str2_out, uint16_t size){
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	4613      	mov	r3, r2
 8000f54:	80fb      	strh	r3, [r7, #6]
	for(int i = 0 ; i<size ; i++){
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e00c      	b.n	8000f76 <CopyFloatArray+0x2e>
		*str2_out = *str1_in;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	601a      	str	r2, [r3, #0]
		str2_out++;
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	3304      	adds	r3, #4
 8000f68:	60bb      	str	r3, [r7, #8]
		str1_in++;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	60fb      	str	r3, [r7, #12]
	for(int i = 0 ; i<size ; i++){
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3301      	adds	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	dbee      	blt.n	8000f5c <CopyFloatArray+0x14>
	}
}
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	371c      	adds	r7, #28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <ResetArray>:
void ResetArray(float32_t *buff, uint16_t size){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
	for(int i = 0 ; i<size ; i++){
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e009      	b.n	8000fb2 <ResetArray+0x26>
		*buff = 0;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
		buff++;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	607b      	str	r3, [r7, #4]
	for(int i = 0 ; i<size ; i++){
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dbf1      	blt.n	8000f9e <ResetArray+0x12>
	}
}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <WindowApply>:
void WindowApply(float32_t *buf, float32_t *Win, uint16_t size){
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	80fb      	strh	r3, [r7, #6]
  for (uint32_t i = 0; i < size; i++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	e013      	b.n	8001004 <WindowApply+0x3c>
	  (*buf) = (*buf) * (*Win);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	ed93 7a00 	vldr	s14, [r3]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	edd3 7a00 	vldr	s15, [r3]
 8000fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	edc3 7a00 	vstr	s15, [r3]
	  buf++;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	60fb      	str	r3, [r7, #12]
	  Win++;
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	60bb      	str	r3, [r7, #8]
  for (uint32_t i = 0; i < size; i++) {
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	d3e7      	bcc.n	8000fdc <WindowApply+0x14>
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <SumArray>:
void SumArray(float32_t *sum, float32_t *add, uint16_t size){
 800101a:	b480      	push	{r7}
 800101c:	b087      	sub	sp, #28
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	4613      	mov	r3, r2
 8001026:	80fb      	strh	r3, [r7, #6]
  for (uint32_t i = 0; i < size; i++) {
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e013      	b.n	8001056 <SumArray+0x3c>
	  (*sum) = (*sum) + (*add);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	ed93 7a00 	vldr	s14, [r3]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	edc3 7a00 	vstr	s15, [r3]
	  sum++;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3304      	adds	r3, #4
 8001048:	60fb      	str	r3, [r7, #12]
	  add++;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3304      	adds	r3, #4
 800104e:	60bb      	str	r3, [r7, #8]
  for (uint32_t i = 0; i < size; i++) {
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	429a      	cmp	r2, r3
 800105c:	d3e7      	bcc.n	800102e <SumArray+0x14>
  }
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <SimpleCalArray>:
void SimpleCalArray(uint8_t oper, float32_t *res, float32_t *a, float32_t *b, uint16_t size){
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0; i < size; i++) {
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e04a      	b.n	8001118 <SimpleCalArray+0xac>
	  switch (oper) {
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	3b01      	subs	r3, #1
 8001086:	2b03      	cmp	r3, #3
 8001088:	d84b      	bhi.n	8001122 <SimpleCalArray+0xb6>
 800108a:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <SimpleCalArray+0x24>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080010a1 	.word	0x080010a1
 8001094:	080010b9 	.word	0x080010b9
 8001098:	080010d1 	.word	0x080010d1
 800109c:	080010e9 	.word	0x080010e9
	      case 1:
	    	  (*res) = (*a) + (*b);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	ed93 7a00 	vldr	s14, [r3]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	edc3 7a00 	vstr	s15, [r3]
	          break;
 80010b6:	e023      	b.n	8001100 <SimpleCalArray+0x94>
	      case 2:
	    	  (*res) = (*a) / (*b);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	edd3 6a00 	vldr	s13, [r3]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	ed93 7a00 	vldr	s14, [r3]
 80010c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	edc3 7a00 	vstr	s15, [r3]
	          break;
 80010ce:	e017      	b.n	8001100 <SimpleCalArray+0x94>
	      case 3:
	    	  (*res) = (*a) - (*b);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	ed93 7a00 	vldr	s14, [r3]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	edd3 7a00 	vldr	s15, [r3]
 80010dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	edc3 7a00 	vstr	s15, [r3]
	      	  break;
 80010e6:	e00b      	b.n	8001100 <SimpleCalArray+0x94>
	      case 4:
	    	  (*res) = (*a) * (*b);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	ed93 7a00 	vldr	s14, [r3]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	edc3 7a00 	vstr	s15, [r3]
	      	  break;
 80010fe:	bf00      	nop
	      default:
	          return;
	          break;
	  }
	  a++;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3304      	adds	r3, #4
 8001104:	607b      	str	r3, [r7, #4]
	  b++;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	3304      	adds	r3, #4
 800110a:	603b      	str	r3, [r7, #0]
	  res++;
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	3304      	adds	r3, #4
 8001110:	60bb      	str	r3, [r7, #8]
  for (uint32_t i = 0; i < size; i++) {
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	8c3b      	ldrh	r3, [r7, #32]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	d3b0      	bcc.n	8001082 <SimpleCalArray+0x16>
 8001120:	e000      	b.n	8001124 <SimpleCalArray+0xb8>
	          return;
 8001122:	bf00      	nop
  }
}
 8001124:	371c      	adds	r7, #28
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <DivisionArray>:
void DivisionArray(float32_t *buf, float32_t div, uint16_t size){
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	ed87 0a02 	vstr	s0, [r7, #8]
 800113c:	460b      	mov	r3, r1
 800113e:	80fb      	strh	r3, [r7, #6]
  for (uint32_t i = 0; i < size; i++) {
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e00f      	b.n	8001166 <DivisionArray+0x36>
	  (*buf) = (*buf) / (float32_t)(div);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	edd3 6a00 	vldr	s13, [r3]
 800114c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	edc3 7a00 	vstr	s15, [r3]
	  buf++;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3304      	adds	r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
  for (uint32_t i = 0; i < size; i++) {
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3301      	adds	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	429a      	cmp	r2, r3
 800116c:	d3eb      	bcc.n	8001146 <DivisionArray+0x16>
  }
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <ComputePhase>:
void ComputePhase(float32_t *complex_in, float32_t *phase_out, uint16_t size){
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	4613      	mov	r3, r2
 8001188:	80fb      	strh	r3, [r7, #6]
  float32_t imag = 0.0f , real = 0.0f;
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < size; i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	e01c      	b.n	80011d6 <ComputePhase+0x5a>
	  real = *complex_in;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	617b      	str	r3, [r7, #20]
	  complex_in++;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3304      	adds	r3, #4
 80011a6:	60fb      	str	r3, [r7, #12]
	  imag = *complex_in;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
	  complex_in++;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	3304      	adds	r3, #4
 80011b2:	60fb      	str	r3, [r7, #12]
	  (*phase_out) =atan2f(imag, real);
 80011b4:	edd7 0a05 	vldr	s1, [r7, #20]
 80011b8:	ed97 0a06 	vldr	s0, [r7, #24]
 80011bc:	f011 ffe4 	bl	8013188 <atan2f>
 80011c0:	eef0 7a40 	vmov.f32	s15, s0
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	edc3 7a00 	vstr	s15, [r3]
	  phase_out++;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	3304      	adds	r3, #4
 80011ce:	60bb      	str	r3, [r7, #8]
  for (uint32_t i = 0; i < size; i++) {
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	3301      	adds	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d3de      	bcc.n	800119c <ComputePhase+0x20>
  }
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <CleanMagnitude>:
void CleanMagnitude(float32_t *out, float32_t *sig, float32_t *noise, uint16_t size){
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	807b      	strh	r3, [r7, #2]
	for (uint32_t i = 0; i < size; i++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e01b      	b.n	8001234 <CleanMagnitude+0x4c>
	  (*out) = (*sig) - (alpha * (*noise));
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	ed93 7a00 	vldr	s14, [r3]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edd3 6a00 	vldr	s13, [r3]
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <CleanMagnitude+0x64>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	edc3 7a00 	vstr	s15, [r3]
	  noise++;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3304      	adds	r3, #4
 8001220:	607b      	str	r3, [r7, #4]
	  sig++;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3304      	adds	r3, #4
 8001226:	60bb      	str	r3, [r7, #8]
	  out++;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3304      	adds	r3, #4
 800122c:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < size; i++) {
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	d3df      	bcc.n	80011fc <CleanMagnitude+0x14>
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	371c      	adds	r7, #28
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000000 	.word	0x20000000

08001250 <ApplySpectralFloor>:
void ApplySpectralFloor(float32_t *clean_mag, float32_t *spectral_floor, uint16_t size) {
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	4613      	mov	r3, r2
 800125c:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < size; i++) {
 800125e:	2300      	movs	r3, #0
 8001260:	82fb      	strh	r3, [r7, #22]
 8001262:	e021      	b.n	80012a8 <ApplySpectralFloor+0x58>
    	*spectral_floor = *spectral_floor * 0.02f;
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80012c0 <ApplySpectralFloor+0x70>
 800126e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	edc3 7a00 	vstr	s15, [r3]
        if (*clean_mag < *spectral_floor) {
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	ed93 7a00 	vldr	s14, [r3]
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128c:	d503      	bpl.n	8001296 <ApplySpectralFloor+0x46>
            *clean_mag = *spectral_floor;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	601a      	str	r2, [r3, #0]
        }
        clean_mag++;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3304      	adds	r3, #4
 800129a:	60fb      	str	r3, [r7, #12]
        spectral_floor++;
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3304      	adds	r3, #4
 80012a0:	60bb      	str	r3, [r7, #8]
    for (uint16_t i = 0; i < size; i++) {
 80012a2:	8afb      	ldrh	r3, [r7, #22]
 80012a4:	3301      	adds	r3, #1
 80012a6:	82fb      	strh	r3, [r7, #22]
 80012a8:	8afa      	ldrh	r2, [r7, #22]
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d3d9      	bcc.n	8001264 <ApplySpectralFloor+0x14>
    }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	371c      	adds	r7, #28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	3ca3d70a 	.word	0x3ca3d70a

080012c4 <ComplexConvertPolarToAlgebraic>:
void ComplexConvertPolarToAlgebraic(float32_t *frame_freq, float32_t *mag, float32_t *phase, uint16_t size) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	ed2d 8b02 	vpush	{d8}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	807b      	strh	r3, [r7, #2]

	for(uint16_t i = 0; i < size; i++){
 80012d6:	2300      	movs	r3, #0
 80012d8:	82fb      	strh	r3, [r7, #22]
 80012da:	e030      	b.n	800133e <ComplexConvertPolarToAlgebraic+0x7a>
		*frame_freq = *mag * arm_cos_f32(*phase); // real part
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	ed93 8a00 	vldr	s16, [r3]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ec:	f002 f960 	bl	80035b0 <arm_cos_f32>
 80012f0:	eef0 7a40 	vmov.f32	s15, s0
 80012f4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	edc3 7a00 	vstr	s15, [r3]
		frame_freq++;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3304      	adds	r3, #4
 8001302:	60fb      	str	r3, [r7, #12]
		*frame_freq = (*mag) * arm_sin_f32(*phase); // imag part
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	ed93 8a00 	vldr	s16, [r3]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	eeb0 0a67 	vmov.f32	s0, s15
 8001314:	f002 f9d2 	bl	80036bc <arm_sin_f32>
 8001318:	eef0 7a40 	vmov.f32	s15, s0
 800131c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	edc3 7a00 	vstr	s15, [r3]
		frame_freq++;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3304      	adds	r3, #4
 800132a:	60fb      	str	r3, [r7, #12]
		phase++;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3304      	adds	r3, #4
 8001330:	607b      	str	r3, [r7, #4]
		mag++;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	3304      	adds	r3, #4
 8001336:	60bb      	str	r3, [r7, #8]
	for(uint16_t i = 0; i < size; i++){
 8001338:	8afb      	ldrh	r3, [r7, #22]
 800133a:	3301      	adds	r3, #1
 800133c:	82fb      	strh	r3, [r7, #22]
 800133e:	8afa      	ldrh	r2, [r7, #22]
 8001340:	887b      	ldrh	r3, [r7, #2]
 8001342:	429a      	cmp	r2, r3
 8001344:	d3ca      	bcc.n	80012dc <ComplexConvertPolarToAlgebraic+0x18>
    }
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	ecbd 8b02 	vpop	{d8}
 8001352:	bd80      	pop	{r7, pc}

08001354 <GainApply>:
		  max = *buf;
	  buf++;
  }
  return max;
}
void GainApply(float32_t *buf, float32_t gain, uint16_t size){
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001360:	460b      	mov	r3, r1
 8001362:	80fb      	strh	r3, [r7, #6]
  for (uint32_t i = 0; i < size; i++) {
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e00f      	b.n	800138a <GainApply+0x36>
	  (*buf) = (*buf) * gain;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	ed93 7a00 	vldr	s14, [r3]
 8001370:	edd7 7a02 	vldr	s15, [r7, #8]
 8001374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	edc3 7a00 	vstr	s15, [r3]
	  buf++;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3304      	adds	r3, #4
 8001382:	60fb      	str	r3, [r7, #12]
  for (uint32_t i = 0; i < size; i++) {
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	429a      	cmp	r2, r3
 8001390:	d3eb      	bcc.n	800136a <GainApply+0x16>
  }
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LimitClipp>:
void LimitClipp(float32_t* frame_time, uint16_t size) {
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
    for(uint32_t i = 0; i < size; i++) {
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e021      	b.n	80013f6 <LimitClipp+0x56>
        if(*frame_time > 1.0f) {
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	dd04      	ble.n	80013d0 <LimitClipp+0x30>
            *frame_time = 1.0f;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	e00c      	b.n	80013ea <LimitClipp+0x4a>
        } else if(*frame_time < -1.0f) {
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80013da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e2:	d502      	bpl.n	80013ea <LimitClipp+0x4a>
            *frame_time = -1.0f;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <LimitClipp+0x6c>)
 80013e8:	601a      	str	r2, [r3, #0]
        }
        frame_time++;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3304      	adds	r3, #4
 80013ee:	607b      	str	r3, [r7, #4]
    for(uint32_t i = 0; i < size; i++) {
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3301      	adds	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d3d9      	bcc.n	80013b2 <LimitClipp+0x12>
    }
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	bf800000 	.word	0xbf800000

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001416:	f004 ff97 	bl	8006348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141a:	f000 fa9d 	bl	8001958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141e:	f000 fb8b 	bl	8001b38 <MX_GPIO_Init>
  MX_DMA_Init();
 8001422:	f000 fb61 	bl	8001ae8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001426:	f010 f9c5 	bl	80117b4 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800142a:	f000 fb33 	bl	8001a94 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800142e:	f000 fafb 	bl	8001a28 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // FFT initialization
  arm_rfft_fast_init_f32(&S, FRAME_LEN);
 8001432:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001436:	489d      	ldr	r0, [pc, #628]	; (80016ac <main+0x29c>)
 8001438:	f004 ff1e 	bl	8006278 <arm_rfft_fast_init_f32>
  generateHammingWindow(HammingWin, FRAME_LEN);
 800143c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001440:	489b      	ldr	r0, [pc, #620]	; (80016b0 <main+0x2a0>)
 8001442:	f7ff fd2d 	bl	8000ea0 <generateHammingWindow>
  memset(WinSum, '\0', FRAME_LEN+1);
 8001446:	f240 4201 	movw	r2, #1025	; 0x401
 800144a:	2100      	movs	r1, #0
 800144c:	4899      	ldr	r0, [pc, #612]	; (80016b4 <main+0x2a4>)
 800144e:	f011 f9af 	bl	80127b0 <memset>
  SimpleCalArray(4, WinSum, HammingWin, HammingWin, FRAME_LEN);
 8001452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	4b95      	ldr	r3, [pc, #596]	; (80016b0 <main+0x2a0>)
 800145a:	4a95      	ldr	r2, [pc, #596]	; (80016b0 <main+0x2a0>)
 800145c:	4995      	ldr	r1, [pc, #596]	; (80016b4 <main+0x2a4>)
 800145e:	2004      	movs	r0, #4
 8001460:	f7ff fe04 	bl	800106c <SimpleCalArray>
  CopyFloatArray(&WinSum[512], &WinSum[1024], HALF_FRAME);
 8001464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001468:	4993      	ldr	r1, [pc, #588]	; (80016b8 <main+0x2a8>)
 800146a:	4894      	ldr	r0, [pc, #592]	; (80016bc <main+0x2ac>)
 800146c:	f7ff fd6c 	bl	8000f48 <CopyFloatArray>
  SimpleCalArray(1, &WinSum[512], WinSum, &WinSum[1024], HALF_FRAME);
 8001470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	4b90      	ldr	r3, [pc, #576]	; (80016b8 <main+0x2a8>)
 8001478:	4a8e      	ldr	r2, [pc, #568]	; (80016b4 <main+0x2a4>)
 800147a:	4990      	ldr	r1, [pc, #576]	; (80016bc <main+0x2ac>)
 800147c:	2001      	movs	r0, #1
 800147e:	f7ff fdf5 	bl	800106c <SimpleCalArray>


//  sd_unmount();
  HAL_Delay(200);
 8001482:	20c8      	movs	r0, #200	; 0xc8
 8001484:	f004 ffd2 	bl	800642c <HAL_Delay>
  sd_mount();
 8001488:	f001 f9ac 	bl	80027e4 <sd_mount>


  uint32_t NoiseNumSam = NOISE_SEC * SAMP_RATE;
 800148c:	4b8c      	ldr	r3, [pc, #560]	; (80016c0 <main+0x2b0>)
 800148e:	60bb      	str	r3, [r7, #8]
  float32_t NumFrame = ((NoiseNumSam - FRAME_LEN) / HALF_FRAME) + 1;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001496:	0a5b      	lsrs	r3, r3, #9
 8001498:	3301      	adds	r3, #1
 800149a:	ee07 3a90 	vmov	s15, r3
 800149e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a2:	edc7 7a01 	vstr	s15, [r7, #4]
  float32_t IndexFrame   = NumFrame;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	60fb      	str	r3, [r7, #12]


  ResultWave = WAVFIL_Start_Read( "Record_8.wav");
 80014aa:	4886      	ldr	r0, [pc, #536]	; (80016c4 <main+0x2b4>)
 80014ac:	f000 ff9a 	bl	80023e4 <WAVFIL_Start_Read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b84      	ldr	r3, [pc, #528]	; (80016c8 <main+0x2b8>)
 80014b6:	701a      	strb	r2, [r3, #0]
  ResultWave = WAVFIL_Catch_Data(wav_in, &NumByteRead, HALF_FRAME);
 80014b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014bc:	4983      	ldr	r1, [pc, #524]	; (80016cc <main+0x2bc>)
 80014be:	4884      	ldr	r0, [pc, #528]	; (80016d0 <main+0x2c0>)
 80014c0:	f001 f814 	bl	80024ec <WAVFIL_Catch_Data>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b7f      	ldr	r3, [pc, #508]	; (80016c8 <main+0x2b8>)
 80014ca:	701a      	strb	r2, [r3, #0]

  CopyFloatArray(wav_in, Frame, HALF_FRAME);
 80014cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d0:	4980      	ldr	r1, [pc, #512]	; (80016d4 <main+0x2c4>)
 80014d2:	487f      	ldr	r0, [pc, #508]	; (80016d0 <main+0x2c0>)
 80014d4:	f7ff fd38 	bl	8000f48 <CopyFloatArray>
  ResetArray(NoiseSpectrum, HALF_FRAME);
 80014d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014dc:	487e      	ldr	r0, [pc, #504]	; (80016d8 <main+0x2c8>)
 80014de:	f7ff fd55 	bl	8000f8c <ResetArray>

  while(IndexFrame != 0){
 80014e2:	e035      	b.n	8001550 <main+0x140>

  	  ResultWave = WAVFIL_Catch_Data(wav_in, &NumByteRead, HALF_FRAME);
 80014e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e8:	4978      	ldr	r1, [pc, #480]	; (80016cc <main+0x2bc>)
 80014ea:	4879      	ldr	r0, [pc, #484]	; (80016d0 <main+0x2c0>)
 80014ec:	f000 fffe 	bl	80024ec <WAVFIL_Catch_Data>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b74      	ldr	r3, [pc, #464]	; (80016c8 <main+0x2b8>)
 80014f6:	701a      	strb	r2, [r3, #0]

  	  CopyFloatArray(wav_in, &Frame[512], HALF_FRAME);
 80014f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fc:	4977      	ldr	r1, [pc, #476]	; (80016dc <main+0x2cc>)
 80014fe:	4874      	ldr	r0, [pc, #464]	; (80016d0 <main+0x2c0>)
 8001500:	f7ff fd22 	bl	8000f48 <CopyFloatArray>

  	  WindowApply(Frame, HammingWin, FRAME_LEN);
 8001504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001508:	4969      	ldr	r1, [pc, #420]	; (80016b0 <main+0x2a0>)
 800150a:	4872      	ldr	r0, [pc, #456]	; (80016d4 <main+0x2c4>)
 800150c:	f7ff fd5c 	bl	8000fc8 <WindowApply>

  	  arm_rfft_fast_f32(&S, Frame, FFTOut, 0);
 8001510:	2300      	movs	r3, #0
 8001512:	4a73      	ldr	r2, [pc, #460]	; (80016e0 <main+0x2d0>)
 8001514:	496f      	ldr	r1, [pc, #444]	; (80016d4 <main+0x2c4>)
 8001516:	4865      	ldr	r0, [pc, #404]	; (80016ac <main+0x29c>)
 8001518:	f004 fd5d 	bl	8005fd6 <arm_rfft_fast_f32>

   	  arm_cmplx_mag_f32(FFTOut, fftMagnitude, HALF_FRAME);
 800151c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001520:	4970      	ldr	r1, [pc, #448]	; (80016e4 <main+0x2d4>)
 8001522:	486f      	ldr	r0, [pc, #444]	; (80016e0 <main+0x2d0>)
 8001524:	f001 ffff 	bl	8003526 <arm_cmplx_mag_f32>

   	  SumArray(NoiseSpectrum, fftMagnitude, HALF_FRAME);
 8001528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152c:	496d      	ldr	r1, [pc, #436]	; (80016e4 <main+0x2d4>)
 800152e:	486a      	ldr	r0, [pc, #424]	; (80016d8 <main+0x2c8>)
 8001530:	f7ff fd73 	bl	800101a <SumArray>

   	  CopyFloatArray(wav_in, Frame, HALF_FRAME);
 8001534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001538:	4966      	ldr	r1, [pc, #408]	; (80016d4 <main+0x2c4>)
 800153a:	4865      	ldr	r0, [pc, #404]	; (80016d0 <main+0x2c0>)
 800153c:	f7ff fd04 	bl	8000f48 <CopyFloatArray>

   	  IndexFrame--;
 8001540:	edd7 7a03 	vldr	s15, [r7, #12]
 8001544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800154c:	edc7 7a03 	vstr	s15, [r7, #12]
  while(IndexFrame != 0){
 8001550:	edd7 7a03 	vldr	s15, [r7, #12]
 8001554:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155c:	d1c2      	bne.n	80014e4 <main+0xd4>
  }

  DivisionArray(NoiseSpectrum, NumFrame, HALF_FRAME);
 800155e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001562:	ed97 0a01 	vldr	s0, [r7, #4]
 8001566:	485c      	ldr	r0, [pc, #368]	; (80016d8 <main+0x2c8>)
 8001568:	f7ff fde2 	bl	8001130 <DivisionArray>

  ResultWave = WAVFIL_End_Read();
 800156c:	f001 f8d6 	bl	800271c <WAVFIL_End_Read>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4b54      	ldr	r3, [pc, #336]	; (80016c8 <main+0x2b8>)
 8001576:	701a      	strb	r2, [r3, #0]


  HAL_Delay(200);
 8001578:	20c8      	movs	r0, #200	; 0xc8
 800157a:	f004 ff57 	bl	800642c <HAL_Delay>


  LetOverlapFrame = false;
 800157e:	4b5a      	ldr	r3, [pc, #360]	; (80016e8 <main+0x2d8>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
  ResultWave = WAVFIL_Start_Read( "Record_8.wav");
 8001584:	484f      	ldr	r0, [pc, #316]	; (80016c4 <main+0x2b4>)
 8001586:	f000 ff2d 	bl	80023e4 <WAVFIL_Start_Read>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	4b4e      	ldr	r3, [pc, #312]	; (80016c8 <main+0x2b8>)
 8001590:	701a      	strb	r2, [r3, #0]
  ResultWave = WAVFIL_Start_Write("Recording_8_dsp.wav", R_WavremainData, 22050);
 8001592:	4b56      	ldr	r3, [pc, #344]	; (80016ec <main+0x2dc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f245 6222 	movw	r2, #22050	; 0x5622
 800159a:	4619      	mov	r1, r3
 800159c:	4854      	ldr	r0, [pc, #336]	; (80016f0 <main+0x2e0>)
 800159e:	f000 fd69 	bl	8002074 <WAVFIL_Start_Write>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <main+0x2b8>)
 80015a8:	701a      	strb	r2, [r3, #0]

  NumFrame = (((R_WavremainData / 2) - FRAME_LEN) / HALF_FRAME) + 1;
 80015aa:	4b50      	ldr	r3, [pc, #320]	; (80016ec <main+0x2dc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80015b4:	0a5b      	lsrs	r3, r3, #9
 80015b6:	3301      	adds	r3, #1
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c0:	edc7 7a01 	vstr	s15, [r7, #4]
  IndexFrame = NumFrame;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	60fb      	str	r3, [r7, #12]

  ResultWave = WAVFIL_Catch_Data(wav_in, &NumByteRead, HALF_FRAME);
 80015c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015cc:	493f      	ldr	r1, [pc, #252]	; (80016cc <main+0x2bc>)
 80015ce:	4840      	ldr	r0, [pc, #256]	; (80016d0 <main+0x2c0>)
 80015d0:	f000 ff8c 	bl	80024ec <WAVFIL_Catch_Data>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <main+0x2b8>)
 80015da:	701a      	strb	r2, [r3, #0]

  CopyFloatArray(wav_in, Frame, HALF_FRAME);
 80015dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e0:	493c      	ldr	r1, [pc, #240]	; (80016d4 <main+0x2c4>)
 80015e2:	483b      	ldr	r0, [pc, #236]	; (80016d0 <main+0x2c0>)
 80015e4:	f7ff fcb0 	bl	8000f48 <CopyFloatArray>
  ResetArray(SignalMagnitud, HALF_FRAME);
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	4841      	ldr	r0, [pc, #260]	; (80016f4 <main+0x2e4>)
 80015ee:	f7ff fccd 	bl	8000f8c <ResetArray>




  while(IndexFrame != 0){
 80015f2:	e0d0      	b.n	8001796 <main+0x386>

	  ResultWave = WAVFIL_Catch_Data(wav_in, &NumByteRead, HALF_FRAME);
 80015f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f8:	4934      	ldr	r1, [pc, #208]	; (80016cc <main+0x2bc>)
 80015fa:	4835      	ldr	r0, [pc, #212]	; (80016d0 <main+0x2c0>)
 80015fc:	f000 ff76 	bl	80024ec <WAVFIL_Catch_Data>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <main+0x2b8>)
 8001606:	701a      	strb	r2, [r3, #0]

	  CopyFloatArray(wav_in, &Frame[512], HALF_FRAME);
 8001608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160c:	4933      	ldr	r1, [pc, #204]	; (80016dc <main+0x2cc>)
 800160e:	4830      	ldr	r0, [pc, #192]	; (80016d0 <main+0x2c0>)
 8001610:	f7ff fc9a 	bl	8000f48 <CopyFloatArray>

	  WindowApply(Frame, HammingWin, FRAME_LEN);
 8001614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001618:	4925      	ldr	r1, [pc, #148]	; (80016b0 <main+0x2a0>)
 800161a:	482e      	ldr	r0, [pc, #184]	; (80016d4 <main+0x2c4>)
 800161c:	f7ff fcd4 	bl	8000fc8 <WindowApply>

	  arm_rfft_fast_f32(&S, Frame, FFTOut, 0);
 8001620:	2300      	movs	r3, #0
 8001622:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <main+0x2d0>)
 8001624:	492b      	ldr	r1, [pc, #172]	; (80016d4 <main+0x2c4>)
 8001626:	4821      	ldr	r0, [pc, #132]	; (80016ac <main+0x29c>)
 8001628:	f004 fcd5 	bl	8005fd6 <arm_rfft_fast_f32>

	  arm_cmplx_mag_f32(FFTOut, SignalMagnitud, HALF_FRAME);
 800162c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001630:	4930      	ldr	r1, [pc, #192]	; (80016f4 <main+0x2e4>)
 8001632:	482b      	ldr	r0, [pc, #172]	; (80016e0 <main+0x2d0>)
 8001634:	f001 ff77 	bl	8003526 <arm_cmplx_mag_f32>

	  ComputePhase(FFTOut, SignalPhase, HALF_FRAME);
 8001638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163c:	492e      	ldr	r1, [pc, #184]	; (80016f8 <main+0x2e8>)
 800163e:	4828      	ldr	r0, [pc, #160]	; (80016e0 <main+0x2d0>)
 8001640:	f7ff fd9c 	bl	800117c <ComputePhase>

	  CleanMagnitude(CleanSpectrum, SignalMagnitud, NoiseSpectrum, HALF_FRAME);
 8001644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001648:	4a23      	ldr	r2, [pc, #140]	; (80016d8 <main+0x2c8>)
 800164a:	492a      	ldr	r1, [pc, #168]	; (80016f4 <main+0x2e4>)
 800164c:	482b      	ldr	r0, [pc, #172]	; (80016fc <main+0x2ec>)
 800164e:	f7ff fdcb 	bl	80011e8 <CleanMagnitude>

	  ApplySpectralFloor(CleanSpectrum, NoiseSpectrum, HALF_FRAME);
 8001652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001656:	4920      	ldr	r1, [pc, #128]	; (80016d8 <main+0x2c8>)
 8001658:	4828      	ldr	r0, [pc, #160]	; (80016fc <main+0x2ec>)
 800165a:	f7ff fdf9 	bl	8001250 <ApplySpectralFloor>

//---------------------------------------------

	  ComplexConvertPolarToAlgebraic(IFFTIn, CleanSpectrum, SignalPhase, HALF_FRAME);
 800165e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001662:	4a25      	ldr	r2, [pc, #148]	; (80016f8 <main+0x2e8>)
 8001664:	4925      	ldr	r1, [pc, #148]	; (80016fc <main+0x2ec>)
 8001666:	4826      	ldr	r0, [pc, #152]	; (8001700 <main+0x2f0>)
 8001668:	f7ff fe2c 	bl	80012c4 <ComplexConvertPolarToAlgebraic>

	  arm_rfft_fast_f32(&S, IFFTIn, CleanSampleNew, 1);
 800166c:	2301      	movs	r3, #1
 800166e:	4a25      	ldr	r2, [pc, #148]	; (8001704 <main+0x2f4>)
 8001670:	4923      	ldr	r1, [pc, #140]	; (8001700 <main+0x2f0>)
 8001672:	480e      	ldr	r0, [pc, #56]	; (80016ac <main+0x29c>)
 8001674:	f004 fcaf 	bl	8005fd6 <arm_rfft_fast_f32>

	  WindowApply(CleanSampleNew, HammingWin, FRAME_LEN);
 8001678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <main+0x2a0>)
 800167e:	4821      	ldr	r0, [pc, #132]	; (8001704 <main+0x2f4>)
 8001680:	f7ff fca2 	bl	8000fc8 <WindowApply>


	  if(LetOverlapFrame){
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <main+0x2d8>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d03f      	beq.n	800170c <main+0x2fc>

		  SumArray(CleanSampleNew, CleanSampleOld, HALF_FRAME);
 800168c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001690:	491d      	ldr	r1, [pc, #116]	; (8001708 <main+0x2f8>)
 8001692:	481c      	ldr	r0, [pc, #112]	; (8001704 <main+0x2f4>)
 8001694:	f7ff fcc1 	bl	800101a <SumArray>
		  SimpleCalArray(2, CleanSampleNew, CleanSampleNew, &WinSum[512], HALF_FRAME);
 8001698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <main+0x2ac>)
 80016a0:	4a18      	ldr	r2, [pc, #96]	; (8001704 <main+0x2f4>)
 80016a2:	4918      	ldr	r1, [pc, #96]	; (8001704 <main+0x2f4>)
 80016a4:	2002      	movs	r0, #2
 80016a6:	f7ff fce1 	bl	800106c <SimpleCalArray>
 80016aa:	e038      	b.n	800171e <main+0x30e>
 80016ac:	20000188 	.word	0x20000188
 80016b0:	20007208 	.word	0x20007208
 80016b4:	20009a18 	.word	0x20009a18
 80016b8:	2000aa18 	.word	0x2000aa18
 80016bc:	2000a218 	.word	0x2000a218
 80016c0:	00015888 	.word	0x00015888
 80016c4:	08013520 	.word	0x08013520
 80016c8:	20000183 	.word	0x20000183
 80016cc:	2000017c 	.word	0x2000017c
 80016d0:	200001e4 	.word	0x200001e4
 80016d4:	200009e8 	.word	0x200009e8
 80016d8:	2000820c 	.word	0x2000820c
 80016dc:	200011e8 	.word	0x200011e8
 80016e0:	200021f0 	.word	0x200021f0
 80016e4:	20006a04 	.word	0x20006a04
 80016e8:	20000182 	.word	0x20000182
 80016ec:	2000bb7c 	.word	0x2000bb7c
 80016f0:	08013530 	.word	0x08013530
 80016f4:	20008a10 	.word	0x20008a10
 80016f8:	20009214 	.word	0x20009214
 80016fc:	200019ec 	.word	0x200019ec
 8001700:	200031f4 	.word	0x200031f4
 8001704:	200041f8 	.word	0x200041f8
 8001708:	200051fc 	.word	0x200051fc

	  }
	  else{

		  SimpleCalArray(2, CleanSampleNew, CleanSampleNew, WinSum, HALF_FRAME);
 800170c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	4b7d      	ldr	r3, [pc, #500]	; (8001908 <main+0x4f8>)
 8001714:	4a7d      	ldr	r2, [pc, #500]	; (800190c <main+0x4fc>)
 8001716:	497d      	ldr	r1, [pc, #500]	; (800190c <main+0x4fc>)
 8001718:	2002      	movs	r0, #2
 800171a:	f7ff fca7 	bl	800106c <SimpleCalArray>

	  }

	  maxSample = 0.092862136481524f;
 800171e:	4b7c      	ldr	r3, [pc, #496]	; (8001910 <main+0x500>)
 8001720:	4a7c      	ldr	r2, [pc, #496]	; (8001914 <main+0x504>)
 8001722:	601a      	str	r2, [r3, #0]
	  DivisionArray(CleanSampleNew, maxSample, HALF_FRAME);
 8001724:	4b7a      	ldr	r3, [pc, #488]	; (8001910 <main+0x500>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	4876      	ldr	r0, [pc, #472]	; (800190c <main+0x4fc>)
 8001734:	f7ff fcfc 	bl	8001130 <DivisionArray>
	  GainApply(CleanSampleNew, Gain, HALF_FRAME);
 8001738:	4b77      	ldr	r3, [pc, #476]	; (8001918 <main+0x508>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001742:	eeb0 0a67 	vmov.f32	s0, s15
 8001746:	4871      	ldr	r0, [pc, #452]	; (800190c <main+0x4fc>)
 8001748:	f7ff fe04 	bl	8001354 <GainApply>
	  LimitClipp(CleanSampleNew, HALF_FRAME);
 800174c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001750:	486e      	ldr	r0, [pc, #440]	; (800190c <main+0x4fc>)
 8001752:	f7ff fe25 	bl	80013a0 <LimitClipp>

	  ResultWave = WAVFIL_Give_Write(CleanSampleNew, HALF_FRAME);
 8001756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800175a:	486c      	ldr	r0, [pc, #432]	; (800190c <main+0x4fc>)
 800175c:	f000 fd08 	bl	8002170 <WAVFIL_Give_Write>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	4b6d      	ldr	r3, [pc, #436]	; (800191c <main+0x50c>)
 8001766:	701a      	strb	r2, [r3, #0]

	  CopyFloatArray(&CleanSampleNew[512], CleanSampleOld, HALF_FRAME);
 8001768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176c:	496c      	ldr	r1, [pc, #432]	; (8001920 <main+0x510>)
 800176e:	486d      	ldr	r0, [pc, #436]	; (8001924 <main+0x514>)
 8001770:	f7ff fbea 	bl	8000f48 <CopyFloatArray>

	  IndexFrame--;
 8001774:	edd7 7a03 	vldr	s15, [r7, #12]
 8001778:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800177c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001780:	edc7 7a03 	vstr	s15, [r7, #12]
	  LetOverlapFrame = true;
 8001784:	4b68      	ldr	r3, [pc, #416]	; (8001928 <main+0x518>)
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]

	  CopyFloatArray(wav_in, Frame, HALF_FRAME);
 800178a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800178e:	4967      	ldr	r1, [pc, #412]	; (800192c <main+0x51c>)
 8001790:	4867      	ldr	r0, [pc, #412]	; (8001930 <main+0x520>)
 8001792:	f7ff fbd9 	bl	8000f48 <CopyFloatArray>
  while(IndexFrame != 0){
 8001796:	edd7 7a03 	vldr	s15, [r7, #12]
 800179a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a2:	f47f af27 	bne.w	80015f4 <main+0x1e4>
  }
  if(IndexFrame == 0){
 80017a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b2:	d12d      	bne.n	8001810 <main+0x400>

	  SimpleCalArray(2, CleanSampleNew, CleanSampleNew, &WinSum[1024], HALF_FRAME);
 80017b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4b5e      	ldr	r3, [pc, #376]	; (8001934 <main+0x524>)
 80017bc:	4a53      	ldr	r2, [pc, #332]	; (800190c <main+0x4fc>)
 80017be:	4953      	ldr	r1, [pc, #332]	; (800190c <main+0x4fc>)
 80017c0:	2002      	movs	r0, #2
 80017c2:	f7ff fc53 	bl	800106c <SimpleCalArray>

	  maxSample = 0.092862136481524f;
 80017c6:	4b52      	ldr	r3, [pc, #328]	; (8001910 <main+0x500>)
 80017c8:	4a52      	ldr	r2, [pc, #328]	; (8001914 <main+0x504>)
 80017ca:	601a      	str	r2, [r3, #0]
	  DivisionArray(CleanSampleNew, maxSample, HALF_FRAME);
 80017cc:	4b50      	ldr	r3, [pc, #320]	; (8001910 <main+0x500>)
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d6:	eeb0 0a67 	vmov.f32	s0, s15
 80017da:	484c      	ldr	r0, [pc, #304]	; (800190c <main+0x4fc>)
 80017dc:	f7ff fca8 	bl	8001130 <DivisionArray>
	  GainApply(CleanSampleNew, Gain, HALF_FRAME);
 80017e0:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <main+0x508>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ea:	eeb0 0a67 	vmov.f32	s0, s15
 80017ee:	4847      	ldr	r0, [pc, #284]	; (800190c <main+0x4fc>)
 80017f0:	f7ff fdb0 	bl	8001354 <GainApply>
	  LimitClipp(CleanSampleNew, HALF_FRAME);
 80017f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f8:	4844      	ldr	r0, [pc, #272]	; (800190c <main+0x4fc>)
 80017fa:	f7ff fdd1 	bl	80013a0 <LimitClipp>

	  ResultWave = WAVFIL_Give_Write(CleanSampleNew, HALF_FRAME);
 80017fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001802:	4842      	ldr	r0, [pc, #264]	; (800190c <main+0x4fc>)
 8001804:	f000 fcb4 	bl	8002170 <WAVFIL_Give_Write>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	4b43      	ldr	r3, [pc, #268]	; (800191c <main+0x50c>)
 800180e:	701a      	strb	r2, [r3, #0]
  }

  ResultWave = WAVFIL_End_Read();
 8001810:	f000 ff84 	bl	800271c <WAVFIL_End_Read>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	4b40      	ldr	r3, [pc, #256]	; (800191c <main+0x50c>)
 800181a:	701a      	strb	r2, [r3, #0]
  ResultWave = WAVFIL_End_Write();
 800181c:	f000 fdd8 	bl	80023d0 <WAVFIL_End_Write>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	4b3d      	ldr	r3, [pc, #244]	; (800191c <main+0x50c>)
 8001826:	701a      	strb	r2, [r3, #0]
  while (1)
  {



	  while(FlagKey)
 8001828:	e063      	b.n	80018f2 <main+0x4e2>
	  {

		  sd_mount();
 800182a:	f000 ffdb 	bl	80027e4 <sd_mount>
		  // Open recording file
		  ResultWave = WAVFIL_Start_Read( "Recording_8.wav");
 800182e:	4842      	ldr	r0, [pc, #264]	; (8001938 <main+0x528>)
 8001830:	f000 fdd8 	bl	80023e4 <WAVFIL_Start_Read>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	4b38      	ldr	r3, [pc, #224]	; (800191c <main+0x50c>)
 800183a:	701a      	strb	r2, [r3, #0]
		  if(ResultWave != WAV_OK){
 800183c:	4b37      	ldr	r3, [pc, #220]	; (800191c <main+0x50c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d15b      	bne.n	80018fc <main+0x4ec>
//		  	}


		  // Give data from wave file in the sd card
		//  	ResultWave = WAVFIL_Catch_Data(wav_in, &NumByteRead);
		  if(ResultWave != WAV_OK){
 8001844:	4b35      	ldr	r3, [pc, #212]	; (800191c <main+0x50c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d159      	bne.n	8001900 <main+0x4f0>
//		  if(ResultMat != MAT_OK){
//			  break;
//			  FlagKey = false;
//		  }

	  	  arm_rfft_fast_f32(&S, wav_in, wav_out, 0);
 800184c:	2300      	movs	r3, #0
 800184e:	4a3b      	ldr	r2, [pc, #236]	; (800193c <main+0x52c>)
 8001850:	4937      	ldr	r1, [pc, #220]	; (8001930 <main+0x520>)
 8001852:	483b      	ldr	r0, [pc, #236]	; (8001940 <main+0x530>)
 8001854:	f004 fbbf 	bl	8005fd6 <arm_rfft_fast_f32>
	  	  arm_cmplx_mag_f32(wav_out, fftMagnitude, FRAME_LEN/2);
 8001858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185c:	4939      	ldr	r1, [pc, #228]	; (8001944 <main+0x534>)
 800185e:	4837      	ldr	r0, [pc, #220]	; (800193c <main+0x52c>)
 8001860:	f001 fe61 	bl	8003526 <arm_cmplx_mag_f32>
//			  break;
//			  FlagKey = false;
//		  }

		  // Send Filtered data to MATLAB
		  ResultMat = MAT_SendSamples(wav_out, FRAME_LEN/2, 32767.0f);
 8001864:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8001948 <main+0x538>
 8001868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186c:	4833      	ldr	r0, [pc, #204]	; (800193c <main+0x52c>)
 800186e:	f000 fa8c 	bl	8001d8a <MAT_SendSamples>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	4b35      	ldr	r3, [pc, #212]	; (800194c <main+0x53c>)
 8001878:	701a      	strb	r2, [r3, #0]
		  if(ResultMat != MAT_OK){
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <main+0x53c>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d140      	bne.n	8001904 <main+0x4f4>
			  break;
			  FlagKey = false;
		  }

		  // We need to continue this until the end of the wavw recording file.
		  while(R_WavremainData != 0){
 8001882:	e023      	b.n	80018cc <main+0x4bc>

			  // Give data from wave file in the sd card
			//  ResultWave = WAVFIL_Catch_Data(wav_in, &NumByteRead);
			  if(ResultWave != WAV_OK){
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <main+0x50c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d124      	bne.n	80018d6 <main+0x4c6>
				  break;
				  FlagKey = false;
			  }

			  // Apply Low Pass Filter
	  	  	  arm_rfft_fast_f32(&S, wav_in, wav_out, 0);
 800188c:	2300      	movs	r3, #0
 800188e:	4a2b      	ldr	r2, [pc, #172]	; (800193c <main+0x52c>)
 8001890:	4927      	ldr	r1, [pc, #156]	; (8001930 <main+0x520>)
 8001892:	482b      	ldr	r0, [pc, #172]	; (8001940 <main+0x530>)
 8001894:	f004 fb9f 	bl	8005fd6 <arm_rfft_fast_f32>
	  	  	  arm_cmplx_mag_f32(wav_out, fftMagnitude, FRAME_LEN/2);
 8001898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189c:	4929      	ldr	r1, [pc, #164]	; (8001944 <main+0x534>)
 800189e:	4827      	ldr	r0, [pc, #156]	; (800193c <main+0x52c>)
 80018a0:	f001 fe41 	bl	8003526 <arm_cmplx_mag_f32>
	  	  	  MagniNormal(fftMagnitude, FRAME_LEN/2);
 80018a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a8:	4826      	ldr	r0, [pc, #152]	; (8001944 <main+0x534>)
 80018aa:	f7ff fab5 	bl	8000e18 <MagniNormal>


			  // Send Filtered data to MATLAB
			  ResultMat = MAT_SendSamples(wav_out, FRAME_LEN/2, 32767.0f);
 80018ae:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001948 <main+0x538>
 80018b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b6:	4821      	ldr	r0, [pc, #132]	; (800193c <main+0x52c>)
 80018b8:	f000 fa67 	bl	8001d8a <MAT_SendSamples>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <main+0x53c>)
 80018c2:	701a      	strb	r2, [r3, #0]
			  if(ResultMat != MAT_OK){
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <main+0x53c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d106      	bne.n	80018da <main+0x4ca>
		  while(R_WavremainData != 0){
 80018cc:	4b20      	ldr	r3, [pc, #128]	; (8001950 <main+0x540>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1d7      	bne.n	8001884 <main+0x474>
 80018d4:	e002      	b.n	80018dc <main+0x4cc>
				  break;
 80018d6:	bf00      	nop
 80018d8:	e000      	b.n	80018dc <main+0x4cc>
				  break;
 80018da:	bf00      	nop
//				  break;
//				  FlagKey = false;
//			  }
		  }
		  // Send to MATLAB end signal.
		  MAT_EndSignal();
 80018dc:	f000 faf9 	bl	8001ed2 <MAT_EndSignal>
		  // Close the wave recording file.
		  ResultWave = WAVFIL_End_Read();
 80018e0:	f000 ff1c 	bl	800271c <WAVFIL_End_Read>
 80018e4:	4603      	mov	r3, r0
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <main+0x50c>)
 80018ea:	701a      	strb	r2, [r3, #0]
		  // Close the new wave filtered file.
//		  ResultWave = WAVFIL_End_Write();
		  // Don't come back to this loop before pressing the bottom.
		  FlagKey = false;
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <main+0x544>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
	  while(FlagKey)
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <main+0x544>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d197      	bne.n	800182a <main+0x41a>
 80018fa:	e7fa      	b.n	80018f2 <main+0x4e2>
			  break;
 80018fc:	bf00      	nop
 80018fe:	e7f8      	b.n	80018f2 <main+0x4e2>
			  break;
 8001900:	bf00      	nop
 8001902:	e7f6      	b.n	80018f2 <main+0x4e2>
			  break;
 8001904:	bf00      	nop
	  while(FlagKey)
 8001906:	e7f4      	b.n	80018f2 <main+0x4e2>
 8001908:	20009a18 	.word	0x20009a18
 800190c:	200041f8 	.word	0x200041f8
 8001910:	200001e0 	.word	0x200001e0
 8001914:	3dbe2e81 	.word	0x3dbe2e81
 8001918:	20000004 	.word	0x20000004
 800191c:	20000183 	.word	0x20000183
 8001920:	200051fc 	.word	0x200051fc
 8001924:	200049f8 	.word	0x200049f8
 8001928:	20000182 	.word	0x20000182
 800192c:	200009e8 	.word	0x200009e8
 8001930:	200001e4 	.word	0x200001e4
 8001934:	2000aa18 	.word	0x2000aa18
 8001938:	08013544 	.word	0x08013544
 800193c:	20005a00 	.word	0x20005a00
 8001940:	20000188 	.word	0x20000188
 8001944:	20006a04 	.word	0x20006a04
 8001948:	46fffe00 	.word	0x46fffe00
 800194c:	20000184 	.word	0x20000184
 8001950:	2000bb7c 	.word	0x2000bb7c
 8001954:	20000180 	.word	0x20000180

08001958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b094      	sub	sp, #80	; 0x50
 800195c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	2230      	movs	r2, #48	; 0x30
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f010 ff22 	bl	80127b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <SystemClock_Config+0xc8>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	4a26      	ldr	r2, [pc, #152]	; (8001a20 <SystemClock_Config+0xc8>)
 8001986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198a:	6413      	str	r3, [r2, #64]	; 0x40
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <SystemClock_Config+0xc8>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001998:	2300      	movs	r3, #0
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <SystemClock_Config+0xcc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <SystemClock_Config+0xcc>)
 80019a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <SystemClock_Config+0xcc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b4:	2301      	movs	r3, #1
 80019b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019be:	2302      	movs	r3, #2
 80019c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80019c8:	2319      	movs	r3, #25
 80019ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80019cc:	23c0      	movs	r3, #192	; 0xc0
 80019ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019d0:	2302      	movs	r3, #2
 80019d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019d4:	2304      	movs	r3, #4
 80019d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d8:	f107 0320 	add.w	r3, r7, #32
 80019dc:	4618      	mov	r0, r3
 80019de:	f006 fdd1 	bl	8008584 <HAL_RCC_OscConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019e8:	f000 f8fe 	bl	8001be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ec:	230f      	movs	r3, #15
 80019ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f0:	2302      	movs	r3, #2
 80019f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	2103      	movs	r1, #3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f007 f833 	bl	8008a74 <HAL_RCC_ClockConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a14:	f000 f8e8 	bl	8001be8 <Error_Handler>
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3750      	adds	r7, #80	; 0x50
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000

08001a28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <MX_SPI1_Init+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a74:	220a      	movs	r2, #10
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a7a:	f007 f9db 	bl	8008e34 <HAL_SPI_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a84:	f000 f8b0 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2000b21c 	.word	0x2000b21c
 8001a90:	40013000 	.word	0x40013000

08001a94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <MX_USART1_UART_Init+0x50>)
 8001a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001acc:	f008 f988 	bl	8009de0 <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ad6:	f000 f887 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000b334 	.word	0x2000b334
 8001ae4:	40011000 	.word	0x40011000

08001ae8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <MX_DMA_Init+0x4c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <MX_DMA_Init+0x4c>)
 8001af8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <MX_DMA_Init+0x4c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2038      	movs	r0, #56	; 0x38
 8001b10:	f004 fd8b 	bl	800662a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b14:	2038      	movs	r0, #56	; 0x38
 8001b16:	f004 fda4 	bl	8006662 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	203a      	movs	r0, #58	; 0x3a
 8001b20:	f004 fd83 	bl	800662a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b24:	203a      	movs	r0, #58	; 0x3a
 8001b26:	f004 fd9c 	bl	8006662 <HAL_NVIC_EnableIRQ>

}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800

08001b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <MX_GPIO_Init+0xa8>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a22      	ldr	r2, [pc, #136]	; (8001be0 <MX_GPIO_Init+0xa8>)
 8001b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <MX_GPIO_Init+0xa8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <MX_GPIO_Init+0xa8>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <MX_GPIO_Init+0xa8>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <MX_GPIO_Init+0xa8>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001b86:	2201      	movs	r2, #1
 8001b88:	2110      	movs	r1, #16
 8001b8a:	4816      	ldr	r0, [pc, #88]	; (8001be4 <MX_GPIO_Init+0xac>)
 8001b8c:	f005 fa78 	bl	8007080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b90:	2301      	movs	r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480f      	ldr	r0, [pc, #60]	; (8001be4 <MX_GPIO_Init+0xac>)
 8001ba6:	f005 f8e7 	bl	8006d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001baa:	2310      	movs	r3, #16
 8001bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4808      	ldr	r0, [pc, #32]	; (8001be4 <MX_GPIO_Init+0xac>)
 8001bc2:	f005 f8d9 	bl	8006d78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2006      	movs	r0, #6
 8001bcc:	f004 fd2d 	bl	800662a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bd0:	2006      	movs	r0, #6
 8001bd2:	f004 fd46 	bl	8006662 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3720      	adds	r7, #32
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020000 	.word	0x40020000

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bec:	b672      	cpsid	i
}
 8001bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <Error_Handler+0x8>

08001bf2 <CreateCommand>:
}



bool CreateCommand(uint8_t * command_buffer , uint8_t command_type, uint16_t scalePow, uint16_t SmaplRate, uint16_t numSamFram)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b087      	sub	sp, #28
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	4608      	mov	r0, r1
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4603      	mov	r3, r0
 8001c02:	72fb      	strb	r3, [r7, #11]
 8001c04:	460b      	mov	r3, r1
 8001c06:	813b      	strh	r3, [r7, #8]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	80fb      	strh	r3, [r7, #6]
 *	| AA | 55 | 5A | A5 | nul | TP || command_type |RATE[1]|RATE[0]|| scalePow[1]  || scalePow[0] || numSamFram[1] || numSamFram[0] || CheckSum[1]  || CheckSum[0] |
 *	|____|____|____|____|_____|____||______________|_______|_______||______________||_____________||_______________||_______________||______________||_____________|
 *    //////Header\\\\\\             ///////\\\\\\\ /// \\\ /// \\\   //////////scalePow\\\\\\\\\\  /////////NumSampleFram\\\\\\\\\   //////////CheckSum\\\\\\\\\\
 */

	uint16_t checkSum = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	82fb      	strh	r3, [r7, #22]



	//[0] : header
	*command_buffer = 0xAA;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	22aa      	movs	r2, #170	; 0xaa
 8001c14:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	8afb      	ldrh	r3, [r7, #22]
 8001c1e:	4413      	add	r3, r2
 8001c20:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3301      	adds	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]

	//[1] : header
	*command_buffer = 0x55;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2255      	movs	r2, #85	; 0x55
 8001c2c:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	8afb      	ldrh	r3, [r7, #22]
 8001c36:	4413      	add	r3, r2
 8001c38:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]

	//[2] : header
	*command_buffer = 0x5A;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	225a      	movs	r2, #90	; 0x5a
 8001c44:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	8afb      	ldrh	r3, [r7, #22]
 8001c4e:	4413      	add	r3, r2
 8001c50:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3301      	adds	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]

	//[3] : header
	*command_buffer = 0xA5;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	22a5      	movs	r2, #165	; 0xa5
 8001c5c:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	8afb      	ldrh	r3, [r7, #22]
 8001c66:	4413      	add	r3, r2
 8001c68:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]

/************************************************/

	//[4] : scale Power
	*command_buffer = scalePow;
 8001c70:	893b      	ldrh	r3, [r7, #8]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	8afb      	ldrh	r3, [r7, #22]
 8001c80:	4413      	add	r3, r2
 8001c82:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3301      	adds	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]

/************************************************/

	//[5] : TYPE PACKET
	*command_buffer = 0x15;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2215      	movs	r2, #21
 8001c8e:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	8afb      	ldrh	r3, [r7, #22]
 8001c98:	4413      	add	r3, r2
 8001c9a:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]

/************************************************/

	//[6] : command_type
	*command_buffer = command_type;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	7afa      	ldrb	r2, [r7, #11]
 8001ca6:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	8afb      	ldrh	r3, [r7, #22]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]

/************************************************/

	//[7] : SampleRate[1]
	*command_buffer = (SmaplRate & 0xff00) >> 8;
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	8afb      	ldrh	r3, [r7, #22]
 8001cce:	4413      	add	r3, r2
 8001cd0:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]


	//[8] : SampleRate[0]
	*command_buffer = (SmaplRate & 0x00ff);
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	8afb      	ldrh	r3, [r7, #22]
 8001ce8:	4413      	add	r3, r2
 8001cea:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]

/************************************************/


	//[9] : scalePow[1]
	*command_buffer = (scalePow & 0xff00) >> 8;
 8001cf2:	893b      	ldrh	r3, [r7, #8]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	8afb      	ldrh	r3, [r7, #22]
 8001d06:	4413      	add	r3, r2
 8001d08:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]


	//[10] : scalePow[0]
	*command_buffer = (scalePow & 0x00ff);
 8001d10:	893b      	ldrh	r3, [r7, #8]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	8afb      	ldrh	r3, [r7, #22]
 8001d20:	4413      	add	r3, r2
 8001d22:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3301      	adds	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]

/************************************************/


	//[11] : NumSamFram[1]
	*command_buffer = (numSamFram & 0xff00) >> 8;
 8001d2a:	8c3b      	ldrh	r3, [r7, #32]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	8afb      	ldrh	r3, [r7, #22]
 8001d3e:	4413      	add	r3, r2
 8001d40:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3301      	adds	r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]


	//[12] : NumSamFram[0]
	*command_buffer = (numSamFram & 0x00ff);
 8001d48:	8c3b      	ldrh	r3, [r7, #32]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	701a      	strb	r2, [r3, #0]
	checkSum += *command_buffer;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	8afb      	ldrh	r3, [r7, #22]
 8001d58:	4413      	add	r3, r2
 8001d5a:	82fb      	strh	r3, [r7, #22]
	command_buffer++;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]

/************************************************/

	//[13] : CheckSum[0]
	*command_buffer = (checkSum & 0xff00) >> 8;
 8001d62:	8afb      	ldrh	r3, [r7, #22]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	701a      	strb	r2, [r3, #0]
	command_buffer++;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3301      	adds	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]

	//[14] : CheckSum[1]
	*command_buffer = (checkSum & 0x00ff);
 8001d74:	8afb      	ldrh	r3, [r7, #22]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	701a      	strb	r2, [r3, #0]
	//BufferSample++;

	return 1;
 8001d7c:	2301      	movs	r3, #1
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <MAT_SendSamples>:
	}

	return MAT_OK;
}

MAT_StatusTypeDef MAT_SendSamples(float32_t *Samples, uint32_t numSample,  float32_t scale){
 8001d8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d8e:	b08b      	sub	sp, #44	; 0x2c
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d9a:	466b      	mov	r3, sp
 8001d9c:	461e      	mov	r6, r3

	#define LENGTH_PACKET	16

	int16_t  valSample   = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	83fb      	strh	r3, [r7, #30]
	uint32_t CheckSum    = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t sampleIndex = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
	uint16_t lengthPack  = (numSample * 2);
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	83bb      	strh	r3, [r7, #28]
	uint8_t  bufferTx[(numSample * 2) + 5];
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	1d59      	adds	r1, r3, #5
 8001db8:	460b      	mov	r3, r1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	4688      	mov	r8, r1
 8001dc2:	4699      	mov	r9, r3
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dd8:	2300      	movs	r3, #0
 8001dda:	460c      	mov	r4, r1
 8001ddc:	461d      	mov	r5, r3
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	00eb      	lsls	r3, r5, #3
 8001de8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dec:	00e2      	lsls	r2, r4, #3
 8001dee:	1dcb      	adds	r3, r1, #7
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	ebad 0d03 	sub.w	sp, sp, r3
 8001df8:	466b      	mov	r3, sp
 8001dfa:	3300      	adds	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]

	for(sampleIndex = 0 ; sampleIndex < lengthPack ; sampleIndex += 2){
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
 8001e02:	e02d      	b.n	8001e60 <MAT_SendSamples+0xd6>
		valSample = (int16_t)((*Samples) * scale);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	ed93 7a00 	vldr	s14, [r3]
 8001e0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e16:	ee17 3a90 	vmov	r3, s15
 8001e1a:	83fb      	strh	r3, [r7, #30]
		bufferTx[sampleIndex]   = (((int16_t)valSample) & 0xff00) >> 8;
 8001e1c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e20:	121b      	asrs	r3, r3, #8
 8001e22:	b2d9      	uxtb	r1, r3
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	4413      	add	r3, r2
 8001e2a:	460a      	mov	r2, r1
 8001e2c:	701a      	strb	r2, [r3, #0]
		bufferTx[sampleIndex+1] =  ((int16_t)valSample) & 0x00ff;
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	3301      	adds	r3, #1
 8001e32:	8bfa      	ldrh	r2, [r7, #30]
 8001e34:	b2d1      	uxtb	r1, r2
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	54d1      	strb	r1, [r2, r3]
		CheckSum = CheckSum + bufferTx[sampleIndex] + bufferTx[sampleIndex+1];
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	4413      	add	r3, r2
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	4413      	add	r3, r2
 8001e48:	6a3a      	ldr	r2, [r7, #32]
 8001e4a:	3201      	adds	r2, #1
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	5c8a      	ldrb	r2, [r1, r2]
 8001e50:	4413      	add	r3, r2
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
		Samples++;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3304      	adds	r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
	for(sampleIndex = 0 ; sampleIndex < lengthPack ; sampleIndex += 2){
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	623b      	str	r3, [r7, #32]
 8001e60:	8bbb      	ldrh	r3, [r7, #28]
 8001e62:	6a3a      	ldr	r2, [r7, #32]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d3cd      	bcc.n	8001e04 <MAT_SendSamples+0x7a>
	}

	bufferTx[lengthPack  ] = CheckSum >> 24;
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	0e1a      	lsrs	r2, r3, #24
 8001e6c:	8bbb      	ldrh	r3, [r7, #28]
 8001e6e:	b2d1      	uxtb	r1, r2
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	54d1      	strb	r1, [r2, r3]
	bufferTx[lengthPack+1] = CheckSum >> 16;
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	0c1a      	lsrs	r2, r3, #16
 8001e78:	8bbb      	ldrh	r3, [r7, #28]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	b2d1      	uxtb	r1, r2
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	54d1      	strb	r1, [r2, r3]
	bufferTx[lengthPack+2] = CheckSum >> 8;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	0a1a      	lsrs	r2, r3, #8
 8001e86:	8bbb      	ldrh	r3, [r7, #28]
 8001e88:	3302      	adds	r3, #2
 8001e8a:	b2d1      	uxtb	r1, r2
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	54d1      	strb	r1, [r2, r3]
	bufferTx[lengthPack+3] = CheckSum;
 8001e90:	8bbb      	ldrh	r3, [r7, #28]
 8001e92:	3303      	adds	r3, #3
 8001e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e96:	b2d1      	uxtb	r1, r2
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	54d1      	strb	r1, [r2, r3]
	bufferTx[lengthPack+4] = 0;
 8001e9c:	8bbb      	ldrh	r3, [r7, #28]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	54d1      	strb	r1, [r2, r3]


	lengthPack += 5;
 8001ea6:	8bbb      	ldrh	r3, [r7, #28]
 8001ea8:	3305      	adds	r3, #5
 8001eaa:	83bb      	strh	r3, [r7, #28]
	HAL_Delay(50);
 8001eac:	2032      	movs	r0, #50	; 0x32
 8001eae:	f004 fabd 	bl	800642c <HAL_Delay>
	CDC_Transmit_FS((uint8_t*)bufferTx, lengthPack);
 8001eb2:	8bbb      	ldrh	r3, [r7, #28]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f00f fd54 	bl	8011964 <CDC_Transmit_FS>
	HAL_Delay(500);
 8001ebc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ec0:	f004 fab4 	bl	800642c <HAL_Delay>

	return MAT_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	46b5      	mov	sp, r6
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	372c      	adds	r7, #44	; 0x2c
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001ed2 <MAT_EndSignal>:

MAT_StatusTypeDef MAT_EndSignal(void){
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b088      	sub	sp, #32
 8001ed6:	af02      	add	r7, sp, #8

	uint8_t  bufferTx[17] 	= {'\0'};
 8001ed8:	2300      	movs	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	f107 0308 	add.w	r3, r7, #8
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	731a      	strb	r2, [r3, #12]

	memset(bufferTx, '\0', LENGTH_COMMAND+1);
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	2210      	movs	r2, #16
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f010 fc5d 	bl	80127b0 <memset>
	CreateCommand(bufferTx, COM_END_SEND_SIGNAL, 0xff, 0xff, 0xff);
 8001ef6:	1d38      	adds	r0, r7, #4
 8001ef8:	23ff      	movs	r3, #255	; 0xff
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	23ff      	movs	r3, #255	; 0xff
 8001efe:	22ff      	movs	r2, #255	; 0xff
 8001f00:	2111      	movs	r1, #17
 8001f02:	f7ff fe76 	bl	8001bf2 <CreateCommand>
	CDC_Transmit_FS((uint8_t*)bufferTx, LENGTH_COMMAND);
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	210f      	movs	r1, #15
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f00f fd2a 	bl	8011964 <CDC_Transmit_FS>

	return MAT_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <SD_disk_status>:
#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"


DSTATUS SD_disk_status(BYTE drv) {
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <SD_disk_status+0x14>
        return STA_NOINIT;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <SD_disk_status+0x16>
    return 0;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <SD_disk_initialize+0x14>
        return STA_NOINIT;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e007      	b.n	8001f60 <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 8001f50:	f000 fe20 	bl	8002b94 <SD_SPI_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf14      	ite	ne
 8001f5a:	2301      	movne	r3, #1
 8001f5c:	2300      	moveq	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	4603      	mov	r3, r0
 8001f76:	73fb      	strb	r3, [r7, #15]
    if (pdrv != 0 || count == 0)
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <SD_disk_read+0x1c>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <SD_disk_read+0x20>
        return RES_PARERR;
 8001f84:	2304      	movs	r3, #4
 8001f86:	e010      	b.n	8001faa <SD_disk_read+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <SD_disk_read+0x4c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <SD_disk_read+0x2c>
 8001f90:	2303      	movs	r3, #3
 8001f92:	e00a      	b.n	8001faa <SD_disk_read+0x42>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	68b8      	ldr	r0, [r7, #8]
 8001f9a:	f000 feed 	bl	8002d78 <SD_ReadBlocks>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf14      	ite	ne
 8001fa4:	2301      	movne	r3, #1
 8001fa6:	2300      	moveq	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000bb91 	.word	0x2000bb91

08001fb8 <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  BYTE *buff, DWORD sector, UINT count) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count) return RES_PARERR;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <SD_disk_write+0x1c>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <SD_disk_write+0x20>
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	e010      	b.n	8001ffa <SD_disk_write+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <SD_disk_write+0x4c>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <SD_disk_write+0x2c>
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e00a      	b.n	8001ffa <SD_disk_write+0x42>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	68b8      	ldr	r0, [r7, #8]
 8001fea:	f000 ff99 	bl	8002f20 <SD_WriteBlocks>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf14      	ite	ne
 8001ff4:	2301      	movne	r3, #1
 8001ff6:	2300      	moveq	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	2000bb91 	.word	0x2000bb91

08002008 <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	603a      	str	r2, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
 8002014:	460b      	mov	r3, r1
 8002016:	71bb      	strb	r3, [r7, #6]
    if (pdrv != 0)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SD_disk_ioctl+0x1a>
        return RES_PARERR;
 800201e:	2304      	movs	r3, #4
 8002020:	e022      	b.n	8002068 <SD_disk_ioctl+0x60>

    switch (cmd) {
 8002022:	79bb      	ldrb	r3, [r7, #6]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d81e      	bhi.n	8002066 <SD_disk_ioctl+0x5e>
 8002028:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <SD_disk_ioctl+0x28>)
 800202a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202e:	bf00      	nop
 8002030:	08002041 	.word	0x08002041
 8002034:	08002051 	.word	0x08002051
 8002038:	08002045 	.word	0x08002045
 800203c:	0800205d 	.word	0x0800205d
    case CTRL_SYNC:
        return RES_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	e011      	b.n	8002068 <SD_disk_ioctl+0x60>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800204a:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	e00b      	b.n	8002068 <SD_disk_ioctl+0x60>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002056:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	e005      	b.n	8002068 <SD_disk_ioctl+0x60>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	e000      	b.n	8002068 <SD_disk_ioctl+0x60>
    default:
        return RES_PARERR;
 8002066:	2304      	movs	r3, #4
    }
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <WAVFIL_Start_Write>:
uint32_t W_WavremainData = 0;




WAV_StatusTypeDef WAVFIL_Start_Write(const char *filename, uint32_t sizeByteFile, uint32_t samRat){
 8002074:	b580      	push	{r7, lr}
 8002076:	b096      	sub	sp, #88	; 0x58
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]


	UINT bytesWritten;
	WAVHeader w_header;

	memcpy(w_header.ChunkID, "RIFF", 4);
 8002080:	4b32      	ldr	r3, [pc, #200]	; (800214c <WAVFIL_Start_Write+0xd8>)
 8002082:	617b      	str	r3, [r7, #20]

	w_header.ChunkSize = sizeByteFile + WAVE_HED_SIZ - 8;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3334      	adds	r3, #52	; 0x34
 8002088:	61bb      	str	r3, [r7, #24]

	memcpy(w_header.Format, "WAVE", 4);
 800208a:	4b31      	ldr	r3, [pc, #196]	; (8002150 <WAVFIL_Start_Write+0xdc>)
 800208c:	61fb      	str	r3, [r7, #28]

	memcpy(w_header.Subchunk1ID, "fmt ", 4);
 800208e:	4b31      	ldr	r3, [pc, #196]	; (8002154 <WAVFIL_Start_Write+0xe0>)
 8002090:	623b      	str	r3, [r7, #32]

	w_header.Subchunk1Size = 16;
 8002092:	2310      	movs	r3, #16
 8002094:	627b      	str	r3, [r7, #36]	; 0x24

	w_header.AudioFormat = 1;
 8002096:	2301      	movs	r3, #1
 8002098:	853b      	strh	r3, [r7, #40]	; 0x28

	w_header.NumChannels = 1;
 800209a:	2301      	movs	r3, #1
 800209c:	857b      	strh	r3, [r7, #42]	; 0x2a

	w_header.SampleRate = samRat;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	w_header.BitsPerSample = 16;
 80020a2:	2310      	movs	r3, #16
 80020a4:	86fb      	strh	r3, [r7, #54]	; 0x36

	w_header.ByteRate = w_header.SampleRate * w_header.NumChannels * w_header.BitsPerSample / 8;
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80020b0:	fb02 f303 	mul.w	r3, r2, r3
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30

	w_header.BlockAlign = w_header.NumChannels * w_header.BitsPerSample / 8;
 80020b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80020bc:	fb02 f303 	mul.w	r3, r2, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	da00      	bge.n	80020c6 <WAVFIL_Start_Write+0x52>
 80020c4:	3307      	adds	r3, #7
 80020c6:	10db      	asrs	r3, r3, #3
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	86bb      	strh	r3, [r7, #52]	; 0x34

	memcpy(w_header.ExtraChunkID, "IDIT", 4);
 80020cc:	4b22      	ldr	r3, [pc, #136]	; (8002158 <WAVFIL_Start_Write+0xe4>)
 80020ce:	63bb      	str	r3, [r7, #56]	; 0x38

	w_header.ExtraChunkSize = 8;
 80020d0:	2308      	movs	r3, #8
 80020d2:	63fb      	str	r3, [r7, #60]	; 0x3c

	memcpy(w_header.ExtraChunkData, "abcdefg", 8);   // Payload
 80020d4:	4a21      	ldr	r2, [pc, #132]	; (800215c <WAVFIL_Start_Write+0xe8>)
 80020d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020de:	e883 0003 	stmia.w	r3, {r0, r1}

	memcpy(w_header.Subchunk2ID, "data", 4);
 80020e2:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <WAVFIL_Start_Write+0xec>)
 80020e4:	64bb      	str	r3, [r7, #72]	; 0x48

	w_header.Subchunk2Size = sizeByteFile;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	64fb      	str	r3, [r7, #76]	; 0x4c


	resl = f_open(&w_filwav, filename, FA_WRITE | FA_CREATE_ALWAYS);
 80020ea:	220a      	movs	r2, #10
 80020ec:	68f9      	ldr	r1, [r7, #12]
 80020ee:	481d      	ldr	r0, [pc, #116]	; (8002164 <WAVFIL_Start_Write+0xf0>)
 80020f0:	f00d ffd2 	bl	8010098 <f_open>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <WAVFIL_Start_Write+0xf4>)
 80020fa:	701a      	strb	r2, [r3, #0]
	if (resl != FR_OK)
 80020fc:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <WAVFIL_Start_Write+0xf4>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <WAVFIL_Start_Write+0x98>
	{
		sd_unmount();
 8002104:	f000 fc18 	bl	8002938 <sd_unmount>
		return WAV_ERROR_F_OPEN;
 8002108:	2303      	movs	r3, #3
 800210a:	e01a      	b.n	8002142 <WAVFIL_Start_Write+0xce>
	}

	resl = f_write(&w_filwav, &w_header.raw, WAVE_HED_SIZ, &bytesWritten);
 800210c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002110:	f107 0114 	add.w	r1, r7, #20
 8002114:	223c      	movs	r2, #60	; 0x3c
 8002116:	4813      	ldr	r0, [pc, #76]	; (8002164 <WAVFIL_Start_Write+0xf0>)
 8002118:	f00e facb 	bl	80106b2 <f_write>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <WAVFIL_Start_Write+0xf4>)
 8002122:	701a      	strb	r2, [r3, #0]
	if (resl != FR_OK  ||  bytesWritten != WAVE_HED_SIZ)
 8002124:	4b10      	ldr	r3, [pc, #64]	; (8002168 <WAVFIL_Start_Write+0xf4>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <WAVFIL_Start_Write+0xbe>
 800212c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212e:	2b3c      	cmp	r3, #60	; 0x3c
 8002130:	d003      	beq.n	800213a <WAVFIL_Start_Write+0xc6>
	{
		sd_unmount();
 8002132:	f000 fc01 	bl	8002938 <sd_unmount>
		return WAV_ERROR_F_WRIT;
 8002136:	2307      	movs	r3, #7
 8002138:	e003      	b.n	8002142 <WAVFIL_Start_Write+0xce>
	}

	W_WavremainData = sizeByteFile;
 800213a:	4a0c      	ldr	r2, [pc, #48]	; (800216c <WAVFIL_Start_Write+0xf8>)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	6013      	str	r3, [r2, #0]



	return WAV_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3758      	adds	r7, #88	; 0x58
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	46464952 	.word	0x46464952
 8002150:	45564157 	.word	0x45564157
 8002154:	20746d66 	.word	0x20746d66
 8002158:	54494449 	.word	0x54494449
 800215c:	08013554 	.word	0x08013554
 8002160:	61746164 	.word	0x61746164
 8002164:	2000b7e4 	.word	0x2000b7e4
 8002168:	2000bb30 	.word	0x2000bb30
 800216c:	2000bb84 	.word	0x2000bb84

08002170 <WAVFIL_Give_Write>:



WAV_StatusTypeDef WAVFIL_Give_Write(float32_t *puerData, uint16_t frame){
 8002170:	b580      	push	{r7, lr}
 8002172:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 8002176:	af00      	add	r7, sp, #0
 8002178:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800217c:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8002180:	6018      	str	r0, [r3, #0]
 8002182:	460a      	mov	r2, r1
 8002184:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002188:	f6a3 0326 	subw	r3, r3, #2086	; 0x826
 800218c:	801a      	strh	r2, [r3, #0]

	UINT 	  bytesWritten;
	uint32_t  writeNum = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
	uint8_t   w_rawdata[WAVE_DAT_RED_SIZ+1] = {'\0'};
 8002194:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002198:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	3304      	adds	r3, #4
 80021a2:	f240 72fd 	movw	r2, #2045	; 0x7fd
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f010 fb01 	bl	80127b0 <memset>
//	float32_t f_sample = 0;
//	int16_t   i_sample = 0;
//	uint16_t  u_sample = 0;
	int8_t   sizeFram = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
	uint32_t  indexWrite = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
	float32_t valSample = 0;
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80021c2:	6013      	str	r3, [r2, #0]


	for(int i = 0; i < (frame * 2); i=i+2){
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 80021ca:	e069      	b.n	80022a0 <WAVFIL_Give_Write+0x130>

		valSample = *puerData;
 80021cc:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80021d0:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80021dc:	6013      	str	r3, [r2, #0]

		if(valSample >  1.0f)
 80021de:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f2:	dd04      	ble.n	80021fe <WAVFIL_Give_Write+0x8e>
			valSample =  1.0f;
 80021f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80021f8:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80021fc:	6013      	str	r3, [r2, #0]
		if(valSample < -1.0f)
 80021fe:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800220a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002212:	d503      	bpl.n	800221c <WAVFIL_Give_Write+0xac>
			valSample = -1.0f;
 8002214:	4b68      	ldr	r3, [pc, #416]	; (80023b8 <WAVFIL_Give_Write+0x248>)
 8002216:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800221a:	6013      	str	r3, [r2, #0]

		valSample = valSample * NORMALISE;
 800221c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80023bc <WAVFIL_Give_Write+0x24c>
 8002228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800222c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8002230:	edc3 7a00 	vstr	s15, [r3]

		w_rawdata[i]   =  ((int16_t)valSample) & 0x00ff;
 8002234:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002240:	ee17 3a90 	vmov	r3, s15
 8002244:	b21b      	sxth	r3, r3
 8002246:	b2d9      	uxtb	r1, r3
 8002248:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800224c:	f6a3 021c 	subw	r2, r3, #2076	; 0x81c
 8002250:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002254:	4413      	add	r3, r2
 8002256:	460a      	mov	r2, r1
 8002258:	701a      	strb	r2, [r3, #0]
		w_rawdata[i+1] = (((int16_t)valSample) & 0xff00) >> 8;
 800225a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800225e:	edd3 7a00 	vldr	s15, [r3]
 8002262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002266:	ee17 3a90 	vmov	r3, s15
 800226a:	b21b      	sxth	r3, r3
 800226c:	121a      	asrs	r2, r3, #8
 800226e:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002272:	3301      	adds	r3, #1
 8002274:	b2d1      	uxtb	r1, r2
 8002276:	f507 6203 	add.w	r2, r7, #2096	; 0x830
 800227a:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 800227e:	54d1      	strb	r1, [r2, r3]
		puerData++;
 8002280:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002284:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8002288:	f507 6203 	add.w	r2, r7, #2096	; 0x830
 800228c:	f6a2 0224 	subw	r2, r2, #2084	; 0x824
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	3204      	adds	r2, #4
 8002294:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < (frame * 2); i=i+2){
 8002296:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 800229a:	3302      	adds	r3, #2
 800229c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 80022a0:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80022a4:	f6a3 0326 	subw	r3, r3, #2086	; 0x826
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 80022b0:	429a      	cmp	r2, r3
 80022b2:	db8b      	blt.n	80021cc <WAVFIL_Give_Write+0x5c>
//	}
//	W_WavremainData = W_WavremainData - bytesWritten;
//	*NumByteWrite = bytesWritten;


	if(W_WavremainData >= (frame * 2))
 80022b4:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80022b8:	f6a3 0326 	subw	r3, r3, #2086	; 0x826
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b3f      	ldr	r3, [pc, #252]	; (80023c0 <WAVFIL_Give_Write+0x250>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d80c      	bhi.n	80022e4 <WAVFIL_Give_Write+0x174>
		sizeFram = (frame * 2) / 1024;
 80022ca:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80022ce:	f6a3 0326 	subw	r3, r3, #2086	; 0x826
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	da01      	bge.n	80022dc <WAVFIL_Give_Write+0x16c>
 80022d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80022dc:	125b      	asrs	r3, r3, #9
 80022de:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
 80022e2:	e016      	b.n	8002312 <WAVFIL_Give_Write+0x1a2>
	else{
		sizeFram = ceilf((float32_t)W_WavremainData / 1024.0f);
 80022e4:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <WAVFIL_Give_Write+0x250>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	ee07 3a90 	vmov	s15, r3
 80022ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f0:	eddf 6a34 	vldr	s13, [pc, #208]	; 80023c4 <WAVFIL_Give_Write+0x254>
 80022f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022f8:	eeb0 0a47 	vmov.f32	s0, s14
 80022fc:	f010 ff46 	bl	801318c <ceilf>
 8002300:	eef0 7a40 	vmov.f32	s15, s0
 8002304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002308:	edc7 7a01 	vstr	s15, [r7, #4]
 800230c:	793b      	ldrb	r3, [r7, #4]
 800230e:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
	}

	indexWrite = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
	while(sizeFram > 0)
 8002318:	e043      	b.n	80023a2 <WAVFIL_Give_Write+0x232>
	{
		if(W_WavremainData > 1024)
 800231a:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <WAVFIL_Give_Write+0x250>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002322:	d904      	bls.n	800232e <WAVFIL_Give_Write+0x1be>
		{
			writeNum = 1024;
 8002324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002328:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 800232c:	e006      	b.n	800233c <WAVFIL_Give_Write+0x1cc>
		}
		else
		{
			writeNum = W_WavremainData;
 800232e:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <WAVFIL_Give_Write+0x250>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
			sizeFram = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
		}

		resl = f_write(&w_filwav, &w_rawdata[indexWrite], writeNum, &bytesWritten);
 800233c:	f107 0214 	add.w	r2, r7, #20
 8002340:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8002344:	18d1      	adds	r1, r2, r3
 8002346:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800234a:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 800234e:	481e      	ldr	r0, [pc, #120]	; (80023c8 <WAVFIL_Give_Write+0x258>)
 8002350:	f00e f9af 	bl	80106b2 <f_write>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <WAVFIL_Give_Write+0x25c>)
 800235a:	701a      	strb	r2, [r3, #0]
		if (resl != FR_OK  ||  bytesWritten != writeNum) {
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <WAVFIL_Give_Write+0x25c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d105      	bne.n	8002370 <WAVFIL_Give_Write+0x200>
 8002364:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002368:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 800236c:	429a      	cmp	r2, r3
 800236e:	d003      	beq.n	8002378 <WAVFIL_Give_Write+0x208>
			sd_unmount();
 8002370:	f000 fae2 	bl	8002938 <sd_unmount>
			return WAV_ERROR_F_WRIT;
 8002374:	2307      	movs	r3, #7
 8002376:	e019      	b.n	80023ac <WAVFIL_Give_Write+0x23c>
		}
		sizeFram--;
 8002378:	f997 382b 	ldrsb.w	r3, [r7, #2091]	; 0x82b
 800237c:	b2db      	uxtb	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
		indexWrite = indexWrite + bytesWritten;
 8002386:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800238a:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 800238e:	4413      	add	r3, r2
 8002390:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
		W_WavremainData = W_WavremainData - bytesWritten;
 8002394:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <WAVFIL_Give_Write+0x250>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <WAVFIL_Give_Write+0x250>)
 80023a0:	6013      	str	r3, [r2, #0]
	while(sizeFram > 0)
 80023a2:	f997 382b 	ldrsb.w	r3, [r7, #2091]	; 0x82b
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	dcb7      	bgt.n	800231a <WAVFIL_Give_Write+0x1aa>

	}


	return WAV_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	f507 6703 	add.w	r7, r7, #2096	; 0x830
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	bf800000 	.word	0xbf800000
 80023bc:	47000000 	.word	0x47000000
 80023c0:	2000bb84 	.word	0x2000bb84
 80023c4:	44800000 	.word	0x44800000
 80023c8:	2000b7e4 	.word	0x2000b7e4
 80023cc:	2000bb30 	.word	0x2000bb30

080023d0 <WAVFIL_End_Write>:

WAV_StatusTypeDef WAVFIL_End_Write(void){
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0

	f_close(&w_filwav);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <WAVFIL_End_Write+0x10>)
 80023d6:	f00e fb5f 	bl	8010a98 <f_close>

	return WAV_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	2000b7e4 	.word	0x2000b7e4

080023e4 <WAVFIL_Start_Read>:





WAV_StatusTypeDef WAVFIL_Start_Read(const char *filename){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b092      	sub	sp, #72	; 0x48
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

	R_WavSize 		= 0;
 80023ec:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <WAVFIL_Start_Read+0xe0>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
	R_WavDataNum 	= 0;
 80023f2:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <WAVFIL_Start_Read+0xe4>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
	R_WavremainData = 0;
 80023f8:	4b34      	ldr	r3, [pc, #208]	; (80024cc <WAVFIL_Start_Read+0xe8>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
	R_WavSamRat		= 0;
 80023fe:	4b34      	ldr	r3, [pc, #208]	; (80024d0 <WAVFIL_Start_Read+0xec>)
 8002400:	2200      	movs	r2, #0
 8002402:	801a      	strh	r2, [r3, #0]
	memset(BufHeader, '\0', WAVE_HED_SIZ+1);
 8002404:	223d      	movs	r2, #61	; 0x3d
 8002406:	2100      	movs	r1, #0
 8002408:	4832      	ldr	r0, [pc, #200]	; (80024d4 <WAVFIL_Start_Read+0xf0>)
 800240a:	f010 f9d1 	bl	80127b0 <memset>

	WAVHeader r_header;


	// Read size file
	resl = f_stat(filename, &fno);
 800240e:	4932      	ldr	r1, [pc, #200]	; (80024d8 <WAVFIL_Start_Read+0xf4>)
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f00e fb6b 	bl	8010aec <f_stat>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	4b30      	ldr	r3, [pc, #192]	; (80024dc <WAVFIL_Start_Read+0xf8>)
 800241c:	701a      	strb	r2, [r3, #0]
	if (resl != FR_OK)
 800241e:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <WAVFIL_Start_Read+0xf8>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <WAVFIL_Start_Read+0x4a>
	{
		sd_unmount();
 8002426:	f000 fa87 	bl	8002938 <sd_unmount>
		return WAV_ERROR_F_STAT;
 800242a:	2304      	movs	r3, #4
 800242c:	e045      	b.n	80024ba <WAVFIL_Start_Read+0xd6>
	}
	R_WavSize = fno.fsize;
 800242e:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <WAVFIL_Start_Read+0xf4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <WAVFIL_Start_Read+0xe0>)
 8002434:	6013      	str	r3, [r2, #0]


	if (f_open(&r_filwav, filename, FA_READ) != FR_OK)
 8002436:	2201      	movs	r2, #1
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4829      	ldr	r0, [pc, #164]	; (80024e0 <WAVFIL_Start_Read+0xfc>)
 800243c:	f00d fe2c 	bl	8010098 <f_open>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <WAVFIL_Start_Read+0x6a>
	{
		sd_unmount();
 8002446:	f000 fa77 	bl	8002938 <sd_unmount>
		return WAV_ERROR_F_OPEN;
 800244a:	2303      	movs	r3, #3
 800244c:	e035      	b.n	80024ba <WAVFIL_Start_Read+0xd6>
	}

	// Read header
	resl = f_read(&r_filwav, r_header.raw, WAVE_HED_SIZ, &bytes_read);
 800244e:	f107 0108 	add.w	r1, r7, #8
 8002452:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <WAVFIL_Start_Read+0x100>)
 8002454:	223c      	movs	r2, #60	; 0x3c
 8002456:	4822      	ldr	r0, [pc, #136]	; (80024e0 <WAVFIL_Start_Read+0xfc>)
 8002458:	f00d ffec 	bl	8010434 <f_read>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <WAVFIL_Start_Read+0xf8>)
 8002462:	701a      	strb	r2, [r3, #0]
    if (resl != FR_OK || bytes_read != WAVE_HED_SIZ) {
 8002464:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <WAVFIL_Start_Read+0xf8>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d103      	bne.n	8002474 <WAVFIL_Start_Read+0x90>
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <WAVFIL_Start_Read+0x100>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b3c      	cmp	r3, #60	; 0x3c
 8002472:	d006      	beq.n	8002482 <WAVFIL_Start_Read+0x9e>
        f_close(&r_filwav);
 8002474:	481a      	ldr	r0, [pc, #104]	; (80024e0 <WAVFIL_Start_Read+0xfc>)
 8002476:	f00e fb0f 	bl	8010a98 <f_close>
        sd_unmount();
 800247a:	f000 fa5d 	bl	8002938 <sd_unmount>
        return WAV_ERROR_F_READ;
 800247e:	2305      	movs	r3, #5
 8002480:	e01b      	b.n	80024ba <WAVFIL_Start_Read+0xd6>
    }

    //  Header check
    if(memcmp(r_header.ChunkID, "RIFF", 4) || r_header.ChunkSize != (R_WavSize-8) ||
       memcmp(r_header.Format , "WAVE", 4) || memcmp(r_header.Subchunk1ID, "fmt ", 4) ||
	   memcmp(r_header.ExtraChunkID , "IDIT", 4) || r_header.BitsPerSample != 16,
 8002482:	f107 0308 	add.w	r3, r7, #8
 8002486:	3334      	adds	r3, #52	; 0x34
 8002488:	2204      	movs	r2, #4
 800248a:	4917      	ldr	r1, [pc, #92]	; (80024e8 <WAVFIL_Start_Read+0x104>)
 800248c:	4618      	mov	r0, r3
 800248e:	f010 f97f 	bl	8012790 <memcmp>
 8002492:	4603      	mov	r3, r0
    if(memcmp(r_header.ChunkID, "RIFF", 4) || r_header.ChunkSize != (R_WavSize-8) ||
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <WAVFIL_Start_Read+0xbc>
	   memcmp(r_header.Subchunk2ID , "data", 4)){

    	sd_unmount();
 8002498:	f000 fa4e 	bl	8002938 <sd_unmount>
    	return WAV_ERROR_HEADER;
 800249c:	2306      	movs	r3, #6
 800249e:	e00c      	b.n	80024ba <WAVFIL_Start_Read+0xd6>
    }


	R_WavSamRat  	  = r_header.SampleRate;
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <WAVFIL_Start_Read+0xec>)
 80024a6:	801a      	strh	r2, [r3, #0]
	R_WavDataNum 	  = R_WavSize - (WAVE_HED_SIZ);
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <WAVFIL_Start_Read+0xe0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3b3c      	subs	r3, #60	; 0x3c
 80024ae:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <WAVFIL_Start_Read+0xe4>)
 80024b0:	6013      	str	r3, [r2, #0]
//	R_WavremainData   = R_WavDataNum;

	R_WavremainData = r_header.Subchunk2Size;
 80024b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b4:	4a05      	ldr	r2, [pc, #20]	; (80024cc <WAVFIL_Start_Read+0xe8>)
 80024b6:	6013      	str	r3, [r2, #0]
//		sd_unmount();
//		return WAV_ERROR_HEADER;
//	}


	return WAV_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3748      	adds	r7, #72	; 0x48
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2000bb74 	.word	0x2000bb74
 80024c8:	2000bb78 	.word	0x2000bb78
 80024cc:	2000bb7c 	.word	0x2000bb7c
 80024d0:	2000bb80 	.word	0x2000bb80
 80024d4:	2000bb34 	.word	0x2000bb34
 80024d8:	2000ba18 	.word	0x2000ba18
 80024dc:	2000bb30 	.word	0x2000bb30
 80024e0:	2000b5b4 	.word	0x2000b5b4
 80024e4:	2000ba14 	.word	0x2000ba14
 80024e8:	0801355c 	.word	0x0801355c

080024ec <WAVFIL_Catch_Data>:


WAV_StatusTypeDef WAVFIL_Catch_Data(float32_t *dataBuf, uint32_t *puerData, uint16_t frame){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80024f8:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 80024fc:	6018      	str	r0, [r3, #0]
 80024fe:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002502:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 8002506:	6019      	str	r1, [r3, #0]
 8002508:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800250c:	f6a3 032a 	subw	r3, r3, #2090	; 0x82a
 8002510:	801a      	strh	r2, [r3, #0]

	UINT     bytes_read = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	uint32_t readNum 	= 0;
 8002518:	2300      	movs	r3, #0
 800251a:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
	uint16_t dataReadSize = frame * 2;
 800251e:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002522:	f6a3 032a 	subw	r3, r3, #2090	; 0x82a
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e
	uint8_t  r_rawData[WAVE_DAT_RED_SIZ+1] = {'\0'};
 800252e:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002532:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	3304      	adds	r3, #4
 800253c:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f010 f934 	bl	80127b0 <memset>
	int8_t   sizeFram = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
	uint32_t indexRead = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
//		return WAV_ERROR_F_READ;
//	}



	if(R_WavremainData >= dataReadSize)
 8002554:	f8b7 281e 	ldrh.w	r2, [r7, #2078]	; 0x81e
 8002558:	4b6c      	ldr	r3, [pc, #432]	; (800270c <WAVFIL_Catch_Data+0x220>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d80c      	bhi.n	800257a <WAVFIL_Catch_Data+0x8e>
		sizeFram = dataReadSize / frame;
 8002560:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002564:	f6a3 032a 	subw	r3, r3, #2090	; 0x82a
 8002568:	f8b7 281e 	ldrh.w	r2, [r7, #2078]	; 0x81e
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002572:	b29b      	uxth	r3, r3
 8002574:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
 8002578:	e01d      	b.n	80025b6 <WAVFIL_Catch_Data+0xca>
	else{
		sizeFram = ceilf((float32_t)R_WavremainData / (float32_t)frame);
 800257a:	4b64      	ldr	r3, [pc, #400]	; (800270c <WAVFIL_Catch_Data+0x220>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002586:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800258a:	f6a3 032a 	subw	r3, r3, #2090	; 0x82a
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	ee07 3a90 	vmov	s15, r3
 8002594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002598:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800259c:	eeb0 0a66 	vmov.f32	s0, s13
 80025a0:	f010 fdf4 	bl	801318c <ceilf>
 80025a4:	eef0 7a40 	vmov.f32	s15, s0
 80025a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ac:	edc7 7a00 	vstr	s15, [r7]
 80025b0:	783b      	ldrb	r3, [r7, #0]
 80025b2:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
	}

	indexRead = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
	while(sizeFram > 0)
 80025bc:	e04a      	b.n	8002654 <WAVFIL_Catch_Data+0x168>
	{
		if(R_WavremainData > frame)
 80025be:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80025c2:	f6a3 032a 	subw	r3, r3, #2090	; 0x82a
 80025c6:	881a      	ldrh	r2, [r3, #0]
 80025c8:	4b50      	ldr	r3, [pc, #320]	; (800270c <WAVFIL_Catch_Data+0x220>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d207      	bcs.n	80025e0 <WAVFIL_Catch_Data+0xf4>
		{
			readNum = frame;
 80025d0:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80025d4:	f6a3 032a 	subw	r3, r3, #2090	; 0x82a
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 80025de:	e006      	b.n	80025ee <WAVFIL_Catch_Data+0x102>
		}
		else
		{
			readNum = R_WavremainData;
 80025e0:	4b4a      	ldr	r3, [pc, #296]	; (800270c <WAVFIL_Catch_Data+0x220>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
			sizeFram = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
		}

		resl = f_read(&r_filwav, &r_rawData[indexRead], readNum, &bytes_read);
 80025ee:	f107 0214 	add.w	r2, r7, #20
 80025f2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80025f6:	18d1      	adds	r1, r2, r3
 80025f8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80025fc:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8002600:	4843      	ldr	r0, [pc, #268]	; (8002710 <WAVFIL_Catch_Data+0x224>)
 8002602:	f00d ff17 	bl	8010434 <f_read>
 8002606:	4603      	mov	r3, r0
 8002608:	461a      	mov	r2, r3
 800260a:	4b42      	ldr	r3, [pc, #264]	; (8002714 <WAVFIL_Catch_Data+0x228>)
 800260c:	701a      	strb	r2, [r3, #0]
		if (resl != FR_OK  ||  bytes_read != readNum) {
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <WAVFIL_Catch_Data+0x228>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d105      	bne.n	8002622 <WAVFIL_Catch_Data+0x136>
 8002616:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800261a:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 800261e:	429a      	cmp	r2, r3
 8002620:	d003      	beq.n	800262a <WAVFIL_Catch_Data+0x13e>
			sd_unmount();
 8002622:	f000 f989 	bl	8002938 <sd_unmount>
			return WAV_ERROR_F_READ;
 8002626:	2305      	movs	r3, #5
 8002628:	e06b      	b.n	8002702 <WAVFIL_Catch_Data+0x216>
		}
		sizeFram--;
 800262a:	f997 382b 	ldrsb.w	r3, [r7, #2091]	; 0x82b
 800262e:	b2db      	uxtb	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f887 382b 	strb.w	r3, [r7, #2091]	; 0x82b
		indexRead = indexRead + bytes_read;
 8002638:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800263c:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8002640:	4413      	add	r3, r2
 8002642:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
		R_WavremainData = R_WavremainData - bytes_read;
 8002646:	4b31      	ldr	r3, [pc, #196]	; (800270c <WAVFIL_Catch_Data+0x220>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	4a2e      	ldr	r2, [pc, #184]	; (800270c <WAVFIL_Catch_Data+0x220>)
 8002652:	6013      	str	r3, [r2, #0]
	while(sizeFram > 0)
 8002654:	f997 382b 	ldrsb.w	r3, [r7, #2091]	; 0x82b
 8002658:	2b00      	cmp	r3, #0
 800265a:	dcb0      	bgt.n	80025be <WAVFIL_Catch_Data+0xd2>
	}




	*puerData = 0;
 800265c:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002660:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < dataReadSize; i = i+2){
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 8002670:	e040      	b.n	80026f4 <WAVFIL_Catch_Data+0x208>
		*dataBuf = ((float32_t)((int16_t)(((int16_t)r_rawData[i+1]) << 8  |  r_rawData[i]))) / NORMALISE;
 8002672:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8002676:	3301      	adds	r3, #1
 8002678:	f507 6203 	add.w	r2, r7, #2096	; 0x830
 800267c:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	b21a      	sxth	r2, r3
 8002686:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800268a:	f6a3 011c 	subw	r1, r3, #2076	; 0x81c
 800268e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8002692:	440b      	add	r3, r1
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	b21b      	sxth	r3, r3
 8002698:	4313      	orrs	r3, r2
 800269a:	b21b      	sxth	r3, r3
 800269c:	ee07 3a90 	vmov	s15, r3
 80026a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026a4:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002718 <WAVFIL_Catch_Data+0x22c>
 80026a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ac:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80026b0:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	edc3 7a00 	vstr	s15, [r3]
		dataBuf++;
 80026ba:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80026be:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 80026c2:	f507 6203 	add.w	r2, r7, #2096	; 0x830
 80026c6:	f6a2 0224 	subw	r2, r2, #2084	; 0x824
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	3204      	adds	r2, #4
 80026ce:	601a      	str	r2, [r3, #0]
		*puerData = *puerData + 1;
 80026d0:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80026d4:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80026e2:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < dataReadSize; i = i+2){
 80026ea:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80026ee:	3302      	adds	r3, #2
 80026f0:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 80026f4:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	; 0x81e
 80026f8:	f8d7 2820 	ldr.w	r2, [r7, #2080]	; 0x820
 80026fc:	429a      	cmp	r2, r3
 80026fe:	dbb8      	blt.n	8002672 <WAVFIL_Catch_Data+0x186>
	}


	return WAV_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	f507 6703 	add.w	r7, r7, #2096	; 0x830
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	2000bb7c 	.word	0x2000bb7c
 8002710:	2000b5b4 	.word	0x2000b5b4
 8002714:	2000bb30 	.word	0x2000bb30
 8002718:	47000000 	.word	0x47000000

0800271c <WAVFIL_End_Read>:


WAV_StatusTypeDef WAVFIL_End_Read(void){
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0

	f_close(&r_filwav);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <WAVFIL_End_Read+0x10>)
 8002722:	f00e f9b9 	bl	8010a98 <f_close>
	return WAV_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd80      	pop	{r7, pc}
 800272c:	2000b5b4 	.word	0x2000b5b4

08002730 <sd_format>:
*/




int sd_format(void) {
 8002730:	b580      	push	{r7, lr}
 8002732:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8002736:	af02      	add	r7, sp, #8
    FRESULT res;
    BYTE work[512];

    res = f_mkfs(sd_path, FM_FAT32, 0, work, sizeof(work));
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273e:	9200      	str	r2, [sp, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	2102      	movs	r1, #2
 8002744:	480b      	ldr	r0, [pc, #44]	; (8002774 <sd_format+0x44>)
 8002746:	f00e facf 	bl	8010ce8 <f_mkfs>
 800274a:	4603      	mov	r3, r0
 800274c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    if (res != FR_OK) {
 8002750:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <sd_format+0x34>
        printf("Format failed: f_mkfs returned %d\r\n", res);
 8002758:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800275c:	4619      	mov	r1, r3
 800275e:	4806      	ldr	r0, [pc, #24]	; (8002778 <sd_format+0x48>)
 8002760:	f00f fed0 	bl	8012504 <iprintf>
    }
    return res;
 8002764:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
}
 8002768:	4618      	mov	r0, r3
 800276a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000b37c 	.word	0x2000b37c
 8002778:	08013564 	.word	0x08013564

0800277c <sd_get_space_kb>:

int sd_get_space_kb(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
    FATFS *pfs;
    DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
    FRESULT res = f_getfree(sd_path, &fre_clust, &pfs);
 8002782:	f107 0208 	add.w	r2, r7, #8
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	4619      	mov	r1, r3
 800278a:	4814      	ldr	r0, [pc, #80]	; (80027dc <sd_get_space_kb+0x60>)
 800278c:	f00e f9f7 	bl	8010b7e <f_getfree>
 8002790:	4603      	mov	r3, r0
 8002792:	77fb      	strb	r3, [r7, #31]
    if (res != FR_OK) return res;
 8002794:	7ffb      	ldrb	r3, [r7, #31]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <sd_get_space_kb+0x22>
 800279a:	7ffb      	ldrb	r3, [r7, #31]
 800279c:	e01a      	b.n	80027d4 <sd_get_space_kb+0x58>

    tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	3b02      	subs	r3, #2
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	8952      	ldrh	r2, [r2, #10]
 80027a8:	fb02 f303 	mul.w	r3, r2, r3
 80027ac:	61bb      	str	r3, [r7, #24]
    fre_sect = fre_clust * pfs->csize;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	895b      	ldrh	r3, [r3, #10]
 80027b2:	461a      	mov	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	617b      	str	r3, [r7, #20]
    total_kb = tot_sect / 2;
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	613b      	str	r3, [r7, #16]
    free_kb = fre_sect / 2;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
    printf("💾 Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb);
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	6939      	ldr	r1, [r7, #16]
 80027cc:	4804      	ldr	r0, [pc, #16]	; (80027e0 <sd_get_space_kb+0x64>)
 80027ce:	f00f fe99 	bl	8012504 <iprintf>
    return FR_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	2000b37c 	.word	0x2000b37c
 80027e0:	08013588 	.word	0x08013588

080027e4 <sd_mount>:

int sd_mount(void) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
    FRESULT res;
    extern uint8_t sd_is_sdhc(void);

    printf("Linking SD driver...\r\n");
 80027ea:	4840      	ldr	r0, [pc, #256]	; (80028ec <sd_mount+0x108>)
 80027ec:	f00f fef0 	bl	80125d0 <puts>
    if (FATFS_LinkDriver(&SD_Driver, sd_path) != 0) {
 80027f0:	493f      	ldr	r1, [pc, #252]	; (80028f0 <sd_mount+0x10c>)
 80027f2:	4840      	ldr	r0, [pc, #256]	; (80028f4 <sd_mount+0x110>)
 80027f4:	f00e fef0 	bl	80115d8 <FATFS_LinkDriver>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d004      	beq.n	8002808 <sd_mount+0x24>
        printf("FATFS_LinkDriver failed\n");
 80027fe:	483e      	ldr	r0, [pc, #248]	; (80028f8 <sd_mount+0x114>)
 8002800:	f00f fee6 	bl	80125d0 <puts>
        return FR_DISK_ERR;
 8002804:	2301      	movs	r3, #1
 8002806:	e06d      	b.n	80028e4 <sd_mount+0x100>
    }

    printf("Initializing disk...\r\n");
 8002808:	483c      	ldr	r0, [pc, #240]	; (80028fc <sd_mount+0x118>)
 800280a:	f00f fee1 	bl	80125d0 <puts>
    DSTATUS stat = disk_initialize(0);
 800280e:	2000      	movs	r0, #0
 8002810:	f00b fa1e 	bl	800dc50 <disk_initialize>
 8002814:	4603      	mov	r3, r0
 8002816:	71fb      	strb	r3, [r7, #7]
    if (stat != 0) {
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <sd_mount+0x4e>
        printf("disk_initialize failed: 0x%02X\n", stat);
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	4619      	mov	r1, r3
 8002822:	4837      	ldr	r0, [pc, #220]	; (8002900 <sd_mount+0x11c>)
 8002824:	f00f fe6e 	bl	8012504 <iprintf>
        printf("FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n");
 8002828:	4836      	ldr	r0, [pc, #216]	; (8002904 <sd_mount+0x120>)
 800282a:	f00f fed1 	bl	80125d0 <puts>
        return FR_NOT_READY;
 800282e:	2303      	movs	r3, #3
 8002830:	e058      	b.n	80028e4 <sd_mount+0x100>
    }

    printf("Attempting mount at %s...\r\n", sd_path);
 8002832:	492f      	ldr	r1, [pc, #188]	; (80028f0 <sd_mount+0x10c>)
 8002834:	4834      	ldr	r0, [pc, #208]	; (8002908 <sd_mount+0x124>)
 8002836:	f00f fe65 	bl	8012504 <iprintf>
    res = f_mount(&fs, sd_path, 1);
 800283a:	2201      	movs	r2, #1
 800283c:	492c      	ldr	r1, [pc, #176]	; (80028f0 <sd_mount+0x10c>)
 800283e:	4833      	ldr	r0, [pc, #204]	; (800290c <sd_mount+0x128>)
 8002840:	f00d fbe4 	bl	801000c <f_mount>
 8002844:	4603      	mov	r3, r0
 8002846:	71bb      	strb	r3, [r7, #6]
    if (res == FR_OK)
 8002848:	79bb      	ldrb	r3, [r7, #6]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d113      	bne.n	8002876 <sd_mount+0x92>
    {
        printf("SD card mounted successfully at %s\r\n", sd_path);
 800284e:	4928      	ldr	r1, [pc, #160]	; (80028f0 <sd_mount+0x10c>)
 8002850:	482f      	ldr	r0, [pc, #188]	; (8002910 <sd_mount+0x12c>)
 8002852:	f00f fe57 	bl	8012504 <iprintf>
        printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 8002856:	f000 f991 	bl	8002b7c <sd_is_sdhc>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <sd_mount+0x80>
 8002860:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <sd_mount+0x130>)
 8002862:	e000      	b.n	8002866 <sd_mount+0x82>
 8002864:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <sd_mount+0x134>)
 8002866:	4619      	mov	r1, r3
 8002868:	482c      	ldr	r0, [pc, #176]	; (800291c <sd_mount+0x138>)
 800286a:	f00f fe4b 	bl	8012504 <iprintf>

        sd_get_space_kb();
 800286e:	f7ff ff85 	bl	800277c <sd_get_space_kb>
        return FR_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e036      	b.n	80028e4 <sd_mount+0x100>
    }

    if (res == FR_NO_FILESYSTEM)
 8002876:	79bb      	ldrb	r3, [r7, #6]
 8002878:	2b0d      	cmp	r3, #13
 800287a:	d12d      	bne.n	80028d8 <sd_mount+0xf4>
    {
        printf("No filesystem found on SD card. Attempting format...\r\nThis will create 32MB Partition (Most Probably)\r\n");
 800287c:	4828      	ldr	r0, [pc, #160]	; (8002920 <sd_mount+0x13c>)
 800287e:	f00f fea7 	bl	80125d0 <puts>
        printf("If you need the full sized SD card, use the computer to format into FAT32\r\n");
 8002882:	4828      	ldr	r0, [pc, #160]	; (8002924 <sd_mount+0x140>)
 8002884:	f00f fea4 	bl	80125d0 <puts>
        sd_format();
 8002888:	f7ff ff52 	bl	8002730 <sd_format>

        printf("Retrying mount after format...\r\n");
 800288c:	4826      	ldr	r0, [pc, #152]	; (8002928 <sd_mount+0x144>)
 800288e:	f00f fe9f 	bl	80125d0 <puts>
        res = f_mount(&fs, sd_path, 1);
 8002892:	2201      	movs	r2, #1
 8002894:	4916      	ldr	r1, [pc, #88]	; (80028f0 <sd_mount+0x10c>)
 8002896:	481d      	ldr	r0, [pc, #116]	; (800290c <sd_mount+0x128>)
 8002898:	f00d fbb8 	bl	801000c <f_mount>
 800289c:	4603      	mov	r3, r0
 800289e:	71bb      	strb	r3, [r7, #6]
        if (res == FR_OK) {
 80028a0:	79bb      	ldrb	r3, [r7, #6]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d111      	bne.n	80028ca <sd_mount+0xe6>
            printf("SD card formatted and mounted successfully.\r\n");
 80028a6:	4821      	ldr	r0, [pc, #132]	; (800292c <sd_mount+0x148>)
 80028a8:	f00f fe92 	bl	80125d0 <puts>
            printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 80028ac:	f000 f966 	bl	8002b7c <sd_is_sdhc>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <sd_mount+0xd6>
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <sd_mount+0x130>)
 80028b8:	e000      	b.n	80028bc <sd_mount+0xd8>
 80028ba:	4b17      	ldr	r3, [pc, #92]	; (8002918 <sd_mount+0x134>)
 80028bc:	4619      	mov	r1, r3
 80028be:	4817      	ldr	r0, [pc, #92]	; (800291c <sd_mount+0x138>)
 80028c0:	f00f fe20 	bl	8012504 <iprintf>

            sd_get_space_kb();
 80028c4:	f7ff ff5a 	bl	800277c <sd_get_space_kb>
 80028c8:	e004      	b.n	80028d4 <sd_mount+0xf0>
        }
        else {
            printf("Mount failed even after format: %d\r\n", res);
 80028ca:	79bb      	ldrb	r3, [r7, #6]
 80028cc:	4619      	mov	r1, r3
 80028ce:	4818      	ldr	r0, [pc, #96]	; (8002930 <sd_mount+0x14c>)
 80028d0:	f00f fe18 	bl	8012504 <iprintf>
        }
        return res;
 80028d4:	79bb      	ldrb	r3, [r7, #6]
 80028d6:	e005      	b.n	80028e4 <sd_mount+0x100>
    }

    printf("Mount failed with code: %d\r\n", res);
 80028d8:	79bb      	ldrb	r3, [r7, #6]
 80028da:	4619      	mov	r1, r3
 80028dc:	4815      	ldr	r0, [pc, #84]	; (8002934 <sd_mount+0x150>)
 80028de:	f00f fe11 	bl	8012504 <iprintf>
    return res;
 80028e2:	79bb      	ldrb	r3, [r7, #6]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	080135ac 	.word	0x080135ac
 80028f0:	2000b37c 	.word	0x2000b37c
 80028f4:	08013a64 	.word	0x08013a64
 80028f8:	080135c4 	.word	0x080135c4
 80028fc:	080135dc 	.word	0x080135dc
 8002900:	080135f4 	.word	0x080135f4
 8002904:	08013614 	.word	0x08013614
 8002908:	0801364c 	.word	0x0801364c
 800290c:	2000b380 	.word	0x2000b380
 8002910:	08013668 	.word	0x08013668
 8002914:	08013690 	.word	0x08013690
 8002918:	0801369c 	.word	0x0801369c
 800291c:	080136a4 	.word	0x080136a4
 8002920:	080136b4 	.word	0x080136b4
 8002924:	0801371c 	.word	0x0801371c
 8002928:	08013768 	.word	0x08013768
 800292c:	08013788 	.word	0x08013788
 8002930:	080137b8 	.word	0x080137b8
 8002934:	080137e0 	.word	0x080137e0

08002938 <sd_unmount>:

int sd_unmount(void) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
    FRESULT res = f_mount(NULL, sd_path, 1);
 800293e:	2201      	movs	r2, #1
 8002940:	490a      	ldr	r1, [pc, #40]	; (800296c <sd_unmount+0x34>)
 8002942:	2000      	movs	r0, #0
 8002944:	f00d fb62 	bl	801000c <f_mount>
 8002948:	4603      	mov	r3, r0
 800294a:	71fb      	strb	r3, [r7, #7]
    printf("SD card unmounted: %s\r\n", (res == FR_OK) ? "OK" : "Failed");
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <sd_unmount+0x1e>
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <sd_unmount+0x38>)
 8002954:	e000      	b.n	8002958 <sd_unmount+0x20>
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <sd_unmount+0x3c>)
 8002958:	4619      	mov	r1, r3
 800295a:	4807      	ldr	r0, [pc, #28]	; (8002978 <sd_unmount+0x40>)
 800295c:	f00f fdd2 	bl	8012504 <iprintf>
    return res;
 8002960:	79fb      	ldrb	r3, [r7, #7]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	2000b37c 	.word	0x2000b37c
 8002970:	08013800 	.word	0x08013800
 8002974:	08013804 	.word	0x08013804
 8002978:	0801380c 	.word	0x0801380c

0800297c <HAL_SPI_TxCpltCallback>:

#if USE_DMA
volatile int dma_tx_done = 0;
volatile int dma_rx_done = 0;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	if (hspi == &SD_SPI_HANDLE) dma_tx_done = 1;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a06      	ldr	r2, [pc, #24]	; (80029a0 <HAL_SPI_TxCpltCallback+0x24>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d102      	bne.n	8002992 <HAL_SPI_TxCpltCallback+0x16>
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_SPI_TxCpltCallback+0x28>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	2000b21c 	.word	0x2000b21c
 80029a4:	2000bb88 	.word	0x2000bb88

080029a8 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) dma_rx_done = 1;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a06      	ldr	r2, [pc, #24]	; (80029cc <HAL_SPI_TxRxCpltCallback+0x24>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d102      	bne.n	80029be <HAL_SPI_TxRxCpltCallback+0x16>
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_SPI_TxRxCpltCallback+0x28>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	2000b21c 	.word	0x2000b21c
 80029d0:	2000bb8c 	.word	0x2000bb8c

080029d4 <SD_TransmitByte>:
#endif

static void SD_TransmitByte(uint8_t data) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 80029de:	1df9      	adds	r1, r7, #7
 80029e0:	f04f 33ff 	mov.w	r3, #4294967295
 80029e4:	2201      	movs	r2, #1
 80029e6:	4803      	ldr	r0, [pc, #12]	; (80029f4 <SD_TransmitByte+0x20>)
 80029e8:	f006 faad 	bl	8008f46 <HAL_SPI_Transmit>
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	2000b21c 	.word	0x2000b21c

080029f8 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 80029fe:	23ff      	movs	r3, #255	; 0xff
 8002a00:	71fb      	strb	r3, [r7, #7]
 8002a02:	2300      	movs	r3, #0
 8002a04:	71bb      	strb	r3, [r7, #6]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 8002a06:	1dba      	adds	r2, r7, #6
 8002a08:	1df9      	adds	r1, r7, #7
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2301      	movs	r3, #1
 8002a12:	4804      	ldr	r0, [pc, #16]	; (8002a24 <SD_ReceiveByte+0x2c>)
 8002a14:	f006 fbda 	bl	80091cc <HAL_SPI_TransmitReceive>
    return data;
 8002a18:	79bb      	ldrb	r3, [r7, #6]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	2000b21c 	.word	0x2000b21c

08002a28 <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
#if USE_DMA
    dma_tx_done = 0;
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <SD_TransmitBuffer+0x34>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4807      	ldr	r0, [pc, #28]	; (8002a60 <SD_TransmitBuffer+0x38>)
 8002a42:	f006 fd73 	bl	800952c <HAL_SPI_Transmit_DMA>
    while (!dma_tx_done);
 8002a46:	bf00      	nop
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <SD_TransmitBuffer+0x34>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0fb      	beq.n	8002a48 <SD_TransmitBuffer+0x20>
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
#endif
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2000bb88 	.word	0x2000bb88
 8002a60:	2000b21c 	.word	0x2000b21c

08002a64 <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
#if USE_DMA
	static uint8_t tx_dummy[512];
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	e007      	b.n	8002a86 <SD_ReceiveBuffer+0x22>
 8002a76:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <SD_ReceiveBuffer+0x50>)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	22ff      	movs	r2, #255	; 0xff
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3301      	adds	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	dbf3      	blt.n	8002a76 <SD_ReceiveBuffer+0x12>
    dma_rx_done = 0;
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <SD_ReceiveBuffer+0x54>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_dummy, buffer, len);
 8002a94:	887b      	ldrh	r3, [r7, #2]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4906      	ldr	r1, [pc, #24]	; (8002ab4 <SD_ReceiveBuffer+0x50>)
 8002a9a:	4808      	ldr	r0, [pc, #32]	; (8002abc <SD_ReceiveBuffer+0x58>)
 8002a9c:	f006 fdf8 	bl	8009690 <HAL_SPI_TransmitReceive_DMA>
    while (!dma_rx_done);
 8002aa0:	bf00      	nop
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <SD_ReceiveBuffer+0x54>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0fb      	beq.n	8002aa2 <SD_ReceiveBuffer+0x3e>
#else
    for (uint16_t i = 0; i < len; i++) {
        buffer[i] = SD_ReceiveByte();
    }
#endif
}
 8002aaa:	bf00      	nop
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	2000bb94 	.word	0x2000bb94
 8002ab8:	2000bb8c 	.word	0x2000bb8c
 8002abc:	2000b21c 	.word	0x2000b21c

08002ac0 <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 8002ac6:	f003 fca5 	bl	8006414 <HAL_GetTick>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002ad0:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 8002ad2:	f7ff ff91 	bl	80029f8 <SD_ReceiveByte>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	70fb      	strb	r3, [r7, #3]
        if (resp == 0xFF) return SD_OK;
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	2bff      	cmp	r3, #255	; 0xff
 8002ade:	d101      	bne.n	8002ae4 <SD_WaitReady+0x24>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e006      	b.n	8002af2 <SD_WaitReady+0x32>
    } while (HAL_GetTick() < timeout);
 8002ae4:	f003 fc96 	bl	8006414 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d8f0      	bhi.n	8002ad2 <SD_WaitReady+0x12>
    return SD_ERROR;
 8002af0:	2301      	movs	r3, #1
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	6039      	str	r1, [r7, #0]
 8002b04:	71fb      	strb	r3, [r7, #7]
 8002b06:	4613      	mov	r3, r2
 8002b08:	71bb      	strb	r3, [r7, #6]
    uint8_t response, retry = 0xFF;
 8002b0a:	23ff      	movs	r3, #255	; 0xff
 8002b0c:	73fb      	strb	r3, [r7, #15]

    SD_WaitReady();
 8002b0e:	f7ff ffd7 	bl	8002ac0 <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ff5a 	bl	80029d4 <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	0e1b      	lsrs	r3, r3, #24
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff54 	bl	80029d4 <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	0c1b      	lsrs	r3, r3, #16
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ff4e 	bl	80029d4 <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff48 	bl	80029d4 <SD_TransmitByte>
    SD_TransmitByte(arg);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff43 	bl	80029d4 <SD_TransmitByte>
    SD_TransmitByte(crc);
 8002b4e:	79bb      	ldrb	r3, [r7, #6]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff3f 	bl	80029d4 <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 8002b56:	f7ff ff4f 	bl	80029f8 <SD_ReceiveByte>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	73bb      	strb	r3, [r7, #14]
    } while ((response & 0x80) && --retry);
 8002b5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	da05      	bge.n	8002b72 <SD_SendCommand+0x78>
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f1      	bne.n	8002b56 <SD_SendCommand+0x5c>

    return response;
 8002b72:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
    return sdhc;
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <sd_is_sdhc+0x14>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	2000bb90 	.word	0x2000bb90

08002b94 <SD_SPI_Init>:
uint8_t card_initialized = 0;

SD_Status SD_SPI_Init(void) {
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2110      	movs	r1, #16
 8002b9e:	4873      	ldr	r0, [pc, #460]	; (8002d6c <SD_SPI_Init+0x1d8>)
 8002ba0:	f004 fa6e 	bl	8007080 <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	e005      	b.n	8002bb6 <SD_SPI_Init+0x22>
 8002baa:	20ff      	movs	r0, #255	; 0xff
 8002bac:	f7ff ff12 	bl	80029d4 <SD_TransmitByte>
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	2b09      	cmp	r3, #9
 8002bba:	d9f6      	bls.n	8002baa <SD_SPI_Init+0x16>

    SD_CS_LOW();
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2110      	movs	r1, #16
 8002bc0:	486a      	ldr	r0, [pc, #424]	; (8002d6c <SD_SPI_Init+0x1d8>)
 8002bc2:	f004 fa5d 	bl	8007080 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 8002bc6:	2295      	movs	r2, #149	; 0x95
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7ff ff95 	bl	8002afa <SD_SendCommand>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	73bb      	strb	r3, [r7, #14]
    SD_CS_HIGH();
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	2110      	movs	r1, #16
 8002bd8:	4864      	ldr	r0, [pc, #400]	; (8002d6c <SD_SPI_Init+0x1d8>)
 8002bda:	f004 fa51 	bl	8007080 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8002bde:	20ff      	movs	r0, #255	; 0xff
 8002be0:	f7ff fef8 	bl	80029d4 <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d001      	beq.n	8002bee <SD_SPI_Init+0x5a>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0ba      	b.n	8002d64 <SD_SPI_Init+0x1d0>

    SD_CS_LOW();
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2110      	movs	r1, #16
 8002bf2:	485e      	ldr	r0, [pc, #376]	; (8002d6c <SD_SPI_Init+0x1d8>)
 8002bf4:	f004 fa44 	bl	8007080 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 8002bf8:	2287      	movs	r2, #135	; 0x87
 8002bfa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002bfe:	2008      	movs	r0, #8
 8002c00:	f7ff ff7b 	bl	8002afa <SD_SendCommand>
 8002c04:	4603      	mov	r3, r0
 8002c06:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	e00c      	b.n	8002c28 <SD_SPI_Init+0x94>
 8002c0e:	7bfc      	ldrb	r4, [r7, #15]
 8002c10:	f7ff fef2 	bl	80029f8 <SD_ReceiveByte>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	f104 0310 	add.w	r3, r4, #16
 8002c1c:	443b      	add	r3, r7
 8002c1e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	3301      	adds	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d9ef      	bls.n	8002c0e <SD_SPI_Init+0x7a>
    SD_CS_HIGH();
 8002c2e:	2201      	movs	r2, #1
 8002c30:	2110      	movs	r1, #16
 8002c32:	484e      	ldr	r0, [pc, #312]	; (8002d6c <SD_SPI_Init+0x1d8>)
 8002c34:	f004 fa24 	bl	8007080 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8002c38:	20ff      	movs	r0, #255	; 0xff
 8002c3a:	f7ff fecb 	bl	80029d4 <SD_TransmitByte>

    sdhc = 0;
 8002c3e:	4b4c      	ldr	r3, [pc, #304]	; (8002d70 <SD_SPI_Init+0x1dc>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 8002c44:	f003 fbe6 	bl	8006414 <HAL_GetTick>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002c4e:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8002c50:	7bbb      	ldrb	r3, [r7, #14]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d15a      	bne.n	8002d0c <SD_SPI_Init+0x178>
 8002c56:	79bb      	ldrb	r3, [r7, #6]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d157      	bne.n	8002d0c <SD_SPI_Init+0x178>
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	2baa      	cmp	r3, #170	; 0xaa
 8002c60:	d154      	bne.n	8002d0c <SD_SPI_Init+0x178>
        do {
            SD_CS_LOW();
 8002c62:	2200      	movs	r2, #0
 8002c64:	2110      	movs	r1, #16
 8002c66:	4841      	ldr	r0, [pc, #260]	; (8002d6c <SD_SPI_Init+0x1d8>)
 8002c68:	f004 fa0a 	bl	8007080 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8002c6c:	22ff      	movs	r2, #255	; 0xff
 8002c6e:	2100      	movs	r1, #0
 8002c70:	2037      	movs	r0, #55	; 0x37
 8002c72:	f7ff ff42 	bl	8002afa <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 8002c76:	22ff      	movs	r2, #255	; 0xff
 8002c78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c7c:	2029      	movs	r0, #41	; 0x29
 8002c7e:	f7ff ff3c 	bl	8002afa <SD_SendCommand>
 8002c82:	4603      	mov	r3, r0
 8002c84:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8002c86:	2201      	movs	r2, #1
 8002c88:	2110      	movs	r1, #16
 8002c8a:	4838      	ldr	r0, [pc, #224]	; (8002d6c <SD_SPI_Init+0x1d8>)
 8002c8c:	f004 f9f8 	bl	8007080 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8002c90:	20ff      	movs	r0, #255	; 0xff
 8002c92:	f7ff fe9f 	bl	80029d4 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8002c96:	7bbb      	ldrb	r3, [r7, #14]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <SD_SPI_Init+0x114>
 8002c9c:	f003 fbba 	bl	8006414 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d8dc      	bhi.n	8002c62 <SD_SPI_Init+0xce>

        if (response != 0x00) return SD_ERROR;
 8002ca8:	7bbb      	ldrb	r3, [r7, #14]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <SD_SPI_Init+0x11e>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e058      	b.n	8002d64 <SD_SPI_Init+0x1d0>

        SD_CS_LOW();
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2110      	movs	r1, #16
 8002cb6:	482d      	ldr	r0, [pc, #180]	; (8002d6c <SD_SPI_Init+0x1d8>)
 8002cb8:	f004 f9e2 	bl	8007080 <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 8002cbc:	22ff      	movs	r2, #255	; 0xff
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	203a      	movs	r0, #58	; 0x3a
 8002cc2:	f7ff ff1a 	bl	8002afa <SD_SendCommand>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	73bb      	strb	r3, [r7, #14]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	73fb      	strb	r3, [r7, #15]
 8002cce:	e00c      	b.n	8002cea <SD_SPI_Init+0x156>
 8002cd0:	7bfc      	ldrb	r4, [r7, #15]
 8002cd2:	f7ff fe91 	bl	80029f8 <SD_ReceiveByte>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f104 0310 	add.w	r3, r4, #16
 8002cde:	443b      	add	r3, r7
 8002ce0:	f803 2c10 	strb.w	r2, [r3, #-16]
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d9ef      	bls.n	8002cd0 <SD_SPI_Init+0x13c>
        SD_CS_HIGH();
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	2110      	movs	r1, #16
 8002cf4:	481d      	ldr	r0, [pc, #116]	; (8002d6c <SD_SPI_Init+0x1d8>)
 8002cf6:	f004 f9c3 	bl	8007080 <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 8002cfa:	783b      	ldrb	r3, [r7, #0]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d02a      	beq.n	8002d5a <SD_SPI_Init+0x1c6>
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <SD_SPI_Init+0x1dc>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8002d0a:	e026      	b.n	8002d5a <SD_SPI_Init+0x1c6>
    } else {
        do {
            SD_CS_LOW();
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2110      	movs	r1, #16
 8002d10:	4816      	ldr	r0, [pc, #88]	; (8002d6c <SD_SPI_Init+0x1d8>)
 8002d12:	f004 f9b5 	bl	8007080 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8002d16:	22ff      	movs	r2, #255	; 0xff
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2037      	movs	r0, #55	; 0x37
 8002d1c:	f7ff feed 	bl	8002afa <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 8002d20:	22ff      	movs	r2, #255	; 0xff
 8002d22:	2100      	movs	r1, #0
 8002d24:	2029      	movs	r0, #41	; 0x29
 8002d26:	f7ff fee8 	bl	8002afa <SD_SendCommand>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8002d2e:	2201      	movs	r2, #1
 8002d30:	2110      	movs	r1, #16
 8002d32:	480e      	ldr	r0, [pc, #56]	; (8002d6c <SD_SPI_Init+0x1d8>)
 8002d34:	f004 f9a4 	bl	8007080 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8002d38:	20ff      	movs	r0, #255	; 0xff
 8002d3a:	f7ff fe4b 	bl	80029d4 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8002d3e:	7bbb      	ldrb	r3, [r7, #14]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <SD_SPI_Init+0x1bc>
 8002d44:	f003 fb66 	bl	8006414 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d8dd      	bhi.n	8002d0c <SD_SPI_Init+0x178>
        if (response != 0x00) return SD_ERROR;
 8002d50:	7bbb      	ldrb	r3, [r7, #14]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <SD_SPI_Init+0x1c8>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e004      	b.n	8002d64 <SD_SPI_Init+0x1d0>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8002d5a:	bf00      	nop
    }

    card_initialized = 1;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <SD_SPI_Init+0x1e0>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd90      	pop	{r4, r7, pc}
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	2000bb90 	.word	0x2000bb90
 8002d74:	2000bb91 	.word	0x2000bb91

08002d78 <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <SD_ReadBlocks+0x16>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e054      	b.n	8002e38 <SD_ReadBlocks+0xc0>
    if (!sdhc) sector *= 512;
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <SD_ReadBlocks+0xc8>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d102      	bne.n	8002d9c <SD_ReadBlocks+0x24>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	025b      	lsls	r3, r3, #9
 8002d9a:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d144      	bne.n	8002e2c <SD_ReadBlocks+0xb4>
        SD_CS_LOW();
 8002da2:	2200      	movs	r2, #0
 8002da4:	2110      	movs	r1, #16
 8002da6:	4827      	ldr	r0, [pc, #156]	; (8002e44 <SD_ReadBlocks+0xcc>)
 8002da8:	f004 f96a 	bl	8007080 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 8002dac:	22ff      	movs	r2, #255	; 0xff
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	2011      	movs	r0, #17
 8002db2:	f7ff fea2 	bl	8002afa <SD_SendCommand>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d006      	beq.n	8002dca <SD_ReadBlocks+0x52>
            SD_CS_HIGH();
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	2110      	movs	r1, #16
 8002dc0:	4820      	ldr	r0, [pc, #128]	; (8002e44 <SD_ReadBlocks+0xcc>)
 8002dc2:	f004 f95d 	bl	8007080 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e036      	b.n	8002e38 <SD_ReadBlocks+0xc0>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8002dca:	f003 fb23 	bl	8006414 <HAL_GetTick>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	33c8      	adds	r3, #200	; 0xc8
 8002dd2:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 8002dd4:	f7ff fe10 	bl	80029f8 <SD_ReceiveByte>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	2bfe      	cmp	r3, #254	; 0xfe
 8002de0:	d006      	beq.n	8002df0 <SD_ReadBlocks+0x78>
        } while (HAL_GetTick() < timeout);
 8002de2:	f003 fb17 	bl	8006414 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d8f2      	bhi.n	8002dd4 <SD_ReadBlocks+0x5c>
 8002dee:	e000      	b.n	8002df2 <SD_ReadBlocks+0x7a>
            if (token == 0xFE) break;
 8002df0:	bf00      	nop
        if (token != 0xFE) {
 8002df2:	7cfb      	ldrb	r3, [r7, #19]
 8002df4:	2bfe      	cmp	r3, #254	; 0xfe
 8002df6:	d006      	beq.n	8002e06 <SD_ReadBlocks+0x8e>
            SD_CS_HIGH();
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	4811      	ldr	r0, [pc, #68]	; (8002e44 <SD_ReadBlocks+0xcc>)
 8002dfe:	f004 f93f 	bl	8007080 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e018      	b.n	8002e38 <SD_ReadBlocks+0xc0>
        }

        SD_ReceiveBuffer(buff, 512);
 8002e06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f7ff fe2a 	bl	8002a64 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 8002e10:	f7ff fdf2 	bl	80029f8 <SD_ReceiveByte>
        SD_ReceiveByte();
 8002e14:	f7ff fdf0 	bl	80029f8 <SD_ReceiveByte>
        SD_CS_HIGH();
 8002e18:	2201      	movs	r2, #1
 8002e1a:	2110      	movs	r1, #16
 8002e1c:	4809      	ldr	r0, [pc, #36]	; (8002e44 <SD_ReadBlocks+0xcc>)
 8002e1e:	f004 f92f 	bl	8007080 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8002e22:	20ff      	movs	r0, #255	; 0xff
 8002e24:	f7ff fdd6 	bl	80029d4 <SD_TransmitByte>
        return SD_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e005      	b.n	8002e38 <SD_ReadBlocks+0xc0>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f809 	bl	8002e48 <SD_ReadMultiBlocks>
 8002e36:	4603      	mov	r3, r0
    }
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	2000bb90 	.word	0x2000bb90
 8002e44:	40020000 	.word	0x40020000

08002e48 <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <SD_ReadMultiBlocks+0x16>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e058      	b.n	8002f10 <SD_ReadMultiBlocks+0xc8>
    if (!sdhc) sector *= 512;
 8002e5e:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <SD_ReadMultiBlocks+0xd0>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <SD_ReadMultiBlocks+0x24>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	025b      	lsls	r3, r3, #9
 8002e6a:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2110      	movs	r1, #16
 8002e70:	482a      	ldr	r0, [pc, #168]	; (8002f1c <SD_ReadMultiBlocks+0xd4>)
 8002e72:	f004 f905 	bl	8007080 <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 8002e76:	22ff      	movs	r2, #255	; 0xff
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	2012      	movs	r0, #18
 8002e7c:	f7ff fe3d 	bl	8002afa <SD_SendCommand>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d031      	beq.n	8002eea <SD_ReadMultiBlocks+0xa2>
        SD_CS_HIGH();
 8002e86:	2201      	movs	r2, #1
 8002e88:	2110      	movs	r1, #16
 8002e8a:	4824      	ldr	r0, [pc, #144]	; (8002f1c <SD_ReadMultiBlocks+0xd4>)
 8002e8c:	f004 f8f8 	bl	8007080 <HAL_GPIO_WritePin>
        return SD_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e03d      	b.n	8002f10 <SD_ReadMultiBlocks+0xc8>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8002e94:	f003 fabe 	bl	8006414 <HAL_GetTick>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	33c8      	adds	r3, #200	; 0xc8
 8002e9c:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 8002e9e:	f7ff fdab 	bl	80029f8 <SD_ReceiveByte>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8002ea6:	7cfb      	ldrb	r3, [r7, #19]
 8002ea8:	2bfe      	cmp	r3, #254	; 0xfe
 8002eaa:	d006      	beq.n	8002eba <SD_ReadMultiBlocks+0x72>
        } while (HAL_GetTick() < timeout);
 8002eac:	f003 fab2 	bl	8006414 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d8f2      	bhi.n	8002e9e <SD_ReadMultiBlocks+0x56>
 8002eb8:	e000      	b.n	8002ebc <SD_ReadMultiBlocks+0x74>
            if (token == 0xFE) break;
 8002eba:	bf00      	nop

        if (token != 0xFE) {
 8002ebc:	7cfb      	ldrb	r3, [r7, #19]
 8002ebe:	2bfe      	cmp	r3, #254	; 0xfe
 8002ec0:	d006      	beq.n	8002ed0 <SD_ReadMultiBlocks+0x88>
            SD_CS_HIGH();
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	2110      	movs	r1, #16
 8002ec6:	4815      	ldr	r0, [pc, #84]	; (8002f1c <SD_ReadMultiBlocks+0xd4>)
 8002ec8:	f004 f8da 	bl	8007080 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e01f      	b.n	8002f10 <SD_ReadMultiBlocks+0xc8>
        }

        SD_ReceiveBuffer(buff, 512);
 8002ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7ff fdc5 	bl	8002a64 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 8002eda:	f7ff fd8d 	bl	80029f8 <SD_ReceiveByte>
        SD_ReceiveByte();
 8002ede:	f7ff fd8b 	bl	80029f8 <SD_ReceiveByte>

        buff += 512;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ee8:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	1e5a      	subs	r2, r3, #1
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1cf      	bne.n	8002e94 <SD_ReadMultiBlocks+0x4c>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 8002ef4:	22ff      	movs	r2, #255	; 0xff
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	200c      	movs	r0, #12
 8002efa:	f7ff fdfe 	bl	8002afa <SD_SendCommand>
    SD_CS_HIGH();
 8002efe:	2201      	movs	r2, #1
 8002f00:	2110      	movs	r1, #16
 8002f02:	4806      	ldr	r0, [pc, #24]	; (8002f1c <SD_ReadMultiBlocks+0xd4>)
 8002f04:	f004 f8bc 	bl	8007080 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 8002f08:	20ff      	movs	r0, #255	; 0xff
 8002f0a:	f7ff fd63 	bl	80029d4 <SD_TransmitByte>

    return SD_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	2000bb90 	.word	0x2000bb90
 8002f1c:	40020000 	.word	0x40020000

08002f20 <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <SD_WriteBlocks+0x16>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e051      	b.n	8002fda <SD_WriteBlocks+0xba>
    if (!sdhc) sector *= 512;
 8002f36:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <SD_WriteBlocks+0xc4>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <SD_WriteBlocks+0x24>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	025b      	lsls	r3, r3, #9
 8002f42:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d141      	bne.n	8002fce <SD_WriteBlocks+0xae>
        SD_CS_LOW();
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2110      	movs	r1, #16
 8002f4e:	4826      	ldr	r0, [pc, #152]	; (8002fe8 <SD_WriteBlocks+0xc8>)
 8002f50:	f004 f896 	bl	8007080 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 8002f54:	22ff      	movs	r2, #255	; 0xff
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	2018      	movs	r0, #24
 8002f5a:	f7ff fdce 	bl	8002afa <SD_SendCommand>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <SD_WriteBlocks+0x52>
            SD_CS_HIGH();
 8002f64:	2201      	movs	r2, #1
 8002f66:	2110      	movs	r1, #16
 8002f68:	481f      	ldr	r0, [pc, #124]	; (8002fe8 <SD_WriteBlocks+0xc8>)
 8002f6a:	f004 f889 	bl	8007080 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e033      	b.n	8002fda <SD_WriteBlocks+0xba>
        }

        SD_TransmitByte(0xFE);
 8002f72:	20fe      	movs	r0, #254	; 0xfe
 8002f74:	f7ff fd2e 	bl	80029d4 <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 8002f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff fd53 	bl	8002a28 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 8002f82:	20ff      	movs	r0, #255	; 0xff
 8002f84:	f7ff fd26 	bl	80029d4 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8002f88:	20ff      	movs	r0, #255	; 0xff
 8002f8a:	f7ff fd23 	bl	80029d4 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8002f8e:	f7ff fd33 	bl	80029f8 <SD_ReceiveByte>
 8002f92:	4603      	mov	r3, r0
 8002f94:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2b05      	cmp	r3, #5
 8002f9e:	d006      	beq.n	8002fae <SD_WriteBlocks+0x8e>
            SD_CS_HIGH();
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	2110      	movs	r1, #16
 8002fa4:	4810      	ldr	r0, [pc, #64]	; (8002fe8 <SD_WriteBlocks+0xc8>)
 8002fa6:	f004 f86b 	bl	8007080 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e015      	b.n	8002fda <SD_WriteBlocks+0xba>
        }

        while (SD_ReceiveByte() == 0);
 8002fae:	bf00      	nop
 8002fb0:	f7ff fd22 	bl	80029f8 <SD_ReceiveByte>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0fa      	beq.n	8002fb0 <SD_WriteBlocks+0x90>
        SD_CS_HIGH();
 8002fba:	2201      	movs	r2, #1
 8002fbc:	2110      	movs	r1, #16
 8002fbe:	480a      	ldr	r0, [pc, #40]	; (8002fe8 <SD_WriteBlocks+0xc8>)
 8002fc0:	f004 f85e 	bl	8007080 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8002fc4:	20ff      	movs	r0, #255	; 0xff
 8002fc6:	f7ff fd05 	bl	80029d4 <SD_TransmitByte>

        return SD_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e005      	b.n	8002fda <SD_WriteBlocks+0xba>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f80a 	bl	8002fec <SD_WriteMultiBlocks>
 8002fd8:	4603      	mov	r3, r0
    }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000bb90 	.word	0x2000bb90
 8002fe8:	40020000 	.word	0x40020000

08002fec <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <SD_WriteMultiBlocks+0x16>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e059      	b.n	80030b6 <SD_WriteMultiBlocks+0xca>
    if (!sdhc) sector *= 512;
 8003002:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <SD_WriteMultiBlocks+0xd4>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <SD_WriteMultiBlocks+0x24>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	025b      	lsls	r3, r3, #9
 800300e:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8003010:	2200      	movs	r2, #0
 8003012:	2110      	movs	r1, #16
 8003014:	482b      	ldr	r0, [pc, #172]	; (80030c4 <SD_WriteMultiBlocks+0xd8>)
 8003016:	f004 f833 	bl	8007080 <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 800301a:	22ff      	movs	r2, #255	; 0xff
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	2019      	movs	r0, #25
 8003020:	f7ff fd6b 	bl	8002afa <SD_SendCommand>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d02e      	beq.n	8003088 <SD_WriteMultiBlocks+0x9c>
        SD_CS_HIGH();
 800302a:	2201      	movs	r2, #1
 800302c:	2110      	movs	r1, #16
 800302e:	4825      	ldr	r0, [pc, #148]	; (80030c4 <SD_WriteMultiBlocks+0xd8>)
 8003030:	f004 f826 	bl	8007080 <HAL_GPIO_WritePin>
        return SD_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e03e      	b.n	80030b6 <SD_WriteMultiBlocks+0xca>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 8003038:	20fc      	movs	r0, #252	; 0xfc
 800303a:	f7ff fccb 	bl	80029d4 <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 800303e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7ff fcf0 	bl	8002a28 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 8003048:	20ff      	movs	r0, #255	; 0xff
 800304a:	f7ff fcc3 	bl	80029d4 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 800304e:	20ff      	movs	r0, #255	; 0xff
 8003050:	f7ff fcc0 	bl	80029d4 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8003054:	f7ff fcd0 	bl	80029f8 <SD_ReceiveByte>
 8003058:	4603      	mov	r3, r0
 800305a:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	2b05      	cmp	r3, #5
 8003064:	d006      	beq.n	8003074 <SD_WriteMultiBlocks+0x88>
            SD_CS_HIGH();
 8003066:	2201      	movs	r2, #1
 8003068:	2110      	movs	r1, #16
 800306a:	4816      	ldr	r0, [pc, #88]	; (80030c4 <SD_WriteMultiBlocks+0xd8>)
 800306c:	f004 f808 	bl	8007080 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e020      	b.n	80030b6 <SD_WriteMultiBlocks+0xca>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 8003074:	bf00      	nop
 8003076:	f7ff fcbf 	bl	80029f8 <SD_ReceiveByte>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0fa      	beq.n	8003076 <SD_WriteMultiBlocks+0x8a>
        buff += 512;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003086:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	1e5a      	subs	r2, r3, #1
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1d2      	bne.n	8003038 <SD_WriteMultiBlocks+0x4c>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 8003092:	20fd      	movs	r0, #253	; 0xfd
 8003094:	f7ff fc9e 	bl	80029d4 <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 8003098:	bf00      	nop
 800309a:	f7ff fcad 	bl	80029f8 <SD_ReceiveByte>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0fa      	beq.n	800309a <SD_WriteMultiBlocks+0xae>

    SD_CS_HIGH();
 80030a4:	2201      	movs	r2, #1
 80030a6:	2110      	movs	r1, #16
 80030a8:	4806      	ldr	r0, [pc, #24]	; (80030c4 <SD_WriteMultiBlocks+0xd8>)
 80030aa:	f003 ffe9 	bl	8007080 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 80030ae:	20ff      	movs	r0, #255	; 0xff
 80030b0:	f7ff fc90 	bl	80029d4 <SD_TransmitByte>

    return SD_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	2000bb90 	.word	0x2000bb90
 80030c4:	40020000 	.word	0x40020000

080030c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_MspInit+0x4c>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	4a0f      	ldr	r2, [pc, #60]	; (8003114 <HAL_MspInit+0x4c>)
 80030d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030dc:	6453      	str	r3, [r2, #68]	; 0x44
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <HAL_MspInit+0x4c>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_MspInit+0x4c>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <HAL_MspInit+0x4c>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_MspInit+0x4c>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800

08003118 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	; 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a47      	ldr	r2, [pc, #284]	; (8003254 <HAL_SPI_MspInit+0x13c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	f040 8088 	bne.w	800324c <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800313c:	2300      	movs	r3, #0
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	4b45      	ldr	r3, [pc, #276]	; (8003258 <HAL_SPI_MspInit+0x140>)
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	4a44      	ldr	r2, [pc, #272]	; (8003258 <HAL_SPI_MspInit+0x140>)
 8003146:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800314a:	6453      	str	r3, [r2, #68]	; 0x44
 800314c:	4b42      	ldr	r3, [pc, #264]	; (8003258 <HAL_SPI_MspInit+0x140>)
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	4b3e      	ldr	r3, [pc, #248]	; (8003258 <HAL_SPI_MspInit+0x140>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	4a3d      	ldr	r2, [pc, #244]	; (8003258 <HAL_SPI_MspInit+0x140>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6313      	str	r3, [r2, #48]	; 0x30
 8003168:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <HAL_SPI_MspInit+0x140>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003174:	23e0      	movs	r3, #224	; 0xe0
 8003176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003180:	2303      	movs	r3, #3
 8003182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003184:	2305      	movs	r3, #5
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	4619      	mov	r1, r3
 800318e:	4833      	ldr	r0, [pc, #204]	; (800325c <HAL_SPI_MspInit+0x144>)
 8003190:	f003 fdf2 	bl	8006d78 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003194:	4b32      	ldr	r3, [pc, #200]	; (8003260 <HAL_SPI_MspInit+0x148>)
 8003196:	4a33      	ldr	r2, [pc, #204]	; (8003264 <HAL_SPI_MspInit+0x14c>)
 8003198:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800319a:	4b31      	ldr	r3, [pc, #196]	; (8003260 <HAL_SPI_MspInit+0x148>)
 800319c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80031a0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031a2:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <HAL_SPI_MspInit+0x148>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031a8:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_SPI_MspInit+0x148>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031ae:	4b2c      	ldr	r3, [pc, #176]	; (8003260 <HAL_SPI_MspInit+0x148>)
 80031b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031b6:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <HAL_SPI_MspInit+0x148>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031bc:	4b28      	ldr	r3, [pc, #160]	; (8003260 <HAL_SPI_MspInit+0x148>)
 80031be:	2200      	movs	r2, #0
 80031c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80031c2:	4b27      	ldr	r3, [pc, #156]	; (8003260 <HAL_SPI_MspInit+0x148>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031c8:	4b25      	ldr	r3, [pc, #148]	; (8003260 <HAL_SPI_MspInit+0x148>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_SPI_MspInit+0x148>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80031d4:	4822      	ldr	r0, [pc, #136]	; (8003260 <HAL_SPI_MspInit+0x148>)
 80031d6:	f003 fa5f 	bl	8006698 <HAL_DMA_Init>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80031e0:	f7fe fd02 	bl	8001be8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <HAL_SPI_MspInit+0x148>)
 80031e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80031ea:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <HAL_SPI_MspInit+0x148>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_SPI_MspInit+0x150>)
 80031f2:	4a1e      	ldr	r2, [pc, #120]	; (800326c <HAL_SPI_MspInit+0x154>)
 80031f4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <HAL_SPI_MspInit+0x150>)
 80031f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031fe:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_SPI_MspInit+0x150>)
 8003200:	2240      	movs	r2, #64	; 0x40
 8003202:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003204:	4b18      	ldr	r3, [pc, #96]	; (8003268 <HAL_SPI_MspInit+0x150>)
 8003206:	2200      	movs	r2, #0
 8003208:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800320a:	4b17      	ldr	r3, [pc, #92]	; (8003268 <HAL_SPI_MspInit+0x150>)
 800320c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003210:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <HAL_SPI_MspInit+0x150>)
 8003214:	2200      	movs	r2, #0
 8003216:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003218:	4b13      	ldr	r3, [pc, #76]	; (8003268 <HAL_SPI_MspInit+0x150>)
 800321a:	2200      	movs	r2, #0
 800321c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_SPI_MspInit+0x150>)
 8003220:	2200      	movs	r2, #0
 8003222:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_SPI_MspInit+0x150>)
 8003226:	2200      	movs	r2, #0
 8003228:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800322a:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <HAL_SPI_MspInit+0x150>)
 800322c:	2200      	movs	r2, #0
 800322e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003230:	480d      	ldr	r0, [pc, #52]	; (8003268 <HAL_SPI_MspInit+0x150>)
 8003232:	f003 fa31 	bl	8006698 <HAL_DMA_Init>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800323c:	f7fe fcd4 	bl	8001be8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_SPI_MspInit+0x150>)
 8003244:	649a      	str	r2, [r3, #72]	; 0x48
 8003246:	4a08      	ldr	r2, [pc, #32]	; (8003268 <HAL_SPI_MspInit+0x150>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800324c:	bf00      	nop
 800324e:	3728      	adds	r7, #40	; 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40013000 	.word	0x40013000
 8003258:	40023800 	.word	0x40023800
 800325c:	40020000 	.word	0x40020000
 8003260:	2000b274 	.word	0x2000b274
 8003264:	40026410 	.word	0x40026410
 8003268:	2000b2d4 	.word	0x2000b2d4
 800326c:	40026440 	.word	0x40026440

08003270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <HAL_UART_MspInit+0x84>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d12c      	bne.n	80032ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <HAL_UART_MspInit+0x88>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	4a17      	ldr	r2, [pc, #92]	; (80032f8 <HAL_UART_MspInit+0x88>)
 800329c:	f043 0310 	orr.w	r3, r3, #16
 80032a0:	6453      	str	r3, [r2, #68]	; 0x44
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <HAL_UART_MspInit+0x88>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <HAL_UART_MspInit+0x88>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a10      	ldr	r2, [pc, #64]	; (80032f8 <HAL_UART_MspInit+0x88>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <HAL_UART_MspInit+0x88>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d8:	2303      	movs	r3, #3
 80032da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032dc:	2307      	movs	r3, #7
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 0314 	add.w	r3, r7, #20
 80032e4:	4619      	mov	r1, r3
 80032e6:	4805      	ldr	r0, [pc, #20]	; (80032fc <HAL_UART_MspInit+0x8c>)
 80032e8:	f003 fd46 	bl	8006d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80032ec:	bf00      	nop
 80032ee:	3728      	adds	r7, #40	; 0x28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40011000 	.word	0x40011000
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40020000 	.word	0x40020000

08003300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003304:	e7fe      	b.n	8003304 <NMI_Handler+0x4>

08003306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800330a:	e7fe      	b.n	800330a <HardFault_Handler+0x4>

0800330c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003310:	e7fe      	b.n	8003310 <MemManage_Handler+0x4>

08003312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003312:	b480      	push	{r7}
 8003314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003316:	e7fe      	b.n	8003316 <BusFault_Handler+0x4>

08003318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800331c:	e7fe      	b.n	800331c <UsageFault_Handler+0x4>

0800331e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800334c:	f003 f84e 	bl	80063ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}

08003354 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003358:	2001      	movs	r0, #1
 800335a:	f003 feab 	bl	80070b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <DMA2_Stream0_IRQHandler+0x10>)
 800336a:	f003 fa9b 	bl	80068a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	2000b274 	.word	0x2000b274

08003378 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800337c:	4802      	ldr	r0, [pc, #8]	; (8003388 <DMA2_Stream2_IRQHandler+0x10>)
 800337e:	f003 fa91 	bl	80068a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	2000b2d4 	.word	0x2000b2d4

0800338c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <OTG_FS_IRQHandler+0x10>)
 8003392:	f003 ffeb 	bl	800736c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	2000d2b0 	.word	0x2000d2b0

080033a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e00a      	b.n	80033c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033b2:	f3af 8000 	nop.w
 80033b6:	4601      	mov	r1, r0
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	60ba      	str	r2, [r7, #8]
 80033be:	b2ca      	uxtb	r2, r1
 80033c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3301      	adds	r3, #1
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	dbf0      	blt.n	80033b2 <_read+0x12>
  }

  return len;
 80033d0:	687b      	ldr	r3, [r7, #4]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <_close>:
  }
  return len;
}

int _close(int file)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003402:	605a      	str	r2, [r3, #4]
  return 0;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <_isatty>:

int _isatty(int file)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800341a:	2301      	movs	r3, #1
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <_sbrk+0x5c>)
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <_sbrk+0x60>)
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003458:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <_sbrk+0x64>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <_sbrk+0x64>)
 8003462:	4a12      	ldr	r2, [pc, #72]	; (80034ac <_sbrk+0x68>)
 8003464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <_sbrk+0x64>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	429a      	cmp	r2, r3
 8003472:	d207      	bcs.n	8003484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003474:	f00f f9fa 	bl	801286c <__errno>
 8003478:	4603      	mov	r3, r0
 800347a:	220c      	movs	r2, #12
 800347c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	e009      	b.n	8003498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <_sbrk+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800348a:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <_sbrk+0x64>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	4a05      	ldr	r2, [pc, #20]	; (80034a8 <_sbrk+0x64>)
 8003494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003496:	68fb      	ldr	r3, [r7, #12]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20020000 	.word	0x20020000
 80034a4:	00000400 	.word	0x00000400
 80034a8:	2000bd94 	.word	0x2000bd94
 80034ac:	2000db00 	.word	0x2000db00

080034b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <SystemInit+0x20>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	4a05      	ldr	r2, [pc, #20]	; (80034d0 <SystemInit+0x20>)
 80034bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800350c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034d8:	f7ff ffea 	bl	80034b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034dc:	480c      	ldr	r0, [pc, #48]	; (8003510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034de:	490d      	ldr	r1, [pc, #52]	; (8003514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034e0:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e4:	e002      	b.n	80034ec <LoopCopyDataInit>

080034e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ea:	3304      	adds	r3, #4

080034ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f0:	d3f9      	bcc.n	80034e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034f4:	4c0a      	ldr	r4, [pc, #40]	; (8003520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f8:	e001      	b.n	80034fe <LoopFillZerobss>

080034fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034fc:	3204      	adds	r2, #4

080034fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003500:	d3fb      	bcc.n	80034fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003502:	f00f f9b9 	bl	8012878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003506:	f7fd ff83 	bl	8001410 <main>
  bx  lr    
 800350a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800350c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003514:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8003518:	08027c50 	.word	0x08027c50
  ldr r2, =_sbss
 800351c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8003520:	2000db00 	.word	0x2000db00

08003524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003524:	e7fe      	b.n	8003524 <ADC_IRQHandler>

08003526 <arm_cmplx_mag_f32>:
#else
ARM_DSP_ATTRIBUTE void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8003526:	b480      	push	{r7}
 8003528:	b08b      	sub	sp, #44	; 0x2c
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8003536:	e030      	b.n	800359a <arm_cmplx_mag_f32+0x74>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1d1a      	adds	r2, r3, #4
 800353c:	60fa      	str	r2, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	623b      	str	r3, [r7, #32]
    imag = *pSrc++;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1d1a      	adds	r2, r3, #4
 8003546:	60fa      	str	r2, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	61fb      	str	r3, [r7, #28]

    /* store result in destination buffer. */
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 800354c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003550:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003554:	edd7 7a07 	vldr	s15, [r7, #28]
 8003558:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800355c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	1d1a      	adds	r2, r3, #4
 8003564:	60ba      	str	r2, [r7, #8]
 8003566:	edc7 7a06 	vstr	s15, [r7, #24]
 800356a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800356c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003570:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003578:	db07      	blt.n	800358a <arm_cmplx_mag_f32+0x64>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 800357a:	edd7 7a06 	vldr	s15, [r7, #24]
 800357e:	eef1 7ae7 	vsqrt.f32	s15, s15
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	edc3 7a00 	vstr	s15, [r3]
  #endif
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8003588:	e004      	b.n	8003594 <arm_cmplx_mag_f32+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8003592:	bf00      	nop

    /* Decrement loop counter */
    blkCnt--;
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	3b01      	subs	r3, #1
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1cb      	bne.n	8003538 <arm_cmplx_mag_f32+0x12>
  }

}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	372c      	adds	r7, #44	; 0x2c
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
ARM_DSP_ATTRIBUTE float32_t arm_cos_f32(
  float32_t x)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b08b      	sub	sp, #44	; 0x2c
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 80035ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80035be:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80036b0 <arm_cos_f32+0x100>
 80035c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035c6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80035ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035ce:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80035d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80035d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035da:	ee17 3a90 	vmov	r3, s15
 80035de:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80035e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80035e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ec:	d502      	bpl.n	80035f4 <arm_cos_f32+0x44>
  {
    n--;
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	ee07 3a90 	vmov	s15, r3
 80035fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035fe:	ed97 7a06 	vldr	s14, [r7, #24]
 8003602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003606:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800360a:	edd7 7a06 	vldr	s15, [r7, #24]
 800360e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80036b4 <arm_cos_f32+0x104>
 8003612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003616:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800361a:	edd7 7a07 	vldr	s15, [r7, #28]
 800361e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003622:	ee17 3a90 	vmov	r3, s15
 8003626:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8003628:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800362a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800362e:	d309      	bcc.n	8003644 <arm_cos_f32+0x94>
    index = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8003634:	edd7 7a07 	vldr	s15, [r7, #28]
 8003638:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80036b4 <arm_cos_f32+0x104>
 800363c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003640:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8003644:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003656:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 800365a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800365c:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <arm_cos_f32+0x108>)
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8003666:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003668:	3301      	adds	r3, #1
 800366a:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <arm_cos_f32+0x108>)
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8003674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003678:	edd7 7a05 	vldr	s15, [r7, #20]
 800367c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003680:	edd7 7a04 	vldr	s15, [r7, #16]
 8003684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003688:	edd7 6a05 	vldr	s13, [r7, #20]
 800368c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003698:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	ee07 3a90 	vmov	s15, r3
}
 80036a2:	eeb0 0a67 	vmov.f32	s0, s15
 80036a6:	372c      	adds	r7, #44	; 0x2c
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	3e22f983 	.word	0x3e22f983
 80036b4:	44000000 	.word	0x44000000
 80036b8:	08026ee8 	.word	0x08026ee8

080036bc <arm_sin_f32>:
  @return        sin(x)
 */

ARM_DSP_ATTRIBUTE float32_t arm_sin_f32(
  float32_t x)
{
 80036bc:	b480      	push	{r7}
 80036be:	b08b      	sub	sp, #44	; 0x2c
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 80036c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80036ca:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80037b4 <arm_sin_f32+0xf8>
 80036ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036d2:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80036d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80036da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036de:	ee17 3a90 	vmov	r3, s15
 80036e2:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80036e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80036e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f0:	d502      	bpl.n	80036f8 <arm_sin_f32+0x3c>
  {
    n--;
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003702:	ed97 7a06 	vldr	s14, [r7, #24]
 8003706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800370a:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800370e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003712:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80037b8 <arm_sin_f32+0xfc>
 8003716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800371a:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800371e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003726:	ee17 3a90 	vmov	r3, s15
 800372a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800372c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800372e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003732:	d309      	bcc.n	8003748 <arm_sin_f32+0x8c>
    index = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8003738:	edd7 7a07 	vldr	s15, [r7, #28]
 800373c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80037b8 <arm_sin_f32+0xfc>
 8003740:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003744:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8003748:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003752:	ed97 7a07 	vldr	s14, [r7, #28]
 8003756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800375a:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800375e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003760:	4a16      	ldr	r2, [pc, #88]	; (80037bc <arm_sin_f32+0x100>)
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800376a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800376c:	3301      	adds	r3, #1
 800376e:	4a13      	ldr	r2, [pc, #76]	; (80037bc <arm_sin_f32+0x100>)
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8003778:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800377c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003780:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003784:	edd7 7a04 	vldr	s15, [r7, #16]
 8003788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800378c:	edd7 6a05 	vldr	s13, [r7, #20]
 8003790:	edd7 7a03 	vldr	s15, [r7, #12]
 8003794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800379c:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	ee07 3a90 	vmov	s15, r3
}
 80037a6:	eeb0 0a67 	vmov.f32	s0, s15
 80037aa:	372c      	adds	r7, #44	; 0x2c
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	3e22f983 	.word	0x3e22f983
 80037b8:	44000000 	.word	0x44000000
 80037bc:	08026ee8 	.word	0x08026ee8

080037c0 <arm_bitreversal_32>:

ARM_DSP_ATTRIBUTE void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	; 0x24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	460b      	mov	r3, r1
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	e043      	b.n	800385c <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	4413      	add	r3, r2
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	089b      	lsrs	r3, r3, #2
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	3301      	adds	r3, #1
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4413      	add	r3, r2
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	441a      	add	r2, r3
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	68f9      	ldr	r1, [r7, #12]
 8003810:	440b      	add	r3, r1
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	3301      	adds	r3, #1
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3301      	adds	r3, #1
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	441a      	add	r2, r3
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	3301      	adds	r3, #1
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	68f9      	ldr	r1, [r7, #12]
 8003842:	440b      	add	r3, r1
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3301      	adds	r3, #1
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	601a      	str	r2, [r3, #0]

    i += 2;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	3302      	adds	r3, #2
 800385a:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 800385c:	897b      	ldrh	r3, [r7, #10]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	429a      	cmp	r2, r3
 8003862:	d3b7      	bcc.n	80037d4 <arm_bitreversal_32+0x14>
  }
}
 8003864:	bf00      	nop
 8003866:	bf00      	nop
 8003868:	3724      	adds	r7, #36	; 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <arm_cfft_radix8by2_f32>:
  @endcode

 */

static void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b0a0      	sub	sp, #128	; 0x80
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8003882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	4413      	add	r3, r2
 800388a:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8003896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003898:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 800389a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 80038a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	4413      	add	r3, r2
 80038a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 80038aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80038b0:	4413      	add	r3, r2
 80038b2:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 80038b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ba:	e1b6      	b.n	8003c2a <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 80038d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 80038da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 80038e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 80038e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 80038ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 80038f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 80038f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 80038fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8003904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 800390a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8003910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8003916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 800391c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003920:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	1d1a      	adds	r2, r3, #4
 8003928:	603a      	str	r2, [r7, #0]
 800392a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800392e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8003932:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003936:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	1d1a      	adds	r2, r3, #4
 800393e:	603a      	str	r2, [r7, #0]
 8003940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003944:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8003948:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800394c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	1d1a      	adds	r2, r3, #4
 8003954:	603a      	str	r2, [r7, #0]
 8003956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800395a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800395e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003962:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	1d1a      	adds	r2, r3, #4
 800396a:	603a      	str	r2, [r7, #0]
 800396c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003970:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8003974:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003978:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800397c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003980:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8003984:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003988:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800398c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003990:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8003994:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003998:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800399c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80039a4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80039a8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80039ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039b0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 80039b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80039b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80039bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039be:	1d1a      	adds	r2, r3, #4
 80039c0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c6:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80039ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80039ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80039d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039d4:	1d1a      	adds	r2, r3, #4
 80039d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039dc:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 80039e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80039e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80039e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039ea:	1d1a      	adds	r2, r3, #4
 80039ec:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f2:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 80039f6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80039fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80039fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a00:	1d1a      	adds	r2, r3, #4
 8003a02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a08:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8003a0c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a10:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a18:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8003a1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a20:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a28:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8003a2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a30:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a38:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8003a3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a40:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a48:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8003a4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a4e:	1d1a      	adds	r2, r3, #4
 8003a50:	673a      	str	r2, [r7, #112]	; 0x70
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8003a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a58:	1d1a      	adds	r2, r3, #4
 8003a5a:	673a      	str	r2, [r7, #112]	; 0x70
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8003a60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a64:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8003a70:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a74:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 8003a80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a84:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 8003a90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a94:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8003aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa2:	1d1a      	adds	r2, r3, #4
 8003aa4:	677a      	str	r2, [r7, #116]	; 0x74
 8003aa6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003aaa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ab2:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8003ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab8:	1d1a      	adds	r2, r3, #4
 8003aba:	677a      	str	r2, [r7, #116]	; 0x74
 8003abc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003ac0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac8:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8003acc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ad0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 8003adc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ae0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 8003aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003af0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 8003afc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b00:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b08:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8003b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b0e:	1d1a      	adds	r2, r3, #4
 8003b10:	67ba      	str	r2, [r7, #120]	; 0x78
 8003b12:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003b16:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b1e:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8003b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b24:	1d1a      	adds	r2, r3, #4
 8003b26:	67ba      	str	r2, [r7, #120]	; 0x78
 8003b28:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003b2c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b34:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8003b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b3a:	1d1a      	adds	r2, r3, #4
 8003b3c:	673a      	str	r2, [r7, #112]	; 0x70
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8003b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b44:	1d1a      	adds	r2, r3, #4
 8003b46:	673a      	str	r2, [r7, #112]	; 0x70
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 8003b4c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003b50:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b58:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 8003b5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003b60:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b68:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8003b6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003b70:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b78:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8003b7c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003b80:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b88:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8003b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8e:	1d1a      	adds	r2, r3, #4
 8003b90:	677a      	str	r2, [r7, #116]	; 0x74
 8003b92:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003b96:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b9e:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8003ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba4:	1d1a      	adds	r2, r3, #4
 8003ba6:	677a      	str	r2, [r7, #116]	; 0x74
 8003ba8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003bac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bb4:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8003bb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bbc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8003bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bcc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8003bd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bdc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8003be8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8003bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bfa:	1d1a      	adds	r2, r3, #4
 8003bfc:	67ba      	str	r2, [r7, #120]	; 0x78
 8003bfe:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003c02:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003c06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c0a:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8003c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c10:	1d1a      	adds	r2, r3, #4
 8003c12:	67ba      	str	r2, [r7, #120]	; 0x78
 8003c14:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003c18:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c20:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8003c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c26:	3b01      	subs	r3, #1
 8003c28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f47f ae45 	bne.w	80038bc <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8003c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c34:	b299      	uxth	r1, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003c3e:	f001 f80f 	bl	8004c60 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8003c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c44:	b299      	uxth	r1, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003c4e:	f001 f807 	bl	8004c60 <arm_radix8_butterfly_f32>
}
 8003c52:	bf00      	nop
 8003c54:	3780      	adds	r7, #128	; 0x80
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <arm_cfft_radix8by4_f32>:

static void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b0ac      	sub	sp, #176	; 0xb0
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8003c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8003c7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003c88:	4413      	add	r3, r2
 8003c8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8003c8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003c98:	4413      	add	r3, r2
 8003c9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8003ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ca6:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8003ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cac:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8003cae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cb2:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8003cb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cb8:	3b04      	subs	r3, #4
 8003cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8003cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cc2:	3b04      	subs	r3, #4
 8003cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8003cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ccc:	3b04      	subs	r3, #4
 8003cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8003cd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003cdc:	4413      	add	r3, r2
 8003cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003cee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8003cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cfe:	085b      	lsrs	r3, r3, #1
 8003d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8003d04:	2302      	movs	r3, #2
 8003d06:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8003d08:	2304      	movs	r3, #4
 8003d0a:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8003d0c:	2306      	movs	r3, #6
 8003d0e:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	ed93 7a00 	vldr	s14, [r3]
 8003d16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d1a:	edd3 7a00 	vldr	s15, [r3]
 8003d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d22:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	ed93 7a00 	vldr	s14, [r3]
 8003d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d30:	edd3 7a00 	vldr	s15, [r3]
 8003d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d38:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	ed93 7a00 	vldr	s14, [r3]
 8003d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d48:	3304      	adds	r3, #4
 8003d4a:	edd3 7a00 	vldr	s15, [r3]
 8003d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d52:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	ed93 7a00 	vldr	s14, [r3]
 8003d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d62:	3304      	adds	r3, #4
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d6c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003d70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d74:	3304      	adds	r3, #4
 8003d76:	ed93 7a00 	vldr	s14, [r3]
 8003d7a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d86:	3304      	adds	r3, #4
 8003d88:	edd3 7a00 	vldr	s15, [r3]
 8003d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d90:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8003d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d98:	edd3 7a00 	vldr	s15, [r3]
 8003d9c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003da0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003da8:	edd3 7a00 	vldr	s15, [r3]
 8003dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8003db4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003db8:	edd3 7a00 	vldr	s15, [r3]
 8003dbc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003dc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dc8:	edd3 7a00 	vldr	s15, [r3]
 8003dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dd0:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8003dd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dd8:	3304      	adds	r3, #4
 8003dda:	edd3 7a00 	vldr	s15, [r3]
 8003dde:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003de2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003de6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dea:	3304      	adds	r3, #4
 8003dec:	edd3 7a00 	vldr	s15, [r3]
 8003df0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003df4:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8003df8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	edd3 7a00 	vldr	s15, [r3]
 8003e02:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003e06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e0e:	3304      	adds	r3, #4
 8003e10:	edd3 7a00 	vldr	s15, [r3]
 8003e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e18:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8003e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e20:	ed93 7a00 	vldr	s14, [r3]
 8003e24:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003e28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e30:	edd3 7a00 	vldr	s15, [r3]
 8003e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e38:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8003e3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e40:	ed93 7a00 	vldr	s14, [r3]
 8003e44:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e50:	edd3 7a00 	vldr	s15, [r3]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	1d1a      	adds	r2, r3, #4
 8003e58:	603a      	str	r2, [r7, #0]
 8003e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e5e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e66:	3304      	adds	r3, #4
 8003e68:	ed93 7a00 	vldr	s14, [r3]
 8003e6c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003e70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e78:	3304      	adds	r3, #4
 8003e7a:	edd3 7a00 	vldr	s15, [r3]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	1d1a      	adds	r2, r3, #4
 8003e82:	603a      	str	r2, [r7, #0]
 8003e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e88:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8003e8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e90:	1d1a      	adds	r2, r3, #4
 8003e92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8003e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e98:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8003e9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e9e:	1d1a      	adds	r2, r3, #4
 8003ea0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8003ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea6:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8003ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eac:	1d1a      	adds	r2, r3, #4
 8003eae:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8003eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eba:	1d1a      	adds	r2, r3, #4
 8003ebc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ec0:	6a3a      	ldr	r2, [r7, #32]
 8003ec2:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8003ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ec8:	1d1a      	adds	r2, r3, #4
 8003eca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8003ed2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ed6:	1d1a      	adds	r2, r3, #4
 8003ed8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8003ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003ee8:	4413      	add	r3, r2
 8003eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8003eee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8003efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f04:	4413      	add	r3, r2
 8003f06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8003f0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f0e:	3b02      	subs	r3, #2
 8003f10:	085b      	lsrs	r3, r3, #1
 8003f12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f16:	e31c      	b.n	8004552 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	ed93 7a00 	vldr	s14, [r3]
 8003f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f22:	edd3 7a00 	vldr	s15, [r3]
 8003f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f2a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	ed93 7a00 	vldr	s14, [r3]
 8003f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f38:	edd3 7a00 	vldr	s15, [r3]
 8003f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f40:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	3304      	adds	r3, #4
 8003f48:	ed93 7a00 	vldr	s14, [r3]
 8003f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f50:	3304      	adds	r3, #4
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f5a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	3304      	adds	r3, #4
 8003f62:	ed93 7a00 	vldr	s14, [r3]
 8003f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	edd3 7a00 	vldr	s15, [r3]
 8003f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f74:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003f78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	ed93 7a00 	vldr	s14, [r3]
 8003f82:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003f86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f8e:	3304      	adds	r3, #4
 8003f90:	edd3 7a00 	vldr	s15, [r3]
 8003f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f98:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8003f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fa0:	edd3 7a00 	vldr	s15, [r3]
 8003fa4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003fa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fb0:	edd3 7a00 	vldr	s15, [r3]
 8003fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8003fbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fc0:	edd3 7a00 	vldr	s15, [r3]
 8003fc4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003fc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fd0:	edd3 7a00 	vldr	s15, [r3]
 8003fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fd8:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8003fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	edd3 7a00 	vldr	s15, [r3]
 8003fe6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003fea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	edd3 7a00 	vldr	s15, [r3]
 8003ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ffc:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8004000:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004004:	3304      	adds	r3, #4
 8004006:	edd3 7a00 	vldr	s15, [r3]
 800400a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800400e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004012:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004016:	3304      	adds	r3, #4
 8004018:	edd3 7a00 	vldr	s15, [r3]
 800401c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004020:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004024:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004028:	ed93 7a00 	vldr	s14, [r3]
 800402c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004034:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004038:	edd3 7a00 	vldr	s15, [r3]
 800403c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004040:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004044:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004048:	ed93 7a00 	vldr	s14, [r3]
 800404c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004058:	edd3 7a00 	vldr	s15, [r3]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	603a      	str	r2, [r7, #0]
 8004062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004066:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800406a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800406e:	3304      	adds	r3, #4
 8004070:	ed93 7a00 	vldr	s14, [r3]
 8004074:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004078:	ee37 7a27 	vadd.f32	s14, s14, s15
 800407c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004080:	3304      	adds	r3, #4
 8004082:	edd3 7a00 	vldr	s15, [r3]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	1d1a      	adds	r2, r3, #4
 800408a:	603a      	str	r2, [r7, #0]
 800408c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004090:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8004094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004098:	3b04      	subs	r3, #4
 800409a:	ed93 7a00 	vldr	s14, [r3]
 800409e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040a2:	3b04      	subs	r3, #4
 80040a4:	edd3 7a00 	vldr	s15, [r3]
 80040a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040ac:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80040b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040b4:	3b04      	subs	r3, #4
 80040b6:	ed93 7a00 	vldr	s14, [r3]
 80040ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040be:	3b04      	subs	r3, #4
 80040c0:	edd3 7a00 	vldr	s15, [r3]
 80040c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80040cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040d0:	ed93 7a00 	vldr	s14, [r3]
 80040d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 80040e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040e8:	ed93 7a00 	vldr	s14, [r3]
 80040ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040f0:	edd3 7a00 	vldr	s15, [r3]
 80040f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040f8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 80040fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004100:	ed93 7a00 	vldr	s14, [r3]
 8004104:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004108:	edd3 7a00 	vldr	s15, [r3]
 800410c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004110:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004118:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800411c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004120:	ed93 7a00 	vldr	s14, [r3]
 8004124:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004128:	edd3 7a00 	vldr	s15, [r3]
 800412c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004130:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004134:	3b04      	subs	r3, #4
 8004136:	edd3 7a00 	vldr	s15, [r3]
 800413a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800413e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004142:	3b04      	subs	r3, #4
 8004144:	edd3 7a00 	vldr	s15, [r3]
 8004148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800414c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8004150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004154:	3b04      	subs	r3, #4
 8004156:	edd3 7a00 	vldr	s15, [r3]
 800415a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800415e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004166:	3b04      	subs	r3, #4
 8004168:	edd3 7a00 	vldr	s15, [r3]
 800416c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004170:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8004174:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004178:	edd3 7a00 	vldr	s15, [r3]
 800417c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004180:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004184:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004190:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8004194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004198:	ed93 7a00 	vldr	s14, [r3]
 800419c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041a0:	edd3 7a00 	vldr	s15, [r3]
 80041a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80041ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041b0:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80041b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041b8:	3b04      	subs	r3, #4
 80041ba:	ed93 7a00 	vldr	s14, [r3]
 80041be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041c2:	3b04      	subs	r3, #4
 80041c4:	edd3 7a00 	vldr	s15, [r3]
 80041c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041cc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80041d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041d4:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80041d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041dc:	ed93 7a00 	vldr	s14, [r3]
 80041e0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80041e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041ec:	edd3 7a00 	vldr	s15, [r3]
 80041f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041f4:	1f1a      	subs	r2, r3, #4
 80041f6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041fe:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8004202:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004206:	3b04      	subs	r3, #4
 8004208:	ed93 7a00 	vldr	s14, [r3]
 800420c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004210:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004214:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004218:	3b04      	subs	r3, #4
 800421a:	edd3 7a00 	vldr	s15, [r3]
 800421e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004222:	1f1a      	subs	r2, r3, #4
 8004224:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800422c:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8004230:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004234:	1d1a      	adds	r2, r3, #4
 8004236:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800423e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004242:	1d1a      	adds	r2, r3, #4
 8004244:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800424c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004250:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004258:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 800425c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004260:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004268:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 800426c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004270:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004278:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 800427c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004280:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004288:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 800428c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004290:	1d1a      	adds	r2, r3, #4
 8004292:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004296:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800429a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800429e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042a2:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 80042a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042aa:	1d1a      	adds	r2, r3, #4
 80042ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80042b0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80042b4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80042b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042bc:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 80042c0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80042c4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80042c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042cc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 80042d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80042d4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80042d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042dc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 80042e0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80042e4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80042e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ec:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 80042f0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80042f4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80042f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8004300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004304:	1f1a      	subs	r2, r3, #4
 8004306:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800430a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800430e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004316:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 800431a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800431e:	1f1a      	subs	r2, r3, #4
 8004320:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004324:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004328:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800432c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004330:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8004334:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 800433c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004340:	3304      	adds	r3, #4
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8004346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800434e:	4413      	add	r3, r2
 8004350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8004354:	edd7 7a07 	vldr	s15, [r7, #28]
 8004358:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800435c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004360:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8004364:	edd7 7a08 	vldr	s15, [r7, #32]
 8004368:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800436c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004370:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8004374:	edd7 7a08 	vldr	s15, [r7, #32]
 8004378:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800437c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004380:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8004384:	edd7 7a07 	vldr	s15, [r7, #28]
 8004388:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800438c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004390:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8004394:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004398:	1d1a      	adds	r2, r3, #4
 800439a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800439e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80043a2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80043a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043aa:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 80043ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043b2:	1d1a      	adds	r2, r3, #4
 80043b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043b8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80043bc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80043c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043c4:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 80043c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80043cc:	eef1 7a67 	vneg.f32	s15, s15
 80043d0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80043d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 80043dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80043e0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80043e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 80043ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80043f0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80043f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 80043fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004400:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004408:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 800440c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004410:	1f1a      	subs	r2, r3, #4
 8004412:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004416:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800441a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800441e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004422:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8004426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800442a:	1f1a      	subs	r2, r3, #4
 800442c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004430:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004434:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800443c:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8004440:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8004448:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800444c:	3304      	adds	r3, #4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8004452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800445a:	4413      	add	r3, r2
 800445c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8004460:	edd7 7a03 	vldr	s15, [r7, #12]
 8004464:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8004470:	edd7 7a04 	vldr	s15, [r7, #16]
 8004474:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8004480:	edd7 7a04 	vldr	s15, [r7, #16]
 8004484:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8004490:	edd7 7a03 	vldr	s15, [r7, #12]
 8004494:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 80044a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044a4:	1d1a      	adds	r2, r3, #4
 80044a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80044aa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80044ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80044b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b6:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 80044ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044be:	1d1a      	adds	r2, r3, #4
 80044c0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80044c4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80044c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80044cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044d0:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 80044d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80044d8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80044dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 80044e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80044e8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80044ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 80044f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80044f8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80044fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004500:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8004504:	edd7 7a06 	vldr	s15, [r7, #24]
 8004508:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800450c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004510:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8004514:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004518:	1f1a      	subs	r2, r3, #4
 800451a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800451e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004522:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800452a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 800452e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004532:	1f1a      	subs	r2, r3, #4
 8004534:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004538:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800453c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004544:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8004548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800454c:	3b01      	subs	r3, #1
 800454e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004552:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004556:	2b00      	cmp	r3, #0
 8004558:	f47f acde 	bne.w	8003f18 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	ed93 7a00 	vldr	s14, [r3]
 8004562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004566:	edd3 7a00 	vldr	s15, [r3]
 800456a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800456e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	ed93 7a00 	vldr	s14, [r3]
 8004578:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800457c:	edd3 7a00 	vldr	s15, [r3]
 8004580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004584:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	3304      	adds	r3, #4
 800458c:	ed93 7a00 	vldr	s14, [r3]
 8004590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004594:	3304      	adds	r3, #4
 8004596:	edd3 7a00 	vldr	s15, [r3]
 800459a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800459e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	3304      	adds	r3, #4
 80045a6:	ed93 7a00 	vldr	s14, [r3]
 80045aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ae:	3304      	adds	r3, #4
 80045b0:	edd3 7a00 	vldr	s15, [r3]
 80045b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045b8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80045bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045c0:	3304      	adds	r3, #4
 80045c2:	ed93 7a00 	vldr	s14, [r3]
 80045c6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80045ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045d2:	3304      	adds	r3, #4
 80045d4:	edd3 7a00 	vldr	s15, [r3]
 80045d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045dc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80045e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045e4:	edd3 7a00 	vldr	s15, [r3]
 80045e8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80045ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045f4:	edd3 7a00 	vldr	s15, [r3]
 80045f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045fc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8004600:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004604:	edd3 7a00 	vldr	s15, [r3]
 8004608:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800460c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004614:	edd3 7a00 	vldr	s15, [r3]
 8004618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800461c:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8004620:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004624:	3304      	adds	r3, #4
 8004626:	edd3 7a00 	vldr	s15, [r3]
 800462a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800462e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004632:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004636:	3304      	adds	r3, #4
 8004638:	edd3 7a00 	vldr	s15, [r3]
 800463c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004640:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8004644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004648:	3304      	adds	r3, #4
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004652:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004656:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800465a:	3304      	adds	r3, #4
 800465c:	edd3 7a00 	vldr	s15, [r3]
 8004660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004664:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800466c:	ed93 7a00 	vldr	s14, [r3]
 8004670:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004674:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004678:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800467c:	edd3 7a00 	vldr	s15, [r3]
 8004680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004684:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004688:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800468c:	ed93 7a00 	vldr	s14, [r3]
 8004690:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004694:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004698:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800469c:	edd3 7a00 	vldr	s15, [r3]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	1d1a      	adds	r2, r3, #4
 80046a4:	603a      	str	r2, [r7, #0]
 80046a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046aa:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80046ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046b2:	3304      	adds	r3, #4
 80046b4:	ed93 7a00 	vldr	s14, [r3]
 80046b8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80046bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046c4:	3304      	adds	r3, #4
 80046c6:	edd3 7a00 	vldr	s15, [r3]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	1d1a      	adds	r2, r3, #4
 80046ce:	603a      	str	r2, [r7, #0]
 80046d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046d4:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 80046d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 80046e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046e4:	3304      	adds	r3, #4
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 80046ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80046ee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80046f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 80046fa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80046fe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004706:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 800470a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800470e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004716:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 800471a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800471e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004726:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 800472a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800472e:	1d1a      	adds	r2, r3, #4
 8004730:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004734:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004738:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800473c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004740:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8004744:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004748:	1d1a      	adds	r2, r3, #4
 800474a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800474e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004752:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800475a:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 800475e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8004766:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800476a:	3304      	adds	r3, #4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8004770:	edd7 7a07 	vldr	s15, [r7, #28]
 8004774:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8004780:	edd7 7a08 	vldr	s15, [r7, #32]
 8004784:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8004790:	edd7 7a08 	vldr	s15, [r7, #32]
 8004794:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 80047a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80047a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80047a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ac:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80047b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047b4:	1d1a      	adds	r2, r3, #4
 80047b6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047ba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80047be:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80047c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047c6:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80047ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047ce:	1d1a      	adds	r2, r3, #4
 80047d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047d4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80047d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80047dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047e0:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 80047e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 80047ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80047f0:	3304      	adds	r3, #4
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 80047f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80047fa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80047fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004802:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8004806:	edd7 7a04 	vldr	s15, [r7, #16]
 800480a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8004816:	edd7 7a04 	vldr	s15, [r7, #16]
 800481a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800481e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004822:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8004826:	edd7 7a03 	vldr	s15, [r7, #12]
 800482a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800482e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004832:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8004836:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800483a:	1d1a      	adds	r2, r3, #4
 800483c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004840:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004844:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800484c:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8004850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004854:	1d1a      	adds	r2, r3, #4
 8004856:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800485a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800485e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004866:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800486a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800486e:	b299      	uxth	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	2304      	movs	r3, #4
 8004876:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004878:	f000 f9f2 	bl	8004c60 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 800487c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004880:	b299      	uxth	r1, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	2304      	movs	r3, #4
 8004888:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800488a:	f000 f9e9 	bl	8004c60 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 800488e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004892:	b299      	uxth	r1, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	2304      	movs	r3, #4
 800489a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800489c:	f000 f9e0 	bl	8004c60 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80048a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048a4:	b299      	uxth	r1, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	2304      	movs	r3, #4
 80048ac:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80048ae:	f000 f9d7 	bl	8004c60 <arm_radix8_butterfly_f32>
}
 80048b2:	bf00      	nop
 80048b4:	37b0      	adds	r7, #176	; 0xb0
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <arm_cfft_f32>:
ARM_DSP_ATTRIBUTE void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b088      	sub	sp, #32
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	4611      	mov	r1, r2
 80048c6:	461a      	mov	r2, r3
 80048c8:	460b      	mov	r3, r1
 80048ca:	71fb      	strb	r3, [r7, #7]
 80048cc:	4613      	mov	r3, r2
 80048ce:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d117      	bne.n	800490c <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	3304      	adds	r3, #4
 80048e0:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	e00d      	b.n	8004904 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	edd3 7a00 	vldr	s15, [r3]
 80048ee:	eef1 7a67 	vneg.f32	s15, s15
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	3308      	adds	r3, #8
 80048fc:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3301      	adds	r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	429a      	cmp	r2, r3
 800490a:	d3ed      	bcc.n	80048e8 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004912:	d040      	beq.n	8004996 <arm_cfft_f32+0xdc>
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491a:	d845      	bhi.n	80049a8 <arm_cfft_f32+0xee>
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004922:	d033      	beq.n	800498c <arm_cfft_f32+0xd2>
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492a:	d83d      	bhi.n	80049a8 <arm_cfft_f32+0xee>
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004932:	d026      	beq.n	8004982 <arm_cfft_f32+0xc8>
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493a:	d835      	bhi.n	80049a8 <arm_cfft_f32+0xee>
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004942:	d028      	beq.n	8004996 <arm_cfft_f32+0xdc>
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800494a:	d82d      	bhi.n	80049a8 <arm_cfft_f32+0xee>
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004952:	d01b      	beq.n	800498c <arm_cfft_f32+0xd2>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495a:	d825      	bhi.n	80049a8 <arm_cfft_f32+0xee>
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b80      	cmp	r3, #128	; 0x80
 8004960:	d00f      	beq.n	8004982 <arm_cfft_f32+0xc8>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b80      	cmp	r3, #128	; 0x80
 8004966:	d81f      	bhi.n	80049a8 <arm_cfft_f32+0xee>
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2b40      	cmp	r3, #64	; 0x40
 800496c:	d013      	beq.n	8004996 <arm_cfft_f32+0xdc>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b40      	cmp	r3, #64	; 0x40
 8004972:	d819      	bhi.n	80049a8 <arm_cfft_f32+0xee>
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2b10      	cmp	r3, #16
 8004978:	d003      	beq.n	8004982 <arm_cfft_f32+0xc8>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b20      	cmp	r3, #32
 800497e:	d005      	beq.n	800498c <arm_cfft_f32+0xd2>
 8004980:	e012      	b.n	80049a8 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8004982:	68b9      	ldr	r1, [r7, #8]
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7fe ff74 	bl	8003872 <arm_cfft_radix8by2_f32>
    break;
 800498a:	e00d      	b.n	80049a8 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7ff f963 	bl	8003c5a <arm_cfft_radix8by4_f32>
    break;
 8004994:	e008      	b.n	80049a8 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	b299      	uxth	r1, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	2301      	movs	r3, #1
 80049a0:	68b8      	ldr	r0, [r7, #8]
 80049a2:	f000 f95d 	bl	8004c60 <arm_radix8_butterfly_f32>
    break;
 80049a6:	bf00      	nop
  }

  if ( bitReverseFlag )
 80049a8:	79bb      	ldrb	r3, [r7, #6]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8999      	ldrh	r1, [r3, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	461a      	mov	r2, r3
 80049b8:	68b8      	ldr	r0, [r7, #8]
 80049ba:	f7fe ff01 	bl	80037c0 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d130      	bne.n	8004a26 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d6:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80049de:	2300      	movs	r3, #0
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	e01c      	b.n	8004a1e <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	1d1a      	adds	r2, r3, #4
 80049e8:	61ba      	str	r2, [r7, #24]
 80049ea:	ed93 7a00 	vldr	s14, [r3]
 80049ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80049f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f6:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	edd3 7a00 	vldr	s15, [r3]
 8004a00:	eeb1 7a67 	vneg.f32	s14, s15
 8004a04:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	3304      	adds	r3, #4
 8004a16:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d3de      	bcc.n	80049e4 <arm_cfft_f32+0x12a>
    }
  }
}
 8004a26:	bf00      	nop
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024)
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	73fb      	strb	r3, [r7, #15]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a42:	801a      	strh	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <arm_cfft_init_2048_f32+0x44>)
 8004a4c:	899a      	ldrh	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	819a      	strh	r2, [r3, #12]
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <arm_cfft_init_2048_f32+0x44>)
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	609a      	str	r2, [r3, #8]
 8004a5a:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <arm_cfft_init_2048_f32+0x44>)
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	0802775c 	.word	0x0802775c

08004a78 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024)
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	2300      	movs	r3, #0
 8004a82:	73fb      	strb	r3, [r7, #15]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a8a:	801a      	strh	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <arm_cfft_init_1024_f32+0x44>)
 8004a94:	899a      	ldrh	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	819a      	strh	r2, [r3, #12]
 8004a9a:	4b08      	ldr	r3, [pc, #32]	; (8004abc <arm_cfft_init_1024_f32+0x44>)
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <arm_cfft_init_1024_f32+0x44>)
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	605a      	str	r2, [r3, #4]
 8004aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	0802774c 	.word	0x0802774c

08004ac0 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256)
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	73fb      	strb	r3, [r7, #15]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ad2:	801a      	strh	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <arm_cfft_init_512_f32+0x44>)
 8004adc:	899a      	ldrh	r2, [r3, #12]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	819a      	strh	r2, [r3, #12]
 8004ae2:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <arm_cfft_init_512_f32+0x44>)
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	609a      	str	r2, [r3, #8]
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <arm_cfft_init_512_f32+0x44>)
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	605a      	str	r2, [r3, #4]
 8004af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	0802773c 	.word	0x0802773c

08004b08 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256)
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	2300      	movs	r3, #0
 8004b12:	73fb      	strb	r3, [r7, #15]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <arm_cfft_init_256_f32+0x44>)
 8004b24:	899a      	ldrh	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	819a      	strh	r2, [r3, #12]
 8004b2a:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <arm_cfft_init_256_f32+0x44>)
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	609a      	str	r2, [r3, #8]
 8004b32:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <arm_cfft_init_256_f32+0x44>)
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	605a      	str	r2, [r3, #4]
 8004b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	0802772c 	.word	0x0802772c

08004b50 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64)
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	73fb      	strb	r3, [r7, #15]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2280      	movs	r2, #128	; 0x80
 8004b60:	801a      	strh	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	605a      	str	r2, [r3, #4]
 8004b68:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <arm_cfft_init_128_f32+0x40>)
 8004b6a:	899a      	ldrh	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	819a      	strh	r2, [r3, #12]
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <arm_cfft_init_128_f32+0x40>)
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	609a      	str	r2, [r3, #8]
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <arm_cfft_init_128_f32+0x40>)
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	605a      	str	r2, [r3, #4]
 8004b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	0802771c 	.word	0x0802771c

08004b94 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64)
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	73fb      	strb	r3, [r7, #15]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2240      	movs	r2, #64	; 0x40
 8004ba4:	801a      	strh	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <arm_cfft_init_64_f32+0x40>)
 8004bae:	899a      	ldrh	r2, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	819a      	strh	r2, [r3, #12]
 8004bb4:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <arm_cfft_init_64_f32+0x40>)
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <arm_cfft_init_64_f32+0x40>)
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	605a      	str	r2, [r3, #4]
 8004bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	0802770c 	.word	0x0802770c

08004bd8 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16)
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	2300      	movs	r3, #0
 8004be2:	73fb      	strb	r3, [r7, #15]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	801a      	strh	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	605a      	str	r2, [r3, #4]
 8004bf0:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <arm_cfft_init_32_f32+0x40>)
 8004bf2:	899a      	ldrh	r2, [r3, #12]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	819a      	strh	r2, [r3, #12]
 8004bf8:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <arm_cfft_init_32_f32+0x40>)
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	609a      	str	r2, [r3, #8]
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <arm_cfft_init_32_f32+0x40>)
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	605a      	str	r2, [r3, #4]
 8004c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	080276fc 	.word	0x080276fc

08004c1c <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16)
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	2300      	movs	r3, #0
 8004c26:	73fb      	strb	r3, [r7, #15]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2210      	movs	r2, #16
 8004c2c:	801a      	strh	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <arm_cfft_init_16_f32+0x40>)
 8004c36:	899a      	ldrh	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	819a      	strh	r2, [r3, #12]
 8004c3c:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <arm_cfft_init_16_f32+0x40>)
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	609a      	str	r2, [r3, #8]
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <arm_cfft_init_16_f32+0x40>)
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	605a      	str	r2, [r3, #4]
 8004c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	080276ec 	.word	0x080276ec

08004c60 <arm_radix8_butterfly_f32>:
ARM_DSP_ATTRIBUTE void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b0bd      	sub	sp, #244	; 0xf4
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	817b      	strh	r3, [r7, #10]
 8004c70:	4613      	mov	r3, r2
 8004c72:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8004c74:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <arm_radix8_butterfly_f32+0x3c>)
 8004c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8004c7a:	897b      	ldrh	r3, [r7, #10]
 8004c7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8004c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8004c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8c:	08db      	lsrs	r3, r3, #3
 8004c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c98:	e002      	b.n	8004ca0 <arm_radix8_butterfly_f32+0x40>
 8004c9a:	bf00      	nop
 8004c9c:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8004ca0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8004ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca8:	4413      	add	r3, r2
 8004caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8004cae:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8004cbc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8004cca:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8004cd8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8004ce6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cee:	4413      	add	r3, r2
 8004cf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8004cf4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8004d02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	ed93 7a00 	vldr	s14, [r3]
 8004d10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4413      	add	r3, r2
 8004d1a:	edd3 7a00 	vldr	s15, [r3]
 8004d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d22:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8004d26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	ed93 7a00 	vldr	s14, [r3]
 8004d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	edd3 7a00 	vldr	s15, [r3]
 8004d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d46:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8004d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	ed93 7a00 	vldr	s14, [r3]
 8004d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	edd3 7a00 	vldr	s15, [r3]
 8004d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d6a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8004d6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	ed93 7a00 	vldr	s14, [r3]
 8004d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	edd3 7a00 	vldr	s15, [r3]
 8004d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d8e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8004d92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	ed93 7a00 	vldr	s14, [r3]
 8004da0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4413      	add	r3, r2
 8004daa:	edd3 7a00 	vldr	s15, [r3]
 8004dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004db2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8004db6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	ed93 7a00 	vldr	s14, [r3]
 8004dc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	edd3 7a00 	vldr	s15, [r3]
 8004dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dd6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8004dda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	ed93 7a00 	vldr	s14, [r3]
 8004de8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	edd3 7a00 	vldr	s15, [r3]
 8004df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dfa:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8004dfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	ed93 7a00 	vldr	s14, [r3]
 8004e0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4413      	add	r3, r2
 8004e16:	edd3 7a00 	vldr	s15, [r3]
 8004e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e1e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8004e22:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004e26:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e2e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8004e32:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004e36:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e3e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8004e42:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004e46:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e4e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8004e52:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004e56:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e5e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8004e62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004e70:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e78:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8004e7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4413      	add	r3, r2
 8004e86:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004e8a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e92:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8004e96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	ed93 7a00 	vldr	s14, [r3]
 8004ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	3304      	adds	r3, #4
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	edd3 7a00 	vldr	s15, [r3]
 8004eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eba:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8004ebe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	ed93 7a00 	vldr	s14, [r3]
 8004ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4413      	add	r3, r2
 8004eda:	edd3 7a00 	vldr	s15, [r3]
 8004ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ee2:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8004ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	3304      	adds	r3, #4
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	ed93 7a00 	vldr	s14, [r3]
 8004ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	3304      	adds	r3, #4
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4413      	add	r3, r2
 8004f02:	edd3 7a00 	vldr	s15, [r3]
 8004f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f0a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8004f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	3304      	adds	r3, #4
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4413      	add	r3, r2
 8004f1a:	ed93 7a00 	vldr	s14, [r3]
 8004f1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	3304      	adds	r3, #4
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	edd3 7a00 	vldr	s15, [r3]
 8004f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f32:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8004f36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	ed93 7a00 	vldr	s14, [r3]
 8004f46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4413      	add	r3, r2
 8004f52:	edd3 7a00 	vldr	s15, [r3]
 8004f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f5a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8004f5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	3304      	adds	r3, #4
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4413      	add	r3, r2
 8004f6a:	ed93 7a00 	vldr	s14, [r3]
 8004f6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	3304      	adds	r3, #4
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	edd3 7a00 	vldr	s15, [r3]
 8004f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f82:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8004f86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4413      	add	r3, r2
 8004f92:	ed93 7a00 	vldr	s14, [r3]
 8004f96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	edd3 7a00 	vldr	s15, [r3]
 8004fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004faa:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8004fae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4413      	add	r3, r2
 8004fba:	ed93 7a00 	vldr	s14, [r3]
 8004fbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4413      	add	r3, r2
 8004fca:	edd3 7a00 	vldr	s15, [r3]
 8004fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fd2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8004fd6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004fda:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fe2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8004fe6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004fea:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ff2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8004ff6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004ffa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005002:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8005006:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800500a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800500e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005012:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8005016:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	3304      	adds	r3, #4
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4413      	add	r3, r2
 8005022:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005026:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800502a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800502e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8005032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	3304      	adds	r3, #4
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005042:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800504a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800504e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800505c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005064:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8005068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4413      	add	r3, r2
 8005072:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005076:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800507a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800507e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8005082:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	3304      	adds	r3, #4
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005092:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800509a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800509e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	3304      	adds	r3, #4
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80050ae:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80050b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050b6:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80050ba:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80050be:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80050c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050c6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80050ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ce:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 80050d2:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80050d6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80050da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050de:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80050e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 80050ea:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80050ee:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80050f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050f6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80050fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fe:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8005102:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005106:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800510a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800510e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005116:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800511a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800511e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005126:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800512a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800512e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005136:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800513a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800513e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005146:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800514a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800514e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005156:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800515a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800515e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005166:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800516a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800516e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005176:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800517a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800517e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005186:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800518a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800518e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005196:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800519a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80051a8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80051ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051b0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80051b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4413      	add	r3, r2
 80051be:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80051c2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80051c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051ca:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80051ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80051dc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80051e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80051e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80051f6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80051fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051fe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8005202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	3304      	adds	r3, #4
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4413      	add	r3, r2
 800520e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005212:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800521a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800521e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	3304      	adds	r3, #4
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4413      	add	r3, r2
 800522a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800522e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005236:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800523a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	3304      	adds	r3, #4
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800524a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800524e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005252:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8005256:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	3304      	adds	r3, #4
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4413      	add	r3, r2
 8005262:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005266:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800526a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800526e:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8005272:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005276:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800527a:	4413      	add	r3, r2
 800527c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8005280:	897b      	ldrh	r3, [r7, #10]
 8005282:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005286:	429a      	cmp	r2, r3
 8005288:	f4ff ad0a 	bcc.w	8004ca0 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 800528c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005290:	2b07      	cmp	r3, #7
 8005292:	f240 84e3 	bls.w	8005c5c <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8005296:	2300      	movs	r3, #0
 8005298:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800529c:	2301      	movs	r3, #1
 800529e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80052a2:	893b      	ldrh	r3, [r7, #8]
 80052a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80052a8:	4413      	add	r3, r2
 80052aa:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 80052ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 80052b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80052b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052b8:	4413      	add	r3, r2
 80052ba:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 80052bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052c0:	4413      	add	r3, r2
 80052c2:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 80052c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80052c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052c8:	4413      	add	r3, r2
 80052ca:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 80052cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80052ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052d0:	4413      	add	r3, r2
 80052d2:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 80052d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052d8:	4413      	add	r3, r2
 80052da:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 80052dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052e0:	4413      	add	r3, r2
 80052e2:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 80052e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4413      	add	r3, r2
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 80052f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	4413      	add	r3, r2
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80052fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	4413      	add	r3, r2
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800530a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	4413      	add	r3, r2
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8005316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4413      	add	r3, r2
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8005322:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	4413      	add	r3, r2
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800532e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	4413      	add	r3, r2
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800533a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	3304      	adds	r3, #4
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	4413      	add	r3, r2
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800534a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	3304      	adds	r3, #4
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	4413      	add	r3, r2
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8005358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	3304      	adds	r3, #4
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	4413      	add	r3, r2
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8005366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	3304      	adds	r3, #4
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	4413      	add	r3, r2
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8005374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	3304      	adds	r3, #4
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8005382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	3304      	adds	r3, #4
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	4413      	add	r3, r2
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8005390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	3304      	adds	r3, #4
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	4413      	add	r3, r2
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 800539e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 80053a6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80053aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ae:	4413      	add	r3, r2
 80053b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 80053b4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053bc:	4413      	add	r3, r2
 80053be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 80053c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ca:	4413      	add	r3, r2
 80053cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 80053d0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80053d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d8:	4413      	add	r3, r2
 80053da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 80053de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e6:	4413      	add	r3, r2
 80053e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 80053ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f4:	4413      	add	r3, r2
 80053f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 80053fa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005402:	4413      	add	r3, r2
 8005404:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8005408:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4413      	add	r3, r2
 8005412:	ed93 7a00 	vldr	s14, [r3]
 8005416:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	edd3 7a00 	vldr	s15, [r3]
 8005424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005428:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800542c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	ed93 7a00 	vldr	s14, [r3]
 800543a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	edd3 7a00 	vldr	s15, [r3]
 8005448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800544c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8005450:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	ed93 7a00 	vldr	s14, [r3]
 800545e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	edd3 7a00 	vldr	s15, [r3]
 800546c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005470:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8005474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	ed93 7a00 	vldr	s14, [r3]
 8005482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	edd3 7a00 	vldr	s15, [r3]
 8005490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005494:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8005498:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	ed93 7a00 	vldr	s14, [r3]
 80054a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	edd3 7a00 	vldr	s15, [r3]
 80054b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054b8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80054bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4413      	add	r3, r2
 80054c6:	ed93 7a00 	vldr	s14, [r3]
 80054ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	edd3 7a00 	vldr	s15, [r3]
 80054d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054dc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80054e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	ed93 7a00 	vldr	s14, [r3]
 80054ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	edd3 7a00 	vldr	s15, [r3]
 80054fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005500:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8005504:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4413      	add	r3, r2
 800550e:	ed93 7a00 	vldr	s14, [r3]
 8005512:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	edd3 7a00 	vldr	s15, [r3]
 8005520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005524:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8005528:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800552c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005534:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8005538:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800553c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005544:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8005548:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800554c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005554:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8005558:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800555c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005564:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8005568:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4413      	add	r3, r2
 8005572:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005576:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800557a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800557e:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8005582:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005586:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800558a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800558e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8005592:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	3304      	adds	r3, #4
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	4413      	add	r3, r2
 800559e:	ed93 7a00 	vldr	s14, [r3]
 80055a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	3304      	adds	r3, #4
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	edd3 7a00 	vldr	s15, [r3]
 80055b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80055ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	3304      	adds	r3, #4
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	ed93 7a00 	vldr	s14, [r3]
 80055ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	3304      	adds	r3, #4
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	edd3 7a00 	vldr	s15, [r3]
 80055da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055de:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80055e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	3304      	adds	r3, #4
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4413      	add	r3, r2
 80055ee:	ed93 7a00 	vldr	s14, [r3]
 80055f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	3304      	adds	r3, #4
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	edd3 7a00 	vldr	s15, [r3]
 8005602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005606:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800560a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	3304      	adds	r3, #4
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4413      	add	r3, r2
 8005616:	ed93 7a00 	vldr	s14, [r3]
 800561a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	3304      	adds	r3, #4
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	edd3 7a00 	vldr	s15, [r3]
 800562a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800562e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8005632:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	3304      	adds	r3, #4
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	ed93 7a00 	vldr	s14, [r3]
 8005642:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	3304      	adds	r3, #4
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4413      	add	r3, r2
 800564e:	edd3 7a00 	vldr	s15, [r3]
 8005652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005656:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800565a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	3304      	adds	r3, #4
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	ed93 7a00 	vldr	s14, [r3]
 800566a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	3304      	adds	r3, #4
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4413      	add	r3, r2
 8005676:	edd3 7a00 	vldr	s15, [r3]
 800567a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800567e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8005682:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	3304      	adds	r3, #4
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	ed93 7a00 	vldr	s14, [r3]
 8005692:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	3304      	adds	r3, #4
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	edd3 7a00 	vldr	s15, [r3]
 80056a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056a6:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80056aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	3304      	adds	r3, #4
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	ed93 7a00 	vldr	s14, [r3]
 80056ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	3304      	adds	r3, #4
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	edd3 7a00 	vldr	s15, [r3]
 80056ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056ce:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 80056d2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80056d6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80056da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056de:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 80056e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80056e6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80056ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056ee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 80056f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80056f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80056fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056fe:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8005702:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005706:	edd7 7a08 	vldr	s15, [r7, #32]
 800570a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800570e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8005712:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005716:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800571a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800571e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8005722:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005726:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800572a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800572e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8005732:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	3304      	adds	r3, #4
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4413      	add	r3, r2
 800573e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005742:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800574a:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800574e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005752:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800575a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800575e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005762:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800576a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800576e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005772:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800577a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800577e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005782:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800578a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800578e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005792:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800579e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80057a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80057a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057aa:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 80057ae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80057b2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80057b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ba:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 80057be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80057cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80057d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057d4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 80057d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	3304      	adds	r3, #4
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4413      	add	r3, r2
 80057e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80057e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80057ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057f0:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 80057f4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80057f8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80057fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005800:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8005804:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005808:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800580c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005810:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8005814:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005818:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800581c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005820:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8005824:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005828:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800582c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005830:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8005834:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4413      	add	r3, r2
 800583e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005842:	edd7 7a06 	vldr	s15, [r7, #24]
 8005846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800584a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800584e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	3304      	adds	r3, #4
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	ed97 7a05 	vldr	s14, [r7, #20]
 800585e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005866:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800586a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800586e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800587a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800587e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005886:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800588a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800588e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005896:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800589a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800589e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80058a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 80058aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80058b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80058bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058c0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 80058c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	3304      	adds	r3, #4
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80058d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80058d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058dc:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 80058e0:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80058e4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80058e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058ec:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80058f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 80058f8:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80058fc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005904:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8005910:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005914:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800591c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005924:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8005928:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800592c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005934:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8005940:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005944:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800594c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8005950:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005954:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800595c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8005960:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005964:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005968:	ee77 7a67 	vsub.f32	s15, s14, s15
 800596c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8005970:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005974:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800597c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8005980:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005984:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800598c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8005990:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005994:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800599c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 80059a0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80059a4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80059a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059ac:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 80059b0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80059b4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80059b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059bc:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 80059c0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80059c4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80059c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059cc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 80059d0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80059d4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80059d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059dc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 80059e0:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80059e4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80059e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ec:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 80059f0:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80059f4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80059f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059fc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8005a00:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005a04:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a0c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8005a10:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005a14:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a1c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8005a20:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005a24:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a2c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8005a30:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005a34:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a3c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8005a40:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005a44:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8005a50:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005a54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8005a60:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005a64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8005a70:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005a74:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8005a80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	ed97 7a07 	vldr	s14, [r7, #28]
 8005a8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a96:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8005a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	ed97 7a05 	vldr	s14, [r7, #20]
 8005aaa:	edd7 7a04 	vldr	s15, [r7, #16]
 8005aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ab2:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8005ab6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005aba:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8005ac6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005aca:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8005ad6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005ada:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8005ae6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005aea:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8005af6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	ed97 7a07 	vldr	s14, [r7, #28]
 8005b04:	edd7 7a06 	vldr	s15, [r7, #24]
 8005b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b0c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8005b10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	3304      	adds	r3, #4
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b20:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b28:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8005b2c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005b30:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b38:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8005b3c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005b40:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b48:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8005b4c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005b50:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b58:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8005b5c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005b60:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b68:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8005b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	ed97 7a07 	vldr	s14, [r7, #28]
 8005b7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b82:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8005b86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4413      	add	r3, r2
 8005b92:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b96:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b9e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8005ba2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005ba6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bae:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8005bb2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005bb6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bbe:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8005bc2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005bc6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bce:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8005bd2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005bd6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bde:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8005be2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	ed97 7a07 	vldr	s14, [r7, #28]
 8005bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8005bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bf8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8005bfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	3304      	adds	r3, #4
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c14:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8005c18:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005c1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c20:	4413      	add	r3, r2
 8005c22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8005c26:	897b      	ldrh	r3, [r7, #10]
 8005c28:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	f4ff abba 	bcc.w	80053a6 <arm_radix8_butterfly_f32+0x746>

         j++;
 8005c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c36:	3301      	adds	r3, #1
 8005c38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8005c3c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c44:	429a      	cmp	r2, r3
 8005c46:	f4ff ab2c 	bcc.w	80052a2 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8005c4a:	893b      	ldrh	r3, [r7, #8]
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8005c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c54:	2b07      	cmp	r3, #7
 8005c56:	f63f a813 	bhi.w	8004c80 <arm_radix8_butterfly_f32+0x20>
}
 8005c5a:	e000      	b.n	8005c5e <arm_radix8_butterfly_f32+0xffe>
         break;
 8005c5c:	bf00      	nop
}
 8005c5e:	bf00      	nop
 8005c60:	37f4      	adds	r7, #244	; 0xf4
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop

08005c6c <stage_rfft_f32>:
#else
static void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b095      	sub	sp, #84	; 0x54
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	647b      	str	r3, [r7, #68]	; 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8005c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8005c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c96:	3304      	adds	r3, #4
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8005c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8005ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 8005caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cac:	1d1a      	adds	r2, r3, #4
 8005cae:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8005cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb6:	1d1a      	adds	r2, r3, #4
 8005cb8:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8005cbe:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005cc2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8005cce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005cd2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cda:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8005cde:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005ce2:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	1d1a      	adds	r2, r3, #4
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cf8:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8005cfc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005d00:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	1d1a      	adds	r2, r3, #4
 8005d0c:	607a      	str	r2, [r7, #4]
 8005d0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005d12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d16:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8005d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	4413      	add	r3, r2
 8005d22:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8005d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d26:	3308      	adds	r3, #8
 8005d28:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8005d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8005d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8005d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8005d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d40:	3304      	adds	r3, #4
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 8005d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d48:	1d1a      	adds	r2, r3, #4
 8005d4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8005d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d52:	1d1a      	adds	r2, r3, #4
 8005d54:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8005d5a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005d5e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d66:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8005d6a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005d6e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d76:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8005d7a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005d7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8005d8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005d8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d96:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8005d9a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005d9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da6:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8005daa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005dae:	edd7 7a08 	vldr	s15, [r7, #32]
 8005db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db6:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8005dba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005dbe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8005dca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dce:	edd7 7a04 	vldr	s15, [r7, #16]
 8005dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	1d1a      	adds	r2, r3, #4
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005de4:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8005de8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005dec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005df0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005df4:	edd7 7a06 	vldr	s15, [r7, #24]
 8005df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	1d1a      	adds	r2, r3, #4
 8005e08:	607a      	str	r2, [r7, #4]
 8005e0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e12:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 8005e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e18:	3308      	adds	r3, #8
 8005e1a:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8005e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1e:	3b08      	subs	r3, #8
 8005e20:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8005e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e24:	3b01      	subs	r3, #1
 8005e26:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 8005e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f73f af7d 	bgt.w	8005d2a <stage_rfft_f32+0xbe>
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	3754      	adds	r7, #84	; 0x54
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <merge_rfft_f32>:
/* Prepares data for inverse cfft */
static void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b095      	sub	sp, #84	; 0x54
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	64bb      	str	r3, [r7, #72]	; 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	647b      	str	r3, [r7, #68]	; 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8005e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8005e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e68:	3304      	adds	r3, #4
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8005e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e70:	3308      	adds	r3, #8
 8005e72:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8005e74:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005e78:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	1d1a      	adds	r2, r3, #4
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e8e:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8005e92:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005e96:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	1d1a      	adds	r2, r3, #4
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005eac:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8005eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8005eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ebc:	3308      	adds	r3, #8
 8005ebe:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 8005ec0:	e07e      	b.n	8005fc0 <merge_rfft_f32+0x182>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8005ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8005eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8005ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8005ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed8:	3304      	adds	r3, #4
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8005ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee0:	1d1a      	adds	r2, r3, #4
 8005ee2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8005ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eea:	1d1a      	adds	r2, r3, #4
 8005eec:	64ba      	str	r2, [r7, #72]	; 0x48
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8005ef2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005ef6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005efe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8005f02:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005f06:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f0e:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8005f12:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005f16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1e:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8005f22:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005f26:	edd7 7a08 	vldr	s15, [r7, #32]
 8005f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2e:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8005f32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005f36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3e:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8005f42:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005f46:	edd7 7a08 	vldr	s15, [r7, #32]
 8005f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4e:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8005f52:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005f56:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005f5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005f62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f66:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	1d1a      	adds	r2, r3, #4
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f7c:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8005f80:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005f84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005f88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f94:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	1d1a      	adds	r2, r3, #4
 8005fa0:	607a      	str	r2, [r7, #4]
 8005fa2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005faa:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8005fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8005fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb6:	3b08      	subs	r3, #8
 8005fb8:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8005fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 8005fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f73f af7d 	bgt.w	8005ec2 <merge_rfft_f32+0x84>
   }

}
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop
 8005fcc:	3754      	adds	r7, #84	; 0x54
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <arm_rfft_fast_f32>:
ARM_DSP_ATTRIBUTE void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b086      	sub	sp, #24
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
 8005fe2:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	68b9      	ldr	r1, [r7, #8]
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff ff23 	bl	8005e3e <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8005ff8:	78fa      	ldrb	r2, [r7, #3]
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	6978      	ldr	r0, [r7, #20]
 8006000:	f7fe fc5b 	bl	80048ba <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8006004:	e00a      	b.n	800601c <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8006006:	78fa      	ldrb	r2, [r7, #3]
 8006008:	2301      	movs	r3, #1
 800600a:	68b9      	ldr	r1, [r7, #8]
 800600c:	6978      	ldr	r0, [r7, #20]
 800600e:	f7fe fc54 	bl	80048ba <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f7ff fe28 	bl	8005c6c <stage_rfft_f32>
}
 800601c:	bf00      	nop
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d102      	bne.n	8006038 <arm_rfft_fast_init_32_f32+0x14>
 8006032:	f04f 33ff 	mov.w	r3, #4294967295
 8006036:	e013      	b.n	8006060 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4618      	mov	r0, r3
 800603c:	f7fe fdee 	bl	8004c1c <arm_cfft_init_16_f32>
 8006040:	4603      	mov	r3, r0
 8006042:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8006044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 800604c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006050:	e006      	b.n	8006060 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a03      	ldr	r2, [pc, #12]	; (8006068 <arm_rfft_fast_init_32_f32+0x44>)
 800605c:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	0801ef68 	.word	0x0801ef68

0800606c <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d102      	bne.n	8006080 <arm_rfft_fast_init_64_f32+0x14>
 800607a:	f04f 33ff 	mov.w	r3, #4294967295
 800607e:	e013      	b.n	80060a8 <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe fda8 	bl	8004bd8 <arm_cfft_init_32_f32>
 8006088:	4603      	mov	r3, r0
 800608a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800608c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 8006094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006098:	e006      	b.n	80060a8 <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2240      	movs	r2, #64	; 0x40
 800609e:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a03      	ldr	r2, [pc, #12]	; (80060b0 <arm_rfft_fast_init_64_f32+0x44>)
 80060a4:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	0801efe8 	.word	0x0801efe8

080060b4 <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d102      	bne.n	80060c8 <arm_rfft_fast_init_128_f32+0x14>
 80060c2:	f04f 33ff 	mov.w	r3, #4294967295
 80060c6:	e013      	b.n	80060f0 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe fd62 	bl	8004b94 <arm_cfft_init_64_f32>
 80060d0:	4603      	mov	r3, r0
 80060d2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80060d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 80060dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e0:	e006      	b.n	80060f0 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2280      	movs	r2, #128	; 0x80
 80060e6:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a03      	ldr	r2, [pc, #12]	; (80060f8 <arm_rfft_fast_init_128_f32+0x44>)
 80060ec:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	0801f0e8 	.word	0x0801f0e8

080060fc <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d102      	bne.n	8006110 <arm_rfft_fast_init_256_f32+0x14>
 800610a:	f04f 33ff 	mov.w	r3, #4294967295
 800610e:	e014      	b.n	800613a <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4618      	mov	r0, r3
 8006114:	f7fe fd1c 	bl	8004b50 <arm_cfft_init_128_f32>
 8006118:	4603      	mov	r3, r0
 800611a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800611c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8006124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006128:	e007      	b.n	800613a <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006130:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a03      	ldr	r2, [pc, #12]	; (8006144 <arm_rfft_fast_init_256_f32+0x48>)
 8006136:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	0801f2e8 	.word	0x0801f2e8

08006148 <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d102      	bne.n	800615c <arm_rfft_fast_init_512_f32+0x14>
 8006156:	f04f 33ff 	mov.w	r3, #4294967295
 800615a:	e014      	b.n	8006186 <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fcd2 	bl	8004b08 <arm_cfft_init_256_f32>
 8006164:	4603      	mov	r3, r0
 8006166:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8006168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 8006170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006174:	e007      	b.n	8006186 <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800617c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a03      	ldr	r2, [pc, #12]	; (8006190 <arm_rfft_fast_init_512_f32+0x48>)
 8006182:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	0801f6e8 	.word	0x0801f6e8

08006194 <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d102      	bne.n	80061a8 <arm_rfft_fast_init_1024_f32+0x14>
 80061a2:	f04f 33ff 	mov.w	r3, #4294967295
 80061a6:	e014      	b.n	80061d2 <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe fc88 	bl	8004ac0 <arm_cfft_init_512_f32>
 80061b0:	4603      	mov	r3, r0
 80061b2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80061b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 80061bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c0:	e007      	b.n	80061d2 <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061c8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a03      	ldr	r2, [pc, #12]	; (80061dc <arm_rfft_fast_init_1024_f32+0x48>)
 80061ce:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	0801fee8 	.word	0x0801fee8

080061e0 <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d102      	bne.n	80061f4 <arm_rfft_fast_init_2048_f32+0x14>
 80061ee:	f04f 33ff 	mov.w	r3, #4294967295
 80061f2:	e014      	b.n	800621e <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fe fc3e 	bl	8004a78 <arm_cfft_init_1024_f32>
 80061fc:	4603      	mov	r3, r0
 80061fe:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8006200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 8006208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800620c:	e007      	b.n	800621e <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006214:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a03      	ldr	r2, [pc, #12]	; (8006228 <arm_rfft_fast_init_2048_f32+0x48>)
 800621a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	08020ee8 	.word	0x08020ee8

0800622c <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d102      	bne.n	8006240 <arm_rfft_fast_init_4096_f32+0x14>
 800623a:	f04f 33ff 	mov.w	r3, #4294967295
 800623e:	e014      	b.n	800626a <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4618      	mov	r0, r3
 8006244:	f7fe fbf4 	bl	8004a30 <arm_cfft_init_2048_f32>
 8006248:	4603      	mov	r3, r0
 800624a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800624c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 8006254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006258:	e007      	b.n	800626a <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006260:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a03      	ldr	r2, [pc, #12]	; (8006274 <arm_rfft_fast_init_4096_f32+0x48>)
 8006266:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	08022ee8 	.word	0x08022ee8

08006278 <arm_rfft_fast_init_f32>:
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 8006284:	887b      	ldrh	r3, [r7, #2]
 8006286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628a:	d023      	beq.n	80062d4 <arm_rfft_fast_init_f32+0x5c>
 800628c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006290:	dc50      	bgt.n	8006334 <arm_rfft_fast_init_f32+0xbc>
 8006292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006296:	d023      	beq.n	80062e0 <arm_rfft_fast_init_f32+0x68>
 8006298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800629c:	dc4a      	bgt.n	8006334 <arm_rfft_fast_init_f32+0xbc>
 800629e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a2:	d023      	beq.n	80062ec <arm_rfft_fast_init_f32+0x74>
 80062a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a8:	dc44      	bgt.n	8006334 <arm_rfft_fast_init_f32+0xbc>
 80062aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ae:	d023      	beq.n	80062f8 <arm_rfft_fast_init_f32+0x80>
 80062b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b4:	dc3e      	bgt.n	8006334 <arm_rfft_fast_init_f32+0xbc>
 80062b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ba:	d023      	beq.n	8006304 <arm_rfft_fast_init_f32+0x8c>
 80062bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c0:	dc38      	bgt.n	8006334 <arm_rfft_fast_init_f32+0xbc>
 80062c2:	2b80      	cmp	r3, #128	; 0x80
 80062c4:	d024      	beq.n	8006310 <arm_rfft_fast_init_f32+0x98>
 80062c6:	2b80      	cmp	r3, #128	; 0x80
 80062c8:	dc34      	bgt.n	8006334 <arm_rfft_fast_init_f32+0xbc>
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	d02c      	beq.n	8006328 <arm_rfft_fast_init_f32+0xb0>
 80062ce:	2b40      	cmp	r3, #64	; 0x40
 80062d0:	d024      	beq.n	800631c <arm_rfft_fast_init_f32+0xa4>
 80062d2:	e02f      	b.n	8006334 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff ffa9 	bl	800622c <arm_rfft_fast_init_4096_f32>
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]
    break;
 80062de:	e02c      	b.n	800633a <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff ff7d 	bl	80061e0 <arm_rfft_fast_init_2048_f32>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]
    break;
 80062ea:	e026      	b.n	800633a <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff ff51 	bl	8006194 <arm_rfft_fast_init_1024_f32>
 80062f2:	4603      	mov	r3, r0
 80062f4:	73fb      	strb	r3, [r7, #15]
    break;
 80062f6:	e020      	b.n	800633a <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff ff25 	bl	8006148 <arm_rfft_fast_init_512_f32>
 80062fe:	4603      	mov	r3, r0
 8006300:	73fb      	strb	r3, [r7, #15]
    break;
 8006302:	e01a      	b.n	800633a <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff fef9 	bl	80060fc <arm_rfft_fast_init_256_f32>
 800630a:	4603      	mov	r3, r0
 800630c:	73fb      	strb	r3, [r7, #15]
    break;
 800630e:	e014      	b.n	800633a <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff fecf 	bl	80060b4 <arm_rfft_fast_init_128_f32>
 8006316:	4603      	mov	r3, r0
 8006318:	73fb      	strb	r3, [r7, #15]
    break;
 800631a:	e00e      	b.n	800633a <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff fea5 	bl	800606c <arm_rfft_fast_init_64_f32>
 8006322:	4603      	mov	r3, r0
 8006324:	73fb      	strb	r3, [r7, #15]
    break;
 8006326:	e008      	b.n	800633a <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff fe7b 	bl	8006024 <arm_rfft_fast_init_32_f32>
 800632e:	4603      	mov	r3, r0
 8006330:	73fb      	strb	r3, [r7, #15]
    break;
 8006332:	e002      	b.n	800633a <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8006334:	f04f 33ff 	mov.w	r3, #4294967295
 8006338:	e001      	b.n	800633e <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 800633a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800634c:	4b0e      	ldr	r3, [pc, #56]	; (8006388 <HAL_Init+0x40>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a0d      	ldr	r2, [pc, #52]	; (8006388 <HAL_Init+0x40>)
 8006352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006358:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <HAL_Init+0x40>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a0a      	ldr	r2, [pc, #40]	; (8006388 <HAL_Init+0x40>)
 800635e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006364:	4b08      	ldr	r3, [pc, #32]	; (8006388 <HAL_Init+0x40>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a07      	ldr	r2, [pc, #28]	; (8006388 <HAL_Init+0x40>)
 800636a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800636e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006370:	2003      	movs	r0, #3
 8006372:	f000 f94f 	bl	8006614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006376:	200f      	movs	r0, #15
 8006378:	f000 f808 	bl	800638c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800637c:	f7fc fea4 	bl	80030c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40023c00 	.word	0x40023c00

0800638c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006394:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <HAL_InitTick+0x54>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <HAL_InitTick+0x58>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	4619      	mov	r1, r3
 800639e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80063a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 f967 	bl	800667e <HAL_SYSTICK_Config>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e00e      	b.n	80063d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b0f      	cmp	r3, #15
 80063be:	d80a      	bhi.n	80063d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063c0:	2200      	movs	r2, #0
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	f000 f92f 	bl	800662a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80063cc:	4a06      	ldr	r2, [pc, #24]	; (80063e8 <HAL_InitTick+0x5c>)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	e000      	b.n	80063d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	20000008 	.word	0x20000008
 80063e4:	20000010 	.word	0x20000010
 80063e8:	2000000c 	.word	0x2000000c

080063ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80063f0:	4b06      	ldr	r3, [pc, #24]	; (800640c <HAL_IncTick+0x20>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	4b06      	ldr	r3, [pc, #24]	; (8006410 <HAL_IncTick+0x24>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4413      	add	r3, r2
 80063fc:	4a04      	ldr	r2, [pc, #16]	; (8006410 <HAL_IncTick+0x24>)
 80063fe:	6013      	str	r3, [r2, #0]
}
 8006400:	bf00      	nop
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	20000010 	.word	0x20000010
 8006410:	2000bd98 	.word	0x2000bd98

08006414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006414:	b480      	push	{r7}
 8006416:	af00      	add	r7, sp, #0
  return uwTick;
 8006418:	4b03      	ldr	r3, [pc, #12]	; (8006428 <HAL_GetTick+0x14>)
 800641a:	681b      	ldr	r3, [r3, #0]
}
 800641c:	4618      	mov	r0, r3
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	2000bd98 	.word	0x2000bd98

0800642c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006434:	f7ff ffee 	bl	8006414 <HAL_GetTick>
 8006438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006444:	d005      	beq.n	8006452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006446:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <HAL_Delay+0x44>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006452:	bf00      	nop
 8006454:	f7ff ffde 	bl	8006414 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	429a      	cmp	r2, r3
 8006462:	d8f7      	bhi.n	8006454 <HAL_Delay+0x28>
  {
  }
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000010 	.word	0x20000010

08006474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006484:	4b0c      	ldr	r3, [pc, #48]	; (80064b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006490:	4013      	ands	r3, r2
 8006492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800649c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064a6:	4a04      	ldr	r2, [pc, #16]	; (80064b8 <__NVIC_SetPriorityGrouping+0x44>)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	60d3      	str	r3, [r2, #12]
}
 80064ac:	bf00      	nop
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	e000ed00 	.word	0xe000ed00

080064bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064c0:	4b04      	ldr	r3, [pc, #16]	; (80064d4 <__NVIC_GetPriorityGrouping+0x18>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	0a1b      	lsrs	r3, r3, #8
 80064c6:	f003 0307 	and.w	r3, r3, #7
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	e000ed00 	.word	0xe000ed00

080064d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	4603      	mov	r3, r0
 80064e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	db0b      	blt.n	8006502 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	f003 021f 	and.w	r2, r3, #31
 80064f0:	4907      	ldr	r1, [pc, #28]	; (8006510 <__NVIC_EnableIRQ+0x38>)
 80064f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	2001      	movs	r0, #1
 80064fa:	fa00 f202 	lsl.w	r2, r0, r2
 80064fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006502:	bf00      	nop
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	e000e100 	.word	0xe000e100

08006514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	6039      	str	r1, [r7, #0]
 800651e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006524:	2b00      	cmp	r3, #0
 8006526:	db0a      	blt.n	800653e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	b2da      	uxtb	r2, r3
 800652c:	490c      	ldr	r1, [pc, #48]	; (8006560 <__NVIC_SetPriority+0x4c>)
 800652e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006532:	0112      	lsls	r2, r2, #4
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	440b      	add	r3, r1
 8006538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800653c:	e00a      	b.n	8006554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	b2da      	uxtb	r2, r3
 8006542:	4908      	ldr	r1, [pc, #32]	; (8006564 <__NVIC_SetPriority+0x50>)
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	3b04      	subs	r3, #4
 800654c:	0112      	lsls	r2, r2, #4
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	440b      	add	r3, r1
 8006552:	761a      	strb	r2, [r3, #24]
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	e000e100 	.word	0xe000e100
 8006564:	e000ed00 	.word	0xe000ed00

08006568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006568:	b480      	push	{r7}
 800656a:	b089      	sub	sp, #36	; 0x24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f1c3 0307 	rsb	r3, r3, #7
 8006582:	2b04      	cmp	r3, #4
 8006584:	bf28      	it	cs
 8006586:	2304      	movcs	r3, #4
 8006588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	3304      	adds	r3, #4
 800658e:	2b06      	cmp	r3, #6
 8006590:	d902      	bls.n	8006598 <NVIC_EncodePriority+0x30>
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	3b03      	subs	r3, #3
 8006596:	e000      	b.n	800659a <NVIC_EncodePriority+0x32>
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800659c:	f04f 32ff 	mov.w	r2, #4294967295
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	43da      	mvns	r2, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	401a      	ands	r2, r3
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065b0:	f04f 31ff 	mov.w	r1, #4294967295
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ba:	43d9      	mvns	r1, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065c0:	4313      	orrs	r3, r2
         );
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3724      	adds	r7, #36	; 0x24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
	...

080065d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3b01      	subs	r3, #1
 80065dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065e0:	d301      	bcc.n	80065e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065e2:	2301      	movs	r3, #1
 80065e4:	e00f      	b.n	8006606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065e6:	4a0a      	ldr	r2, [pc, #40]	; (8006610 <SysTick_Config+0x40>)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065ee:	210f      	movs	r1, #15
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295
 80065f4:	f7ff ff8e 	bl	8006514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065f8:	4b05      	ldr	r3, [pc, #20]	; (8006610 <SysTick_Config+0x40>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065fe:	4b04      	ldr	r3, [pc, #16]	; (8006610 <SysTick_Config+0x40>)
 8006600:	2207      	movs	r2, #7
 8006602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	e000e010 	.word	0xe000e010

08006614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff ff29 	bl	8006474 <__NVIC_SetPriorityGrouping>
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800662a:	b580      	push	{r7, lr}
 800662c:	b086      	sub	sp, #24
 800662e:	af00      	add	r7, sp, #0
 8006630:	4603      	mov	r3, r0
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006638:	2300      	movs	r3, #0
 800663a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800663c:	f7ff ff3e 	bl	80064bc <__NVIC_GetPriorityGrouping>
 8006640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	6978      	ldr	r0, [r7, #20]
 8006648:	f7ff ff8e 	bl	8006568 <NVIC_EncodePriority>
 800664c:	4602      	mov	r2, r0
 800664e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006652:	4611      	mov	r1, r2
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff ff5d 	bl	8006514 <__NVIC_SetPriority>
}
 800665a:	bf00      	nop
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	4603      	mov	r3, r0
 800666a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800666c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff ff31 	bl	80064d8 <__NVIC_EnableIRQ>
}
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff ffa2 	bl	80065d0 <SysTick_Config>
 800668c:	4603      	mov	r3, r0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80066a4:	f7ff feb6 	bl	8006414 <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e099      	b.n	80067e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0201 	bic.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066d4:	e00f      	b.n	80066f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066d6:	f7ff fe9d 	bl	8006414 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b05      	cmp	r3, #5
 80066e2:	d908      	bls.n	80066f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2203      	movs	r2, #3
 80066ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e078      	b.n	80067e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1e8      	bne.n	80066d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4b38      	ldr	r3, [pc, #224]	; (80067f0 <HAL_DMA_Init+0x158>)
 8006710:	4013      	ands	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006722:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800672e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800673a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	2b04      	cmp	r3, #4
 800674e:	d107      	bne.n	8006760 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	4313      	orrs	r3, r2
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f023 0307 	bic.w	r3, r3, #7
 8006776:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	2b04      	cmp	r3, #4
 8006788:	d117      	bne.n	80067ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00e      	beq.n	80067ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fa6f 	bl	8006c80 <DMA_CheckFifoParam>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2240      	movs	r2, #64	; 0x40
 80067ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80067b6:	2301      	movs	r3, #1
 80067b8:	e016      	b.n	80067e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fa26 	bl	8006c14 <DMA_CalcBaseAndBitshift>
 80067c8:	4603      	mov	r3, r0
 80067ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d0:	223f      	movs	r2, #63	; 0x3f
 80067d2:	409a      	lsls	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	f010803f 	.word	0xf010803f

080067f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006812:	2b01      	cmp	r3, #1
 8006814:	d101      	bne.n	800681a <HAL_DMA_Start_IT+0x26>
 8006816:	2302      	movs	r3, #2
 8006818:	e040      	b.n	800689c <HAL_DMA_Start_IT+0xa8>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b01      	cmp	r3, #1
 800682c:	d12f      	bne.n	800688e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2202      	movs	r2, #2
 8006832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 f9b8 	bl	8006bb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684c:	223f      	movs	r2, #63	; 0x3f
 800684e:	409a      	lsls	r2, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0216 	orr.w	r2, r2, #22
 8006862:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0208 	orr.w	r2, r2, #8
 800687a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	e005      	b.n	800689a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006896:	2302      	movs	r3, #2
 8006898:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800689a:	7dfb      	ldrb	r3, [r7, #23]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80068b0:	4b8e      	ldr	r3, [pc, #568]	; (8006aec <HAL_DMA_IRQHandler+0x248>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a8e      	ldr	r2, [pc, #568]	; (8006af0 <HAL_DMA_IRQHandler+0x24c>)
 80068b6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ba:	0a9b      	lsrs	r3, r3, #10
 80068bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ce:	2208      	movs	r2, #8
 80068d0:	409a      	lsls	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4013      	ands	r3, r2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d01a      	beq.n	8006910 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d013      	beq.n	8006910 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0204 	bic.w	r2, r2, #4
 80068f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fc:	2208      	movs	r2, #8
 80068fe:	409a      	lsls	r2, r3
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006908:	f043 0201 	orr.w	r2, r3, #1
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006914:	2201      	movs	r2, #1
 8006916:	409a      	lsls	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4013      	ands	r3, r2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d012      	beq.n	8006946 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00b      	beq.n	8006946 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006932:	2201      	movs	r2, #1
 8006934:	409a      	lsls	r2, r3
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693e:	f043 0202 	orr.w	r2, r3, #2
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694a:	2204      	movs	r2, #4
 800694c:	409a      	lsls	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4013      	ands	r3, r2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d012      	beq.n	800697c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006968:	2204      	movs	r2, #4
 800696a:	409a      	lsls	r2, r3
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006974:	f043 0204 	orr.w	r2, r3, #4
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006980:	2210      	movs	r2, #16
 8006982:	409a      	lsls	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4013      	ands	r3, r2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d043      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0308 	and.w	r3, r3, #8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d03c      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699e:	2210      	movs	r2, #16
 80069a0:	409a      	lsls	r2, r3
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d018      	beq.n	80069e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d108      	bne.n	80069d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d024      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
 80069d2:	e01f      	b.n	8006a14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d01b      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	4798      	blx	r3
 80069e4:	e016      	b.n	8006a14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d107      	bne.n	8006a04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0208 	bic.w	r2, r2, #8
 8006a02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a18:	2220      	movs	r2, #32
 8006a1a:	409a      	lsls	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 808f 	beq.w	8006b44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 8087 	beq.w	8006b44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	409a      	lsls	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b05      	cmp	r3, #5
 8006a4c:	d136      	bne.n	8006abc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0216 	bic.w	r2, r2, #22
 8006a5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695a      	ldr	r2, [r3, #20]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d103      	bne.n	8006a7e <HAL_DMA_IRQHandler+0x1da>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f022 0208 	bic.w	r2, r2, #8
 8006a8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a92:	223f      	movs	r2, #63	; 0x3f
 8006a94:	409a      	lsls	r2, r3
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d07e      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
        }
        return;
 8006aba:	e079      	b.n	8006bb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01d      	beq.n	8006b06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10d      	bne.n	8006af4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d031      	beq.n	8006b44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	4798      	blx	r3
 8006ae8:	e02c      	b.n	8006b44 <HAL_DMA_IRQHandler+0x2a0>
 8006aea:	bf00      	nop
 8006aec:	20000008 	.word	0x20000008
 8006af0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d023      	beq.n	8006b44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3
 8006b04:	e01e      	b.n	8006b44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10f      	bne.n	8006b34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0210 	bic.w	r2, r2, #16
 8006b22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d032      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d022      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2205      	movs	r2, #5
 8006b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0201 	bic.w	r2, r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	3301      	adds	r3, #1
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d307      	bcc.n	8006b8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f2      	bne.n	8006b70 <HAL_DMA_IRQHandler+0x2cc>
 8006b8a:	e000      	b.n	8006b8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006b8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d005      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
 8006bae:	e000      	b.n	8006bb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006bb0:	bf00      	nop
    }
  }
}
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b40      	cmp	r3, #64	; 0x40
 8006be4:	d108      	bne.n	8006bf8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006bf6:	e007      	b.n	8006c08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	60da      	str	r2, [r3, #12]
}
 8006c08:	bf00      	nop
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	3b10      	subs	r3, #16
 8006c24:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <DMA_CalcBaseAndBitshift+0x64>)
 8006c26:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2a:	091b      	lsrs	r3, r3, #4
 8006c2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c2e:	4a13      	ldr	r2, [pc, #76]	; (8006c7c <DMA_CalcBaseAndBitshift+0x68>)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d909      	bls.n	8006c56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c4a:	f023 0303 	bic.w	r3, r3, #3
 8006c4e:	1d1a      	adds	r2, r3, #4
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	659a      	str	r2, [r3, #88]	; 0x58
 8006c54:	e007      	b.n	8006c66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c5e:	f023 0303 	bic.w	r3, r3, #3
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	aaaaaaab 	.word	0xaaaaaaab
 8006c7c:	0802776c 	.word	0x0802776c

08006c80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d11f      	bne.n	8006cda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d856      	bhi.n	8006d4e <DMA_CheckFifoParam+0xce>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <DMA_CheckFifoParam+0x28>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006cb9 	.word	0x08006cb9
 8006cac:	08006ccb 	.word	0x08006ccb
 8006cb0:	08006cb9 	.word	0x08006cb9
 8006cb4:	08006d4f 	.word	0x08006d4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d046      	beq.n	8006d52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cc8:	e043      	b.n	8006d52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006cd2:	d140      	bne.n	8006d56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cd8:	e03d      	b.n	8006d56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce2:	d121      	bne.n	8006d28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d837      	bhi.n	8006d5a <DMA_CheckFifoParam+0xda>
 8006cea:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <DMA_CheckFifoParam+0x70>)
 8006cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf0:	08006d01 	.word	0x08006d01
 8006cf4:	08006d07 	.word	0x08006d07
 8006cf8:	08006d01 	.word	0x08006d01
 8006cfc:	08006d19 	.word	0x08006d19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	73fb      	strb	r3, [r7, #15]
      break;
 8006d04:	e030      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d025      	beq.n	8006d5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d16:	e022      	b.n	8006d5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d20:	d11f      	bne.n	8006d62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d26:	e01c      	b.n	8006d62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d903      	bls.n	8006d36 <DMA_CheckFifoParam+0xb6>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d003      	beq.n	8006d3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d34:	e018      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	73fb      	strb	r3, [r7, #15]
      break;
 8006d3a:	e015      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00e      	beq.n	8006d66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d4c:	e00b      	b.n	8006d66 <DMA_CheckFifoParam+0xe6>
      break;
 8006d4e:	bf00      	nop
 8006d50:	e00a      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
      break;
 8006d52:	bf00      	nop
 8006d54:	e008      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
      break;
 8006d56:	bf00      	nop
 8006d58:	e006      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
      break;
 8006d5a:	bf00      	nop
 8006d5c:	e004      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
      break;
 8006d5e:	bf00      	nop
 8006d60:	e002      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
      break;   
 8006d62:	bf00      	nop
 8006d64:	e000      	b.n	8006d68 <DMA_CheckFifoParam+0xe8>
      break;
 8006d66:	bf00      	nop
    }
  } 
  
  return status; 
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop

08006d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b089      	sub	sp, #36	; 0x24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	e159      	b.n	8007048 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006d94:	2201      	movs	r2, #1
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4013      	ands	r3, r2
 8006da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	f040 8148 	bne.w	8007042 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d005      	beq.n	8006dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d130      	bne.n	8006e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	2203      	movs	r2, #3
 8006dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dda:	43db      	mvns	r3, r3
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	4013      	ands	r3, r2
 8006de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	fa02 f303 	lsl.w	r3, r2, r3
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e00:	2201      	movs	r2, #1
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	43db      	mvns	r3, r3
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	091b      	lsrs	r3, r3, #4
 8006e16:	f003 0201 	and.w	r2, r3, #1
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f003 0303 	and.w	r3, r3, #3
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d017      	beq.n	8006e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	2203      	movs	r2, #3
 8006e44:	fa02 f303 	lsl.w	r3, r2, r3
 8006e48:	43db      	mvns	r3, r3
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	689a      	ldr	r2, [r3, #8]
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f003 0303 	and.w	r3, r3, #3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d123      	bne.n	8006ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	08da      	lsrs	r2, r3, #3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	3208      	adds	r2, #8
 8006e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	220f      	movs	r2, #15
 8006e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e90:	43db      	mvns	r3, r3
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	4013      	ands	r3, r2
 8006e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	691a      	ldr	r2, [r3, #16]
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	08da      	lsrs	r2, r3, #3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3208      	adds	r2, #8
 8006eb6:	69b9      	ldr	r1, [r7, #24]
 8006eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	43db      	mvns	r3, r3
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f003 0203 	and.w	r2, r3, #3
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 80a2 	beq.w	8007042 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	4b57      	ldr	r3, [pc, #348]	; (8007060 <HAL_GPIO_Init+0x2e8>)
 8006f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f06:	4a56      	ldr	r2, [pc, #344]	; (8007060 <HAL_GPIO_Init+0x2e8>)
 8006f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8006f0e:	4b54      	ldr	r3, [pc, #336]	; (8007060 <HAL_GPIO_Init+0x2e8>)
 8006f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f1a:	4a52      	ldr	r2, [pc, #328]	; (8007064 <HAL_GPIO_Init+0x2ec>)
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	089b      	lsrs	r3, r3, #2
 8006f20:	3302      	adds	r3, #2
 8006f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	220f      	movs	r2, #15
 8006f32:	fa02 f303 	lsl.w	r3, r2, r3
 8006f36:	43db      	mvns	r3, r3
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a49      	ldr	r2, [pc, #292]	; (8007068 <HAL_GPIO_Init+0x2f0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d019      	beq.n	8006f7a <HAL_GPIO_Init+0x202>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a48      	ldr	r2, [pc, #288]	; (800706c <HAL_GPIO_Init+0x2f4>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d013      	beq.n	8006f76 <HAL_GPIO_Init+0x1fe>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a47      	ldr	r2, [pc, #284]	; (8007070 <HAL_GPIO_Init+0x2f8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00d      	beq.n	8006f72 <HAL_GPIO_Init+0x1fa>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a46      	ldr	r2, [pc, #280]	; (8007074 <HAL_GPIO_Init+0x2fc>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d007      	beq.n	8006f6e <HAL_GPIO_Init+0x1f6>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a45      	ldr	r2, [pc, #276]	; (8007078 <HAL_GPIO_Init+0x300>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d101      	bne.n	8006f6a <HAL_GPIO_Init+0x1f2>
 8006f66:	2304      	movs	r3, #4
 8006f68:	e008      	b.n	8006f7c <HAL_GPIO_Init+0x204>
 8006f6a:	2307      	movs	r3, #7
 8006f6c:	e006      	b.n	8006f7c <HAL_GPIO_Init+0x204>
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e004      	b.n	8006f7c <HAL_GPIO_Init+0x204>
 8006f72:	2302      	movs	r3, #2
 8006f74:	e002      	b.n	8006f7c <HAL_GPIO_Init+0x204>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <HAL_GPIO_Init+0x204>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	69fa      	ldr	r2, [r7, #28]
 8006f7e:	f002 0203 	and.w	r2, r2, #3
 8006f82:	0092      	lsls	r2, r2, #2
 8006f84:	4093      	lsls	r3, r2
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f8c:	4935      	ldr	r1, [pc, #212]	; (8007064 <HAL_GPIO_Init+0x2ec>)
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	089b      	lsrs	r3, r3, #2
 8006f92:	3302      	adds	r3, #2
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f9a:	4b38      	ldr	r3, [pc, #224]	; (800707c <HAL_GPIO_Init+0x304>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	43db      	mvns	r3, r3
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006fbe:	4a2f      	ldr	r2, [pc, #188]	; (800707c <HAL_GPIO_Init+0x304>)
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006fc4:	4b2d      	ldr	r3, [pc, #180]	; (800707c <HAL_GPIO_Init+0x304>)
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	43db      	mvns	r3, r3
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006fe8:	4a24      	ldr	r2, [pc, #144]	; (800707c <HAL_GPIO_Init+0x304>)
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006fee:	4b23      	ldr	r3, [pc, #140]	; (800707c <HAL_GPIO_Init+0x304>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	43db      	mvns	r3, r3
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	4313      	orrs	r3, r2
 8007010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007012:	4a1a      	ldr	r2, [pc, #104]	; (800707c <HAL_GPIO_Init+0x304>)
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007018:	4b18      	ldr	r3, [pc, #96]	; (800707c <HAL_GPIO_Init+0x304>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	43db      	mvns	r3, r3
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	4013      	ands	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800703c:	4a0f      	ldr	r2, [pc, #60]	; (800707c <HAL_GPIO_Init+0x304>)
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	3301      	adds	r3, #1
 8007046:	61fb      	str	r3, [r7, #28]
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	2b0f      	cmp	r3, #15
 800704c:	f67f aea2 	bls.w	8006d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	3724      	adds	r7, #36	; 0x24
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40023800 	.word	0x40023800
 8007064:	40013800 	.word	0x40013800
 8007068:	40020000 	.word	0x40020000
 800706c:	40020400 	.word	0x40020400
 8007070:	40020800 	.word	0x40020800
 8007074:	40020c00 	.word	0x40020c00
 8007078:	40021000 	.word	0x40021000
 800707c:	40013c00 	.word	0x40013c00

08007080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	807b      	strh	r3, [r7, #2]
 800708c:	4613      	mov	r3, r2
 800708e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007090:	787b      	ldrb	r3, [r7, #1]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007096:	887a      	ldrh	r2, [r7, #2]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800709c:	e003      	b.n	80070a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800709e:	887b      	ldrh	r3, [r7, #2]
 80070a0:	041a      	lsls	r2, r3, #16
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	619a      	str	r2, [r3, #24]
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
	...

080070b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	4603      	mov	r3, r0
 80070bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80070be:	4b08      	ldr	r3, [pc, #32]	; (80070e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070c0:	695a      	ldr	r2, [r3, #20]
 80070c2:	88fb      	ldrh	r3, [r7, #6]
 80070c4:	4013      	ands	r3, r2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d006      	beq.n	80070d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80070ca:	4a05      	ldr	r2, [pc, #20]	; (80070e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070cc:	88fb      	ldrh	r3, [r7, #6]
 80070ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80070d0:	88fb      	ldrh	r3, [r7, #6]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7f9 fe70 	bl	8000db8 <HAL_GPIO_EXTI_Callback>
  }
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40013c00 	.word	0x40013c00

080070e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e101      	b.n	80072fa <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d106      	bne.n	8007116 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f00a fd6f 	bl	8011bf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2203      	movs	r2, #3
 800711a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007124:	d102      	bne.n	800712c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4618      	mov	r0, r3
 8007132:	f003 fb78 	bl	800a826 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6818      	ldr	r0, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	7c1a      	ldrb	r2, [r3, #16]
 800713e:	f88d 2000 	strb.w	r2, [sp]
 8007142:	3304      	adds	r3, #4
 8007144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007146:	f003 fa57 	bl	800a5f8 <USB_CoreInit>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d005      	beq.n	800715c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e0ce      	b.n	80072fa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2100      	movs	r1, #0
 8007162:	4618      	mov	r0, r3
 8007164:	f003 fb70 	bl	800a848 <USB_SetCurrentMode>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d005      	beq.n	800717a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2202      	movs	r2, #2
 8007172:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e0bf      	b.n	80072fa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800717a:	2300      	movs	r3, #0
 800717c:	73fb      	strb	r3, [r7, #15]
 800717e:	e04a      	b.n	8007216 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007180:	7bfa      	ldrb	r2, [r7, #15]
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	4613      	mov	r3, r2
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	3315      	adds	r3, #21
 8007190:	2201      	movs	r2, #1
 8007192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007194:	7bfa      	ldrb	r2, [r7, #15]
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	4613      	mov	r3, r2
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	4413      	add	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	440b      	add	r3, r1
 80071a2:	3314      	adds	r3, #20
 80071a4:	7bfa      	ldrb	r2, [r7, #15]
 80071a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80071a8:	7bfa      	ldrb	r2, [r7, #15]
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	b298      	uxth	r0, r3
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	4613      	mov	r3, r2
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	440b      	add	r3, r1
 80071ba:	332e      	adds	r3, #46	; 0x2e
 80071bc:	4602      	mov	r2, r0
 80071be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80071c0:	7bfa      	ldrb	r2, [r7, #15]
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	4613      	mov	r3, r2
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	440b      	add	r3, r1
 80071ce:	3318      	adds	r3, #24
 80071d0:	2200      	movs	r2, #0
 80071d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80071d4:	7bfa      	ldrb	r2, [r7, #15]
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	4613      	mov	r3, r2
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	331c      	adds	r3, #28
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80071e8:	7bfa      	ldrb	r2, [r7, #15]
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	4613      	mov	r3, r2
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	4413      	add	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	3320      	adds	r3, #32
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80071fc:	7bfa      	ldrb	r2, [r7, #15]
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	4613      	mov	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	3324      	adds	r3, #36	; 0x24
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	3301      	adds	r3, #1
 8007214:	73fb      	strb	r3, [r7, #15]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	791b      	ldrb	r3, [r3, #4]
 800721a:	7bfa      	ldrb	r2, [r7, #15]
 800721c:	429a      	cmp	r2, r3
 800721e:	d3af      	bcc.n	8007180 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007220:	2300      	movs	r3, #0
 8007222:	73fb      	strb	r3, [r7, #15]
 8007224:	e044      	b.n	80072b0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007226:	7bfa      	ldrb	r2, [r7, #15]
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	4613      	mov	r3, r2
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	440b      	add	r3, r1
 8007234:	f203 2355 	addw	r3, r3, #597	; 0x255
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800723c:	7bfa      	ldrb	r2, [r7, #15]
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	4613      	mov	r3, r2
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	440b      	add	r3, r1
 800724a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800724e:	7bfa      	ldrb	r2, [r7, #15]
 8007250:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007252:	7bfa      	ldrb	r2, [r7, #15]
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	4613      	mov	r3, r2
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	440b      	add	r3, r1
 8007260:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8007264:	2200      	movs	r2, #0
 8007266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007268:	7bfa      	ldrb	r2, [r7, #15]
 800726a:	6879      	ldr	r1, [r7, #4]
 800726c:	4613      	mov	r3, r2
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	4413      	add	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	440b      	add	r3, r1
 8007276:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800727e:	7bfa      	ldrb	r2, [r7, #15]
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	00db      	lsls	r3, r3, #3
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	440b      	add	r3, r1
 800728c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007290:	2200      	movs	r2, #0
 8007292:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007294:	7bfa      	ldrb	r2, [r7, #15]
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	4613      	mov	r3, r2
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	440b      	add	r3, r1
 80072a2:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80072a6:	2200      	movs	r2, #0
 80072a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	3301      	adds	r3, #1
 80072ae:	73fb      	strb	r3, [r7, #15]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	791b      	ldrb	r3, [r3, #4]
 80072b4:	7bfa      	ldrb	r2, [r7, #15]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d3b5      	bcc.n	8007226 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	7c1a      	ldrb	r2, [r3, #16]
 80072c2:	f88d 2000 	strb.w	r2, [sp]
 80072c6:	3304      	adds	r3, #4
 80072c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072ca:	f003 fb09 	bl	800a8e0 <USB_DevInit>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d005      	beq.n	80072e0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e00c      	b.n	80072fa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f004 fb4d 	bl	800b992 <USB_DevDisconnect>

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007316:	2b01      	cmp	r3, #1
 8007318:	d101      	bne.n	800731e <HAL_PCD_Start+0x1c>
 800731a:	2302      	movs	r3, #2
 800731c:	e022      	b.n	8007364 <HAL_PCD_Start+0x62>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732e:	2b00      	cmp	r3, #0
 8007330:	d009      	beq.n	8007346 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007336:	2b01      	cmp	r3, #1
 8007338:	d105      	bne.n	8007346 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f003 fa5a 	bl	800a804 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4618      	mov	r0, r3
 8007356:	f004 fafb 	bl	800b950 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800736c:	b590      	push	{r4, r7, lr}
 800736e:	b08d      	sub	sp, #52	; 0x34
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4618      	mov	r0, r3
 8007384:	f004 fbb9 	bl	800bafa <USB_GetMode>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	f040 848c 	bne.w	8007ca8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4618      	mov	r0, r3
 8007396:	f004 fb1d 	bl	800b9d4 <USB_ReadInterrupts>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8482 	beq.w	8007ca6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	0a1b      	lsrs	r3, r3, #8
 80073ac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f004 fb0a 	bl	800b9d4 <USB_ReadInterrupts>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d107      	bne.n	80073da <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	695a      	ldr	r2, [r3, #20]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f002 0202 	and.w	r2, r2, #2
 80073d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4618      	mov	r0, r3
 80073e0:	f004 faf8 	bl	800b9d4 <USB_ReadInterrupts>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f003 0310 	and.w	r3, r3, #16
 80073ea:	2b10      	cmp	r3, #16
 80073ec:	d161      	bne.n	80074b2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	699a      	ldr	r2, [r3, #24]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0210 	bic.w	r2, r2, #16
 80073fc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	f003 020f 	and.w	r2, r3, #15
 800740a:	4613      	mov	r3, r2
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	4413      	add	r3, r2
 800741a:	3304      	adds	r3, #4
 800741c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	0c5b      	lsrs	r3, r3, #17
 8007422:	f003 030f 	and.w	r3, r3, #15
 8007426:	2b02      	cmp	r3, #2
 8007428:	d124      	bne.n	8007474 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007430:	4013      	ands	r3, r2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d035      	beq.n	80074a2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	091b      	lsrs	r3, r3, #4
 800743e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007440:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007444:	b29b      	uxth	r3, r3
 8007446:	461a      	mov	r2, r3
 8007448:	6a38      	ldr	r0, [r7, #32]
 800744a:	f004 f92f 	bl	800b6ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	091b      	lsrs	r3, r3, #4
 8007456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800745a:	441a      	add	r2, r3
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	695a      	ldr	r2, [r3, #20]
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	091b      	lsrs	r3, r3, #4
 8007468:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800746c:	441a      	add	r2, r3
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	615a      	str	r2, [r3, #20]
 8007472:	e016      	b.n	80074a2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	0c5b      	lsrs	r3, r3, #17
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	2b06      	cmp	r3, #6
 800747e:	d110      	bne.n	80074a2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007486:	2208      	movs	r2, #8
 8007488:	4619      	mov	r1, r3
 800748a:	6a38      	ldr	r0, [r7, #32]
 800748c:	f004 f90e 	bl	800b6ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	695a      	ldr	r2, [r3, #20]
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	091b      	lsrs	r3, r3, #4
 8007498:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800749c:	441a      	add	r2, r3
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	699a      	ldr	r2, [r3, #24]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f042 0210 	orr.w	r2, r2, #16
 80074b0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f004 fa8c 	bl	800b9d4 <USB_ReadInterrupts>
 80074bc:	4603      	mov	r3, r0
 80074be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074c6:	f040 80a7 	bne.w	8007618 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f004 fa91 	bl	800b9fa <USB_ReadDevAllOutEpInterrupt>
 80074d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80074da:	e099      	b.n	8007610 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 808e 	beq.w	8007604 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	4611      	mov	r1, r2
 80074f2:	4618      	mov	r0, r3
 80074f4:	f004 fab5 	bl	800ba62 <USB_ReadDevOutEPInterrupt>
 80074f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00c      	beq.n	800751e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007510:	461a      	mov	r2, r3
 8007512:	2301      	movs	r3, #1
 8007514:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007516:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fea1 	bl	8008260 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f003 0308 	and.w	r3, r3, #8
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00c      	beq.n	8007542 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007534:	461a      	mov	r2, r3
 8007536:	2308      	movs	r3, #8
 8007538:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800753a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 ff77 	bl	8008430 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b00      	cmp	r3, #0
 800754a:	d008      	beq.n	800755e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007558:	461a      	mov	r2, r3
 800755a:	2310      	movs	r3, #16
 800755c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d030      	beq.n	80075ca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007570:	2b80      	cmp	r3, #128	; 0x80
 8007572:	d109      	bne.n	8007588 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007586:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758a:	4613      	mov	r3, r2
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	4413      	add	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	4413      	add	r3, r2
 800759a:	3304      	adds	r3, #4
 800759c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	78db      	ldrb	r3, [r3, #3]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d108      	bne.n	80075b8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2200      	movs	r2, #0
 80075aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f00a fc1a 	bl	8011dec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c4:	461a      	mov	r2, r3
 80075c6:	2302      	movs	r3, #2
 80075c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d008      	beq.n	80075e6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e0:	461a      	mov	r2, r3
 80075e2:	2320      	movs	r3, #32
 80075e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d009      	beq.n	8007604 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fc:	461a      	mov	r2, r3
 80075fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007602:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	3301      	adds	r3, #1
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	085b      	lsrs	r3, r3, #1
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	2b00      	cmp	r3, #0
 8007614:	f47f af62 	bne.w	80074dc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4618      	mov	r0, r3
 800761e:	f004 f9d9 	bl	800b9d4 <USB_ReadInterrupts>
 8007622:	4603      	mov	r3, r0
 8007624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007628:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800762c:	f040 80db 	bne.w	80077e6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4618      	mov	r0, r3
 8007636:	f004 f9fa 	bl	800ba2e <USB_ReadDevAllInEpInterrupt>
 800763a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007640:	e0cd      	b.n	80077de <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 80c2 	beq.w	80077d2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	4611      	mov	r1, r2
 8007658:	4618      	mov	r0, r3
 800765a:	f004 fa20 	bl	800ba9e <USB_ReadDevInEPInterrupt>
 800765e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d057      	beq.n	800771a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	f003 030f 	and.w	r3, r3, #15
 8007670:	2201      	movs	r2, #1
 8007672:	fa02 f303 	lsl.w	r3, r2, r3
 8007676:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800767e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	43db      	mvns	r3, r3
 8007684:	69f9      	ldr	r1, [r7, #28]
 8007686:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800768a:	4013      	ands	r3, r2
 800768c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769a:	461a      	mov	r2, r3
 800769c:	2301      	movs	r3, #1
 800769e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	799b      	ldrb	r3, [r3, #6]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d132      	bne.n	800770e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ac:	4613      	mov	r3, r2
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	4413      	add	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	440b      	add	r3, r1
 80076b6:	3320      	adds	r3, #32
 80076b8:	6819      	ldr	r1, [r3, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076be:	4613      	mov	r3, r2
 80076c0:	00db      	lsls	r3, r3, #3
 80076c2:	4413      	add	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4403      	add	r3, r0
 80076c8:	331c      	adds	r3, #28
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4419      	add	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d2:	4613      	mov	r3, r2
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4403      	add	r3, r0
 80076dc:	3320      	adds	r3, #32
 80076de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d113      	bne.n	800770e <HAL_PCD_IRQHandler+0x3a2>
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ea:	4613      	mov	r3, r2
 80076ec:	00db      	lsls	r3, r3, #3
 80076ee:	4413      	add	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	440b      	add	r3, r1
 80076f4:	3324      	adds	r3, #36	; 0x24
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d108      	bne.n	800770e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6818      	ldr	r0, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007706:	461a      	mov	r2, r3
 8007708:	2101      	movs	r1, #1
 800770a:	f004 fa27 	bl	800bb5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	b2db      	uxtb	r3, r3
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f00a faee 	bl	8011cf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b00      	cmp	r3, #0
 8007722:	d008      	beq.n	8007736 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007730:	461a      	mov	r2, r3
 8007732:	2308      	movs	r3, #8
 8007734:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f003 0310 	and.w	r3, r3, #16
 800773c:	2b00      	cmp	r3, #0
 800773e:	d008      	beq.n	8007752 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774c:	461a      	mov	r2, r3
 800774e:	2310      	movs	r3, #16
 8007750:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007758:	2b00      	cmp	r3, #0
 800775a:	d008      	beq.n	800776e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007768:	461a      	mov	r2, r3
 800776a:	2340      	movs	r3, #64	; 0x40
 800776c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d023      	beq.n	80077c0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800777a:	6a38      	ldr	r0, [r7, #32]
 800777c:	f003 fa14 	bl	800aba8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007782:	4613      	mov	r3, r2
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	3310      	adds	r3, #16
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	4413      	add	r3, r2
 8007790:	3304      	adds	r3, #4
 8007792:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	78db      	ldrb	r3, [r3, #3]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d108      	bne.n	80077ae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	2200      	movs	r2, #0
 80077a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f00a fb31 	bl	8011e10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ba:	461a      	mov	r2, r3
 80077bc:	2302      	movs	r3, #2
 80077be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80077ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fcbb 	bl	8008148 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	3301      	adds	r3, #1
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	085b      	lsrs	r3, r3, #1
 80077dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f47f af2e 	bne.w	8007642 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f004 f8f2 	bl	800b9d4 <USB_ReadInterrupts>
 80077f0:	4603      	mov	r3, r0
 80077f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077fa:	d122      	bne.n	8007842 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	69fa      	ldr	r2, [r7, #28]
 8007806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800780a:	f023 0301 	bic.w	r3, r3, #1
 800780e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8007816:	2b01      	cmp	r3, #1
 8007818:	d108      	bne.n	800782c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007822:	2100      	movs	r1, #0
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fea1 	bl	800856c <HAL_PCDEx_LPM_Callback>
 800782a:	e002      	b.n	8007832 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f00a facf 	bl	8011dd0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695a      	ldr	r2, [r3, #20]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4618      	mov	r0, r3
 8007848:	f004 f8c4 	bl	800b9d4 <USB_ReadInterrupts>
 800784c:	4603      	mov	r3, r0
 800784e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007856:	d112      	bne.n	800787e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b01      	cmp	r3, #1
 8007866:	d102      	bne.n	800786e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f00a fa8b 	bl	8011d84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	695a      	ldr	r2, [r3, #20]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800787c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4618      	mov	r0, r3
 8007884:	f004 f8a6 	bl	800b9d4 <USB_ReadInterrupts>
 8007888:	4603      	mov	r3, r0
 800788a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800788e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007892:	f040 80b7 	bne.w	8007a04 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078a4:	f023 0301 	bic.w	r3, r3, #1
 80078a8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2110      	movs	r1, #16
 80078b0:	4618      	mov	r0, r3
 80078b2:	f003 f979 	bl	800aba8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078b6:	2300      	movs	r3, #0
 80078b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078ba:	e046      	b.n	800794a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80078bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c8:	461a      	mov	r2, r3
 80078ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078ce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078e0:	0151      	lsls	r1, r2, #5
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	440a      	add	r2, r1
 80078e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fc:	461a      	mov	r2, r3
 80078fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007902:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007914:	0151      	lsls	r1, r2, #5
 8007916:	69fa      	ldr	r2, [r7, #28]
 8007918:	440a      	add	r2, r1
 800791a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800791e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007922:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007934:	0151      	lsls	r1, r2, #5
 8007936:	69fa      	ldr	r2, [r7, #28]
 8007938:	440a      	add	r2, r1
 800793a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800793e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007942:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007946:	3301      	adds	r3, #1
 8007948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	791b      	ldrb	r3, [r3, #4]
 800794e:	461a      	mov	r2, r3
 8007950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007952:	4293      	cmp	r3, r2
 8007954:	d3b2      	bcc.n	80078bc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007964:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007968:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	7bdb      	ldrb	r3, [r3, #15]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d016      	beq.n	80079a0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800797c:	69fa      	ldr	r2, [r7, #28]
 800797e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007982:	f043 030b 	orr.w	r3, r3, #11
 8007986:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007998:	f043 030b 	orr.w	r3, r3, #11
 800799c:	6453      	str	r3, [r2, #68]	; 0x44
 800799e:	e015      	b.n	80079cc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80079b2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80079b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	69fa      	ldr	r2, [r7, #28]
 80079c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079c6:	f043 030b 	orr.w	r3, r3, #11
 80079ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	69fa      	ldr	r2, [r7, #28]
 80079d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80079de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6818      	ldr	r0, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079ee:	461a      	mov	r2, r3
 80079f0:	f004 f8b4 	bl	800bb5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	695a      	ldr	r2, [r3, #20]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007a02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f003 ffe3 	bl	800b9d4 <USB_ReadInterrupts>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a18:	d123      	bne.n	8007a62 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f004 f879 	bl	800bb16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f003 f936 	bl	800ac9a <USB_GetDevSpeed>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	461a      	mov	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681c      	ldr	r4, [r3, #0]
 8007a3a:	f001 f9c7 	bl	8008dcc <HAL_RCC_GetHCLKFreq>
 8007a3e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a44:	461a      	mov	r2, r3
 8007a46:	4620      	mov	r0, r4
 8007a48:	f002 fe3a 	bl	800a6c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f00a f97a 	bl	8011d46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	695a      	ldr	r2, [r3, #20]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007a60:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f003 ffb4 	bl	800b9d4 <USB_ReadInterrupts>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	f003 0308 	and.w	r3, r3, #8
 8007a72:	2b08      	cmp	r3, #8
 8007a74:	d10a      	bne.n	8007a8c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f00a f957 	bl	8011d2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	695a      	ldr	r2, [r3, #20]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f002 0208 	and.w	r2, r2, #8
 8007a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f003 ff9f 	bl	800b9d4 <USB_ReadInterrupts>
 8007a96:	4603      	mov	r3, r0
 8007a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a9c:	2b80      	cmp	r3, #128	; 0x80
 8007a9e:	d123      	bne.n	8007ae8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007aac:	2301      	movs	r3, #1
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab0:	e014      	b.n	8007adc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007ab2:	6879      	ldr	r1, [r7, #4]
 8007ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	00db      	lsls	r3, r3, #3
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	440b      	add	r3, r1
 8007ac0:	f203 2357 	addw	r3, r3, #599	; 0x257
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d105      	bne.n	8007ad6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fb08 	bl	80080e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	3301      	adds	r3, #1
 8007ada:	627b      	str	r3, [r7, #36]	; 0x24
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	791b      	ldrb	r3, [r3, #4]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d3e4      	bcc.n	8007ab2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f003 ff71 	bl	800b9d4 <USB_ReadInterrupts>
 8007af2:	4603      	mov	r3, r0
 8007af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007afc:	d13c      	bne.n	8007b78 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007afe:	2301      	movs	r3, #1
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24
 8007b02:	e02b      	b.n	8007b5c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b14:	6879      	ldr	r1, [r7, #4]
 8007b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b18:	4613      	mov	r3, r2
 8007b1a:	00db      	lsls	r3, r3, #3
 8007b1c:	4413      	add	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	440b      	add	r3, r1
 8007b22:	3318      	adds	r3, #24
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d115      	bne.n	8007b56 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007b2a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	da12      	bge.n	8007b56 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b34:	4613      	mov	r3, r2
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	3317      	adds	r3, #23
 8007b40:	2201      	movs	r2, #1
 8007b42:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fac8 	bl	80080e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	3301      	adds	r3, #1
 8007b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	791b      	ldrb	r3, [r3, #4]
 8007b60:	461a      	mov	r2, r3
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d3cd      	bcc.n	8007b04 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	695a      	ldr	r2, [r3, #20]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007b76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f003 ff29 	bl	800b9d4 <USB_ReadInterrupts>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b8c:	d156      	bne.n	8007c3c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b8e:	2301      	movs	r3, #1
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
 8007b92:	e045      	b.n	8007c20 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba8:	4613      	mov	r3, r2
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d12e      	bne.n	8007c1a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007bbc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	da2b      	bge.n	8007c1a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8007bce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d121      	bne.n	8007c1a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bda:	4613      	mov	r3, r2
 8007bdc:	00db      	lsls	r3, r3, #3
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	440b      	add	r3, r1
 8007be4:	f203 2357 	addw	r3, r3, #599	; 0x257
 8007be8:	2201      	movs	r2, #1
 8007bea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10a      	bne.n	8007c1a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c16:	6053      	str	r3, [r2, #4]
            break;
 8007c18:	e008      	b.n	8007c2c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	791b      	ldrb	r3, [r3, #4]
 8007c24:	461a      	mov	r2, r3
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d3b3      	bcc.n	8007b94 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	695a      	ldr	r2, [r3, #20]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f003 fec7 	bl	800b9d4 <USB_ReadInterrupts>
 8007c46:	4603      	mov	r3, r0
 8007c48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c50:	d10a      	bne.n	8007c68 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f00a f8ee 	bl	8011e34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	695a      	ldr	r2, [r3, #20]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f003 feb1 	bl	800b9d4 <USB_ReadInterrupts>
 8007c72:	4603      	mov	r3, r0
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d115      	bne.n	8007ca8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	f003 0304 	and.w	r3, r3, #4
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d002      	beq.n	8007c94 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f00a f8de 	bl	8011e50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6859      	ldr	r1, [r3, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	605a      	str	r2, [r3, #4]
 8007ca4:	e000      	b.n	8007ca8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007ca6:	bf00      	nop
    }
  }
}
 8007ca8:	3734      	adds	r7, #52	; 0x34
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd90      	pop	{r4, r7, pc}

08007cae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_PCD_SetAddress+0x1a>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e012      	b.n	8007cee <HAL_PCD_SetAddress+0x40>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	78fa      	ldrb	r2, [r7, #3]
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f003 fe10 	bl	800b904 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	4608      	mov	r0, r1
 8007d00:	4611      	mov	r1, r2
 8007d02:	461a      	mov	r2, r3
 8007d04:	4603      	mov	r3, r0
 8007d06:	70fb      	strb	r3, [r7, #3]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	803b      	strh	r3, [r7, #0]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	da0f      	bge.n	8007d3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d1c:	78fb      	ldrb	r3, [r7, #3]
 8007d1e:	f003 020f 	and.w	r2, r3, #15
 8007d22:	4613      	mov	r3, r2
 8007d24:	00db      	lsls	r3, r3, #3
 8007d26:	4413      	add	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	3310      	adds	r3, #16
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	4413      	add	r3, r2
 8007d30:	3304      	adds	r3, #4
 8007d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2201      	movs	r2, #1
 8007d38:	705a      	strb	r2, [r3, #1]
 8007d3a:	e00f      	b.n	8007d5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	f003 020f 	and.w	r2, r3, #15
 8007d42:	4613      	mov	r3, r2
 8007d44:	00db      	lsls	r3, r3, #3
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	4413      	add	r3, r2
 8007d52:	3304      	adds	r3, #4
 8007d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	f003 030f 	and.w	r3, r3, #15
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007d68:	883a      	ldrh	r2, [r7, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	78ba      	ldrb	r2, [r7, #2]
 8007d72:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	785b      	ldrb	r3, [r3, #1]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d004      	beq.n	8007d86 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007d86:	78bb      	ldrb	r3, [r7, #2]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d102      	bne.n	8007d92 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d101      	bne.n	8007da0 <HAL_PCD_EP_Open+0xaa>
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	e00e      	b.n	8007dbe <HAL_PCD_EP_Open+0xc8>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68f9      	ldr	r1, [r7, #12]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f002 ff98 	bl	800ace4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	da0f      	bge.n	8007dfa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dda:	78fb      	ldrb	r3, [r7, #3]
 8007ddc:	f003 020f 	and.w	r2, r3, #15
 8007de0:	4613      	mov	r3, r2
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	3310      	adds	r3, #16
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	4413      	add	r3, r2
 8007dee:	3304      	adds	r3, #4
 8007df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2201      	movs	r2, #1
 8007df6:	705a      	strb	r2, [r3, #1]
 8007df8:	e00f      	b.n	8007e1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dfa:	78fb      	ldrb	r3, [r7, #3]
 8007dfc:	f003 020f 	and.w	r2, r3, #15
 8007e00:	4613      	mov	r3, r2
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	4413      	add	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	4413      	add	r3, r2
 8007e10:	3304      	adds	r3, #4
 8007e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e1a:	78fb      	ldrb	r3, [r7, #3]
 8007e1c:	f003 030f 	and.w	r3, r3, #15
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d101      	bne.n	8007e34 <HAL_PCD_EP_Close+0x6e>
 8007e30:	2302      	movs	r3, #2
 8007e32:	e00e      	b.n	8007e52 <HAL_PCD_EP_Close+0x8c>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68f9      	ldr	r1, [r7, #12]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f002 ffd6 	bl	800adf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b086      	sub	sp, #24
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	60f8      	str	r0, [r7, #12]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]
 8007e66:	460b      	mov	r3, r1
 8007e68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e6a:	7afb      	ldrb	r3, [r7, #11]
 8007e6c:	f003 020f 	and.w	r2, r3, #15
 8007e70:	4613      	mov	r3, r2
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	4413      	add	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4413      	add	r3, r2
 8007e80:	3304      	adds	r3, #4
 8007e82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2200      	movs	r2, #0
 8007e94:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e9c:	7afb      	ldrb	r3, [r7, #11]
 8007e9e:	f003 030f 	and.w	r3, r3, #15
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	799b      	ldrb	r3, [r3, #6]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d102      	bne.n	8007eb6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	799b      	ldrb	r3, [r3, #6]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	6979      	ldr	r1, [r7, #20]
 8007ec2:	f003 f873 	bl	800afac <USB_EPStartXfer>

  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007edc:	78fb      	ldrb	r3, [r7, #3]
 8007ede:	f003 020f 	and.w	r2, r3, #15
 8007ee2:	6879      	ldr	r1, [r7, #4]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	4413      	add	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	440b      	add	r3, r1
 8007eee:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8007ef2:	681b      	ldr	r3, [r3, #0]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	607a      	str	r2, [r7, #4]
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f10:	7afb      	ldrb	r3, [r7, #11]
 8007f12:	f003 020f 	and.w	r2, r3, #15
 8007f16:	4613      	mov	r3, r2
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	3310      	adds	r3, #16
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	4413      	add	r3, r2
 8007f24:	3304      	adds	r3, #4
 8007f26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2200      	movs	r2, #0
 8007f38:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f40:	7afb      	ldrb	r3, [r7, #11]
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	799b      	ldrb	r3, [r3, #6]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d102      	bne.n	8007f5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	799b      	ldrb	r3, [r3, #6]
 8007f62:	461a      	mov	r2, r3
 8007f64:	6979      	ldr	r1, [r7, #20]
 8007f66:	f003 f821 	bl	800afac <USB_EPStartXfer>

  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3718      	adds	r7, #24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	7912      	ldrb	r2, [r2, #4]
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d901      	bls.n	8007f92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e04f      	b.n	8008032 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	da0f      	bge.n	8007fba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	f003 020f 	and.w	r2, r3, #15
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	3310      	adds	r3, #16
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	3304      	adds	r3, #4
 8007fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	705a      	strb	r2, [r3, #1]
 8007fb8:	e00d      	b.n	8007fd6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007fba:	78fa      	ldrb	r2, [r7, #3]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	4413      	add	r3, r2
 8007fcc:	3304      	adds	r3, #4
 8007fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	f003 030f 	and.w	r3, r3, #15
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d101      	bne.n	8007ff6 <HAL_PCD_EP_SetStall+0x82>
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	e01d      	b.n	8008032 <HAL_PCD_EP_SetStall+0xbe>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68f9      	ldr	r1, [r7, #12]
 8008004:	4618      	mov	r0, r3
 8008006:	f003 fba9 	bl	800b75c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	f003 030f 	and.w	r3, r3, #15
 8008010:	2b00      	cmp	r3, #0
 8008012:	d109      	bne.n	8008028 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6818      	ldr	r0, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	7999      	ldrb	r1, [r3, #6]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008022:	461a      	mov	r2, r3
 8008024:	f003 fd9a 	bl	800bb5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	460b      	mov	r3, r1
 8008044:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008046:	78fb      	ldrb	r3, [r7, #3]
 8008048:	f003 030f 	and.w	r3, r3, #15
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	7912      	ldrb	r2, [r2, #4]
 8008050:	4293      	cmp	r3, r2
 8008052:	d901      	bls.n	8008058 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e042      	b.n	80080de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800805c:	2b00      	cmp	r3, #0
 800805e:	da0f      	bge.n	8008080 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	f003 020f 	and.w	r2, r3, #15
 8008066:	4613      	mov	r3, r2
 8008068:	00db      	lsls	r3, r3, #3
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	3310      	adds	r3, #16
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	4413      	add	r3, r2
 8008074:	3304      	adds	r3, #4
 8008076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	705a      	strb	r2, [r3, #1]
 800807e:	e00f      	b.n	80080a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	f003 020f 	and.w	r2, r3, #15
 8008086:	4613      	mov	r3, r2
 8008088:	00db      	lsls	r3, r3, #3
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	4413      	add	r3, r2
 8008096:	3304      	adds	r3, #4
 8008098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	f003 030f 	and.w	r3, r3, #15
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_PCD_EP_ClrStall+0x86>
 80080bc:	2302      	movs	r3, #2
 80080be:	e00e      	b.n	80080de <HAL_PCD_EP_ClrStall+0xa4>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68f9      	ldr	r1, [r7, #12]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f003 fbb2 	bl	800b838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	460b      	mov	r3, r1
 80080f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80080f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	da0c      	bge.n	8008114 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080fa:	78fb      	ldrb	r3, [r7, #3]
 80080fc:	f003 020f 	and.w	r2, r3, #15
 8008100:	4613      	mov	r3, r2
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	4413      	add	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	3310      	adds	r3, #16
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	4413      	add	r3, r2
 800810e:	3304      	adds	r3, #4
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	e00c      	b.n	800812e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008114:	78fb      	ldrb	r3, [r7, #3]
 8008116:	f003 020f 	and.w	r2, r3, #15
 800811a:	4613      	mov	r3, r2
 800811c:	00db      	lsls	r3, r3, #3
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	4413      	add	r3, r2
 800812a:	3304      	adds	r3, #4
 800812c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68f9      	ldr	r1, [r7, #12]
 8008134:	4618      	mov	r0, r3
 8008136:	f003 f9d1 	bl	800b4dc <USB_EPStopXfer>
 800813a:	4603      	mov	r3, r0
 800813c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800813e:	7afb      	ldrb	r3, [r7, #11]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b08a      	sub	sp, #40	; 0x28
 800814c:	af02      	add	r7, sp, #8
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	4613      	mov	r3, r2
 8008160:	00db      	lsls	r3, r3, #3
 8008162:	4413      	add	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	3310      	adds	r3, #16
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	4413      	add	r3, r2
 800816c:	3304      	adds	r3, #4
 800816e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	695a      	ldr	r2, [r3, #20]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	429a      	cmp	r2, r3
 800817a:	d901      	bls.n	8008180 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e06b      	b.n	8008258 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	691a      	ldr	r2, [r3, #16]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	429a      	cmp	r2, r3
 8008194:	d902      	bls.n	800819c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	3303      	adds	r3, #3
 80081a0:	089b      	lsrs	r3, r3, #2
 80081a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081a4:	e02a      	b.n	80081fc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	691a      	ldr	r2, [r3, #16]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d902      	bls.n	80081c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	3303      	adds	r3, #3
 80081c6:	089b      	lsrs	r3, r3, #2
 80081c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	68d9      	ldr	r1, [r3, #12]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	4603      	mov	r3, r0
 80081de:	6978      	ldr	r0, [r7, #20]
 80081e0:	f003 fa26 	bl	800b630 <USB_WritePacket>

    ep->xfer_buff  += len;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	441a      	add	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	695a      	ldr	r2, [r3, #20]
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	441a      	add	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	429a      	cmp	r2, r3
 8008210:	d809      	bhi.n	8008226 <PCD_WriteEmptyTxFifo+0xde>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	695a      	ldr	r2, [r3, #20]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800821a:	429a      	cmp	r2, r3
 800821c:	d203      	bcs.n	8008226 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1bf      	bne.n	80081a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	691a      	ldr	r2, [r3, #16]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	429a      	cmp	r2, r3
 8008230:	d811      	bhi.n	8008256 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	f003 030f 	and.w	r3, r3, #15
 8008238:	2201      	movs	r2, #1
 800823a:	fa02 f303 	lsl.w	r3, r2, r3
 800823e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	43db      	mvns	r3, r3
 800824c:	6939      	ldr	r1, [r7, #16]
 800824e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008252:	4013      	ands	r3, r2
 8008254:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3720      	adds	r7, #32
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b088      	sub	sp, #32
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	333c      	adds	r3, #60	; 0x3c
 8008278:	3304      	adds	r3, #4
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	799b      	ldrb	r3, [r3, #6]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d17b      	bne.n	800838e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	f003 0308 	and.w	r3, r3, #8
 800829c:	2b00      	cmp	r3, #0
 800829e:	d015      	beq.n	80082cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	4a61      	ldr	r2, [pc, #388]	; (8008428 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	f240 80b9 	bls.w	800841c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 80b3 	beq.w	800841c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c2:	461a      	mov	r2, r3
 80082c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082c8:	6093      	str	r3, [r2, #8]
 80082ca:	e0a7      	b.n	800841c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d009      	beq.n	80082ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e2:	461a      	mov	r2, r3
 80082e4:	2320      	movs	r3, #32
 80082e6:	6093      	str	r3, [r2, #8]
 80082e8:	e098      	b.n	800841c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f040 8093 	bne.w	800841c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	4a4b      	ldr	r2, [pc, #300]	; (8008428 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d90f      	bls.n	800831e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00a      	beq.n	800831e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008314:	461a      	mov	r2, r3
 8008316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800831a:	6093      	str	r3, [r2, #8]
 800831c:	e07e      	b.n	800841c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800831e:	683a      	ldr	r2, [r7, #0]
 8008320:	4613      	mov	r3, r2
 8008322:	00db      	lsls	r3, r3, #3
 8008324:	4413      	add	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	4413      	add	r3, r2
 8008330:	3304      	adds	r3, #4
 8008332:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6a1a      	ldr	r2, [r3, #32]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	0159      	lsls	r1, r3, #5
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	440b      	add	r3, r1
 8008340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800834a:	1ad2      	subs	r2, r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d114      	bne.n	8008380 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d109      	bne.n	8008372 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008368:	461a      	mov	r2, r3
 800836a:	2101      	movs	r1, #1
 800836c:	f003 fbf6 	bl	800bb5c <USB_EP0_OutStart>
 8008370:	e006      	b.n	8008380 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	441a      	add	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	b2db      	uxtb	r3, r3
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f009 fc9a 	bl	8011cc0 <HAL_PCD_DataOutStageCallback>
 800838c:	e046      	b.n	800841c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	4a26      	ldr	r2, [pc, #152]	; (800842c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d124      	bne.n	80083e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00a      	beq.n	80083b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ac:	461a      	mov	r2, r3
 80083ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083b2:	6093      	str	r3, [r2, #8]
 80083b4:	e032      	b.n	800841c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f003 0320 	and.w	r3, r3, #32
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d008      	beq.n	80083d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083cc:	461a      	mov	r2, r3
 80083ce:	2320      	movs	r3, #32
 80083d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f009 fc71 	bl	8011cc0 <HAL_PCD_DataOutStageCallback>
 80083de:	e01d      	b.n	800841c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d114      	bne.n	8008410 <PCD_EP_OutXfrComplete_int+0x1b0>
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	4613      	mov	r3, r2
 80083ec:	00db      	lsls	r3, r3, #3
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	440b      	add	r3, r1
 80083f4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d108      	bne.n	8008410 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008408:	461a      	mov	r2, r3
 800840a:	2100      	movs	r1, #0
 800840c:	f003 fba6 	bl	800bb5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	b2db      	uxtb	r3, r3
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f009 fc52 	bl	8011cc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3720      	adds	r7, #32
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	4f54300a 	.word	0x4f54300a
 800842c:	4f54310a 	.word	0x4f54310a

08008430 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	333c      	adds	r3, #60	; 0x3c
 8008448:	3304      	adds	r3, #4
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	015a      	lsls	r2, r3, #5
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	4413      	add	r3, r2
 8008456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4a15      	ldr	r2, [pc, #84]	; (80084b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d90e      	bls.n	8008484 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800846c:	2b00      	cmp	r3, #0
 800846e:	d009      	beq.n	8008484 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847c:	461a      	mov	r2, r3
 800847e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008482:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f009 fc09 	bl	8011c9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4a0a      	ldr	r2, [pc, #40]	; (80084b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d90c      	bls.n	80084ac <PCD_EP_OutSetupPacket_int+0x7c>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	799b      	ldrb	r3, [r3, #6]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d108      	bne.n	80084ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80084a4:	461a      	mov	r2, r3
 80084a6:	2101      	movs	r1, #1
 80084a8:	f003 fb58 	bl	800bb5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	4f54300a 	.word	0x4f54300a

080084bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	70fb      	strb	r3, [r7, #3]
 80084c8:	4613      	mov	r3, r2
 80084ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80084d4:	78fb      	ldrb	r3, [r7, #3]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d107      	bne.n	80084ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80084da:	883b      	ldrh	r3, [r7, #0]
 80084dc:	0419      	lsls	r1, r3, #16
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	629a      	str	r2, [r3, #40]	; 0x28
 80084e8:	e028      	b.n	800853c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f0:	0c1b      	lsrs	r3, r3, #16
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	4413      	add	r3, r2
 80084f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80084f8:	2300      	movs	r3, #0
 80084fa:	73fb      	strb	r3, [r7, #15]
 80084fc:	e00d      	b.n	800851a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	7bfb      	ldrb	r3, [r7, #15]
 8008504:	3340      	adds	r3, #64	; 0x40
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	0c1b      	lsrs	r3, r3, #16
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	4413      	add	r3, r2
 8008512:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	3301      	adds	r3, #1
 8008518:	73fb      	strb	r3, [r7, #15]
 800851a:	7bfa      	ldrb	r2, [r7, #15]
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	3b01      	subs	r3, #1
 8008520:	429a      	cmp	r2, r3
 8008522:	d3ec      	bcc.n	80084fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008524:	883b      	ldrh	r3, [r7, #0]
 8008526:	0418      	lsls	r0, r3, #16
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6819      	ldr	r1, [r3, #0]
 800852c:	78fb      	ldrb	r3, [r7, #3]
 800852e:	3b01      	subs	r3, #1
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	4302      	orrs	r2, r0
 8008534:	3340      	adds	r3, #64	; 0x40
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	440b      	add	r3, r1
 800853a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800854a:	b480      	push	{r7}
 800854c:	b083      	sub	sp, #12
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	887a      	ldrh	r2, [r7, #2]
 800855c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e267      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d075      	beq.n	800868e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085a2:	4b88      	ldr	r3, [pc, #544]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f003 030c 	and.w	r3, r3, #12
 80085aa:	2b04      	cmp	r3, #4
 80085ac:	d00c      	beq.n	80085c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085ae:	4b85      	ldr	r3, [pc, #532]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085b6:	2b08      	cmp	r3, #8
 80085b8:	d112      	bne.n	80085e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085ba:	4b82      	ldr	r3, [pc, #520]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085c6:	d10b      	bne.n	80085e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085c8:	4b7e      	ldr	r3, [pc, #504]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d05b      	beq.n	800868c <HAL_RCC_OscConfig+0x108>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d157      	bne.n	800868c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e242      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085e8:	d106      	bne.n	80085f8 <HAL_RCC_OscConfig+0x74>
 80085ea:	4b76      	ldr	r3, [pc, #472]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a75      	ldr	r2, [pc, #468]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 80085f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	e01d      	b.n	8008634 <HAL_RCC_OscConfig+0xb0>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008600:	d10c      	bne.n	800861c <HAL_RCC_OscConfig+0x98>
 8008602:	4b70      	ldr	r3, [pc, #448]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a6f      	ldr	r2, [pc, #444]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 8008608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	4b6d      	ldr	r3, [pc, #436]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a6c      	ldr	r2, [pc, #432]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 8008614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	e00b      	b.n	8008634 <HAL_RCC_OscConfig+0xb0>
 800861c:	4b69      	ldr	r3, [pc, #420]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a68      	ldr	r2, [pc, #416]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 8008622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	4b66      	ldr	r3, [pc, #408]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a65      	ldr	r2, [pc, #404]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 800862e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d013      	beq.n	8008664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800863c:	f7fd feea 	bl	8006414 <HAL_GetTick>
 8008640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008642:	e008      	b.n	8008656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008644:	f7fd fee6 	bl	8006414 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	2b64      	cmp	r3, #100	; 0x64
 8008650:	d901      	bls.n	8008656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e207      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008656:	4b5b      	ldr	r3, [pc, #364]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0f0      	beq.n	8008644 <HAL_RCC_OscConfig+0xc0>
 8008662:	e014      	b.n	800868e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008664:	f7fd fed6 	bl	8006414 <HAL_GetTick>
 8008668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800866a:	e008      	b.n	800867e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800866c:	f7fd fed2 	bl	8006414 <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	2b64      	cmp	r3, #100	; 0x64
 8008678:	d901      	bls.n	800867e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e1f3      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800867e:	4b51      	ldr	r3, [pc, #324]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1f0      	bne.n	800866c <HAL_RCC_OscConfig+0xe8>
 800868a:	e000      	b.n	800868e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800868c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0302 	and.w	r3, r3, #2
 8008696:	2b00      	cmp	r3, #0
 8008698:	d063      	beq.n	8008762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800869a:	4b4a      	ldr	r3, [pc, #296]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f003 030c 	and.w	r3, r3, #12
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00b      	beq.n	80086be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086a6:	4b47      	ldr	r3, [pc, #284]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086ae:	2b08      	cmp	r3, #8
 80086b0:	d11c      	bne.n	80086ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086b2:	4b44      	ldr	r3, [pc, #272]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d116      	bne.n	80086ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086be:	4b41      	ldr	r3, [pc, #260]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d005      	beq.n	80086d6 <HAL_RCC_OscConfig+0x152>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d001      	beq.n	80086d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e1c7      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086d6:	4b3b      	ldr	r3, [pc, #236]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	4937      	ldr	r1, [pc, #220]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086ea:	e03a      	b.n	8008762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d020      	beq.n	8008736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086f4:	4b34      	ldr	r3, [pc, #208]	; (80087c8 <HAL_RCC_OscConfig+0x244>)
 80086f6:	2201      	movs	r2, #1
 80086f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086fa:	f7fd fe8b 	bl	8006414 <HAL_GetTick>
 80086fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008700:	e008      	b.n	8008714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008702:	f7fd fe87 	bl	8006414 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b02      	cmp	r3, #2
 800870e:	d901      	bls.n	8008714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e1a8      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008714:	4b2b      	ldr	r3, [pc, #172]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0f0      	beq.n	8008702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008720:	4b28      	ldr	r3, [pc, #160]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	00db      	lsls	r3, r3, #3
 800872e:	4925      	ldr	r1, [pc, #148]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 8008730:	4313      	orrs	r3, r2
 8008732:	600b      	str	r3, [r1, #0]
 8008734:	e015      	b.n	8008762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008736:	4b24      	ldr	r3, [pc, #144]	; (80087c8 <HAL_RCC_OscConfig+0x244>)
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873c:	f7fd fe6a 	bl	8006414 <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008744:	f7fd fe66 	bl	8006414 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b02      	cmp	r3, #2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e187      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008756:	4b1b      	ldr	r3, [pc, #108]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1f0      	bne.n	8008744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0308 	and.w	r3, r3, #8
 800876a:	2b00      	cmp	r3, #0
 800876c:	d036      	beq.n	80087dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d016      	beq.n	80087a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008776:	4b15      	ldr	r3, [pc, #84]	; (80087cc <HAL_RCC_OscConfig+0x248>)
 8008778:	2201      	movs	r2, #1
 800877a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800877c:	f7fd fe4a 	bl	8006414 <HAL_GetTick>
 8008780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008782:	e008      	b.n	8008796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008784:	f7fd fe46 	bl	8006414 <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	2b02      	cmp	r3, #2
 8008790:	d901      	bls.n	8008796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e167      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008796:	4b0b      	ldr	r3, [pc, #44]	; (80087c4 <HAL_RCC_OscConfig+0x240>)
 8008798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800879a:	f003 0302 	and.w	r3, r3, #2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0f0      	beq.n	8008784 <HAL_RCC_OscConfig+0x200>
 80087a2:	e01b      	b.n	80087dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087a4:	4b09      	ldr	r3, [pc, #36]	; (80087cc <HAL_RCC_OscConfig+0x248>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087aa:	f7fd fe33 	bl	8006414 <HAL_GetTick>
 80087ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087b0:	e00e      	b.n	80087d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087b2:	f7fd fe2f 	bl	8006414 <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d907      	bls.n	80087d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e150      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
 80087c4:	40023800 	.word	0x40023800
 80087c8:	42470000 	.word	0x42470000
 80087cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087d0:	4b88      	ldr	r3, [pc, #544]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 80087d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087d4:	f003 0302 	and.w	r3, r3, #2
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1ea      	bne.n	80087b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0304 	and.w	r3, r3, #4
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 8097 	beq.w	8008918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087ea:	2300      	movs	r3, #0
 80087ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087ee:	4b81      	ldr	r3, [pc, #516]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10f      	bne.n	800881a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087fa:	2300      	movs	r3, #0
 80087fc:	60bb      	str	r3, [r7, #8]
 80087fe:	4b7d      	ldr	r3, [pc, #500]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 8008800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008802:	4a7c      	ldr	r2, [pc, #496]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 8008804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008808:	6413      	str	r3, [r2, #64]	; 0x40
 800880a:	4b7a      	ldr	r3, [pc, #488]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 800880c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008812:	60bb      	str	r3, [r7, #8]
 8008814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008816:	2301      	movs	r3, #1
 8008818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800881a:	4b77      	ldr	r3, [pc, #476]	; (80089f8 <HAL_RCC_OscConfig+0x474>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008822:	2b00      	cmp	r3, #0
 8008824:	d118      	bne.n	8008858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008826:	4b74      	ldr	r3, [pc, #464]	; (80089f8 <HAL_RCC_OscConfig+0x474>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a73      	ldr	r2, [pc, #460]	; (80089f8 <HAL_RCC_OscConfig+0x474>)
 800882c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008832:	f7fd fdef 	bl	8006414 <HAL_GetTick>
 8008836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008838:	e008      	b.n	800884c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800883a:	f7fd fdeb 	bl	8006414 <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	2b02      	cmp	r3, #2
 8008846:	d901      	bls.n	800884c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e10c      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800884c:	4b6a      	ldr	r3, [pc, #424]	; (80089f8 <HAL_RCC_OscConfig+0x474>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0f0      	beq.n	800883a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d106      	bne.n	800886e <HAL_RCC_OscConfig+0x2ea>
 8008860:	4b64      	ldr	r3, [pc, #400]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 8008862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008864:	4a63      	ldr	r2, [pc, #396]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 8008866:	f043 0301 	orr.w	r3, r3, #1
 800886a:	6713      	str	r3, [r2, #112]	; 0x70
 800886c:	e01c      	b.n	80088a8 <HAL_RCC_OscConfig+0x324>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	2b05      	cmp	r3, #5
 8008874:	d10c      	bne.n	8008890 <HAL_RCC_OscConfig+0x30c>
 8008876:	4b5f      	ldr	r3, [pc, #380]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 8008878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887a:	4a5e      	ldr	r2, [pc, #376]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 800887c:	f043 0304 	orr.w	r3, r3, #4
 8008880:	6713      	str	r3, [r2, #112]	; 0x70
 8008882:	4b5c      	ldr	r3, [pc, #368]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 8008884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008886:	4a5b      	ldr	r2, [pc, #364]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 8008888:	f043 0301 	orr.w	r3, r3, #1
 800888c:	6713      	str	r3, [r2, #112]	; 0x70
 800888e:	e00b      	b.n	80088a8 <HAL_RCC_OscConfig+0x324>
 8008890:	4b58      	ldr	r3, [pc, #352]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 8008892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008894:	4a57      	ldr	r2, [pc, #348]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 8008896:	f023 0301 	bic.w	r3, r3, #1
 800889a:	6713      	str	r3, [r2, #112]	; 0x70
 800889c:	4b55      	ldr	r3, [pc, #340]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 800889e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a0:	4a54      	ldr	r2, [pc, #336]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 80088a2:	f023 0304 	bic.w	r3, r3, #4
 80088a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d015      	beq.n	80088dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088b0:	f7fd fdb0 	bl	8006414 <HAL_GetTick>
 80088b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088b6:	e00a      	b.n	80088ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088b8:	f7fd fdac 	bl	8006414 <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e0cb      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088ce:	4b49      	ldr	r3, [pc, #292]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 80088d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d2:	f003 0302 	and.w	r3, r3, #2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0ee      	beq.n	80088b8 <HAL_RCC_OscConfig+0x334>
 80088da:	e014      	b.n	8008906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088dc:	f7fd fd9a 	bl	8006414 <HAL_GetTick>
 80088e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088e2:	e00a      	b.n	80088fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088e4:	f7fd fd96 	bl	8006414 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d901      	bls.n	80088fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e0b5      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088fa:	4b3e      	ldr	r3, [pc, #248]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 80088fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1ee      	bne.n	80088e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008906:	7dfb      	ldrb	r3, [r7, #23]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d105      	bne.n	8008918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800890c:	4b39      	ldr	r3, [pc, #228]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 800890e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008910:	4a38      	ldr	r2, [pc, #224]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 8008912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008916:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 80a1 	beq.w	8008a64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008922:	4b34      	ldr	r3, [pc, #208]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f003 030c 	and.w	r3, r3, #12
 800892a:	2b08      	cmp	r3, #8
 800892c:	d05c      	beq.n	80089e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d141      	bne.n	80089ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008936:	4b31      	ldr	r3, [pc, #196]	; (80089fc <HAL_RCC_OscConfig+0x478>)
 8008938:	2200      	movs	r2, #0
 800893a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800893c:	f7fd fd6a 	bl	8006414 <HAL_GetTick>
 8008940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008942:	e008      	b.n	8008956 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008944:	f7fd fd66 	bl	8006414 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b02      	cmp	r3, #2
 8008950:	d901      	bls.n	8008956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e087      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008956:	4b27      	ldr	r3, [pc, #156]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1f0      	bne.n	8008944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69da      	ldr	r2, [r3, #28]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	431a      	orrs	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	019b      	lsls	r3, r3, #6
 8008972:	431a      	orrs	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008978:	085b      	lsrs	r3, r3, #1
 800897a:	3b01      	subs	r3, #1
 800897c:	041b      	lsls	r3, r3, #16
 800897e:	431a      	orrs	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	061b      	lsls	r3, r3, #24
 8008986:	491b      	ldr	r1, [pc, #108]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 8008988:	4313      	orrs	r3, r2
 800898a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800898c:	4b1b      	ldr	r3, [pc, #108]	; (80089fc <HAL_RCC_OscConfig+0x478>)
 800898e:	2201      	movs	r2, #1
 8008990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008992:	f7fd fd3f 	bl	8006414 <HAL_GetTick>
 8008996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008998:	e008      	b.n	80089ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800899a:	f7fd fd3b 	bl	8006414 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d901      	bls.n	80089ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e05c      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089ac:	4b11      	ldr	r3, [pc, #68]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0f0      	beq.n	800899a <HAL_RCC_OscConfig+0x416>
 80089b8:	e054      	b.n	8008a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ba:	4b10      	ldr	r3, [pc, #64]	; (80089fc <HAL_RCC_OscConfig+0x478>)
 80089bc:	2200      	movs	r2, #0
 80089be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089c0:	f7fd fd28 	bl	8006414 <HAL_GetTick>
 80089c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089c6:	e008      	b.n	80089da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089c8:	f7fd fd24 	bl	8006414 <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d901      	bls.n	80089da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e045      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089da:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <HAL_RCC_OscConfig+0x470>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1f0      	bne.n	80089c8 <HAL_RCC_OscConfig+0x444>
 80089e6:	e03d      	b.n	8008a64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d107      	bne.n	8008a00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e038      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
 80089f4:	40023800 	.word	0x40023800
 80089f8:	40007000 	.word	0x40007000
 80089fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a00:	4b1b      	ldr	r3, [pc, #108]	; (8008a70 <HAL_RCC_OscConfig+0x4ec>)
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d028      	beq.n	8008a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d121      	bne.n	8008a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d11a      	bne.n	8008a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a30:	4013      	ands	r3, r2
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d111      	bne.n	8008a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a46:	085b      	lsrs	r3, r3, #1
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d107      	bne.n	8008a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d001      	beq.n	8008a64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e000      	b.n	8008a66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3718      	adds	r7, #24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	40023800 	.word	0x40023800

08008a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e0cc      	b.n	8008c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a88:	4b68      	ldr	r3, [pc, #416]	; (8008c2c <HAL_RCC_ClockConfig+0x1b8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0307 	and.w	r3, r3, #7
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d90c      	bls.n	8008ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a96:	4b65      	ldr	r3, [pc, #404]	; (8008c2c <HAL_RCC_ClockConfig+0x1b8>)
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a9e:	4b63      	ldr	r3, [pc, #396]	; (8008c2c <HAL_RCC_ClockConfig+0x1b8>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0307 	and.w	r3, r3, #7
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d001      	beq.n	8008ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e0b8      	b.n	8008c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0302 	and.w	r3, r3, #2
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d020      	beq.n	8008afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0304 	and.w	r3, r3, #4
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d005      	beq.n	8008ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ac8:	4b59      	ldr	r3, [pc, #356]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	4a58      	ldr	r2, [pc, #352]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0308 	and.w	r3, r3, #8
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d005      	beq.n	8008aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ae0:	4b53      	ldr	r3, [pc, #332]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	4a52      	ldr	r2, [pc, #328]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008aec:	4b50      	ldr	r3, [pc, #320]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	494d      	ldr	r1, [pc, #308]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d044      	beq.n	8008b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d107      	bne.n	8008b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b12:	4b47      	ldr	r3, [pc, #284]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d119      	bne.n	8008b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e07f      	b.n	8008c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d003      	beq.n	8008b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d107      	bne.n	8008b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b32:	4b3f      	ldr	r3, [pc, #252]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d109      	bne.n	8008b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e06f      	b.n	8008c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b42:	4b3b      	ldr	r3, [pc, #236]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0302 	and.w	r3, r3, #2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e067      	b.n	8008c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b52:	4b37      	ldr	r3, [pc, #220]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f023 0203 	bic.w	r2, r3, #3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	4934      	ldr	r1, [pc, #208]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b64:	f7fd fc56 	bl	8006414 <HAL_GetTick>
 8008b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b6a:	e00a      	b.n	8008b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b6c:	f7fd fc52 	bl	8006414 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d901      	bls.n	8008b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e04f      	b.n	8008c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b82:	4b2b      	ldr	r3, [pc, #172]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f003 020c 	and.w	r2, r3, #12
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d1eb      	bne.n	8008b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b94:	4b25      	ldr	r3, [pc, #148]	; (8008c2c <HAL_RCC_ClockConfig+0x1b8>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d20c      	bcs.n	8008bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ba2:	4b22      	ldr	r3, [pc, #136]	; (8008c2c <HAL_RCC_ClockConfig+0x1b8>)
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	b2d2      	uxtb	r2, r2
 8008ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008baa:	4b20      	ldr	r3, [pc, #128]	; (8008c2c <HAL_RCC_ClockConfig+0x1b8>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0307 	and.w	r3, r3, #7
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d001      	beq.n	8008bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e032      	b.n	8008c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d008      	beq.n	8008bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bc8:	4b19      	ldr	r3, [pc, #100]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	4916      	ldr	r1, [pc, #88]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0308 	and.w	r3, r3, #8
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d009      	beq.n	8008bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008be6:	4b12      	ldr	r3, [pc, #72]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	490e      	ldr	r1, [pc, #56]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008bfa:	f000 f821 	bl	8008c40 <HAL_RCC_GetSysClockFreq>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <HAL_RCC_ClockConfig+0x1bc>)
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	091b      	lsrs	r3, r3, #4
 8008c06:	f003 030f 	and.w	r3, r3, #15
 8008c0a:	490a      	ldr	r1, [pc, #40]	; (8008c34 <HAL_RCC_ClockConfig+0x1c0>)
 8008c0c:	5ccb      	ldrb	r3, [r1, r3]
 8008c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c12:	4a09      	ldr	r2, [pc, #36]	; (8008c38 <HAL_RCC_ClockConfig+0x1c4>)
 8008c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c16:	4b09      	ldr	r3, [pc, #36]	; (8008c3c <HAL_RCC_ClockConfig+0x1c8>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fd fbb6 	bl	800638c <HAL_InitTick>

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	40023c00 	.word	0x40023c00
 8008c30:	40023800 	.word	0x40023800
 8008c34:	08013a78 	.word	0x08013a78
 8008c38:	20000008 	.word	0x20000008
 8008c3c:	2000000c 	.word	0x2000000c

08008c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c44:	b090      	sub	sp, #64	; 0x40
 8008c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c50:	2300      	movs	r3, #0
 8008c52:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c58:	4b59      	ldr	r3, [pc, #356]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f003 030c 	and.w	r3, r3, #12
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	d00d      	beq.n	8008c80 <HAL_RCC_GetSysClockFreq+0x40>
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	f200 80a1 	bhi.w	8008dac <HAL_RCC_GetSysClockFreq+0x16c>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <HAL_RCC_GetSysClockFreq+0x34>
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d003      	beq.n	8008c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8008c72:	e09b      	b.n	8008dac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c74:	4b53      	ldr	r3, [pc, #332]	; (8008dc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008c76:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008c78:	e09b      	b.n	8008db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c7a:	4b53      	ldr	r3, [pc, #332]	; (8008dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008c7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008c7e:	e098      	b.n	8008db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c80:	4b4f      	ldr	r3, [pc, #316]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c88:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c8a:	4b4d      	ldr	r3, [pc, #308]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d028      	beq.n	8008ce8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c96:	4b4a      	ldr	r3, [pc, #296]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	099b      	lsrs	r3, r3, #6
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	623b      	str	r3, [r7, #32]
 8008ca0:	627a      	str	r2, [r7, #36]	; 0x24
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008ca8:	2100      	movs	r1, #0
 8008caa:	4b47      	ldr	r3, [pc, #284]	; (8008dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008cac:	fb03 f201 	mul.w	r2, r3, r1
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	fb00 f303 	mul.w	r3, r0, r3
 8008cb6:	4413      	add	r3, r2
 8008cb8:	4a43      	ldr	r2, [pc, #268]	; (8008dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008cba:	fba0 1202 	umull	r1, r2, r0, r2
 8008cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cc0:	460a      	mov	r2, r1
 8008cc2:	62ba      	str	r2, [r7, #40]	; 0x28
 8008cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cc6:	4413      	add	r3, r2
 8008cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ccc:	2200      	movs	r2, #0
 8008cce:	61bb      	str	r3, [r7, #24]
 8008cd0:	61fa      	str	r2, [r7, #28]
 8008cd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008cda:	f7f7 feef 	bl	8000abc <__aeabi_uldivmod>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ce6:	e053      	b.n	8008d90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ce8:	4b35      	ldr	r3, [pc, #212]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	099b      	lsrs	r3, r3, #6
 8008cee:	2200      	movs	r2, #0
 8008cf0:	613b      	str	r3, [r7, #16]
 8008cf2:	617a      	str	r2, [r7, #20]
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008cfa:	f04f 0b00 	mov.w	fp, #0
 8008cfe:	4652      	mov	r2, sl
 8008d00:	465b      	mov	r3, fp
 8008d02:	f04f 0000 	mov.w	r0, #0
 8008d06:	f04f 0100 	mov.w	r1, #0
 8008d0a:	0159      	lsls	r1, r3, #5
 8008d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d10:	0150      	lsls	r0, r2, #5
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	ebb2 080a 	subs.w	r8, r2, sl
 8008d1a:	eb63 090b 	sbc.w	r9, r3, fp
 8008d1e:	f04f 0200 	mov.w	r2, #0
 8008d22:	f04f 0300 	mov.w	r3, #0
 8008d26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008d2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008d2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008d32:	ebb2 0408 	subs.w	r4, r2, r8
 8008d36:	eb63 0509 	sbc.w	r5, r3, r9
 8008d3a:	f04f 0200 	mov.w	r2, #0
 8008d3e:	f04f 0300 	mov.w	r3, #0
 8008d42:	00eb      	lsls	r3, r5, #3
 8008d44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d48:	00e2      	lsls	r2, r4, #3
 8008d4a:	4614      	mov	r4, r2
 8008d4c:	461d      	mov	r5, r3
 8008d4e:	eb14 030a 	adds.w	r3, r4, sl
 8008d52:	603b      	str	r3, [r7, #0]
 8008d54:	eb45 030b 	adc.w	r3, r5, fp
 8008d58:	607b      	str	r3, [r7, #4]
 8008d5a:	f04f 0200 	mov.w	r2, #0
 8008d5e:	f04f 0300 	mov.w	r3, #0
 8008d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d66:	4629      	mov	r1, r5
 8008d68:	028b      	lsls	r3, r1, #10
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d70:	4621      	mov	r1, r4
 8008d72:	028a      	lsls	r2, r1, #10
 8008d74:	4610      	mov	r0, r2
 8008d76:	4619      	mov	r1, r3
 8008d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	60bb      	str	r3, [r7, #8]
 8008d7e:	60fa      	str	r2, [r7, #12]
 8008d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d84:	f7f7 fe9a 	bl	8000abc <__aeabi_uldivmod>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d90:	4b0b      	ldr	r3, [pc, #44]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	0c1b      	lsrs	r3, r3, #16
 8008d96:	f003 0303 	and.w	r3, r3, #3
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008da0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008daa:	e002      	b.n	8008db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008dac:	4b05      	ldr	r3, [pc, #20]	; (8008dc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008dae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3740      	adds	r7, #64	; 0x40
 8008db8:	46bd      	mov	sp, r7
 8008dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dbe:	bf00      	nop
 8008dc0:	40023800 	.word	0x40023800
 8008dc4:	00f42400 	.word	0x00f42400
 8008dc8:	017d7840 	.word	0x017d7840

08008dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008dd0:	4b03      	ldr	r3, [pc, #12]	; (8008de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	20000008 	.word	0x20000008

08008de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008de8:	f7ff fff0 	bl	8008dcc <HAL_RCC_GetHCLKFreq>
 8008dec:	4602      	mov	r2, r0
 8008dee:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	0a9b      	lsrs	r3, r3, #10
 8008df4:	f003 0307 	and.w	r3, r3, #7
 8008df8:	4903      	ldr	r1, [pc, #12]	; (8008e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008dfa:	5ccb      	ldrb	r3, [r1, r3]
 8008dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	40023800 	.word	0x40023800
 8008e08:	08013a88 	.word	0x08013a88

08008e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e10:	f7ff ffdc 	bl	8008dcc <HAL_RCC_GetHCLKFreq>
 8008e14:	4602      	mov	r2, r0
 8008e16:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	0b5b      	lsrs	r3, r3, #13
 8008e1c:	f003 0307 	and.w	r3, r3, #7
 8008e20:	4903      	ldr	r1, [pc, #12]	; (8008e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e22:	5ccb      	ldrb	r3, [r1, r3]
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	40023800 	.word	0x40023800
 8008e30:	08013a88 	.word	0x08013a88

08008e34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e07b      	b.n	8008f3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d108      	bne.n	8008e60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e56:	d009      	beq.n	8008e6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	61da      	str	r2, [r3, #28]
 8008e5e:	e005      	b.n	8008e6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d106      	bne.n	8008e8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7fa f946 	bl	8003118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2202      	movs	r2, #2
 8008e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ea2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008eb4:	431a      	orrs	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	f003 0302 	and.w	r3, r3, #2
 8008ec8:	431a      	orrs	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	431a      	orrs	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008edc:	431a      	orrs	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a1b      	ldr	r3, [r3, #32]
 8008eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef0:	ea42 0103 	orr.w	r1, r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	430a      	orrs	r2, r1
 8008f02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	0c1b      	lsrs	r3, r3, #16
 8008f0a:	f003 0104 	and.w	r1, r3, #4
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	f003 0210 	and.w	r2, r3, #16
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	69da      	ldr	r2, [r3, #28]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b088      	sub	sp, #32
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	603b      	str	r3, [r7, #0]
 8008f52:	4613      	mov	r3, r2
 8008f54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d101      	bne.n	8008f68 <HAL_SPI_Transmit+0x22>
 8008f64:	2302      	movs	r3, #2
 8008f66:	e12d      	b.n	80091c4 <HAL_SPI_Transmit+0x27e>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f70:	f7fd fa50 	bl	8006414 <HAL_GetTick>
 8008f74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008f76:	88fb      	ldrh	r3, [r7, #6]
 8008f78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d002      	beq.n	8008f8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008f86:	2302      	movs	r3, #2
 8008f88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f8a:	e116      	b.n	80091ba <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d002      	beq.n	8008f98 <HAL_SPI_Transmit+0x52>
 8008f92:	88fb      	ldrh	r3, [r7, #6]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d102      	bne.n	8008f9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f9c:	e10d      	b.n	80091ba <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	88fa      	ldrh	r2, [r7, #6]
 8008fb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	88fa      	ldrh	r2, [r7, #6]
 8008fbc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe4:	d10f      	bne.n	8009006 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ff4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009004:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009010:	2b40      	cmp	r3, #64	; 0x40
 8009012:	d007      	beq.n	8009024 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009022:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800902c:	d14f      	bne.n	80090ce <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d002      	beq.n	800903c <HAL_SPI_Transmit+0xf6>
 8009036:	8afb      	ldrh	r3, [r7, #22]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d142      	bne.n	80090c2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009040:	881a      	ldrh	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904c:	1c9a      	adds	r2, r3, #2
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009056:	b29b      	uxth	r3, r3
 8009058:	3b01      	subs	r3, #1
 800905a:	b29a      	uxth	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009060:	e02f      	b.n	80090c2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	f003 0302 	and.w	r3, r3, #2
 800906c:	2b02      	cmp	r3, #2
 800906e:	d112      	bne.n	8009096 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009074:	881a      	ldrh	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009080:	1c9a      	adds	r2, r3, #2
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800908a:	b29b      	uxth	r3, r3
 800908c:	3b01      	subs	r3, #1
 800908e:	b29a      	uxth	r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	86da      	strh	r2, [r3, #54]	; 0x36
 8009094:	e015      	b.n	80090c2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009096:	f7fd f9bd 	bl	8006414 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d803      	bhi.n	80090ae <HAL_SPI_Transmit+0x168>
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ac:	d102      	bne.n	80090b4 <HAL_SPI_Transmit+0x16e>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d106      	bne.n	80090c2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80090c0:	e07b      	b.n	80091ba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1ca      	bne.n	8009062 <HAL_SPI_Transmit+0x11c>
 80090cc:	e050      	b.n	8009170 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <HAL_SPI_Transmit+0x196>
 80090d6:	8afb      	ldrh	r3, [r7, #22]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d144      	bne.n	8009166 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	330c      	adds	r3, #12
 80090e6:	7812      	ldrb	r2, [r2, #0]
 80090e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ee:	1c5a      	adds	r2, r3, #1
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	3b01      	subs	r3, #1
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009102:	e030      	b.n	8009166 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f003 0302 	and.w	r3, r3, #2
 800910e:	2b02      	cmp	r3, #2
 8009110:	d113      	bne.n	800913a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	330c      	adds	r3, #12
 800911c:	7812      	ldrb	r2, [r2, #0]
 800911e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800912e:	b29b      	uxth	r3, r3
 8009130:	3b01      	subs	r3, #1
 8009132:	b29a      	uxth	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	86da      	strh	r2, [r3, #54]	; 0x36
 8009138:	e015      	b.n	8009166 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800913a:	f7fd f96b 	bl	8006414 <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d803      	bhi.n	8009152 <HAL_SPI_Transmit+0x20c>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009150:	d102      	bne.n	8009158 <HAL_SPI_Transmit+0x212>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d106      	bne.n	8009166 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009164:	e029      	b.n	80091ba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800916a:	b29b      	uxth	r3, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1c9      	bne.n	8009104 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009170:	69ba      	ldr	r2, [r7, #24]
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 fddf 	bl	8009d38 <SPI_EndRxTxTransaction>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2220      	movs	r2, #32
 8009184:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10a      	bne.n	80091a4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800918e:	2300      	movs	r3, #0
 8009190:	613b      	str	r3, [r7, #16]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	613b      	str	r3, [r7, #16]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	613b      	str	r3, [r7, #16]
 80091a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	77fb      	strb	r3, [r7, #31]
 80091b0:	e003      	b.n	80091ba <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80091c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3720      	adds	r7, #32
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08c      	sub	sp, #48	; 0x30
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
 80091d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80091da:	2301      	movs	r3, #1
 80091dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d101      	bne.n	80091f2 <HAL_SPI_TransmitReceive+0x26>
 80091ee:	2302      	movs	r3, #2
 80091f0:	e198      	b.n	8009524 <HAL_SPI_TransmitReceive+0x358>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091fa:	f7fd f90b 	bl	8006414 <HAL_GetTick>
 80091fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009210:	887b      	ldrh	r3, [r7, #2]
 8009212:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009218:	2b01      	cmp	r3, #1
 800921a:	d00f      	beq.n	800923c <HAL_SPI_TransmitReceive+0x70>
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009222:	d107      	bne.n	8009234 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d103      	bne.n	8009234 <HAL_SPI_TransmitReceive+0x68>
 800922c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009230:	2b04      	cmp	r3, #4
 8009232:	d003      	beq.n	800923c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009234:	2302      	movs	r3, #2
 8009236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800923a:	e16d      	b.n	8009518 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d005      	beq.n	800924e <HAL_SPI_TransmitReceive+0x82>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <HAL_SPI_TransmitReceive+0x82>
 8009248:	887b      	ldrh	r3, [r7, #2]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d103      	bne.n	8009256 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009254:	e160      	b.n	8009518 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b04      	cmp	r3, #4
 8009260:	d003      	beq.n	800926a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2205      	movs	r2, #5
 8009266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	887a      	ldrh	r2, [r7, #2]
 800927a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	887a      	ldrh	r2, [r7, #2]
 8009280:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	887a      	ldrh	r2, [r7, #2]
 800928c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	887a      	ldrh	r2, [r7, #2]
 8009292:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092aa:	2b40      	cmp	r3, #64	; 0x40
 80092ac:	d007      	beq.n	80092be <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092c6:	d17c      	bne.n	80093c2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <HAL_SPI_TransmitReceive+0x10a>
 80092d0:	8b7b      	ldrh	r3, [r7, #26]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d16a      	bne.n	80093ac <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092da:	881a      	ldrh	r2, [r3, #0]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e6:	1c9a      	adds	r2, r3, #2
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	3b01      	subs	r3, #1
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092fa:	e057      	b.n	80093ac <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b02      	cmp	r3, #2
 8009308:	d11b      	bne.n	8009342 <HAL_SPI_TransmitReceive+0x176>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800930e:	b29b      	uxth	r3, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	d016      	beq.n	8009342 <HAL_SPI_TransmitReceive+0x176>
 8009314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009316:	2b01      	cmp	r3, #1
 8009318:	d113      	bne.n	8009342 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931e:	881a      	ldrh	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932a:	1c9a      	adds	r2, r3, #2
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009334:	b29b      	uxth	r3, r3
 8009336:	3b01      	subs	r3, #1
 8009338:	b29a      	uxth	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800933e:	2300      	movs	r3, #0
 8009340:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b01      	cmp	r3, #1
 800934e:	d119      	bne.n	8009384 <HAL_SPI_TransmitReceive+0x1b8>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009354:	b29b      	uxth	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d014      	beq.n	8009384 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009364:	b292      	uxth	r2, r2
 8009366:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936c:	1c9a      	adds	r2, r3, #2
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009376:	b29b      	uxth	r3, r3
 8009378:	3b01      	subs	r3, #1
 800937a:	b29a      	uxth	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009380:	2301      	movs	r3, #1
 8009382:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009384:	f7fd f846 	bl	8006414 <HAL_GetTick>
 8009388:	4602      	mov	r2, r0
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009390:	429a      	cmp	r2, r3
 8009392:	d80b      	bhi.n	80093ac <HAL_SPI_TransmitReceive+0x1e0>
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939a:	d007      	beq.n	80093ac <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80093aa:	e0b5      	b.n	8009518 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1a2      	bne.n	80092fc <HAL_SPI_TransmitReceive+0x130>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d19d      	bne.n	80092fc <HAL_SPI_TransmitReceive+0x130>
 80093c0:	e080      	b.n	80094c4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <HAL_SPI_TransmitReceive+0x204>
 80093ca:	8b7b      	ldrh	r3, [r7, #26]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d16f      	bne.n	80094b0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	330c      	adds	r3, #12
 80093da:	7812      	ldrb	r2, [r2, #0]
 80093dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e2:	1c5a      	adds	r2, r3, #1
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093f6:	e05b      	b.n	80094b0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f003 0302 	and.w	r3, r3, #2
 8009402:	2b02      	cmp	r3, #2
 8009404:	d11c      	bne.n	8009440 <HAL_SPI_TransmitReceive+0x274>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800940a:	b29b      	uxth	r3, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	d017      	beq.n	8009440 <HAL_SPI_TransmitReceive+0x274>
 8009410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009412:	2b01      	cmp	r3, #1
 8009414:	d114      	bne.n	8009440 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	330c      	adds	r3, #12
 8009420:	7812      	ldrb	r2, [r2, #0]
 8009422:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009428:	1c5a      	adds	r2, r3, #1
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009432:	b29b      	uxth	r3, r3
 8009434:	3b01      	subs	r3, #1
 8009436:	b29a      	uxth	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f003 0301 	and.w	r3, r3, #1
 800944a:	2b01      	cmp	r3, #1
 800944c:	d119      	bne.n	8009482 <HAL_SPI_TransmitReceive+0x2b6>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009452:	b29b      	uxth	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	d014      	beq.n	8009482 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009462:	b2d2      	uxtb	r2, r2
 8009464:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009474:	b29b      	uxth	r3, r3
 8009476:	3b01      	subs	r3, #1
 8009478:	b29a      	uxth	r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800947e:	2301      	movs	r3, #1
 8009480:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009482:	f7fc ffc7 	bl	8006414 <HAL_GetTick>
 8009486:	4602      	mov	r2, r0
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800948e:	429a      	cmp	r2, r3
 8009490:	d803      	bhi.n	800949a <HAL_SPI_TransmitReceive+0x2ce>
 8009492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009498:	d102      	bne.n	80094a0 <HAL_SPI_TransmitReceive+0x2d4>
 800949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949c:	2b00      	cmp	r3, #0
 800949e:	d107      	bne.n	80094b0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80094a0:	2303      	movs	r3, #3
 80094a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80094ae:	e033      	b.n	8009518 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d19e      	bne.n	80093f8 <HAL_SPI_TransmitReceive+0x22c>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094be:	b29b      	uxth	r3, r3
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d199      	bne.n	80093f8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 fc35 	bl	8009d38 <SPI_EndRxTxTransaction>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d006      	beq.n	80094e2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2220      	movs	r2, #32
 80094de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80094e0:	e01a      	b.n	8009518 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094ea:	2300      	movs	r3, #0
 80094ec:	617b      	str	r3, [r7, #20]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	617b      	str	r3, [r7, #20]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	617b      	str	r3, [r7, #20]
 80094fe:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009504:	2b00      	cmp	r3, #0
 8009506:	d003      	beq.n	8009510 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800950e:	e003      	b.n	8009518 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009520:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009524:	4618      	mov	r0, r3
 8009526:	3730      	adds	r7, #48	; 0x30
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	4613      	mov	r3, r2
 8009538:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009544:	2b01      	cmp	r3, #1
 8009546:	d101      	bne.n	800954c <HAL_SPI_Transmit_DMA+0x20>
 8009548:	2302      	movs	r3, #2
 800954a:	e097      	b.n	800967c <HAL_SPI_Transmit_DMA+0x150>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b01      	cmp	r3, #1
 800955e:	d002      	beq.n	8009566 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009560:	2302      	movs	r3, #2
 8009562:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009564:	e085      	b.n	8009672 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <HAL_SPI_Transmit_DMA+0x46>
 800956c:	88fb      	ldrh	r3, [r7, #6]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d102      	bne.n	8009578 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009576:	e07c      	b.n	8009672 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2203      	movs	r2, #3
 800957c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	88fa      	ldrh	r2, [r7, #6]
 8009590:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	88fa      	ldrh	r2, [r7, #6]
 8009596:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2200      	movs	r2, #0
 800959c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095be:	d10f      	bne.n	80095e0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095e4:	4a27      	ldr	r2, [pc, #156]	; (8009684 <HAL_SPI_Transmit_DMA+0x158>)
 80095e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ec:	4a26      	ldr	r2, [pc, #152]	; (8009688 <HAL_SPI_Transmit_DMA+0x15c>)
 80095ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095f4:	4a25      	ldr	r2, [pc, #148]	; (800968c <HAL_SPI_Transmit_DMA+0x160>)
 80095f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095fc:	2200      	movs	r2, #0
 80095fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009608:	4619      	mov	r1, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	330c      	adds	r3, #12
 8009610:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009616:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009618:	f7fd f8ec 	bl	80067f4 <HAL_DMA_Start_IT>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d008      	beq.n	8009634 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009626:	f043 0210 	orr.w	r2, r3, #16
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	75fb      	strb	r3, [r7, #23]

    goto error;
 8009632:	e01e      	b.n	8009672 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963e:	2b40      	cmp	r3, #64	; 0x40
 8009640:	d007      	beq.n	8009652 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009650:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f042 0220 	orr.w	r2, r2, #32
 8009660:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f042 0202 	orr.w	r2, r2, #2
 8009670:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800967a:	7dfb      	ldrb	r3, [r7, #23]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	08009ac9 	.word	0x08009ac9
 8009688:	080098e9 	.word	0x080098e9
 800968c:	08009b1d 	.word	0x08009b1d

08009690 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
 800969c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d101      	bne.n	80096b0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80096ac:	2302      	movs	r3, #2
 80096ae:	e0db      	b.n	8009868 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80096be:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80096c6:	7dbb      	ldrb	r3, [r7, #22]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d00d      	beq.n	80096e8 <HAL_SPI_TransmitReceive_DMA+0x58>
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096d2:	d106      	bne.n	80096e2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d102      	bne.n	80096e2 <HAL_SPI_TransmitReceive_DMA+0x52>
 80096dc:	7dbb      	ldrb	r3, [r7, #22]
 80096de:	2b04      	cmp	r3, #4
 80096e0:	d002      	beq.n	80096e8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80096e2:	2302      	movs	r3, #2
 80096e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80096e6:	e0ba      	b.n	800985e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d005      	beq.n	80096fa <HAL_SPI_TransmitReceive_DMA+0x6a>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <HAL_SPI_TransmitReceive_DMA+0x6a>
 80096f4:	887b      	ldrh	r3, [r7, #2]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d102      	bne.n	8009700 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80096fe:	e0ae      	b.n	800985e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009706:	b2db      	uxtb	r3, r3
 8009708:	2b04      	cmp	r3, #4
 800970a:	d003      	beq.n	8009714 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2205      	movs	r2, #5
 8009710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	887a      	ldrh	r2, [r7, #2]
 8009724:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	887a      	ldrh	r2, [r7, #2]
 800972a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	887a      	ldrh	r2, [r7, #2]
 8009736:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	887a      	ldrh	r2, [r7, #2]
 800973c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b04      	cmp	r3, #4
 8009754:	d108      	bne.n	8009768 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800975a:	4a45      	ldr	r2, [pc, #276]	; (8009870 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 800975c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009762:	4a44      	ldr	r2, [pc, #272]	; (8009874 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8009764:	63da      	str	r2, [r3, #60]	; 0x3c
 8009766:	e007      	b.n	8009778 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800976c:	4a42      	ldr	r2, [pc, #264]	; (8009878 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800976e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009774:	4a41      	ldr	r2, [pc, #260]	; (800987c <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8009776:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800977c:	4a40      	ldr	r2, [pc, #256]	; (8009880 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800977e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009784:	2200      	movs	r2, #0
 8009786:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	330c      	adds	r3, #12
 8009792:	4619      	mov	r1, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009798:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800979e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80097a0:	f7fd f828 	bl	80067f4 <HAL_DMA_Start_IT>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d008      	beq.n	80097bc <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ae:	f043 0210 	orr.w	r2, r3, #16
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	75fb      	strb	r3, [r7, #23]

    goto error;
 80097ba:	e050      	b.n	800985e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	685a      	ldr	r2, [r3, #4]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f042 0201 	orr.w	r2, r2, #1
 80097ca:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097d0:	2200      	movs	r2, #0
 80097d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097d8:	2200      	movs	r2, #0
 80097da:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e0:	2200      	movs	r2, #0
 80097e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e8:	2200      	movs	r2, #0
 80097ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f4:	4619      	mov	r1, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	330c      	adds	r3, #12
 80097fc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009802:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009804:	f7fc fff6 	bl	80067f4 <HAL_DMA_Start_IT>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d008      	beq.n	8009820 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009812:	f043 0210 	orr.w	r2, r3, #16
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800981e:	e01e      	b.n	800985e <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982a:	2b40      	cmp	r3, #64	; 0x40
 800982c:	d007      	beq.n	800983e <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800983c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f042 0220 	orr.w	r2, r2, #32
 800984c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f042 0202 	orr.w	r2, r2, #2
 800985c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009866:	7dfb      	ldrb	r3, [r7, #23]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3718      	adds	r7, #24
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	08009ae5 	.word	0x08009ae5
 8009874:	08009991 	.word	0x08009991
 8009878:	08009b01 	.word	0x08009b01
 800987c:	08009a39 	.word	0x08009a39
 8009880:	08009b1d 	.word	0x08009b1d

08009884 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098f6:	f7fc fd8d 	bl	8006414 <HAL_GetTick>
 80098fa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800990a:	d03b      	beq.n	8009984 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f022 0220 	bic.w	r2, r2, #32
 800991a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f022 0202 	bic.w	r2, r2, #2
 800992a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	2164      	movs	r1, #100	; 0x64
 8009930:	6978      	ldr	r0, [r7, #20]
 8009932:	f000 fa01 	bl	8009d38 <SPI_EndRxTxTransaction>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d005      	beq.n	8009948 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009940:	f043 0220 	orr.w	r2, r3, #32
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10a      	bne.n	8009966 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009950:	2300      	movs	r3, #0
 8009952:	60fb      	str	r3, [r7, #12]
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	60fb      	str	r3, [r7, #12]
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	60fb      	str	r3, [r7, #12]
 8009964:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2200      	movs	r2, #0
 800996a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800997c:	6978      	ldr	r0, [r7, #20]
 800997e:	f7ff ffa9 	bl	80098d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009982:	e002      	b.n	800998a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009984:	6978      	ldr	r0, [r7, #20]
 8009986:	f7f8 fff9 	bl	800297c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800999e:	f7fc fd39 	bl	8006414 <HAL_GetTick>
 80099a2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b2:	d03b      	beq.n	8009a2c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f022 0220 	bic.w	r2, r2, #32
 80099c2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10d      	bne.n	80099e8 <SPI_DMAReceiveCplt+0x58>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099d4:	d108      	bne.n	80099e8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f022 0203 	bic.w	r2, r2, #3
 80099e4:	605a      	str	r2, [r3, #4]
 80099e6:	e007      	b.n	80099f8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f022 0201 	bic.w	r2, r2, #1
 80099f6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	2164      	movs	r1, #100	; 0x64
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 f935 	bl	8009c6c <SPI_EndRxTransaction>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d002      	beq.n	8009a0e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d003      	beq.n	8009a2c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f7ff ff55 	bl	80098d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009a2a:	e002      	b.n	8009a32 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f7ff ff29 	bl	8009884 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a44:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a46:	f7fc fce5 	bl	8006414 <HAL_GetTick>
 8009a4a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a5a:	d02f      	beq.n	8009abc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f022 0220 	bic.w	r2, r2, #32
 8009a6a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	2164      	movs	r1, #100	; 0x64
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 f961 	bl	8009d38 <SPI_EndRxTxTransaction>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d005      	beq.n	8009a88 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a80:	f043 0220 	orr.w	r2, r3, #32
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f022 0203 	bic.w	r2, r2, #3
 8009a96:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d003      	beq.n	8009abc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f7ff ff0d 	bl	80098d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009aba:	e002      	b.n	8009ac2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f7f8 ff73 	bl	80029a8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f7ff fede 	bl	8009898 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009adc:	bf00      	nop
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f7ff feda 	bl	80098ac <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009af8:	bf00      	nop
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f7ff fed6 	bl	80098c0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b14:	bf00      	nop
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b28:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f022 0203 	bic.w	r2, r2, #3
 8009b38:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b3e:	f043 0210 	orr.w	r2, r3, #16
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f7ff fec0 	bl	80098d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b54:	bf00      	nop
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	603b      	str	r3, [r7, #0]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b6c:	f7fc fc52 	bl	8006414 <HAL_GetTick>
 8009b70:	4602      	mov	r2, r0
 8009b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b74:	1a9b      	subs	r3, r3, r2
 8009b76:	683a      	ldr	r2, [r7, #0]
 8009b78:	4413      	add	r3, r2
 8009b7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b7c:	f7fc fc4a 	bl	8006414 <HAL_GetTick>
 8009b80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b82:	4b39      	ldr	r3, [pc, #228]	; (8009c68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	015b      	lsls	r3, r3, #5
 8009b88:	0d1b      	lsrs	r3, r3, #20
 8009b8a:	69fa      	ldr	r2, [r7, #28]
 8009b8c:	fb02 f303 	mul.w	r3, r2, r3
 8009b90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b92:	e054      	b.n	8009c3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9a:	d050      	beq.n	8009c3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b9c:	f7fc fc3a 	bl	8006414 <HAL_GetTick>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	69fa      	ldr	r2, [r7, #28]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d902      	bls.n	8009bb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d13d      	bne.n	8009c2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009bc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bca:	d111      	bne.n	8009bf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bd4:	d004      	beq.n	8009be0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bde:	d107      	bne.n	8009bf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bf8:	d10f      	bne.n	8009c1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c08:	601a      	str	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e017      	b.n	8009c5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c34:	2300      	movs	r3, #0
 8009c36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689a      	ldr	r2, [r3, #8]
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	4013      	ands	r3, r2
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	bf0c      	ite	eq
 8009c4e:	2301      	moveq	r3, #1
 8009c50:	2300      	movne	r3, #0
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	461a      	mov	r2, r3
 8009c56:	79fb      	ldrb	r3, [r7, #7]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d19b      	bne.n	8009b94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3720      	adds	r7, #32
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	20000008 	.word	0x20000008

08009c6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af02      	add	r7, sp, #8
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c80:	d111      	bne.n	8009ca6 <SPI_EndRxTransaction+0x3a>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c8a:	d004      	beq.n	8009c96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c94:	d107      	bne.n	8009ca6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ca4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cae:	d12a      	bne.n	8009d06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cb8:	d012      	beq.n	8009ce0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	2180      	movs	r1, #128	; 0x80
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f7ff ff49 	bl	8009b5c <SPI_WaitFlagStateUntilTimeout>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d02d      	beq.n	8009d2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd4:	f043 0220 	orr.w	r2, r3, #32
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e026      	b.n	8009d2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	2101      	movs	r1, #1
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f7ff ff36 	bl	8009b5c <SPI_WaitFlagStateUntilTimeout>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d01a      	beq.n	8009d2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cfa:	f043 0220 	orr.w	r2, r3, #32
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e013      	b.n	8009d2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2101      	movs	r1, #1
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f7ff ff23 	bl	8009b5c <SPI_WaitFlagStateUntilTimeout>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d007      	beq.n	8009d2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d20:	f043 0220 	orr.w	r2, r3, #32
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e000      	b.n	8009d2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b088      	sub	sp, #32
 8009d3c:	af02      	add	r7, sp, #8
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	2102      	movs	r1, #2
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7ff ff04 	bl	8009b5c <SPI_WaitFlagStateUntilTimeout>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d007      	beq.n	8009d6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5e:	f043 0220 	orr.w	r2, r3, #32
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e032      	b.n	8009dd0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009d6a:	4b1b      	ldr	r3, [pc, #108]	; (8009dd8 <SPI_EndRxTxTransaction+0xa0>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a1b      	ldr	r2, [pc, #108]	; (8009ddc <SPI_EndRxTxTransaction+0xa4>)
 8009d70:	fba2 2303 	umull	r2, r3, r2, r3
 8009d74:	0d5b      	lsrs	r3, r3, #21
 8009d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d7a:	fb02 f303 	mul.w	r3, r2, r3
 8009d7e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d88:	d112      	bne.n	8009db0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2200      	movs	r2, #0
 8009d92:	2180      	movs	r1, #128	; 0x80
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f7ff fee1 	bl	8009b5c <SPI_WaitFlagStateUntilTimeout>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d016      	beq.n	8009dce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da4:	f043 0220 	orr.w	r2, r3, #32
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e00f      	b.n	8009dd0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00a      	beq.n	8009dcc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc6:	2b80      	cmp	r3, #128	; 0x80
 8009dc8:	d0f2      	beq.n	8009db0 <SPI_EndRxTxTransaction+0x78>
 8009dca:	e000      	b.n	8009dce <SPI_EndRxTxTransaction+0x96>
        break;
 8009dcc:	bf00      	nop
  }

  return HAL_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3718      	adds	r7, #24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	20000008 	.word	0x20000008
 8009ddc:	165e9f81 	.word	0x165e9f81

08009de0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d101      	bne.n	8009df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e042      	b.n	8009e78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d106      	bne.n	8009e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f7f9 fa32 	bl	8003270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2224      	movs	r2, #36	; 0x24
 8009e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68da      	ldr	r2, [r3, #12]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f973 	bl	800a110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	691a      	ldr	r2, [r3, #16]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	695a      	ldr	r2, [r3, #20]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68da      	ldr	r2, [r3, #12]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2220      	movs	r2, #32
 8009e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2220      	movs	r2, #32
 8009e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b08a      	sub	sp, #40	; 0x28
 8009e84:	af02      	add	r7, sp, #8
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	2b20      	cmp	r3, #32
 8009e9e:	d175      	bne.n	8009f8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d002      	beq.n	8009eac <HAL_UART_Transmit+0x2c>
 8009ea6:	88fb      	ldrh	r3, [r7, #6]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d101      	bne.n	8009eb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e06e      	b.n	8009f8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2221      	movs	r2, #33	; 0x21
 8009eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ebe:	f7fc faa9 	bl	8006414 <HAL_GetTick>
 8009ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	88fa      	ldrh	r2, [r7, #6]
 8009ec8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	88fa      	ldrh	r2, [r7, #6]
 8009ece:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ed8:	d108      	bne.n	8009eec <HAL_UART_Transmit+0x6c>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d104      	bne.n	8009eec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	61bb      	str	r3, [r7, #24]
 8009eea:	e003      	b.n	8009ef4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009ef4:	e02e      	b.n	8009f54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2200      	movs	r2, #0
 8009efe:	2180      	movs	r1, #128	; 0x80
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f000 f848 	bl	8009f96 <UART_WaitOnFlagUntilTimeout>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d005      	beq.n	8009f18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2220      	movs	r2, #32
 8009f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e03a      	b.n	8009f8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10b      	bne.n	8009f36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	461a      	mov	r2, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	3302      	adds	r3, #2
 8009f32:	61bb      	str	r3, [r7, #24]
 8009f34:	e007      	b.n	8009f46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	781a      	ldrb	r2, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	3301      	adds	r3, #1
 8009f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1cb      	bne.n	8009ef6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2200      	movs	r2, #0
 8009f66:	2140      	movs	r1, #64	; 0x40
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 f814 	bl	8009f96 <UART_WaitOnFlagUntilTimeout>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d005      	beq.n	8009f80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2220      	movs	r2, #32
 8009f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	e006      	b.n	8009f8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2220      	movs	r2, #32
 8009f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	e000      	b.n	8009f8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009f8c:	2302      	movs	r3, #2
  }
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3720      	adds	r7, #32
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b086      	sub	sp, #24
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	60f8      	str	r0, [r7, #12]
 8009f9e:	60b9      	str	r1, [r7, #8]
 8009fa0:	603b      	str	r3, [r7, #0]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fa6:	e03b      	b.n	800a020 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fae:	d037      	beq.n	800a020 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fb0:	f7fc fa30 	bl	8006414 <HAL_GetTick>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	6a3a      	ldr	r2, [r7, #32]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d302      	bcc.n	8009fc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8009fc0:	6a3b      	ldr	r3, [r7, #32]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e03a      	b.n	800a040 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	f003 0304 	and.w	r3, r3, #4
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d023      	beq.n	800a020 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	2b80      	cmp	r3, #128	; 0x80
 8009fdc:	d020      	beq.n	800a020 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	2b40      	cmp	r3, #64	; 0x40
 8009fe2:	d01d      	beq.n	800a020 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0308 	and.w	r3, r3, #8
 8009fee:	2b08      	cmp	r3, #8
 8009ff0:	d116      	bne.n	800a020 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	617b      	str	r3, [r7, #20]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	617b      	str	r3, [r7, #20]
 800a006:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 f81d 	bl	800a048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2208      	movs	r2, #8
 800a012:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e00f      	b.n	800a040 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	4013      	ands	r3, r2
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	bf0c      	ite	eq
 800a030:	2301      	moveq	r3, #1
 800a032:	2300      	movne	r3, #0
 800a034:	b2db      	uxtb	r3, r3
 800a036:	461a      	mov	r2, r3
 800a038:	79fb      	ldrb	r3, [r7, #7]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d0b4      	beq.n	8009fa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a048:	b480      	push	{r7}
 800a04a:	b095      	sub	sp, #84	; 0x54
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	330c      	adds	r3, #12
 800a056:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a066:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	330c      	adds	r3, #12
 800a06e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a070:	643a      	str	r2, [r7, #64]	; 0x40
 800a072:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a074:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a078:	e841 2300 	strex	r3, r2, [r1]
 800a07c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e5      	bne.n	800a050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3314      	adds	r3, #20
 800a08a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	e853 3f00 	ldrex	r3, [r3]
 800a092:	61fb      	str	r3, [r7, #28]
   return(result);
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	f023 0301 	bic.w	r3, r3, #1
 800a09a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3314      	adds	r3, #20
 800a0a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ac:	e841 2300 	strex	r3, r2, [r1]
 800a0b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e5      	bne.n	800a084 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d119      	bne.n	800a0f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	330c      	adds	r3, #12
 800a0c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	e853 3f00 	ldrex	r3, [r3]
 800a0ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	f023 0310 	bic.w	r3, r3, #16
 800a0d6:	647b      	str	r3, [r7, #68]	; 0x44
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	330c      	adds	r3, #12
 800a0de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0e0:	61ba      	str	r2, [r7, #24]
 800a0e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e4:	6979      	ldr	r1, [r7, #20]
 800a0e6:	69ba      	ldr	r2, [r7, #24]
 800a0e8:	e841 2300 	strex	r3, r2, [r1]
 800a0ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1e5      	bne.n	800a0c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a102:	bf00      	nop
 800a104:	3754      	adds	r7, #84	; 0x54
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
	...

0800a110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a114:	b0c0      	sub	sp, #256	; 0x100
 800a116:	af00      	add	r7, sp, #0
 800a118:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a12c:	68d9      	ldr	r1, [r3, #12]
 800a12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	ea40 0301 	orr.w	r3, r0, r1
 800a138:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a13a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a13e:	689a      	ldr	r2, [r3, #8]
 800a140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	431a      	orrs	r2, r3
 800a148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	431a      	orrs	r2, r3
 800a150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	4313      	orrs	r3, r2
 800a158:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a15c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a168:	f021 010c 	bic.w	r1, r1, #12
 800a16c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a176:	430b      	orrs	r3, r1
 800a178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a17a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a18a:	6999      	ldr	r1, [r3, #24]
 800a18c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	ea40 0301 	orr.w	r3, r0, r1
 800a196:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	4b8f      	ldr	r3, [pc, #572]	; (800a3dc <UART_SetConfig+0x2cc>)
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d005      	beq.n	800a1b0 <UART_SetConfig+0xa0>
 800a1a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	4b8d      	ldr	r3, [pc, #564]	; (800a3e0 <UART_SetConfig+0x2d0>)
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d104      	bne.n	800a1ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a1b0:	f7fe fe2c 	bl	8008e0c <HAL_RCC_GetPCLK2Freq>
 800a1b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a1b8:	e003      	b.n	800a1c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a1ba:	f7fe fe13 	bl	8008de4 <HAL_RCC_GetPCLK1Freq>
 800a1be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1c6:	69db      	ldr	r3, [r3, #28]
 800a1c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1cc:	f040 810c 	bne.w	800a3e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a1d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a1de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a1e2:	4622      	mov	r2, r4
 800a1e4:	462b      	mov	r3, r5
 800a1e6:	1891      	adds	r1, r2, r2
 800a1e8:	65b9      	str	r1, [r7, #88]	; 0x58
 800a1ea:	415b      	adcs	r3, r3
 800a1ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	eb12 0801 	adds.w	r8, r2, r1
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	eb43 0901 	adc.w	r9, r3, r1
 800a1fe:	f04f 0200 	mov.w	r2, #0
 800a202:	f04f 0300 	mov.w	r3, #0
 800a206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a20a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a20e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a212:	4690      	mov	r8, r2
 800a214:	4699      	mov	r9, r3
 800a216:	4623      	mov	r3, r4
 800a218:	eb18 0303 	adds.w	r3, r8, r3
 800a21c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a220:	462b      	mov	r3, r5
 800a222:	eb49 0303 	adc.w	r3, r9, r3
 800a226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a22a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a236:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a23a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a23e:	460b      	mov	r3, r1
 800a240:	18db      	adds	r3, r3, r3
 800a242:	653b      	str	r3, [r7, #80]	; 0x50
 800a244:	4613      	mov	r3, r2
 800a246:	eb42 0303 	adc.w	r3, r2, r3
 800a24a:	657b      	str	r3, [r7, #84]	; 0x54
 800a24c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a250:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a254:	f7f6 fc32 	bl	8000abc <__aeabi_uldivmod>
 800a258:	4602      	mov	r2, r0
 800a25a:	460b      	mov	r3, r1
 800a25c:	4b61      	ldr	r3, [pc, #388]	; (800a3e4 <UART_SetConfig+0x2d4>)
 800a25e:	fba3 2302 	umull	r2, r3, r3, r2
 800a262:	095b      	lsrs	r3, r3, #5
 800a264:	011c      	lsls	r4, r3, #4
 800a266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a26a:	2200      	movs	r2, #0
 800a26c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a270:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a274:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a278:	4642      	mov	r2, r8
 800a27a:	464b      	mov	r3, r9
 800a27c:	1891      	adds	r1, r2, r2
 800a27e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a280:	415b      	adcs	r3, r3
 800a282:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a288:	4641      	mov	r1, r8
 800a28a:	eb12 0a01 	adds.w	sl, r2, r1
 800a28e:	4649      	mov	r1, r9
 800a290:	eb43 0b01 	adc.w	fp, r3, r1
 800a294:	f04f 0200 	mov.w	r2, #0
 800a298:	f04f 0300 	mov.w	r3, #0
 800a29c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a2a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a2a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a2a8:	4692      	mov	sl, r2
 800a2aa:	469b      	mov	fp, r3
 800a2ac:	4643      	mov	r3, r8
 800a2ae:	eb1a 0303 	adds.w	r3, sl, r3
 800a2b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a2b6:	464b      	mov	r3, r9
 800a2b8:	eb4b 0303 	adc.w	r3, fp, r3
 800a2bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a2cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a2d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	18db      	adds	r3, r3, r3
 800a2d8:	643b      	str	r3, [r7, #64]	; 0x40
 800a2da:	4613      	mov	r3, r2
 800a2dc:	eb42 0303 	adc.w	r3, r2, r3
 800a2e0:	647b      	str	r3, [r7, #68]	; 0x44
 800a2e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a2e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a2ea:	f7f6 fbe7 	bl	8000abc <__aeabi_uldivmod>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4611      	mov	r1, r2
 800a2f4:	4b3b      	ldr	r3, [pc, #236]	; (800a3e4 <UART_SetConfig+0x2d4>)
 800a2f6:	fba3 2301 	umull	r2, r3, r3, r1
 800a2fa:	095b      	lsrs	r3, r3, #5
 800a2fc:	2264      	movs	r2, #100	; 0x64
 800a2fe:	fb02 f303 	mul.w	r3, r2, r3
 800a302:	1acb      	subs	r3, r1, r3
 800a304:	00db      	lsls	r3, r3, #3
 800a306:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a30a:	4b36      	ldr	r3, [pc, #216]	; (800a3e4 <UART_SetConfig+0x2d4>)
 800a30c:	fba3 2302 	umull	r2, r3, r3, r2
 800a310:	095b      	lsrs	r3, r3, #5
 800a312:	005b      	lsls	r3, r3, #1
 800a314:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a318:	441c      	add	r4, r3
 800a31a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a31e:	2200      	movs	r2, #0
 800a320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a324:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a328:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a32c:	4642      	mov	r2, r8
 800a32e:	464b      	mov	r3, r9
 800a330:	1891      	adds	r1, r2, r2
 800a332:	63b9      	str	r1, [r7, #56]	; 0x38
 800a334:	415b      	adcs	r3, r3
 800a336:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a338:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a33c:	4641      	mov	r1, r8
 800a33e:	1851      	adds	r1, r2, r1
 800a340:	6339      	str	r1, [r7, #48]	; 0x30
 800a342:	4649      	mov	r1, r9
 800a344:	414b      	adcs	r3, r1
 800a346:	637b      	str	r3, [r7, #52]	; 0x34
 800a348:	f04f 0200 	mov.w	r2, #0
 800a34c:	f04f 0300 	mov.w	r3, #0
 800a350:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a354:	4659      	mov	r1, fp
 800a356:	00cb      	lsls	r3, r1, #3
 800a358:	4651      	mov	r1, sl
 800a35a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a35e:	4651      	mov	r1, sl
 800a360:	00ca      	lsls	r2, r1, #3
 800a362:	4610      	mov	r0, r2
 800a364:	4619      	mov	r1, r3
 800a366:	4603      	mov	r3, r0
 800a368:	4642      	mov	r2, r8
 800a36a:	189b      	adds	r3, r3, r2
 800a36c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a370:	464b      	mov	r3, r9
 800a372:	460a      	mov	r2, r1
 800a374:	eb42 0303 	adc.w	r3, r2, r3
 800a378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a37c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a388:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a38c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a390:	460b      	mov	r3, r1
 800a392:	18db      	adds	r3, r3, r3
 800a394:	62bb      	str	r3, [r7, #40]	; 0x28
 800a396:	4613      	mov	r3, r2
 800a398:	eb42 0303 	adc.w	r3, r2, r3
 800a39c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a39e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a3a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a3a6:	f7f6 fb89 	bl	8000abc <__aeabi_uldivmod>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4b0d      	ldr	r3, [pc, #52]	; (800a3e4 <UART_SetConfig+0x2d4>)
 800a3b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a3b4:	095b      	lsrs	r3, r3, #5
 800a3b6:	2164      	movs	r1, #100	; 0x64
 800a3b8:	fb01 f303 	mul.w	r3, r1, r3
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	00db      	lsls	r3, r3, #3
 800a3c0:	3332      	adds	r3, #50	; 0x32
 800a3c2:	4a08      	ldr	r2, [pc, #32]	; (800a3e4 <UART_SetConfig+0x2d4>)
 800a3c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c8:	095b      	lsrs	r3, r3, #5
 800a3ca:	f003 0207 	and.w	r2, r3, #7
 800a3ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4422      	add	r2, r4
 800a3d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a3d8:	e106      	b.n	800a5e8 <UART_SetConfig+0x4d8>
 800a3da:	bf00      	nop
 800a3dc:	40011000 	.word	0x40011000
 800a3e0:	40011400 	.word	0x40011400
 800a3e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a3e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a3f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a3f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a3fa:	4642      	mov	r2, r8
 800a3fc:	464b      	mov	r3, r9
 800a3fe:	1891      	adds	r1, r2, r2
 800a400:	6239      	str	r1, [r7, #32]
 800a402:	415b      	adcs	r3, r3
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
 800a406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a40a:	4641      	mov	r1, r8
 800a40c:	1854      	adds	r4, r2, r1
 800a40e:	4649      	mov	r1, r9
 800a410:	eb43 0501 	adc.w	r5, r3, r1
 800a414:	f04f 0200 	mov.w	r2, #0
 800a418:	f04f 0300 	mov.w	r3, #0
 800a41c:	00eb      	lsls	r3, r5, #3
 800a41e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a422:	00e2      	lsls	r2, r4, #3
 800a424:	4614      	mov	r4, r2
 800a426:	461d      	mov	r5, r3
 800a428:	4643      	mov	r3, r8
 800a42a:	18e3      	adds	r3, r4, r3
 800a42c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a430:	464b      	mov	r3, r9
 800a432:	eb45 0303 	adc.w	r3, r5, r3
 800a436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a43a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a446:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a44a:	f04f 0200 	mov.w	r2, #0
 800a44e:	f04f 0300 	mov.w	r3, #0
 800a452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a456:	4629      	mov	r1, r5
 800a458:	008b      	lsls	r3, r1, #2
 800a45a:	4621      	mov	r1, r4
 800a45c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a460:	4621      	mov	r1, r4
 800a462:	008a      	lsls	r2, r1, #2
 800a464:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a468:	f7f6 fb28 	bl	8000abc <__aeabi_uldivmod>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4b60      	ldr	r3, [pc, #384]	; (800a5f4 <UART_SetConfig+0x4e4>)
 800a472:	fba3 2302 	umull	r2, r3, r3, r2
 800a476:	095b      	lsrs	r3, r3, #5
 800a478:	011c      	lsls	r4, r3, #4
 800a47a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a47e:	2200      	movs	r2, #0
 800a480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a484:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a488:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a48c:	4642      	mov	r2, r8
 800a48e:	464b      	mov	r3, r9
 800a490:	1891      	adds	r1, r2, r2
 800a492:	61b9      	str	r1, [r7, #24]
 800a494:	415b      	adcs	r3, r3
 800a496:	61fb      	str	r3, [r7, #28]
 800a498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a49c:	4641      	mov	r1, r8
 800a49e:	1851      	adds	r1, r2, r1
 800a4a0:	6139      	str	r1, [r7, #16]
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	414b      	adcs	r3, r1
 800a4a6:	617b      	str	r3, [r7, #20]
 800a4a8:	f04f 0200 	mov.w	r2, #0
 800a4ac:	f04f 0300 	mov.w	r3, #0
 800a4b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a4b4:	4659      	mov	r1, fp
 800a4b6:	00cb      	lsls	r3, r1, #3
 800a4b8:	4651      	mov	r1, sl
 800a4ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4be:	4651      	mov	r1, sl
 800a4c0:	00ca      	lsls	r2, r1, #3
 800a4c2:	4610      	mov	r0, r2
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	4642      	mov	r2, r8
 800a4ca:	189b      	adds	r3, r3, r2
 800a4cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a4d0:	464b      	mov	r3, r9
 800a4d2:	460a      	mov	r2, r1
 800a4d4:	eb42 0303 	adc.w	r3, r2, r3
 800a4d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a4dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a4e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a4e8:	f04f 0200 	mov.w	r2, #0
 800a4ec:	f04f 0300 	mov.w	r3, #0
 800a4f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a4f4:	4649      	mov	r1, r9
 800a4f6:	008b      	lsls	r3, r1, #2
 800a4f8:	4641      	mov	r1, r8
 800a4fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4fe:	4641      	mov	r1, r8
 800a500:	008a      	lsls	r2, r1, #2
 800a502:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a506:	f7f6 fad9 	bl	8000abc <__aeabi_uldivmod>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	4611      	mov	r1, r2
 800a510:	4b38      	ldr	r3, [pc, #224]	; (800a5f4 <UART_SetConfig+0x4e4>)
 800a512:	fba3 2301 	umull	r2, r3, r3, r1
 800a516:	095b      	lsrs	r3, r3, #5
 800a518:	2264      	movs	r2, #100	; 0x64
 800a51a:	fb02 f303 	mul.w	r3, r2, r3
 800a51e:	1acb      	subs	r3, r1, r3
 800a520:	011b      	lsls	r3, r3, #4
 800a522:	3332      	adds	r3, #50	; 0x32
 800a524:	4a33      	ldr	r2, [pc, #204]	; (800a5f4 <UART_SetConfig+0x4e4>)
 800a526:	fba2 2303 	umull	r2, r3, r2, r3
 800a52a:	095b      	lsrs	r3, r3, #5
 800a52c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a530:	441c      	add	r4, r3
 800a532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a536:	2200      	movs	r2, #0
 800a538:	673b      	str	r3, [r7, #112]	; 0x70
 800a53a:	677a      	str	r2, [r7, #116]	; 0x74
 800a53c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a540:	4642      	mov	r2, r8
 800a542:	464b      	mov	r3, r9
 800a544:	1891      	adds	r1, r2, r2
 800a546:	60b9      	str	r1, [r7, #8]
 800a548:	415b      	adcs	r3, r3
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a550:	4641      	mov	r1, r8
 800a552:	1851      	adds	r1, r2, r1
 800a554:	6039      	str	r1, [r7, #0]
 800a556:	4649      	mov	r1, r9
 800a558:	414b      	adcs	r3, r1
 800a55a:	607b      	str	r3, [r7, #4]
 800a55c:	f04f 0200 	mov.w	r2, #0
 800a560:	f04f 0300 	mov.w	r3, #0
 800a564:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a568:	4659      	mov	r1, fp
 800a56a:	00cb      	lsls	r3, r1, #3
 800a56c:	4651      	mov	r1, sl
 800a56e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a572:	4651      	mov	r1, sl
 800a574:	00ca      	lsls	r2, r1, #3
 800a576:	4610      	mov	r0, r2
 800a578:	4619      	mov	r1, r3
 800a57a:	4603      	mov	r3, r0
 800a57c:	4642      	mov	r2, r8
 800a57e:	189b      	adds	r3, r3, r2
 800a580:	66bb      	str	r3, [r7, #104]	; 0x68
 800a582:	464b      	mov	r3, r9
 800a584:	460a      	mov	r2, r1
 800a586:	eb42 0303 	adc.w	r3, r2, r3
 800a58a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a58c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	663b      	str	r3, [r7, #96]	; 0x60
 800a596:	667a      	str	r2, [r7, #100]	; 0x64
 800a598:	f04f 0200 	mov.w	r2, #0
 800a59c:	f04f 0300 	mov.w	r3, #0
 800a5a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a5a4:	4649      	mov	r1, r9
 800a5a6:	008b      	lsls	r3, r1, #2
 800a5a8:	4641      	mov	r1, r8
 800a5aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5ae:	4641      	mov	r1, r8
 800a5b0:	008a      	lsls	r2, r1, #2
 800a5b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a5b6:	f7f6 fa81 	bl	8000abc <__aeabi_uldivmod>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	4b0d      	ldr	r3, [pc, #52]	; (800a5f4 <UART_SetConfig+0x4e4>)
 800a5c0:	fba3 1302 	umull	r1, r3, r3, r2
 800a5c4:	095b      	lsrs	r3, r3, #5
 800a5c6:	2164      	movs	r1, #100	; 0x64
 800a5c8:	fb01 f303 	mul.w	r3, r1, r3
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	011b      	lsls	r3, r3, #4
 800a5d0:	3332      	adds	r3, #50	; 0x32
 800a5d2:	4a08      	ldr	r2, [pc, #32]	; (800a5f4 <UART_SetConfig+0x4e4>)
 800a5d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d8:	095b      	lsrs	r3, r3, #5
 800a5da:	f003 020f 	and.w	r2, r3, #15
 800a5de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4422      	add	r2, r4
 800a5e6:	609a      	str	r2, [r3, #8]
}
 800a5e8:	bf00      	nop
 800a5ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5f4:	51eb851f 	.word	0x51eb851f

0800a5f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5f8:	b084      	sub	sp, #16
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b084      	sub	sp, #16
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	f107 001c 	add.w	r0, r7, #28
 800a606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a60a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d123      	bne.n	800a65a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a616:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a63a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d105      	bne.n	800a64e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f001 fae2 	bl	800bc18 <USB_CoreReset>
 800a654:	4603      	mov	r3, r0
 800a656:	73fb      	strb	r3, [r7, #15]
 800a658:	e01b      	b.n	800a692 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f001 fad6 	bl	800bc18 <USB_CoreReset>
 800a66c:	4603      	mov	r3, r0
 800a66e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a670:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a674:	2b00      	cmp	r3, #0
 800a676:	d106      	bne.n	800a686 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	639a      	str	r2, [r3, #56]	; 0x38
 800a684:	e005      	b.n	800a692 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a692:	7fbb      	ldrb	r3, [r7, #30]
 800a694:	2b01      	cmp	r3, #1
 800a696:	d10b      	bne.n	800a6b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	f043 0206 	orr.w	r2, r3, #6
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f043 0220 	orr.w	r2, r3, #32
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6bc:	b004      	add	sp, #16
 800a6be:	4770      	bx	lr

0800a6c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a6ce:	79fb      	ldrb	r3, [r7, #7]
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d165      	bne.n	800a7a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	4a41      	ldr	r2, [pc, #260]	; (800a7dc <USB_SetTurnaroundTime+0x11c>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d906      	bls.n	800a6ea <USB_SetTurnaroundTime+0x2a>
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	4a40      	ldr	r2, [pc, #256]	; (800a7e0 <USB_SetTurnaroundTime+0x120>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d202      	bcs.n	800a6ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a6e4:	230f      	movs	r3, #15
 800a6e6:	617b      	str	r3, [r7, #20]
 800a6e8:	e062      	b.n	800a7b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	4a3c      	ldr	r2, [pc, #240]	; (800a7e0 <USB_SetTurnaroundTime+0x120>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d306      	bcc.n	800a700 <USB_SetTurnaroundTime+0x40>
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	4a3b      	ldr	r2, [pc, #236]	; (800a7e4 <USB_SetTurnaroundTime+0x124>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d202      	bcs.n	800a700 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a6fa:	230e      	movs	r3, #14
 800a6fc:	617b      	str	r3, [r7, #20]
 800a6fe:	e057      	b.n	800a7b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	4a38      	ldr	r2, [pc, #224]	; (800a7e4 <USB_SetTurnaroundTime+0x124>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d306      	bcc.n	800a716 <USB_SetTurnaroundTime+0x56>
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	4a37      	ldr	r2, [pc, #220]	; (800a7e8 <USB_SetTurnaroundTime+0x128>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d202      	bcs.n	800a716 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a710:	230d      	movs	r3, #13
 800a712:	617b      	str	r3, [r7, #20]
 800a714:	e04c      	b.n	800a7b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	4a33      	ldr	r2, [pc, #204]	; (800a7e8 <USB_SetTurnaroundTime+0x128>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d306      	bcc.n	800a72c <USB_SetTurnaroundTime+0x6c>
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	4a32      	ldr	r2, [pc, #200]	; (800a7ec <USB_SetTurnaroundTime+0x12c>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d802      	bhi.n	800a72c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a726:	230c      	movs	r3, #12
 800a728:	617b      	str	r3, [r7, #20]
 800a72a:	e041      	b.n	800a7b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	4a2f      	ldr	r2, [pc, #188]	; (800a7ec <USB_SetTurnaroundTime+0x12c>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d906      	bls.n	800a742 <USB_SetTurnaroundTime+0x82>
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	4a2e      	ldr	r2, [pc, #184]	; (800a7f0 <USB_SetTurnaroundTime+0x130>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d802      	bhi.n	800a742 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a73c:	230b      	movs	r3, #11
 800a73e:	617b      	str	r3, [r7, #20]
 800a740:	e036      	b.n	800a7b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	4a2a      	ldr	r2, [pc, #168]	; (800a7f0 <USB_SetTurnaroundTime+0x130>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d906      	bls.n	800a758 <USB_SetTurnaroundTime+0x98>
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	4a29      	ldr	r2, [pc, #164]	; (800a7f4 <USB_SetTurnaroundTime+0x134>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d802      	bhi.n	800a758 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a752:	230a      	movs	r3, #10
 800a754:	617b      	str	r3, [r7, #20]
 800a756:	e02b      	b.n	800a7b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	4a26      	ldr	r2, [pc, #152]	; (800a7f4 <USB_SetTurnaroundTime+0x134>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d906      	bls.n	800a76e <USB_SetTurnaroundTime+0xae>
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	4a25      	ldr	r2, [pc, #148]	; (800a7f8 <USB_SetTurnaroundTime+0x138>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d202      	bcs.n	800a76e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a768:	2309      	movs	r3, #9
 800a76a:	617b      	str	r3, [r7, #20]
 800a76c:	e020      	b.n	800a7b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	4a21      	ldr	r2, [pc, #132]	; (800a7f8 <USB_SetTurnaroundTime+0x138>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d306      	bcc.n	800a784 <USB_SetTurnaroundTime+0xc4>
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	4a20      	ldr	r2, [pc, #128]	; (800a7fc <USB_SetTurnaroundTime+0x13c>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d802      	bhi.n	800a784 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a77e:	2308      	movs	r3, #8
 800a780:	617b      	str	r3, [r7, #20]
 800a782:	e015      	b.n	800a7b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	4a1d      	ldr	r2, [pc, #116]	; (800a7fc <USB_SetTurnaroundTime+0x13c>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d906      	bls.n	800a79a <USB_SetTurnaroundTime+0xda>
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	4a1c      	ldr	r2, [pc, #112]	; (800a800 <USB_SetTurnaroundTime+0x140>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d202      	bcs.n	800a79a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a794:	2307      	movs	r3, #7
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	e00a      	b.n	800a7b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a79a:	2306      	movs	r3, #6
 800a79c:	617b      	str	r3, [r7, #20]
 800a79e:	e007      	b.n	800a7b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a7a0:	79fb      	ldrb	r3, [r7, #7]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d102      	bne.n	800a7ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a7a6:	2309      	movs	r3, #9
 800a7a8:	617b      	str	r3, [r7, #20]
 800a7aa:	e001      	b.n	800a7b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a7ac:	2309      	movs	r3, #9
 800a7ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	68da      	ldr	r2, [r3, #12]
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	029b      	lsls	r3, r3, #10
 800a7c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a7c8:	431a      	orrs	r2, r3
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	371c      	adds	r7, #28
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	00d8acbf 	.word	0x00d8acbf
 800a7e0:	00e4e1c0 	.word	0x00e4e1c0
 800a7e4:	00f42400 	.word	0x00f42400
 800a7e8:	01067380 	.word	0x01067380
 800a7ec:	011a499f 	.word	0x011a499f
 800a7f0:	01312cff 	.word	0x01312cff
 800a7f4:	014ca43f 	.word	0x014ca43f
 800a7f8:	016e3600 	.word	0x016e3600
 800a7fc:	01a6ab1f 	.word	0x01a6ab1f
 800a800:	01e84800 	.word	0x01e84800

0800a804 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	f043 0201 	orr.w	r2, r3, #1
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a826:	b480      	push	{r7}
 800a828:	b083      	sub	sp, #12
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	f023 0201 	bic.w	r2, r3, #1
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	460b      	mov	r3, r1
 800a852:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a854:	2300      	movs	r3, #0
 800a856:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a864:	78fb      	ldrb	r3, [r7, #3]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d115      	bne.n	800a896 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a876:	200a      	movs	r0, #10
 800a878:	f7fb fdd8 	bl	800642c <HAL_Delay>
      ms += 10U;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	330a      	adds	r3, #10
 800a880:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f001 f939 	bl	800bafa <USB_GetMode>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d01e      	beq.n	800a8cc <USB_SetCurrentMode+0x84>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2bc7      	cmp	r3, #199	; 0xc7
 800a892:	d9f0      	bls.n	800a876 <USB_SetCurrentMode+0x2e>
 800a894:	e01a      	b.n	800a8cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a896:	78fb      	ldrb	r3, [r7, #3]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d115      	bne.n	800a8c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a8a8:	200a      	movs	r0, #10
 800a8aa:	f7fb fdbf 	bl	800642c <HAL_Delay>
      ms += 10U;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	330a      	adds	r3, #10
 800a8b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f001 f920 	bl	800bafa <USB_GetMode>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d005      	beq.n	800a8cc <USB_SetCurrentMode+0x84>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2bc7      	cmp	r3, #199	; 0xc7
 800a8c4:	d9f0      	bls.n	800a8a8 <USB_SetCurrentMode+0x60>
 800a8c6:	e001      	b.n	800a8cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e005      	b.n	800a8d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2bc8      	cmp	r3, #200	; 0xc8
 800a8d0:	d101      	bne.n	800a8d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e000      	b.n	800a8d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8e0:	b084      	sub	sp, #16
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b086      	sub	sp, #24
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a8ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	613b      	str	r3, [r7, #16]
 800a8fe:	e009      	b.n	800a914 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	3340      	adds	r3, #64	; 0x40
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	2200      	movs	r2, #0
 800a90c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	3301      	adds	r3, #1
 800a912:	613b      	str	r3, [r7, #16]
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	2b0e      	cmp	r3, #14
 800a918:	d9f2      	bls.n	800a900 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a91a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d11c      	bne.n	800a95c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a930:	f043 0302 	orr.w	r3, r3, #2
 800a934:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a946:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a952:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	639a      	str	r2, [r3, #56]	; 0x38
 800a95a:	e00b      	b.n	800a974 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a960:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a97a:	461a      	mov	r2, r3
 800a97c:	2300      	movs	r3, #0
 800a97e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a980:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a984:	2b01      	cmp	r3, #1
 800a986:	d10d      	bne.n	800a9a4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d104      	bne.n	800a99a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a990:	2100      	movs	r1, #0
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f968 	bl	800ac68 <USB_SetDevSpeed>
 800a998:	e008      	b.n	800a9ac <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a99a:	2101      	movs	r1, #1
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f963 	bl	800ac68 <USB_SetDevSpeed>
 800a9a2:	e003      	b.n	800a9ac <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a9a4:	2103      	movs	r1, #3
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f95e 	bl	800ac68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a9ac:	2110      	movs	r1, #16
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f8fa 	bl	800aba8 <USB_FlushTxFifo>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f924 	bl	800ac0c <USB_FlushRxFifo>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d001      	beq.n	800a9ce <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	613b      	str	r3, [r7, #16]
 800a9f6:	e043      	b.n	800aa80 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa0e:	d118      	bne.n	800aa42 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10a      	bne.n	800aa2c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	015a      	lsls	r2, r3, #5
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa22:	461a      	mov	r2, r3
 800aa24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	e013      	b.n	800aa54 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	015a      	lsls	r2, r3, #5
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	4413      	add	r3, r2
 800aa34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa38:	461a      	mov	r2, r3
 800aa3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa3e:	6013      	str	r3, [r2, #0]
 800aa40:	e008      	b.n	800aa54 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	015a      	lsls	r2, r3, #5
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	4413      	add	r3, r2
 800aa4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa4e:	461a      	mov	r2, r3
 800aa50:	2300      	movs	r3, #0
 800aa52:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	015a      	lsls	r2, r3, #5
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa60:	461a      	mov	r2, r3
 800aa62:	2300      	movs	r3, #0
 800aa64:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	015a      	lsls	r2, r3, #5
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa72:	461a      	mov	r2, r3
 800aa74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	613b      	str	r3, [r7, #16]
 800aa80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa84:	461a      	mov	r2, r3
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d3b5      	bcc.n	800a9f8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	613b      	str	r3, [r7, #16]
 800aa90:	e043      	b.n	800ab1a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	015a      	lsls	r2, r3, #5
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	4413      	add	r3, r2
 800aa9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aaa8:	d118      	bne.n	800aadc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10a      	bne.n	800aac6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	015a      	lsls	r2, r3, #5
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	4413      	add	r3, r2
 800aab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aabc:	461a      	mov	r2, r3
 800aabe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aac2:	6013      	str	r3, [r2, #0]
 800aac4:	e013      	b.n	800aaee <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	015a      	lsls	r2, r3, #5
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	4413      	add	r3, r2
 800aace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad2:	461a      	mov	r2, r3
 800aad4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aad8:	6013      	str	r3, [r2, #0]
 800aada:	e008      	b.n	800aaee <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	015a      	lsls	r2, r3, #5
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	4413      	add	r3, r2
 800aae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae8:	461a      	mov	r2, r3
 800aaea:	2300      	movs	r3, #0
 800aaec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafa:	461a      	mov	r2, r3
 800aafc:	2300      	movs	r3, #0
 800aafe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	015a      	lsls	r2, r3, #5
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	4413      	add	r3, r2
 800ab08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	3301      	adds	r3, #1
 800ab18:	613b      	str	r3, [r7, #16]
 800ab1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab1e:	461a      	mov	r2, r3
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d3b5      	bcc.n	800aa92 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab38:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab46:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d105      	bne.n	800ab5c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	f043 0210 	orr.w	r2, r3, #16
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	699a      	ldr	r2, [r3, #24]
 800ab60:	4b10      	ldr	r3, [pc, #64]	; (800aba4 <USB_DevInit+0x2c4>)
 800ab62:	4313      	orrs	r3, r2
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab68:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d005      	beq.n	800ab7c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	f043 0208 	orr.w	r2, r3, #8
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d107      	bne.n	800ab94 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab8c:	f043 0304 	orr.w	r3, r3, #4
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3718      	adds	r7, #24
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aba0:	b004      	add	sp, #16
 800aba2:	4770      	bx	lr
 800aba4:	803c3800 	.word	0x803c3800

0800aba8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800abb2:	2300      	movs	r3, #0
 800abb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3301      	adds	r3, #1
 800abba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800abc2:	d901      	bls.n	800abc8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e01b      	b.n	800ac00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	691b      	ldr	r3, [r3, #16]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	daf2      	bge.n	800abb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800abd0:	2300      	movs	r3, #0
 800abd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	019b      	lsls	r3, r3, #6
 800abd8:	f043 0220 	orr.w	r2, r3, #32
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	3301      	adds	r3, #1
 800abe4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800abec:	d901      	bls.n	800abf2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800abee:	2303      	movs	r3, #3
 800abf0:	e006      	b.n	800ac00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	f003 0320 	and.w	r3, r3, #32
 800abfa:	2b20      	cmp	r3, #32
 800abfc:	d0f0      	beq.n	800abe0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac14:	2300      	movs	r3, #0
 800ac16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ac24:	d901      	bls.n	800ac2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e018      	b.n	800ac5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	daf2      	bge.n	800ac18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ac32:	2300      	movs	r3, #0
 800ac34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2210      	movs	r2, #16
 800ac3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ac48:	d901      	bls.n	800ac4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	e006      	b.n	800ac5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	f003 0310 	and.w	r3, r3, #16
 800ac56:	2b10      	cmp	r3, #16
 800ac58:	d0f0      	beq.n	800ac3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	460b      	mov	r3, r1
 800ac72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	78fb      	ldrb	r3, [r7, #3]
 800ac82:	68f9      	ldr	r1, [r7, #12]
 800ac84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b087      	sub	sp, #28
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	f003 0306 	and.w	r3, r3, #6
 800acb2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d102      	bne.n	800acc0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800acba:	2300      	movs	r3, #0
 800acbc:	75fb      	strb	r3, [r7, #23]
 800acbe:	e00a      	b.n	800acd6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d002      	beq.n	800accc <USB_GetDevSpeed+0x32>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b06      	cmp	r3, #6
 800acca:	d102      	bne.n	800acd2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800accc:	2302      	movs	r3, #2
 800acce:	75fb      	strb	r3, [r7, #23]
 800acd0:	e001      	b.n	800acd6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800acd2:	230f      	movs	r3, #15
 800acd4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800acd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	371c      	adds	r7, #28
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	785b      	ldrb	r3, [r3, #1]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d13a      	bne.n	800ad76 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad06:	69da      	ldr	r2, [r3, #28]
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	f003 030f 	and.w	r3, r3, #15
 800ad10:	2101      	movs	r1, #1
 800ad12:	fa01 f303 	lsl.w	r3, r1, r3
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	68f9      	ldr	r1, [r7, #12]
 800ad1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	015a      	lsls	r2, r3, #5
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	4413      	add	r3, r2
 800ad2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d155      	bne.n	800ade4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	015a      	lsls	r2, r3, #5
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	4413      	add	r3, r2
 800ad40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	791b      	ldrb	r3, [r3, #4]
 800ad52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	059b      	lsls	r3, r3, #22
 800ad5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	68ba      	ldr	r2, [r7, #8]
 800ad60:	0151      	lsls	r1, r2, #5
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	440a      	add	r2, r1
 800ad66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad72:	6013      	str	r3, [r2, #0]
 800ad74:	e036      	b.n	800ade4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad7c:	69da      	ldr	r2, [r3, #28]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	f003 030f 	and.w	r3, r3, #15
 800ad86:	2101      	movs	r1, #1
 800ad88:	fa01 f303 	lsl.w	r3, r1, r3
 800ad8c:	041b      	lsls	r3, r3, #16
 800ad8e:	68f9      	ldr	r1, [r7, #12]
 800ad90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad94:	4313      	orrs	r3, r2
 800ad96:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	015a      	lsls	r2, r3, #5
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4413      	add	r3, r2
 800ada0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d11a      	bne.n	800ade4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	791b      	ldrb	r3, [r3, #4]
 800adc8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800adca:	430b      	orrs	r3, r1
 800adcc:	4313      	orrs	r3, r2
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	0151      	lsls	r1, r2, #5
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	440a      	add	r2, r1
 800add6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ade2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3714      	adds	r7, #20
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
	...

0800adf4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	785b      	ldrb	r3, [r3, #1]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d161      	bne.n	800aed4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae26:	d11f      	bne.n	800ae68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	015a      	lsls	r2, r3, #5
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	4413      	add	r3, r2
 800ae30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	0151      	lsls	r1, r2, #5
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	440a      	add	r2, r1
 800ae3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	015a      	lsls	r2, r3, #5
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4413      	add	r3, r2
 800ae50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	0151      	lsls	r1, r2, #5
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	440a      	add	r2, r1
 800ae5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	f003 030f 	and.w	r3, r3, #15
 800ae78:	2101      	movs	r1, #1
 800ae7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	43db      	mvns	r3, r3
 800ae82:	68f9      	ldr	r1, [r7, #12]
 800ae84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae88:	4013      	ands	r3, r2
 800ae8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae92:	69da      	ldr	r2, [r3, #28]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	f003 030f 	and.w	r3, r3, #15
 800ae9c:	2101      	movs	r1, #1
 800ae9e:	fa01 f303 	lsl.w	r3, r1, r3
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	43db      	mvns	r3, r3
 800aea6:	68f9      	ldr	r1, [r7, #12]
 800aea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aeac:	4013      	ands	r3, r2
 800aeae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	015a      	lsls	r2, r3, #5
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	0159      	lsls	r1, r3, #5
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	440b      	add	r3, r1
 800aec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeca:	4619      	mov	r1, r3
 800aecc:	4b35      	ldr	r3, [pc, #212]	; (800afa4 <USB_DeactivateEndpoint+0x1b0>)
 800aece:	4013      	ands	r3, r2
 800aed0:	600b      	str	r3, [r1, #0]
 800aed2:	e060      	b.n	800af96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	015a      	lsls	r2, r3, #5
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	4413      	add	r3, r2
 800aedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aeea:	d11f      	bne.n	800af2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	015a      	lsls	r2, r3, #5
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	4413      	add	r3, r2
 800aef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	0151      	lsls	r1, r2, #5
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	440a      	add	r2, r1
 800af02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	015a      	lsls	r2, r3, #5
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4413      	add	r3, r2
 800af14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	0151      	lsls	r1, r2, #5
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	440a      	add	r2, r1
 800af22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	f003 030f 	and.w	r3, r3, #15
 800af3c:	2101      	movs	r1, #1
 800af3e:	fa01 f303 	lsl.w	r3, r1, r3
 800af42:	041b      	lsls	r3, r3, #16
 800af44:	43db      	mvns	r3, r3
 800af46:	68f9      	ldr	r1, [r7, #12]
 800af48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af4c:	4013      	ands	r3, r2
 800af4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af56:	69da      	ldr	r2, [r3, #28]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	f003 030f 	and.w	r3, r3, #15
 800af60:	2101      	movs	r1, #1
 800af62:	fa01 f303 	lsl.w	r3, r1, r3
 800af66:	041b      	lsls	r3, r3, #16
 800af68:	43db      	mvns	r3, r3
 800af6a:	68f9      	ldr	r1, [r7, #12]
 800af6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af70:	4013      	ands	r3, r2
 800af72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	0159      	lsls	r1, r3, #5
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	440b      	add	r3, r1
 800af8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af8e:	4619      	mov	r1, r3
 800af90:	4b05      	ldr	r3, [pc, #20]	; (800afa8 <USB_DeactivateEndpoint+0x1b4>)
 800af92:	4013      	ands	r3, r2
 800af94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr
 800afa4:	ec337800 	.word	0xec337800
 800afa8:	eff37800 	.word	0xeff37800

0800afac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b08a      	sub	sp, #40	; 0x28
 800afb0:	af02      	add	r7, sp, #8
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	4613      	mov	r3, r2
 800afb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	785b      	ldrb	r3, [r3, #1]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	f040 817a 	bne.w	800b2c2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d132      	bne.n	800b03c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	015a      	lsls	r2, r3, #5
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	69ba      	ldr	r2, [r7, #24]
 800afe6:	0151      	lsls	r1, r2, #5
 800afe8:	69fa      	ldr	r2, [r7, #28]
 800afea:	440a      	add	r2, r1
 800afec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aff0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aff4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aff8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	015a      	lsls	r2, r3, #5
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	4413      	add	r3, r2
 800b002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	69ba      	ldr	r2, [r7, #24]
 800b00a:	0151      	lsls	r1, r2, #5
 800b00c:	69fa      	ldr	r2, [r7, #28]
 800b00e:	440a      	add	r2, r1
 800b010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b014:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b018:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	69ba      	ldr	r2, [r7, #24]
 800b02a:	0151      	lsls	r1, r2, #5
 800b02c:	69fa      	ldr	r2, [r7, #28]
 800b02e:	440a      	add	r2, r1
 800b030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b034:	0cdb      	lsrs	r3, r3, #19
 800b036:	04db      	lsls	r3, r3, #19
 800b038:	6113      	str	r3, [r2, #16]
 800b03a:	e092      	b.n	800b162 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	015a      	lsls	r2, r3, #5
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	4413      	add	r3, r2
 800b044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	0151      	lsls	r1, r2, #5
 800b04e:	69fa      	ldr	r2, [r7, #28]
 800b050:	440a      	add	r2, r1
 800b052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b056:	0cdb      	lsrs	r3, r3, #19
 800b058:	04db      	lsls	r3, r3, #19
 800b05a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	015a      	lsls	r2, r3, #5
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	4413      	add	r3, r2
 800b064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	69ba      	ldr	r2, [r7, #24]
 800b06c:	0151      	lsls	r1, r2, #5
 800b06e:	69fa      	ldr	r2, [r7, #28]
 800b070:	440a      	add	r2, r1
 800b072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b076:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b07a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b07e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d11a      	bne.n	800b0bc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	691a      	ldr	r2, [r3, #16]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d903      	bls.n	800b09a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	689a      	ldr	r2, [r3, #8]
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	015a      	lsls	r2, r3, #5
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	69ba      	ldr	r2, [r7, #24]
 800b0aa:	0151      	lsls	r1, r2, #5
 800b0ac:	69fa      	ldr	r2, [r7, #28]
 800b0ae:	440a      	add	r2, r1
 800b0b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0b8:	6113      	str	r3, [r2, #16]
 800b0ba:	e01b      	b.n	800b0f4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	015a      	lsls	r2, r3, #5
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	6919      	ldr	r1, [r3, #16]
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	440b      	add	r3, r1
 800b0d4:	1e59      	subs	r1, r3, #1
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	fbb1 f3f3 	udiv	r3, r1, r3
 800b0de:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b0e0:	4ba2      	ldr	r3, [pc, #648]	; (800b36c <USB_EPStartXfer+0x3c0>)
 800b0e2:	400b      	ands	r3, r1
 800b0e4:	69b9      	ldr	r1, [r7, #24]
 800b0e6:	0148      	lsls	r0, r1, #5
 800b0e8:	69f9      	ldr	r1, [r7, #28]
 800b0ea:	4401      	add	r1, r0
 800b0ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	015a      	lsls	r2, r3, #5
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b100:	691a      	ldr	r2, [r3, #16]
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b10a:	69b9      	ldr	r1, [r7, #24]
 800b10c:	0148      	lsls	r0, r1, #5
 800b10e:	69f9      	ldr	r1, [r7, #28]
 800b110:	4401      	add	r1, r0
 800b112:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b116:	4313      	orrs	r3, r2
 800b118:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	791b      	ldrb	r3, [r3, #4]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d11f      	bne.n	800b162 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	015a      	lsls	r2, r3, #5
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	4413      	add	r3, r2
 800b12a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	69ba      	ldr	r2, [r7, #24]
 800b132:	0151      	lsls	r1, r2, #5
 800b134:	69fa      	ldr	r2, [r7, #28]
 800b136:	440a      	add	r2, r1
 800b138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b13c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b140:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	015a      	lsls	r2, r3, #5
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	4413      	add	r3, r2
 800b14a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	69ba      	ldr	r2, [r7, #24]
 800b152:	0151      	lsls	r1, r2, #5
 800b154:	69fa      	ldr	r2, [r7, #28]
 800b156:	440a      	add	r2, r1
 800b158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b15c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b160:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b162:	79fb      	ldrb	r3, [r7, #7]
 800b164:	2b01      	cmp	r3, #1
 800b166:	d14b      	bne.n	800b200 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	69db      	ldr	r3, [r3, #28]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d009      	beq.n	800b184 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	015a      	lsls	r2, r3, #5
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	4413      	add	r3, r2
 800b178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17c:	461a      	mov	r2, r3
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	69db      	ldr	r3, [r3, #28]
 800b182:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	791b      	ldrb	r3, [r3, #4]
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d128      	bne.n	800b1de <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d110      	bne.n	800b1be <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	015a      	lsls	r2, r3, #5
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	0151      	lsls	r1, r2, #5
 800b1ae:	69fa      	ldr	r2, [r7, #28]
 800b1b0:	440a      	add	r2, r1
 800b1b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b1ba:	6013      	str	r3, [r2, #0]
 800b1bc:	e00f      	b.n	800b1de <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	69ba      	ldr	r2, [r7, #24]
 800b1ce:	0151      	lsls	r1, r2, #5
 800b1d0:	69fa      	ldr	r2, [r7, #28]
 800b1d2:	440a      	add	r2, r1
 800b1d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	015a      	lsls	r2, r3, #5
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	69ba      	ldr	r2, [r7, #24]
 800b1ee:	0151      	lsls	r1, r2, #5
 800b1f0:	69fa      	ldr	r2, [r7, #28]
 800b1f2:	440a      	add	r2, r1
 800b1f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1fc:	6013      	str	r3, [r2, #0]
 800b1fe:	e165      	b.n	800b4cc <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	015a      	lsls	r2, r3, #5
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	4413      	add	r3, r2
 800b208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	69ba      	ldr	r2, [r7, #24]
 800b210:	0151      	lsls	r1, r2, #5
 800b212:	69fa      	ldr	r2, [r7, #28]
 800b214:	440a      	add	r2, r1
 800b216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b21a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b21e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	791b      	ldrb	r3, [r3, #4]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d015      	beq.n	800b254 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 814d 	beq.w	800b4cc <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	f003 030f 	and.w	r3, r3, #15
 800b242:	2101      	movs	r1, #1
 800b244:	fa01 f303 	lsl.w	r3, r1, r3
 800b248:	69f9      	ldr	r1, [r7, #28]
 800b24a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b24e:	4313      	orrs	r3, r2
 800b250:	634b      	str	r3, [r1, #52]	; 0x34
 800b252:	e13b      	b.n	800b4cc <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b260:	2b00      	cmp	r3, #0
 800b262:	d110      	bne.n	800b286 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	015a      	lsls	r2, r3, #5
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	4413      	add	r3, r2
 800b26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	69ba      	ldr	r2, [r7, #24]
 800b274:	0151      	lsls	r1, r2, #5
 800b276:	69fa      	ldr	r2, [r7, #28]
 800b278:	440a      	add	r2, r1
 800b27a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b27e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b282:	6013      	str	r3, [r2, #0]
 800b284:	e00f      	b.n	800b2a6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	015a      	lsls	r2, r3, #5
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	4413      	add	r3, r2
 800b28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	69ba      	ldr	r2, [r7, #24]
 800b296:	0151      	lsls	r1, r2, #5
 800b298:	69fa      	ldr	r2, [r7, #28]
 800b29a:	440a      	add	r2, r1
 800b29c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	68d9      	ldr	r1, [r3, #12]
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	781a      	ldrb	r2, [r3, #0]
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	b298      	uxth	r0, r3
 800b2b4:	79fb      	ldrb	r3, [r7, #7]
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f000 f9b8 	bl	800b630 <USB_WritePacket>
 800b2c0:	e104      	b.n	800b4cc <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	015a      	lsls	r2, r3, #5
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	69ba      	ldr	r2, [r7, #24]
 800b2d2:	0151      	lsls	r1, r2, #5
 800b2d4:	69fa      	ldr	r2, [r7, #28]
 800b2d6:	440a      	add	r2, r1
 800b2d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2dc:	0cdb      	lsrs	r3, r3, #19
 800b2de:	04db      	lsls	r3, r3, #19
 800b2e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	015a      	lsls	r2, r3, #5
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	69ba      	ldr	r2, [r7, #24]
 800b2f2:	0151      	lsls	r1, r2, #5
 800b2f4:	69fa      	ldr	r2, [r7, #28]
 800b2f6:	440a      	add	r2, r1
 800b2f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b304:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d131      	bne.n	800b370 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d003      	beq.n	800b31c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	689a      	ldr	r2, [r3, #8]
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	689a      	ldr	r2, [r3, #8]
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b330:	691a      	ldr	r2, [r3, #16]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	6a1b      	ldr	r3, [r3, #32]
 800b336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b33a:	69b9      	ldr	r1, [r7, #24]
 800b33c:	0148      	lsls	r0, r1, #5
 800b33e:	69f9      	ldr	r1, [r7, #28]
 800b340:	4401      	add	r1, r0
 800b342:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b346:	4313      	orrs	r3, r2
 800b348:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	015a      	lsls	r2, r3, #5
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	4413      	add	r3, r2
 800b352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	0151      	lsls	r1, r2, #5
 800b35c:	69fa      	ldr	r2, [r7, #28]
 800b35e:	440a      	add	r2, r1
 800b360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b368:	6113      	str	r3, [r2, #16]
 800b36a:	e061      	b.n	800b430 <USB_EPStartXfer+0x484>
 800b36c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d123      	bne.n	800b3c0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	015a      	lsls	r2, r3, #5
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	4413      	add	r3, r2
 800b380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b384:	691a      	ldr	r2, [r3, #16]
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b38e:	69b9      	ldr	r1, [r7, #24]
 800b390:	0148      	lsls	r0, r1, #5
 800b392:	69f9      	ldr	r1, [r7, #28]
 800b394:	4401      	add	r1, r0
 800b396:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b39a:	4313      	orrs	r3, r2
 800b39c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	015a      	lsls	r2, r3, #5
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	69ba      	ldr	r2, [r7, #24]
 800b3ae:	0151      	lsls	r1, r2, #5
 800b3b0:	69fa      	ldr	r2, [r7, #28]
 800b3b2:	440a      	add	r2, r1
 800b3b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3bc:	6113      	str	r3, [r2, #16]
 800b3be:	e037      	b.n	800b430 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	691a      	ldr	r2, [r3, #16]
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	1e5a      	subs	r2, r3, #1
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3d4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	8afa      	ldrh	r2, [r7, #22]
 800b3dc:	fb03 f202 	mul.w	r2, r3, r2
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	015a      	lsls	r2, r3, #5
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f0:	691a      	ldr	r2, [r3, #16]
 800b3f2:	8afb      	ldrh	r3, [r7, #22]
 800b3f4:	04d9      	lsls	r1, r3, #19
 800b3f6:	4b38      	ldr	r3, [pc, #224]	; (800b4d8 <USB_EPStartXfer+0x52c>)
 800b3f8:	400b      	ands	r3, r1
 800b3fa:	69b9      	ldr	r1, [r7, #24]
 800b3fc:	0148      	lsls	r0, r1, #5
 800b3fe:	69f9      	ldr	r1, [r7, #28]
 800b400:	4401      	add	r1, r0
 800b402:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b406:	4313      	orrs	r3, r2
 800b408:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	015a      	lsls	r2, r3, #5
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	4413      	add	r3, r2
 800b412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b416:	691a      	ldr	r2, [r3, #16]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	6a1b      	ldr	r3, [r3, #32]
 800b41c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b420:	69b9      	ldr	r1, [r7, #24]
 800b422:	0148      	lsls	r0, r1, #5
 800b424:	69f9      	ldr	r1, [r7, #28]
 800b426:	4401      	add	r1, r0
 800b428:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b42c:	4313      	orrs	r3, r2
 800b42e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b430:	79fb      	ldrb	r3, [r7, #7]
 800b432:	2b01      	cmp	r3, #1
 800b434:	d10d      	bne.n	800b452 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d009      	beq.n	800b452 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	68d9      	ldr	r1, [r3, #12]
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	015a      	lsls	r2, r3, #5
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	4413      	add	r3, r2
 800b44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b44e:	460a      	mov	r2, r1
 800b450:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	791b      	ldrb	r3, [r3, #4]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d128      	bne.n	800b4ac <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b466:	2b00      	cmp	r3, #0
 800b468:	d110      	bne.n	800b48c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	4413      	add	r3, r2
 800b472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	69ba      	ldr	r2, [r7, #24]
 800b47a:	0151      	lsls	r1, r2, #5
 800b47c:	69fa      	ldr	r2, [r7, #28]
 800b47e:	440a      	add	r2, r1
 800b480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b484:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b488:	6013      	str	r3, [r2, #0]
 800b48a:	e00f      	b.n	800b4ac <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	69ba      	ldr	r2, [r7, #24]
 800b49c:	0151      	lsls	r1, r2, #5
 800b49e:	69fa      	ldr	r2, [r7, #28]
 800b4a0:	440a      	add	r2, r1
 800b4a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	015a      	lsls	r2, r3, #5
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	69ba      	ldr	r2, [r7, #24]
 800b4bc:	0151      	lsls	r1, r2, #5
 800b4be:	69fa      	ldr	r2, [r7, #28]
 800b4c0:	440a      	add	r2, r1
 800b4c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3720      	adds	r7, #32
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	1ff80000 	.word	0x1ff80000

0800b4dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b087      	sub	sp, #28
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	785b      	ldrb	r3, [r3, #1]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d14a      	bne.n	800b590 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	015a      	lsls	r2, r3, #5
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	4413      	add	r3, r2
 800b504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b50e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b512:	f040 8086 	bne.w	800b622 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	015a      	lsls	r2, r3, #5
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	4413      	add	r3, r2
 800b520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	7812      	ldrb	r2, [r2, #0]
 800b52a:	0151      	lsls	r1, r2, #5
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	440a      	add	r2, r1
 800b530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b534:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b538:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	015a      	lsls	r2, r3, #5
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	4413      	add	r3, r2
 800b544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	7812      	ldrb	r2, [r2, #0]
 800b54e:	0151      	lsls	r1, r2, #5
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	440a      	add	r2, r1
 800b554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b55c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3301      	adds	r3, #1
 800b562:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f242 7210 	movw	r2, #10000	; 0x2710
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d902      	bls.n	800b574 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	75fb      	strb	r3, [r7, #23]
          break;
 800b572:	e056      	b.n	800b622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	015a      	lsls	r2, r3, #5
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	4413      	add	r3, r2
 800b57e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b58c:	d0e7      	beq.n	800b55e <USB_EPStopXfer+0x82>
 800b58e:	e048      	b.n	800b622 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	015a      	lsls	r2, r3, #5
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	4413      	add	r3, r2
 800b59a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5a8:	d13b      	bne.n	800b622 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	015a      	lsls	r2, r3, #5
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	7812      	ldrb	r2, [r2, #0]
 800b5be:	0151      	lsls	r1, r2, #5
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	440a      	add	r2, r1
 800b5c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b5cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	015a      	lsls	r2, r3, #5
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	7812      	ldrb	r2, [r2, #0]
 800b5e2:	0151      	lsls	r1, r2, #5
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	440a      	add	r2, r1
 800b5e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f242 7210 	movw	r2, #10000	; 0x2710
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d902      	bls.n	800b608 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	75fb      	strb	r3, [r7, #23]
          break;
 800b606:	e00c      	b.n	800b622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	015a      	lsls	r2, r3, #5
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	4413      	add	r3, r2
 800b612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b61c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b620:	d0e7      	beq.n	800b5f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b622:	7dfb      	ldrb	r3, [r7, #23]
}
 800b624:	4618      	mov	r0, r3
 800b626:	371c      	adds	r7, #28
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b630:	b480      	push	{r7}
 800b632:	b089      	sub	sp, #36	; 0x24
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	4611      	mov	r1, r2
 800b63c:	461a      	mov	r2, r3
 800b63e:	460b      	mov	r3, r1
 800b640:	71fb      	strb	r3, [r7, #7]
 800b642:	4613      	mov	r3, r2
 800b644:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b64e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b652:	2b00      	cmp	r3, #0
 800b654:	d123      	bne.n	800b69e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b656:	88bb      	ldrh	r3, [r7, #4]
 800b658:	3303      	adds	r3, #3
 800b65a:	089b      	lsrs	r3, r3, #2
 800b65c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b65e:	2300      	movs	r3, #0
 800b660:	61bb      	str	r3, [r7, #24]
 800b662:	e018      	b.n	800b696 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b664:	79fb      	ldrb	r3, [r7, #7]
 800b666:	031a      	lsls	r2, r3, #12
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	4413      	add	r3, r2
 800b66c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b670:	461a      	mov	r2, r3
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	3301      	adds	r3, #1
 800b67c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	3301      	adds	r3, #1
 800b682:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	3301      	adds	r3, #1
 800b688:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	3301      	adds	r3, #1
 800b68e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	3301      	adds	r3, #1
 800b694:	61bb      	str	r3, [r7, #24]
 800b696:	69ba      	ldr	r2, [r7, #24]
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d3e2      	bcc.n	800b664 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3724      	adds	r7, #36	; 0x24
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b08b      	sub	sp, #44	; 0x2c
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b6c2:	88fb      	ldrh	r3, [r7, #6]
 800b6c4:	089b      	lsrs	r3, r3, #2
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b6ca:	88fb      	ldrh	r3, [r7, #6]
 800b6cc:	f003 0303 	and.w	r3, r3, #3
 800b6d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	623b      	str	r3, [r7, #32]
 800b6d6:	e014      	b.n	800b702 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b6fc:	6a3b      	ldr	r3, [r7, #32]
 800b6fe:	3301      	adds	r3, #1
 800b700:	623b      	str	r3, [r7, #32]
 800b702:	6a3a      	ldr	r2, [r7, #32]
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	429a      	cmp	r2, r3
 800b708:	d3e6      	bcc.n	800b6d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b70a:	8bfb      	ldrh	r3, [r7, #30]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d01e      	beq.n	800b74e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b710:	2300      	movs	r3, #0
 800b712:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b71a:	461a      	mov	r2, r3
 800b71c:	f107 0310 	add.w	r3, r7, #16
 800b720:	6812      	ldr	r2, [r2, #0]
 800b722:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	fa22 f303 	lsr.w	r3, r2, r3
 800b730:	b2da      	uxtb	r2, r3
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	701a      	strb	r2, [r3, #0]
      i++;
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	3301      	adds	r3, #1
 800b73a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73e:	3301      	adds	r3, #1
 800b740:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b742:	8bfb      	ldrh	r3, [r7, #30]
 800b744:	3b01      	subs	r3, #1
 800b746:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b748:	8bfb      	ldrh	r3, [r7, #30]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1ea      	bne.n	800b724 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b750:	4618      	mov	r0, r3
 800b752:	372c      	adds	r7, #44	; 0x2c
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	785b      	ldrb	r3, [r3, #1]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d12c      	bne.n	800b7d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	015a      	lsls	r2, r3, #5
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4413      	add	r3, r2
 800b780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	db12      	blt.n	800b7b0 <USB_EPSetStall+0x54>
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00f      	beq.n	800b7b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	015a      	lsls	r2, r3, #5
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	4413      	add	r3, r2
 800b798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	0151      	lsls	r1, r2, #5
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	440a      	add	r2, r1
 800b7a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b7ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	015a      	lsls	r2, r3, #5
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	0151      	lsls	r1, r2, #5
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	440a      	add	r2, r1
 800b7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7ce:	6013      	str	r3, [r2, #0]
 800b7d0:	e02b      	b.n	800b82a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	015a      	lsls	r2, r3, #5
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	4413      	add	r3, r2
 800b7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	db12      	blt.n	800b80a <USB_EPSetStall+0xae>
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00f      	beq.n	800b80a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	015a      	lsls	r2, r3, #5
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	0151      	lsls	r1, r2, #5
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	440a      	add	r2, r1
 800b800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b808:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	015a      	lsls	r2, r3, #5
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	4413      	add	r3, r2
 800b812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	0151      	lsls	r1, r2, #5
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	440a      	add	r2, r1
 800b820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b828:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	785b      	ldrb	r3, [r3, #1]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d128      	bne.n	800b8a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	015a      	lsls	r2, r3, #5
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	4413      	add	r3, r2
 800b85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	0151      	lsls	r1, r2, #5
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	440a      	add	r2, r1
 800b86a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b86e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b872:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	791b      	ldrb	r3, [r3, #4]
 800b878:	2b03      	cmp	r3, #3
 800b87a:	d003      	beq.n	800b884 <USB_EPClearStall+0x4c>
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	791b      	ldrb	r3, [r3, #4]
 800b880:	2b02      	cmp	r3, #2
 800b882:	d138      	bne.n	800b8f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	015a      	lsls	r2, r3, #5
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	4413      	add	r3, r2
 800b88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	0151      	lsls	r1, r2, #5
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	440a      	add	r2, r1
 800b89a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b89e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8a2:	6013      	str	r3, [r2, #0]
 800b8a4:	e027      	b.n	800b8f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	015a      	lsls	r2, r3, #5
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	0151      	lsls	r1, r2, #5
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	440a      	add	r2, r1
 800b8bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b8c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	791b      	ldrb	r3, [r3, #4]
 800b8ca:	2b03      	cmp	r3, #3
 800b8cc:	d003      	beq.n	800b8d6 <USB_EPClearStall+0x9e>
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	791b      	ldrb	r3, [r3, #4]
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d10f      	bne.n	800b8f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	015a      	lsls	r2, r3, #5
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	4413      	add	r3, r2
 800b8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68ba      	ldr	r2, [r7, #8]
 800b8e6:	0151      	lsls	r1, r2, #5
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	440a      	add	r2, r1
 800b8ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	460b      	mov	r3, r1
 800b90e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b922:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b926:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	78fb      	ldrb	r3, [r7, #3]
 800b932:	011b      	lsls	r3, r3, #4
 800b934:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b938:	68f9      	ldr	r1, [r7, #12]
 800b93a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b93e:	4313      	orrs	r3, r2
 800b940:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3714      	adds	r7, #20
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b96a:	f023 0303 	bic.w	r3, r3, #3
 800b96e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b97e:	f023 0302 	bic.w	r3, r3, #2
 800b982:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b992:	b480      	push	{r7}
 800b994:	b085      	sub	sp, #20
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68fa      	ldr	r2, [r7, #12]
 800b9a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b9ac:	f023 0303 	bic.w	r3, r3, #3
 800b9b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9c0:	f043 0302 	orr.w	r3, r3, #2
 800b9c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	695b      	ldr	r3, [r3, #20]
 800b9e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3714      	adds	r7, #20
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b085      	sub	sp, #20
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba16:	69db      	ldr	r3, [r3, #28]
 800ba18:	68ba      	ldr	r2, [r7, #8]
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	0c1b      	lsrs	r3, r3, #16
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3714      	adds	r7, #20
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b085      	sub	sp, #20
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba40:	699b      	ldr	r3, [r3, #24]
 800ba42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba4a:	69db      	ldr	r3, [r3, #28]
 800ba4c:	68ba      	ldr	r2, [r7, #8]
 800ba4e:	4013      	ands	r3, r2
 800ba50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	b29b      	uxth	r3, r3
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba62:	b480      	push	{r7}
 800ba64:	b085      	sub	sp, #20
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ba72:	78fb      	ldrb	r3, [r7, #3]
 800ba74:	015a      	lsls	r2, r3, #5
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	4413      	add	r3, r2
 800ba7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba88:	695b      	ldr	r3, [r3, #20]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba90:	68bb      	ldr	r3, [r7, #8]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b087      	sub	sp, #28
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	460b      	mov	r3, r1
 800baa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800babe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bac2:	78fb      	ldrb	r3, [r7, #3]
 800bac4:	f003 030f 	and.w	r3, r3, #15
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	fa22 f303 	lsr.w	r3, r2, r3
 800bace:	01db      	lsls	r3, r3, #7
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	693a      	ldr	r2, [r7, #16]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bad8:	78fb      	ldrb	r3, [r7, #3]
 800bada:	015a      	lsls	r2, r3, #5
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	4413      	add	r3, r2
 800bae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	693a      	ldr	r2, [r7, #16]
 800bae8:	4013      	ands	r3, r2
 800baea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800baec:	68bb      	ldr	r3, [r7, #8]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	371c      	adds	r7, #28
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bafa:	b480      	push	{r7}
 800bafc:	b083      	sub	sp, #12
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	f003 0301 	and.w	r3, r3, #1
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b085      	sub	sp, #20
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bb34:	f023 0307 	bic.w	r3, r3, #7
 800bb38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3714      	adds	r7, #20
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b087      	sub	sp, #28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	460b      	mov	r3, r1
 800bb66:	607a      	str	r2, [r7, #4]
 800bb68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	333c      	adds	r3, #60	; 0x3c
 800bb72:	3304      	adds	r3, #4
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	4a26      	ldr	r2, [pc, #152]	; (800bc14 <USB_EP0_OutStart+0xb8>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d90a      	bls.n	800bb96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb90:	d101      	bne.n	800bb96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	e037      	b.n	800bc06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	2300      	movs	r3, #0
 800bba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bbb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	697a      	ldr	r2, [r7, #20]
 800bbc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbc4:	f043 0318 	orr.w	r3, r3, #24
 800bbc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd0:	691b      	ldr	r3, [r3, #16]
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bbdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bbde:	7afb      	ldrb	r3, [r7, #11]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d10f      	bne.n	800bc04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbea:	461a      	mov	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbfe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bc02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	371c      	adds	r7, #28
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	4f54300a 	.word	0x4f54300a

0800bc18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc20:	2300      	movs	r3, #0
 800bc22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	3301      	adds	r3, #1
 800bc28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bc30:	d901      	bls.n	800bc36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bc32:	2303      	movs	r3, #3
 800bc34:	e01b      	b.n	800bc6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	daf2      	bge.n	800bc24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	f043 0201 	orr.w	r2, r3, #1
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	3301      	adds	r3, #1
 800bc52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bc5a:	d901      	bls.n	800bc60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	e006      	b.n	800bc6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	f003 0301 	and.w	r3, r3, #1
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d0f0      	beq.n	800bc4e <USB_CoreReset+0x36>

  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bc7e:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr
	...

0800bc8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	460b      	mov	r3, r1
 800bc96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bc9c:	f006 fa70 	bl	8012180 <USBD_static_malloc>
 800bca0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d109      	bne.n	800bcbc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	32b0      	adds	r2, #176	; 0xb0
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bcb8:	2302      	movs	r3, #2
 800bcba:	e0d4      	b.n	800be66 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bcbc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	68f8      	ldr	r0, [r7, #12]
 800bcc4:	f006 fd74 	bl	80127b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	32b0      	adds	r2, #176	; 0xb0
 800bcd2:	68f9      	ldr	r1, [r7, #12]
 800bcd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	32b0      	adds	r2, #176	; 0xb0
 800bce2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	7c1b      	ldrb	r3, [r3, #16]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d138      	bne.n	800bd66 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bcf4:	4b5e      	ldr	r3, [pc, #376]	; (800be70 <USBD_CDC_Init+0x1e4>)
 800bcf6:	7819      	ldrb	r1, [r3, #0]
 800bcf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcfc:	2202      	movs	r2, #2
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f006 f91b 	bl	8011f3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bd04:	4b5a      	ldr	r3, [pc, #360]	; (800be70 <USBD_CDC_Init+0x1e4>)
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	f003 020f 	and.w	r2, r3, #15
 800bd0c:	6879      	ldr	r1, [r7, #4]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	440b      	add	r3, r1
 800bd18:	3324      	adds	r3, #36	; 0x24
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bd1e:	4b55      	ldr	r3, [pc, #340]	; (800be74 <USBD_CDC_Init+0x1e8>)
 800bd20:	7819      	ldrb	r1, [r3, #0]
 800bd22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd26:	2202      	movs	r2, #2
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f006 f906 	bl	8011f3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bd2e:	4b51      	ldr	r3, [pc, #324]	; (800be74 <USBD_CDC_Init+0x1e8>)
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	f003 020f 	and.w	r2, r3, #15
 800bd36:	6879      	ldr	r1, [r7, #4]
 800bd38:	4613      	mov	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4413      	add	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	440b      	add	r3, r1
 800bd42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd46:	2201      	movs	r2, #1
 800bd48:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bd4a:	4b4b      	ldr	r3, [pc, #300]	; (800be78 <USBD_CDC_Init+0x1ec>)
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	f003 020f 	and.w	r2, r3, #15
 800bd52:	6879      	ldr	r1, [r7, #4]
 800bd54:	4613      	mov	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	4413      	add	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	440b      	add	r3, r1
 800bd5e:	3326      	adds	r3, #38	; 0x26
 800bd60:	2210      	movs	r2, #16
 800bd62:	801a      	strh	r2, [r3, #0]
 800bd64:	e035      	b.n	800bdd2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bd66:	4b42      	ldr	r3, [pc, #264]	; (800be70 <USBD_CDC_Init+0x1e4>)
 800bd68:	7819      	ldrb	r1, [r3, #0]
 800bd6a:	2340      	movs	r3, #64	; 0x40
 800bd6c:	2202      	movs	r2, #2
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f006 f8e3 	bl	8011f3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bd74:	4b3e      	ldr	r3, [pc, #248]	; (800be70 <USBD_CDC_Init+0x1e4>)
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	f003 020f 	and.w	r2, r3, #15
 800bd7c:	6879      	ldr	r1, [r7, #4]
 800bd7e:	4613      	mov	r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	4413      	add	r3, r2
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	440b      	add	r3, r1
 800bd88:	3324      	adds	r3, #36	; 0x24
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bd8e:	4b39      	ldr	r3, [pc, #228]	; (800be74 <USBD_CDC_Init+0x1e8>)
 800bd90:	7819      	ldrb	r1, [r3, #0]
 800bd92:	2340      	movs	r3, #64	; 0x40
 800bd94:	2202      	movs	r2, #2
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f006 f8cf 	bl	8011f3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bd9c:	4b35      	ldr	r3, [pc, #212]	; (800be74 <USBD_CDC_Init+0x1e8>)
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	f003 020f 	and.w	r2, r3, #15
 800bda4:	6879      	ldr	r1, [r7, #4]
 800bda6:	4613      	mov	r3, r2
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	4413      	add	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	440b      	add	r3, r1
 800bdb0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bdb8:	4b2f      	ldr	r3, [pc, #188]	; (800be78 <USBD_CDC_Init+0x1ec>)
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	f003 020f 	and.w	r2, r3, #15
 800bdc0:	6879      	ldr	r1, [r7, #4]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	4413      	add	r3, r2
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	440b      	add	r3, r1
 800bdcc:	3326      	adds	r3, #38	; 0x26
 800bdce:	2210      	movs	r2, #16
 800bdd0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bdd2:	4b29      	ldr	r3, [pc, #164]	; (800be78 <USBD_CDC_Init+0x1ec>)
 800bdd4:	7819      	ldrb	r1, [r3, #0]
 800bdd6:	2308      	movs	r3, #8
 800bdd8:	2203      	movs	r2, #3
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f006 f8ad 	bl	8011f3a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bde0:	4b25      	ldr	r3, [pc, #148]	; (800be78 <USBD_CDC_Init+0x1ec>)
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	f003 020f 	and.w	r2, r3, #15
 800bde8:	6879      	ldr	r1, [r7, #4]
 800bdea:	4613      	mov	r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4413      	add	r3, r2
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	440b      	add	r3, r1
 800bdf4:	3324      	adds	r3, #36	; 0x24
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	33b0      	adds	r3, #176	; 0xb0
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	4413      	add	r3, r2
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2200      	movs	r2, #0
 800be22:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d101      	bne.n	800be34 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800be30:	2302      	movs	r3, #2
 800be32:	e018      	b.n	800be66 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	7c1b      	ldrb	r3, [r3, #16]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d10a      	bne.n	800be52 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be3c:	4b0d      	ldr	r3, [pc, #52]	; (800be74 <USBD_CDC_Init+0x1e8>)
 800be3e:	7819      	ldrb	r1, [r3, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be46:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f006 f964 	bl	8012118 <USBD_LL_PrepareReceive>
 800be50:	e008      	b.n	800be64 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be52:	4b08      	ldr	r3, [pc, #32]	; (800be74 <USBD_CDC_Init+0x1e8>)
 800be54:	7819      	ldrb	r1, [r3, #0]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be5c:	2340      	movs	r3, #64	; 0x40
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f006 f95a 	bl	8012118 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	2000009b 	.word	0x2000009b
 800be74:	2000009c 	.word	0x2000009c
 800be78:	2000009d 	.word	0x2000009d

0800be7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	460b      	mov	r3, r1
 800be86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800be88:	4b3a      	ldr	r3, [pc, #232]	; (800bf74 <USBD_CDC_DeInit+0xf8>)
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	4619      	mov	r1, r3
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f006 f879 	bl	8011f86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800be94:	4b37      	ldr	r3, [pc, #220]	; (800bf74 <USBD_CDC_DeInit+0xf8>)
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	f003 020f 	and.w	r2, r3, #15
 800be9c:	6879      	ldr	r1, [r7, #4]
 800be9e:	4613      	mov	r3, r2
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	4413      	add	r3, r2
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	440b      	add	r3, r1
 800bea8:	3324      	adds	r3, #36	; 0x24
 800beaa:	2200      	movs	r2, #0
 800beac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800beae:	4b32      	ldr	r3, [pc, #200]	; (800bf78 <USBD_CDC_DeInit+0xfc>)
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	4619      	mov	r1, r3
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f006 f866 	bl	8011f86 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800beba:	4b2f      	ldr	r3, [pc, #188]	; (800bf78 <USBD_CDC_DeInit+0xfc>)
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	f003 020f 	and.w	r2, r3, #15
 800bec2:	6879      	ldr	r1, [r7, #4]
 800bec4:	4613      	mov	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4413      	add	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	440b      	add	r3, r1
 800bece:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bed2:	2200      	movs	r2, #0
 800bed4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bed6:	4b29      	ldr	r3, [pc, #164]	; (800bf7c <USBD_CDC_DeInit+0x100>)
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	4619      	mov	r1, r3
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f006 f852 	bl	8011f86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bee2:	4b26      	ldr	r3, [pc, #152]	; (800bf7c <USBD_CDC_DeInit+0x100>)
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	f003 020f 	and.w	r2, r3, #15
 800beea:	6879      	ldr	r1, [r7, #4]
 800beec:	4613      	mov	r3, r2
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	4413      	add	r3, r2
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	440b      	add	r3, r1
 800bef6:	3324      	adds	r3, #36	; 0x24
 800bef8:	2200      	movs	r2, #0
 800befa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800befc:	4b1f      	ldr	r3, [pc, #124]	; (800bf7c <USBD_CDC_DeInit+0x100>)
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	f003 020f 	and.w	r2, r3, #15
 800bf04:	6879      	ldr	r1, [r7, #4]
 800bf06:	4613      	mov	r3, r2
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	440b      	add	r3, r1
 800bf10:	3326      	adds	r3, #38	; 0x26
 800bf12:	2200      	movs	r2, #0
 800bf14:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	32b0      	adds	r2, #176	; 0xb0
 800bf20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d01f      	beq.n	800bf68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	33b0      	adds	r3, #176	; 0xb0
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4413      	add	r3, r2
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	32b0      	adds	r2, #176	; 0xb0
 800bf46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f006 f926 	bl	801219c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	32b0      	adds	r2, #176	; 0xb0
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	2000009b 	.word	0x2000009b
 800bf78:	2000009c 	.word	0x2000009c
 800bf7c:	2000009d 	.word	0x2000009d

0800bf80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	32b0      	adds	r2, #176	; 0xb0
 800bf94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d101      	bne.n	800bfb0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bfac:	2303      	movs	r3, #3
 800bfae:	e0bf      	b.n	800c130 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d050      	beq.n	800c05e <USBD_CDC_Setup+0xde>
 800bfbc:	2b20      	cmp	r3, #32
 800bfbe:	f040 80af 	bne.w	800c120 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	88db      	ldrh	r3, [r3, #6]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d03a      	beq.n	800c040 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	b25b      	sxtb	r3, r3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	da1b      	bge.n	800c00c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	33b0      	adds	r3, #176	; 0xb0
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	4413      	add	r3, r2
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	683a      	ldr	r2, [r7, #0]
 800bfe8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bfea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	88d2      	ldrh	r2, [r2, #6]
 800bff0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	88db      	ldrh	r3, [r3, #6]
 800bff6:	2b07      	cmp	r3, #7
 800bff8:	bf28      	it	cs
 800bffa:	2307      	movcs	r3, #7
 800bffc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	89fa      	ldrh	r2, [r7, #14]
 800c002:	4619      	mov	r1, r3
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f001 fd89 	bl	800db1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c00a:	e090      	b.n	800c12e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	785a      	ldrb	r2, [r3, #1]
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	88db      	ldrh	r3, [r3, #6]
 800c01a:	2b3f      	cmp	r3, #63	; 0x3f
 800c01c:	d803      	bhi.n	800c026 <USBD_CDC_Setup+0xa6>
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	88db      	ldrh	r3, [r3, #6]
 800c022:	b2da      	uxtb	r2, r3
 800c024:	e000      	b.n	800c028 <USBD_CDC_Setup+0xa8>
 800c026:	2240      	movs	r2, #64	; 0x40
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c02e:	6939      	ldr	r1, [r7, #16]
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c036:	461a      	mov	r2, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f001 fd9b 	bl	800db74 <USBD_CtlPrepareRx>
      break;
 800c03e:	e076      	b.n	800c12e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	33b0      	adds	r3, #176	; 0xb0
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	4413      	add	r3, r2
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	683a      	ldr	r2, [r7, #0]
 800c054:	7850      	ldrb	r0, [r2, #1]
 800c056:	2200      	movs	r2, #0
 800c058:	6839      	ldr	r1, [r7, #0]
 800c05a:	4798      	blx	r3
      break;
 800c05c:	e067      	b.n	800c12e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	785b      	ldrb	r3, [r3, #1]
 800c062:	2b0b      	cmp	r3, #11
 800c064:	d851      	bhi.n	800c10a <USBD_CDC_Setup+0x18a>
 800c066:	a201      	add	r2, pc, #4	; (adr r2, 800c06c <USBD_CDC_Setup+0xec>)
 800c068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06c:	0800c09d 	.word	0x0800c09d
 800c070:	0800c119 	.word	0x0800c119
 800c074:	0800c10b 	.word	0x0800c10b
 800c078:	0800c10b 	.word	0x0800c10b
 800c07c:	0800c10b 	.word	0x0800c10b
 800c080:	0800c10b 	.word	0x0800c10b
 800c084:	0800c10b 	.word	0x0800c10b
 800c088:	0800c10b 	.word	0x0800c10b
 800c08c:	0800c10b 	.word	0x0800c10b
 800c090:	0800c10b 	.word	0x0800c10b
 800c094:	0800c0c7 	.word	0x0800c0c7
 800c098:	0800c0f1 	.word	0x0800c0f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	2b03      	cmp	r3, #3
 800c0a6:	d107      	bne.n	800c0b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c0a8:	f107 030a 	add.w	r3, r7, #10
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f001 fd33 	bl	800db1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0b6:	e032      	b.n	800c11e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f001 fcbd 	bl	800da3a <USBD_CtlError>
            ret = USBD_FAIL;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	75fb      	strb	r3, [r7, #23]
          break;
 800c0c4:	e02b      	b.n	800c11e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	d107      	bne.n	800c0e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c0d2:	f107 030d 	add.w	r3, r7, #13
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	4619      	mov	r1, r3
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f001 fd1e 	bl	800db1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0e0:	e01d      	b.n	800c11e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c0e2:	6839      	ldr	r1, [r7, #0]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f001 fca8 	bl	800da3a <USBD_CtlError>
            ret = USBD_FAIL;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	75fb      	strb	r3, [r7, #23]
          break;
 800c0ee:	e016      	b.n	800c11e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	2b03      	cmp	r3, #3
 800c0fa:	d00f      	beq.n	800c11c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f001 fc9b 	bl	800da3a <USBD_CtlError>
            ret = USBD_FAIL;
 800c104:	2303      	movs	r3, #3
 800c106:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c108:	e008      	b.n	800c11c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c10a:	6839      	ldr	r1, [r7, #0]
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f001 fc94 	bl	800da3a <USBD_CtlError>
          ret = USBD_FAIL;
 800c112:	2303      	movs	r3, #3
 800c114:	75fb      	strb	r3, [r7, #23]
          break;
 800c116:	e002      	b.n	800c11e <USBD_CDC_Setup+0x19e>
          break;
 800c118:	bf00      	nop
 800c11a:	e008      	b.n	800c12e <USBD_CDC_Setup+0x1ae>
          break;
 800c11c:	bf00      	nop
      }
      break;
 800c11e:	e006      	b.n	800c12e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f001 fc89 	bl	800da3a <USBD_CtlError>
      ret = USBD_FAIL;
 800c128:	2303      	movs	r3, #3
 800c12a:	75fb      	strb	r3, [r7, #23]
      break;
 800c12c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c12e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c130:	4618      	mov	r0, r3
 800c132:	3718      	adds	r7, #24
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	460b      	mov	r3, r1
 800c142:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c14a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	32b0      	adds	r2, #176	; 0xb0
 800c156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c15e:	2303      	movs	r3, #3
 800c160:	e065      	b.n	800c22e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	32b0      	adds	r2, #176	; 0xb0
 800c16c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c170:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c172:	78fb      	ldrb	r3, [r7, #3]
 800c174:	f003 020f 	and.w	r2, r3, #15
 800c178:	6879      	ldr	r1, [r7, #4]
 800c17a:	4613      	mov	r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	4413      	add	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	440b      	add	r3, r1
 800c184:	3318      	adds	r3, #24
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d02f      	beq.n	800c1ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c18c:	78fb      	ldrb	r3, [r7, #3]
 800c18e:	f003 020f 	and.w	r2, r3, #15
 800c192:	6879      	ldr	r1, [r7, #4]
 800c194:	4613      	mov	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4413      	add	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	440b      	add	r3, r1
 800c19e:	3318      	adds	r3, #24
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	78fb      	ldrb	r3, [r7, #3]
 800c1a4:	f003 010f 	and.w	r1, r3, #15
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	00db      	lsls	r3, r3, #3
 800c1ae:	440b      	add	r3, r1
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4403      	add	r3, r0
 800c1b4:	331c      	adds	r3, #28
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	fbb2 f1f3 	udiv	r1, r2, r3
 800c1bc:	fb01 f303 	mul.w	r3, r1, r3
 800c1c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d112      	bne.n	800c1ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c1c6:	78fb      	ldrb	r3, [r7, #3]
 800c1c8:	f003 020f 	and.w	r2, r3, #15
 800c1cc:	6879      	ldr	r1, [r7, #4]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	4413      	add	r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	440b      	add	r3, r1
 800c1d8:	3318      	adds	r3, #24
 800c1da:	2200      	movs	r2, #0
 800c1dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c1de:	78f9      	ldrb	r1, [r7, #3]
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f005 ff76 	bl	80120d6 <USBD_LL_Transmit>
 800c1ea:	e01f      	b.n	800c22c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	33b0      	adds	r3, #176	; 0xb0
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	4413      	add	r3, r2
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	691b      	ldr	r3, [r3, #16]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d010      	beq.n	800c22c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	33b0      	adds	r3, #176	; 0xb0
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	4413      	add	r3, r2
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	68ba      	ldr	r2, [r7, #8]
 800c21e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c228:	78fa      	ldrb	r2, [r7, #3]
 800c22a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b084      	sub	sp, #16
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
 800c23e:	460b      	mov	r3, r1
 800c240:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	32b0      	adds	r2, #176	; 0xb0
 800c24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c250:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	32b0      	adds	r2, #176	; 0xb0
 800c25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d101      	bne.n	800c268 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c264:	2303      	movs	r3, #3
 800c266:	e01a      	b.n	800c29e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c268:	78fb      	ldrb	r3, [r7, #3]
 800c26a:	4619      	mov	r1, r3
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f005 ff74 	bl	801215a <USBD_LL_GetRxDataSize>
 800c272:	4602      	mov	r2, r0
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	33b0      	adds	r3, #176	; 0xb0
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	4413      	add	r3, r2
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c298:	4611      	mov	r1, r2
 800c29a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b084      	sub	sp, #16
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	32b0      	adds	r2, #176	; 0xb0
 800c2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d101      	bne.n	800c2c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c2c4:	2303      	movs	r3, #3
 800c2c6:	e025      	b.n	800c314 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	33b0      	adds	r3, #176	; 0xb0
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	4413      	add	r3, r2
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d01a      	beq.n	800c312 <USBD_CDC_EP0_RxReady+0x6c>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c2e2:	2bff      	cmp	r3, #255	; 0xff
 800c2e4:	d015      	beq.n	800c312 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	33b0      	adds	r3, #176	; 0xb0
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	4413      	add	r3, r2
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c2fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c300:	68fa      	ldr	r2, [r7, #12]
 800c302:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c306:	b292      	uxth	r2, r2
 800c308:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	22ff      	movs	r2, #255	; 0xff
 800c30e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c324:	2182      	movs	r1, #130	; 0x82
 800c326:	4818      	ldr	r0, [pc, #96]	; (800c388 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c328:	f000 fd4f 	bl	800cdca <USBD_GetEpDesc>
 800c32c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c32e:	2101      	movs	r1, #1
 800c330:	4815      	ldr	r0, [pc, #84]	; (800c388 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c332:	f000 fd4a 	bl	800cdca <USBD_GetEpDesc>
 800c336:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c338:	2181      	movs	r1, #129	; 0x81
 800c33a:	4813      	ldr	r0, [pc, #76]	; (800c388 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c33c:	f000 fd45 	bl	800cdca <USBD_GetEpDesc>
 800c340:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d002      	beq.n	800c34e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	2210      	movs	r2, #16
 800c34c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d006      	beq.n	800c362 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	2200      	movs	r2, #0
 800c358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c35c:	711a      	strb	r2, [r3, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d006      	beq.n	800c376 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c370:	711a      	strb	r2, [r3, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2243      	movs	r2, #67	; 0x43
 800c37a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c37c:	4b02      	ldr	r3, [pc, #8]	; (800c388 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3718      	adds	r7, #24
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	20000058 	.word	0x20000058

0800c38c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c394:	2182      	movs	r1, #130	; 0x82
 800c396:	4818      	ldr	r0, [pc, #96]	; (800c3f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c398:	f000 fd17 	bl	800cdca <USBD_GetEpDesc>
 800c39c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c39e:	2101      	movs	r1, #1
 800c3a0:	4815      	ldr	r0, [pc, #84]	; (800c3f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c3a2:	f000 fd12 	bl	800cdca <USBD_GetEpDesc>
 800c3a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c3a8:	2181      	movs	r1, #129	; 0x81
 800c3aa:	4813      	ldr	r0, [pc, #76]	; (800c3f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c3ac:	f000 fd0d 	bl	800cdca <USBD_GetEpDesc>
 800c3b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	2210      	movs	r2, #16
 800c3bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d006      	beq.n	800c3d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	711a      	strb	r2, [r3, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f042 0202 	orr.w	r2, r2, #2
 800c3d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d006      	beq.n	800c3e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	711a      	strb	r2, [r3, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f042 0202 	orr.w	r2, r2, #2
 800c3e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2243      	movs	r2, #67	; 0x43
 800c3ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c3ec:	4b02      	ldr	r3, [pc, #8]	; (800c3f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3718      	adds	r7, #24
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	20000058 	.word	0x20000058

0800c3fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c404:	2182      	movs	r1, #130	; 0x82
 800c406:	4818      	ldr	r0, [pc, #96]	; (800c468 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c408:	f000 fcdf 	bl	800cdca <USBD_GetEpDesc>
 800c40c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c40e:	2101      	movs	r1, #1
 800c410:	4815      	ldr	r0, [pc, #84]	; (800c468 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c412:	f000 fcda 	bl	800cdca <USBD_GetEpDesc>
 800c416:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c418:	2181      	movs	r1, #129	; 0x81
 800c41a:	4813      	ldr	r0, [pc, #76]	; (800c468 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c41c:	f000 fcd5 	bl	800cdca <USBD_GetEpDesc>
 800c420:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	2210      	movs	r2, #16
 800c42c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d006      	beq.n	800c442 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	2200      	movs	r2, #0
 800c438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c43c:	711a      	strb	r2, [r3, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d006      	beq.n	800c456 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c450:	711a      	strb	r2, [r3, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2243      	movs	r2, #67	; 0x43
 800c45a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c45c:	4b02      	ldr	r3, [pc, #8]	; (800c468 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3718      	adds	r7, #24
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	20000058 	.word	0x20000058

0800c46c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	220a      	movs	r2, #10
 800c478:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c47a:	4b03      	ldr	r3, [pc, #12]	; (800c488 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	20000014 	.word	0x20000014

0800c48c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d101      	bne.n	800c4a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c49c:	2303      	movs	r3, #3
 800c49e:	e009      	b.n	800c4b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	33b0      	adds	r3, #176	; 0xb0
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c4b2:	2300      	movs	r3, #0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b087      	sub	sp, #28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	32b0      	adds	r2, #176	; 0xb0
 800c4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4da:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d101      	bne.n	800c4e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	e008      	b.n	800c4f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	371c      	adds	r7, #28
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	32b0      	adds	r2, #176	; 0xb0
 800c518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c51c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d101      	bne.n	800c528 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c524:	2303      	movs	r3, #3
 800c526:	e004      	b.n	800c532 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	683a      	ldr	r2, [r7, #0]
 800c52c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c530:	2300      	movs	r3, #0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3714      	adds	r7, #20
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
	...

0800c540 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	32b0      	adds	r2, #176	; 0xb0
 800c552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c556:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c558:	2301      	movs	r3, #1
 800c55a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d101      	bne.n	800c566 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c562:	2303      	movs	r3, #3
 800c564:	e025      	b.n	800c5b2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d11f      	bne.n	800c5b0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	2201      	movs	r2, #1
 800c574:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c578:	4b10      	ldr	r3, [pc, #64]	; (800c5bc <USBD_CDC_TransmitPacket+0x7c>)
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	f003 020f 	and.w	r2, r3, #15
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	4613      	mov	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	4413      	add	r3, r2
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	4403      	add	r3, r0
 800c592:	3318      	adds	r3, #24
 800c594:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c596:	4b09      	ldr	r3, [pc, #36]	; (800c5bc <USBD_CDC_TransmitPacket+0x7c>)
 800c598:	7819      	ldrb	r1, [r3, #0]
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f005 fd95 	bl	80120d6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	2000009b 	.word	0x2000009b

0800c5c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	32b0      	adds	r2, #176	; 0xb0
 800c5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	32b0      	adds	r2, #176	; 0xb0
 800c5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d101      	bne.n	800c5ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c5ea:	2303      	movs	r3, #3
 800c5ec:	e018      	b.n	800c620 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	7c1b      	ldrb	r3, [r3, #16]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d10a      	bne.n	800c60c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c5f6:	4b0c      	ldr	r3, [pc, #48]	; (800c628 <USBD_CDC_ReceivePacket+0x68>)
 800c5f8:	7819      	ldrb	r1, [r3, #0]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c600:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f005 fd87 	bl	8012118 <USBD_LL_PrepareReceive>
 800c60a:	e008      	b.n	800c61e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c60c:	4b06      	ldr	r3, [pc, #24]	; (800c628 <USBD_CDC_ReceivePacket+0x68>)
 800c60e:	7819      	ldrb	r1, [r3, #0]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c616:	2340      	movs	r3, #64	; 0x40
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f005 fd7d 	bl	8012118 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	2000009c 	.word	0x2000009c

0800c62c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b086      	sub	sp, #24
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	4613      	mov	r3, r2
 800c638:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d101      	bne.n	800c644 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c640:	2303      	movs	r3, #3
 800c642:	e01f      	b.n	800c684 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2200      	movs	r2, #0
 800c648:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2200      	movs	r2, #0
 800c658:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2201      	movs	r2, #1
 800c66e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	79fa      	ldrb	r2, [r7, #7]
 800c676:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f005 fbf7 	bl	8011e6c <USBD_LL_Init>
 800c67e:	4603      	mov	r3, r0
 800c680:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c682:	7dfb      	ldrb	r3, [r7, #23]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3718      	adds	r7, #24
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c696:	2300      	movs	r3, #0
 800c698:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d101      	bne.n	800c6a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e025      	b.n	800c6f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	32ae      	adds	r2, #174	; 0xae
 800c6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00f      	beq.n	800c6e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	32ae      	adds	r2, #174	; 0xae
 800c6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d0:	f107 020e 	add.w	r2, r7, #14
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	4798      	blx	r3
 800c6d8:	4602      	mov	r2, r0
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c6e6:	1c5a      	adds	r2, r3, #1
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f005 fbff 	bl	8011f04 <USBD_LL_Start>
 800c706:	4603      	mov	r3, r0
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c718:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	370c      	adds	r7, #12
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b084      	sub	sp, #16
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	460b      	mov	r3, r1
 800c730:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c732:	2300      	movs	r3, #0
 800c734:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d009      	beq.n	800c754 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	78fa      	ldrb	r2, [r7, #3]
 800c74a:	4611      	mov	r1, r2
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	4798      	blx	r3
 800c750:	4603      	mov	r3, r0
 800c752:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c754:	7bfb      	ldrb	r3, [r7, #15]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b084      	sub	sp, #16
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	460b      	mov	r3, r1
 800c768:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c76a:	2300      	movs	r3, #0
 800c76c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	78fa      	ldrb	r2, [r7, #3]
 800c778:	4611      	mov	r1, r2
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	4798      	blx	r3
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d001      	beq.n	800c788 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c784:	2303      	movs	r3, #3
 800c786:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c788:	7bfb      	ldrb	r3, [r7, #15]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b084      	sub	sp, #16
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f001 f90e 	bl	800d9c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c7c6:	f003 031f 	and.w	r3, r3, #31
 800c7ca:	2b02      	cmp	r3, #2
 800c7cc:	d01a      	beq.n	800c804 <USBD_LL_SetupStage+0x72>
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d822      	bhi.n	800c818 <USBD_LL_SetupStage+0x86>
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d002      	beq.n	800c7dc <USBD_LL_SetupStage+0x4a>
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d00a      	beq.n	800c7f0 <USBD_LL_SetupStage+0x5e>
 800c7da:	e01d      	b.n	800c818 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 fb65 	bl	800ceb4 <USBD_StdDevReq>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ee:	e020      	b.n	800c832 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 fbcd 	bl	800cf98 <USBD_StdItfReq>
 800c7fe:	4603      	mov	r3, r0
 800c800:	73fb      	strb	r3, [r7, #15]
      break;
 800c802:	e016      	b.n	800c832 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c80a:	4619      	mov	r1, r3
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 fc2f 	bl	800d070 <USBD_StdEPReq>
 800c812:	4603      	mov	r3, r0
 800c814:	73fb      	strb	r3, [r7, #15]
      break;
 800c816:	e00c      	b.n	800c832 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c81e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c822:	b2db      	uxtb	r3, r3
 800c824:	4619      	mov	r1, r3
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f005 fbcc 	bl	8011fc4 <USBD_LL_StallEP>
 800c82c:	4603      	mov	r3, r0
 800c82e:	73fb      	strb	r3, [r7, #15]
      break;
 800c830:	bf00      	nop
  }

  return ret;
 800c832:	7bfb      	ldrb	r3, [r7, #15]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	460b      	mov	r3, r1
 800c846:	607a      	str	r2, [r7, #4]
 800c848:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c84a:	2300      	movs	r3, #0
 800c84c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c84e:	7afb      	ldrb	r3, [r7, #11]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d16e      	bne.n	800c932 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c85a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c862:	2b03      	cmp	r3, #3
 800c864:	f040 8098 	bne.w	800c998 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	689a      	ldr	r2, [r3, #8]
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	429a      	cmp	r2, r3
 800c872:	d913      	bls.n	800c89c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	689a      	ldr	r2, [r3, #8]
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	1ad2      	subs	r2, r2, r3
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	68da      	ldr	r2, [r3, #12]
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	4293      	cmp	r3, r2
 800c88c:	bf28      	it	cs
 800c88e:	4613      	movcs	r3, r2
 800c890:	461a      	mov	r2, r3
 800c892:	6879      	ldr	r1, [r7, #4]
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f001 f98a 	bl	800dbae <USBD_CtlContinueRx>
 800c89a:	e07d      	b.n	800c998 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c8a2:	f003 031f 	and.w	r3, r3, #31
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d014      	beq.n	800c8d4 <USBD_LL_DataOutStage+0x98>
 800c8aa:	2b02      	cmp	r3, #2
 800c8ac:	d81d      	bhi.n	800c8ea <USBD_LL_DataOutStage+0xae>
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d002      	beq.n	800c8b8 <USBD_LL_DataOutStage+0x7c>
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d003      	beq.n	800c8be <USBD_LL_DataOutStage+0x82>
 800c8b6:	e018      	b.n	800c8ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	75bb      	strb	r3, [r7, #22]
            break;
 800c8bc:	e018      	b.n	800c8f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f000 fa64 	bl	800cd96 <USBD_CoreFindIF>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	75bb      	strb	r3, [r7, #22]
            break;
 800c8d2:	e00d      	b.n	800c8f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	4619      	mov	r1, r3
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f000 fa66 	bl	800cdb0 <USBD_CoreFindEP>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	75bb      	strb	r3, [r7, #22]
            break;
 800c8e8:	e002      	b.n	800c8f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	75bb      	strb	r3, [r7, #22]
            break;
 800c8ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c8f0:	7dbb      	ldrb	r3, [r7, #22]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d119      	bne.n	800c92a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	2b03      	cmp	r3, #3
 800c900:	d113      	bne.n	800c92a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c902:	7dba      	ldrb	r2, [r7, #22]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	32ae      	adds	r2, #174	; 0xae
 800c908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c90c:	691b      	ldr	r3, [r3, #16]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00b      	beq.n	800c92a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c912:	7dba      	ldrb	r2, [r7, #22]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c91a:	7dba      	ldrb	r2, [r7, #22]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	32ae      	adds	r2, #174	; 0xae
 800c920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f001 f950 	bl	800dbd0 <USBD_CtlSendStatus>
 800c930:	e032      	b.n	800c998 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c932:	7afb      	ldrb	r3, [r7, #11]
 800c934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	4619      	mov	r1, r3
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	f000 fa37 	bl	800cdb0 <USBD_CoreFindEP>
 800c942:	4603      	mov	r3, r0
 800c944:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c946:	7dbb      	ldrb	r3, [r7, #22]
 800c948:	2bff      	cmp	r3, #255	; 0xff
 800c94a:	d025      	beq.n	800c998 <USBD_LL_DataOutStage+0x15c>
 800c94c:	7dbb      	ldrb	r3, [r7, #22]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d122      	bne.n	800c998 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b03      	cmp	r3, #3
 800c95c:	d117      	bne.n	800c98e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c95e:	7dba      	ldrb	r2, [r7, #22]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	32ae      	adds	r2, #174	; 0xae
 800c964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c968:	699b      	ldr	r3, [r3, #24]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00f      	beq.n	800c98e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c96e:	7dba      	ldrb	r2, [r7, #22]
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c976:	7dba      	ldrb	r2, [r7, #22]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	32ae      	adds	r2, #174	; 0xae
 800c97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	7afa      	ldrb	r2, [r7, #11]
 800c984:	4611      	mov	r1, r2
 800c986:	68f8      	ldr	r0, [r7, #12]
 800c988:	4798      	blx	r3
 800c98a:	4603      	mov	r3, r0
 800c98c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d001      	beq.n	800c998 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c994:	7dfb      	ldrb	r3, [r7, #23]
 800c996:	e000      	b.n	800c99a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3718      	adds	r7, #24
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b086      	sub	sp, #24
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	60f8      	str	r0, [r7, #12]
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	607a      	str	r2, [r7, #4]
 800c9ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c9b0:	7afb      	ldrb	r3, [r7, #11]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d16f      	bne.n	800ca96 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	3314      	adds	r3, #20
 800c9ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	d15a      	bne.n	800ca7c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	689a      	ldr	r2, [r3, #8]
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	68db      	ldr	r3, [r3, #12]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d914      	bls.n	800c9fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	689a      	ldr	r2, [r3, #8]
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	1ad2      	subs	r2, r2, r3
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	6879      	ldr	r1, [r7, #4]
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f001 f8b2 	bl	800db52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f005 fb8f 	bl	8012118 <USBD_LL_PrepareReceive>
 800c9fa:	e03f      	b.n	800ca7c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	68da      	ldr	r2, [r3, #12]
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d11c      	bne.n	800ca42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d316      	bcc.n	800ca42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	685a      	ldr	r2, [r3, #4]
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d20f      	bcs.n	800ca42 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ca22:	2200      	movs	r2, #0
 800ca24:	2100      	movs	r1, #0
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	f001 f893 	bl	800db52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca34:	2300      	movs	r3, #0
 800ca36:	2200      	movs	r2, #0
 800ca38:	2100      	movs	r1, #0
 800ca3a:	68f8      	ldr	r0, [r7, #12]
 800ca3c:	f005 fb6c 	bl	8012118 <USBD_LL_PrepareReceive>
 800ca40:	e01c      	b.n	800ca7c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	2b03      	cmp	r3, #3
 800ca4c:	d10f      	bne.n	800ca6e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca54:	68db      	ldr	r3, [r3, #12]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d009      	beq.n	800ca6e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	68f8      	ldr	r0, [r7, #12]
 800ca6c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca6e:	2180      	movs	r1, #128	; 0x80
 800ca70:	68f8      	ldr	r0, [r7, #12]
 800ca72:	f005 faa7 	bl	8011fc4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f001 f8bd 	bl	800dbf6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d03a      	beq.n	800cafc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ca86:	68f8      	ldr	r0, [r7, #12]
 800ca88:	f7ff fe42 	bl	800c710 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ca94:	e032      	b.n	800cafc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ca96:	7afb      	ldrb	r3, [r7, #11]
 800ca98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	4619      	mov	r1, r3
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f000 f985 	bl	800cdb0 <USBD_CoreFindEP>
 800caa6:	4603      	mov	r3, r0
 800caa8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800caaa:	7dfb      	ldrb	r3, [r7, #23]
 800caac:	2bff      	cmp	r3, #255	; 0xff
 800caae:	d025      	beq.n	800cafc <USBD_LL_DataInStage+0x15a>
 800cab0:	7dfb      	ldrb	r3, [r7, #23]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d122      	bne.n	800cafc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	2b03      	cmp	r3, #3
 800cac0:	d11c      	bne.n	800cafc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cac2:	7dfa      	ldrb	r2, [r7, #23]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	32ae      	adds	r2, #174	; 0xae
 800cac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d014      	beq.n	800cafc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cad2:	7dfa      	ldrb	r2, [r7, #23]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cada:	7dfa      	ldrb	r2, [r7, #23]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	32ae      	adds	r2, #174	; 0xae
 800cae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cae4:	695b      	ldr	r3, [r3, #20]
 800cae6:	7afa      	ldrb	r2, [r7, #11]
 800cae8:	4611      	mov	r1, r2
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	4798      	blx	r3
 800caee:	4603      	mov	r3, r0
 800caf0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800caf2:	7dbb      	ldrb	r3, [r7, #22]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800caf8:	7dbb      	ldrb	r3, [r7, #22]
 800cafa:	e000      	b.n	800cafe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3718      	adds	r7, #24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b084      	sub	sp, #16
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2201      	movs	r2, #1
 800cb16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d014      	beq.n	800cb6c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00e      	beq.n	800cb6c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	6852      	ldr	r2, [r2, #4]
 800cb5a:	b2d2      	uxtb	r2, r2
 800cb5c:	4611      	mov	r1, r2
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	4798      	blx	r3
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d001      	beq.n	800cb6c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cb68:	2303      	movs	r3, #3
 800cb6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb6c:	2340      	movs	r3, #64	; 0x40
 800cb6e:	2200      	movs	r2, #0
 800cb70:	2100      	movs	r1, #0
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f005 f9e1 	bl	8011f3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2240      	movs	r2, #64	; 0x40
 800cb84:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb88:	2340      	movs	r3, #64	; 0x40
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	2180      	movs	r1, #128	; 0x80
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f005 f9d3 	bl	8011f3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2201      	movs	r2, #1
 800cb98:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2240      	movs	r2, #64	; 0x40
 800cb9e:	621a      	str	r2, [r3, #32]

  return ret;
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cbaa:	b480      	push	{r7}
 800cbac:	b083      	sub	sp, #12
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	78fa      	ldrb	r2, [r7, #3]
 800cbba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cbbc:	2300      	movs	r3, #0
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	370c      	adds	r7, #12
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr

0800cbca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cbca:	b480      	push	{r7}
 800cbcc:	b083      	sub	sp, #12
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	2b04      	cmp	r3, #4
 800cbdc:	d006      	beq.n	800cbec <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbe4:	b2da      	uxtb	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2204      	movs	r2, #4
 800cbf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cc02:	b480      	push	{r7}
 800cc04:	b083      	sub	sp, #12
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	2b04      	cmp	r3, #4
 800cc14:	d106      	bne.n	800cc24 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cc1c:	b2da      	uxtb	r2, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	370c      	adds	r7, #12
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr

0800cc32 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b082      	sub	sp, #8
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	2b03      	cmp	r3, #3
 800cc44:	d110      	bne.n	800cc68 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d00b      	beq.n	800cc68 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc56:	69db      	ldr	r3, [r3, #28]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d005      	beq.n	800cc68 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc62:	69db      	ldr	r3, [r3, #28]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cc68:	2300      	movs	r3, #0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3708      	adds	r7, #8
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b082      	sub	sp, #8
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	32ae      	adds	r2, #174	; 0xae
 800cc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d101      	bne.n	800cc94 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cc90:	2303      	movs	r3, #3
 800cc92:	e01c      	b.n	800ccce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	2b03      	cmp	r3, #3
 800cc9e:	d115      	bne.n	800cccc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	32ae      	adds	r2, #174	; 0xae
 800ccaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccae:	6a1b      	ldr	r3, [r3, #32]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00b      	beq.n	800cccc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	32ae      	adds	r2, #174	; 0xae
 800ccbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc2:	6a1b      	ldr	r3, [r3, #32]
 800ccc4:	78fa      	ldrb	r2, [r7, #3]
 800ccc6:	4611      	mov	r1, r2
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b082      	sub	sp, #8
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	460b      	mov	r3, r1
 800cce0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	32ae      	adds	r2, #174	; 0xae
 800ccec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d101      	bne.n	800ccf8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ccf4:	2303      	movs	r3, #3
 800ccf6:	e01c      	b.n	800cd32 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	2b03      	cmp	r3, #3
 800cd02:	d115      	bne.n	800cd30 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	32ae      	adds	r2, #174	; 0xae
 800cd0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00b      	beq.n	800cd30 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	32ae      	adds	r2, #174	; 0xae
 800cd22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd28:	78fa      	ldrb	r2, [r7, #3]
 800cd2a:	4611      	mov	r1, r2
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cd30:	2300      	movs	r3, #0
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3708      	adds	r7, #8
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cd3a:	b480      	push	{r7}
 800cd3c:	b083      	sub	sp, #12
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	370c      	adds	r7, #12
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr

0800cd50 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00e      	beq.n	800cd8c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	6852      	ldr	r2, [r2, #4]
 800cd7a:	b2d2      	uxtb	r2, r2
 800cd7c:	4611      	mov	r1, r2
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	4798      	blx	r3
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d001      	beq.n	800cd8c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cd88:	2303      	movs	r3, #3
 800cd8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3710      	adds	r7, #16
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cd96:	b480      	push	{r7}
 800cd98:	b083      	sub	sp, #12
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	460b      	mov	r3, r1
 800cda0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cda2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cdbc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	370c      	adds	r7, #12
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr

0800cdca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cdca:	b580      	push	{r7, lr}
 800cdcc:	b086      	sub	sp, #24
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cdde:	2300      	movs	r3, #0
 800cde0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	885b      	ldrh	r3, [r3, #2]
 800cde6:	b29a      	uxth	r2, r3
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d920      	bls.n	800ce34 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cdfa:	e013      	b.n	800ce24 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cdfc:	f107 030a 	add.w	r3, r7, #10
 800ce00:	4619      	mov	r1, r3
 800ce02:	6978      	ldr	r0, [r7, #20]
 800ce04:	f000 f81b 	bl	800ce3e <USBD_GetNextDesc>
 800ce08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	785b      	ldrb	r3, [r3, #1]
 800ce0e:	2b05      	cmp	r3, #5
 800ce10:	d108      	bne.n	800ce24 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	789b      	ldrb	r3, [r3, #2]
 800ce1a:	78fa      	ldrb	r2, [r7, #3]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d008      	beq.n	800ce32 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ce20:	2300      	movs	r3, #0
 800ce22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	885b      	ldrh	r3, [r3, #2]
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	897b      	ldrh	r3, [r7, #10]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d8e5      	bhi.n	800cdfc <USBD_GetEpDesc+0x32>
 800ce30:	e000      	b.n	800ce34 <USBD_GetEpDesc+0x6a>
          break;
 800ce32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ce34:	693b      	ldr	r3, [r7, #16]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3718      	adds	r7, #24
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ce3e:	b480      	push	{r7}
 800ce40:	b085      	sub	sp, #20
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
 800ce46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	881a      	ldrh	r2, [r3, #0]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	4413      	add	r3, r2
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	461a      	mov	r2, r3
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	4413      	add	r3, r2
 800ce68:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3714      	adds	r7, #20
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b087      	sub	sp, #28
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ce96:	8a3b      	ldrh	r3, [r7, #16]
 800ce98:	021b      	lsls	r3, r3, #8
 800ce9a:	b21a      	sxth	r2, r3
 800ce9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cea0:	4313      	orrs	r3, r2
 800cea2:	b21b      	sxth	r3, r3
 800cea4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cea6:	89fb      	ldrh	r3, [r7, #14]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	371c      	adds	r7, #28
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cebe:	2300      	movs	r3, #0
 800cec0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ceca:	2b40      	cmp	r3, #64	; 0x40
 800cecc:	d005      	beq.n	800ceda <USBD_StdDevReq+0x26>
 800cece:	2b40      	cmp	r3, #64	; 0x40
 800ced0:	d857      	bhi.n	800cf82 <USBD_StdDevReq+0xce>
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00f      	beq.n	800cef6 <USBD_StdDevReq+0x42>
 800ced6:	2b20      	cmp	r3, #32
 800ced8:	d153      	bne.n	800cf82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	32ae      	adds	r2, #174	; 0xae
 800cee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	6839      	ldr	r1, [r7, #0]
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	4798      	blx	r3
 800cef0:	4603      	mov	r3, r0
 800cef2:	73fb      	strb	r3, [r7, #15]
      break;
 800cef4:	e04a      	b.n	800cf8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	785b      	ldrb	r3, [r3, #1]
 800cefa:	2b09      	cmp	r3, #9
 800cefc:	d83b      	bhi.n	800cf76 <USBD_StdDevReq+0xc2>
 800cefe:	a201      	add	r2, pc, #4	; (adr r2, 800cf04 <USBD_StdDevReq+0x50>)
 800cf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf04:	0800cf59 	.word	0x0800cf59
 800cf08:	0800cf6d 	.word	0x0800cf6d
 800cf0c:	0800cf77 	.word	0x0800cf77
 800cf10:	0800cf63 	.word	0x0800cf63
 800cf14:	0800cf77 	.word	0x0800cf77
 800cf18:	0800cf37 	.word	0x0800cf37
 800cf1c:	0800cf2d 	.word	0x0800cf2d
 800cf20:	0800cf77 	.word	0x0800cf77
 800cf24:	0800cf4f 	.word	0x0800cf4f
 800cf28:	0800cf41 	.word	0x0800cf41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cf2c:	6839      	ldr	r1, [r7, #0]
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fa3c 	bl	800d3ac <USBD_GetDescriptor>
          break;
 800cf34:	e024      	b.n	800cf80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cf36:	6839      	ldr	r1, [r7, #0]
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 fba1 	bl	800d680 <USBD_SetAddress>
          break;
 800cf3e:	e01f      	b.n	800cf80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cf40:	6839      	ldr	r1, [r7, #0]
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fbe0 	bl	800d708 <USBD_SetConfig>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	73fb      	strb	r3, [r7, #15]
          break;
 800cf4c:	e018      	b.n	800cf80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf4e:	6839      	ldr	r1, [r7, #0]
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 fc83 	bl	800d85c <USBD_GetConfig>
          break;
 800cf56:	e013      	b.n	800cf80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cf58:	6839      	ldr	r1, [r7, #0]
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 fcb4 	bl	800d8c8 <USBD_GetStatus>
          break;
 800cf60:	e00e      	b.n	800cf80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cf62:	6839      	ldr	r1, [r7, #0]
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 fce3 	bl	800d930 <USBD_SetFeature>
          break;
 800cf6a:	e009      	b.n	800cf80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cf6c:	6839      	ldr	r1, [r7, #0]
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 fd07 	bl	800d982 <USBD_ClrFeature>
          break;
 800cf74:	e004      	b.n	800cf80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cf76:	6839      	ldr	r1, [r7, #0]
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 fd5e 	bl	800da3a <USBD_CtlError>
          break;
 800cf7e:	bf00      	nop
      }
      break;
 800cf80:	e004      	b.n	800cf8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cf82:	6839      	ldr	r1, [r7, #0]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 fd58 	bl	800da3a <USBD_CtlError>
      break;
 800cf8a:	bf00      	nop
  }

  return ret;
 800cf8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop

0800cf98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cfae:	2b40      	cmp	r3, #64	; 0x40
 800cfb0:	d005      	beq.n	800cfbe <USBD_StdItfReq+0x26>
 800cfb2:	2b40      	cmp	r3, #64	; 0x40
 800cfb4:	d852      	bhi.n	800d05c <USBD_StdItfReq+0xc4>
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d001      	beq.n	800cfbe <USBD_StdItfReq+0x26>
 800cfba:	2b20      	cmp	r3, #32
 800cfbc:	d14e      	bne.n	800d05c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	3b01      	subs	r3, #1
 800cfc8:	2b02      	cmp	r3, #2
 800cfca:	d840      	bhi.n	800d04e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	889b      	ldrh	r3, [r3, #4]
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d836      	bhi.n	800d044 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	889b      	ldrh	r3, [r3, #4]
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7ff fed9 	bl	800cd96 <USBD_CoreFindIF>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cfe8:	7bbb      	ldrb	r3, [r7, #14]
 800cfea:	2bff      	cmp	r3, #255	; 0xff
 800cfec:	d01d      	beq.n	800d02a <USBD_StdItfReq+0x92>
 800cfee:	7bbb      	ldrb	r3, [r7, #14]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d11a      	bne.n	800d02a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cff4:	7bba      	ldrb	r2, [r7, #14]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	32ae      	adds	r2, #174	; 0xae
 800cffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d00f      	beq.n	800d024 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d004:	7bba      	ldrb	r2, [r7, #14]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d00c:	7bba      	ldrb	r2, [r7, #14]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	32ae      	adds	r2, #174	; 0xae
 800d012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	4798      	blx	r3
 800d01e:	4603      	mov	r3, r0
 800d020:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d022:	e004      	b.n	800d02e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d024:	2303      	movs	r3, #3
 800d026:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d028:	e001      	b.n	800d02e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d02a:	2303      	movs	r3, #3
 800d02c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	88db      	ldrh	r3, [r3, #6]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d110      	bne.n	800d058 <USBD_StdItfReq+0xc0>
 800d036:	7bfb      	ldrb	r3, [r7, #15]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d10d      	bne.n	800d058 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fdc7 	bl	800dbd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d042:	e009      	b.n	800d058 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d044:	6839      	ldr	r1, [r7, #0]
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 fcf7 	bl	800da3a <USBD_CtlError>
          break;
 800d04c:	e004      	b.n	800d058 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d04e:	6839      	ldr	r1, [r7, #0]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 fcf2 	bl	800da3a <USBD_CtlError>
          break;
 800d056:	e000      	b.n	800d05a <USBD_StdItfReq+0xc2>
          break;
 800d058:	bf00      	nop
      }
      break;
 800d05a:	e004      	b.n	800d066 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fceb 	bl	800da3a <USBD_CtlError>
      break;
 800d064:	bf00      	nop
  }

  return ret;
 800d066:	7bfb      	ldrb	r3, [r7, #15]
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	889b      	ldrh	r3, [r3, #4]
 800d082:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d08c:	2b40      	cmp	r3, #64	; 0x40
 800d08e:	d007      	beq.n	800d0a0 <USBD_StdEPReq+0x30>
 800d090:	2b40      	cmp	r3, #64	; 0x40
 800d092:	f200 817f 	bhi.w	800d394 <USBD_StdEPReq+0x324>
 800d096:	2b00      	cmp	r3, #0
 800d098:	d02a      	beq.n	800d0f0 <USBD_StdEPReq+0x80>
 800d09a:	2b20      	cmp	r3, #32
 800d09c:	f040 817a 	bne.w	800d394 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d0a0:	7bbb      	ldrb	r3, [r7, #14]
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7ff fe83 	bl	800cdb0 <USBD_CoreFindEP>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0ae:	7b7b      	ldrb	r3, [r7, #13]
 800d0b0:	2bff      	cmp	r3, #255	; 0xff
 800d0b2:	f000 8174 	beq.w	800d39e <USBD_StdEPReq+0x32e>
 800d0b6:	7b7b      	ldrb	r3, [r7, #13]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f040 8170 	bne.w	800d39e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d0be:	7b7a      	ldrb	r2, [r7, #13]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d0c6:	7b7a      	ldrb	r2, [r7, #13]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	32ae      	adds	r2, #174	; 0xae
 800d0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f000 8163 	beq.w	800d39e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d0d8:	7b7a      	ldrb	r2, [r7, #13]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	32ae      	adds	r2, #174	; 0xae
 800d0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	6839      	ldr	r1, [r7, #0]
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	4798      	blx	r3
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d0ee:	e156      	b.n	800d39e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	785b      	ldrb	r3, [r3, #1]
 800d0f4:	2b03      	cmp	r3, #3
 800d0f6:	d008      	beq.n	800d10a <USBD_StdEPReq+0x9a>
 800d0f8:	2b03      	cmp	r3, #3
 800d0fa:	f300 8145 	bgt.w	800d388 <USBD_StdEPReq+0x318>
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f000 809b 	beq.w	800d23a <USBD_StdEPReq+0x1ca>
 800d104:	2b01      	cmp	r3, #1
 800d106:	d03c      	beq.n	800d182 <USBD_StdEPReq+0x112>
 800d108:	e13e      	b.n	800d388 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d110:	b2db      	uxtb	r3, r3
 800d112:	2b02      	cmp	r3, #2
 800d114:	d002      	beq.n	800d11c <USBD_StdEPReq+0xac>
 800d116:	2b03      	cmp	r3, #3
 800d118:	d016      	beq.n	800d148 <USBD_StdEPReq+0xd8>
 800d11a:	e02c      	b.n	800d176 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d11c:	7bbb      	ldrb	r3, [r7, #14]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00d      	beq.n	800d13e <USBD_StdEPReq+0xce>
 800d122:	7bbb      	ldrb	r3, [r7, #14]
 800d124:	2b80      	cmp	r3, #128	; 0x80
 800d126:	d00a      	beq.n	800d13e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d128:	7bbb      	ldrb	r3, [r7, #14]
 800d12a:	4619      	mov	r1, r3
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f004 ff49 	bl	8011fc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d132:	2180      	movs	r1, #128	; 0x80
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f004 ff45 	bl	8011fc4 <USBD_LL_StallEP>
 800d13a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d13c:	e020      	b.n	800d180 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d13e:	6839      	ldr	r1, [r7, #0]
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 fc7a 	bl	800da3a <USBD_CtlError>
              break;
 800d146:	e01b      	b.n	800d180 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	885b      	ldrh	r3, [r3, #2]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10e      	bne.n	800d16e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d150:	7bbb      	ldrb	r3, [r7, #14]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d00b      	beq.n	800d16e <USBD_StdEPReq+0xfe>
 800d156:	7bbb      	ldrb	r3, [r7, #14]
 800d158:	2b80      	cmp	r3, #128	; 0x80
 800d15a:	d008      	beq.n	800d16e <USBD_StdEPReq+0xfe>
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	88db      	ldrh	r3, [r3, #6]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d104      	bne.n	800d16e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d164:	7bbb      	ldrb	r3, [r7, #14]
 800d166:	4619      	mov	r1, r3
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f004 ff2b 	bl	8011fc4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 fd2e 	bl	800dbd0 <USBD_CtlSendStatus>

              break;
 800d174:	e004      	b.n	800d180 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d176:	6839      	ldr	r1, [r7, #0]
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 fc5e 	bl	800da3a <USBD_CtlError>
              break;
 800d17e:	bf00      	nop
          }
          break;
 800d180:	e107      	b.n	800d392 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	2b02      	cmp	r3, #2
 800d18c:	d002      	beq.n	800d194 <USBD_StdEPReq+0x124>
 800d18e:	2b03      	cmp	r3, #3
 800d190:	d016      	beq.n	800d1c0 <USBD_StdEPReq+0x150>
 800d192:	e04b      	b.n	800d22c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d194:	7bbb      	ldrb	r3, [r7, #14]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00d      	beq.n	800d1b6 <USBD_StdEPReq+0x146>
 800d19a:	7bbb      	ldrb	r3, [r7, #14]
 800d19c:	2b80      	cmp	r3, #128	; 0x80
 800d19e:	d00a      	beq.n	800d1b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1a0:	7bbb      	ldrb	r3, [r7, #14]
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f004 ff0d 	bl	8011fc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1aa:	2180      	movs	r1, #128	; 0x80
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f004 ff09 	bl	8011fc4 <USBD_LL_StallEP>
 800d1b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d1b4:	e040      	b.n	800d238 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d1b6:	6839      	ldr	r1, [r7, #0]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 fc3e 	bl	800da3a <USBD_CtlError>
              break;
 800d1be:	e03b      	b.n	800d238 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	885b      	ldrh	r3, [r3, #2]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d136      	bne.n	800d236 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d1c8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d004      	beq.n	800d1dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d1d2:	7bbb      	ldrb	r3, [r7, #14]
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f004 ff13 	bl	8012002 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 fcf7 	bl	800dbd0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d1e2:	7bbb      	ldrb	r3, [r7, #14]
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7ff fde2 	bl	800cdb0 <USBD_CoreFindEP>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1f0:	7b7b      	ldrb	r3, [r7, #13]
 800d1f2:	2bff      	cmp	r3, #255	; 0xff
 800d1f4:	d01f      	beq.n	800d236 <USBD_StdEPReq+0x1c6>
 800d1f6:	7b7b      	ldrb	r3, [r7, #13]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d11c      	bne.n	800d236 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d1fc:	7b7a      	ldrb	r2, [r7, #13]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d204:	7b7a      	ldrb	r2, [r7, #13]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	32ae      	adds	r2, #174	; 0xae
 800d20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d010      	beq.n	800d236 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d214:	7b7a      	ldrb	r2, [r7, #13]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	32ae      	adds	r2, #174	; 0xae
 800d21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	6839      	ldr	r1, [r7, #0]
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	4798      	blx	r3
 800d226:	4603      	mov	r3, r0
 800d228:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d22a:	e004      	b.n	800d236 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d22c:	6839      	ldr	r1, [r7, #0]
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 fc03 	bl	800da3a <USBD_CtlError>
              break;
 800d234:	e000      	b.n	800d238 <USBD_StdEPReq+0x1c8>
              break;
 800d236:	bf00      	nop
          }
          break;
 800d238:	e0ab      	b.n	800d392 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d240:	b2db      	uxtb	r3, r3
 800d242:	2b02      	cmp	r3, #2
 800d244:	d002      	beq.n	800d24c <USBD_StdEPReq+0x1dc>
 800d246:	2b03      	cmp	r3, #3
 800d248:	d032      	beq.n	800d2b0 <USBD_StdEPReq+0x240>
 800d24a:	e097      	b.n	800d37c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d24c:	7bbb      	ldrb	r3, [r7, #14]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d007      	beq.n	800d262 <USBD_StdEPReq+0x1f2>
 800d252:	7bbb      	ldrb	r3, [r7, #14]
 800d254:	2b80      	cmp	r3, #128	; 0x80
 800d256:	d004      	beq.n	800d262 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d258:	6839      	ldr	r1, [r7, #0]
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 fbed 	bl	800da3a <USBD_CtlError>
                break;
 800d260:	e091      	b.n	800d386 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d266:	2b00      	cmp	r3, #0
 800d268:	da0b      	bge.n	800d282 <USBD_StdEPReq+0x212>
 800d26a:	7bbb      	ldrb	r3, [r7, #14]
 800d26c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d270:	4613      	mov	r3, r2
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	4413      	add	r3, r2
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	3310      	adds	r3, #16
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	4413      	add	r3, r2
 800d27e:	3304      	adds	r3, #4
 800d280:	e00b      	b.n	800d29a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d282:	7bbb      	ldrb	r3, [r7, #14]
 800d284:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d288:	4613      	mov	r3, r2
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	4413      	add	r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	4413      	add	r3, r2
 800d298:	3304      	adds	r3, #4
 800d29a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	2202      	movs	r2, #2
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 fc37 	bl	800db1c <USBD_CtlSendData>
              break;
 800d2ae:	e06a      	b.n	800d386 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d2b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	da11      	bge.n	800d2dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d2b8:	7bbb      	ldrb	r3, [r7, #14]
 800d2ba:	f003 020f 	and.w	r2, r3, #15
 800d2be:	6879      	ldr	r1, [r7, #4]
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	4413      	add	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	440b      	add	r3, r1
 800d2ca:	3324      	adds	r3, #36	; 0x24
 800d2cc:	881b      	ldrh	r3, [r3, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d117      	bne.n	800d302 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d2d2:	6839      	ldr	r1, [r7, #0]
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 fbb0 	bl	800da3a <USBD_CtlError>
                  break;
 800d2da:	e054      	b.n	800d386 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d2dc:	7bbb      	ldrb	r3, [r7, #14]
 800d2de:	f003 020f 	and.w	r2, r3, #15
 800d2e2:	6879      	ldr	r1, [r7, #4]
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	4413      	add	r3, r2
 800d2ea:	009b      	lsls	r3, r3, #2
 800d2ec:	440b      	add	r3, r1
 800d2ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d2f2:	881b      	ldrh	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d104      	bne.n	800d302 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d2f8:	6839      	ldr	r1, [r7, #0]
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 fb9d 	bl	800da3a <USBD_CtlError>
                  break;
 800d300:	e041      	b.n	800d386 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d306:	2b00      	cmp	r3, #0
 800d308:	da0b      	bge.n	800d322 <USBD_StdEPReq+0x2b2>
 800d30a:	7bbb      	ldrb	r3, [r7, #14]
 800d30c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d310:	4613      	mov	r3, r2
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	4413      	add	r3, r2
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	3310      	adds	r3, #16
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	4413      	add	r3, r2
 800d31e:	3304      	adds	r3, #4
 800d320:	e00b      	b.n	800d33a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d322:	7bbb      	ldrb	r3, [r7, #14]
 800d324:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d328:	4613      	mov	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4413      	add	r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	4413      	add	r3, r2
 800d338:	3304      	adds	r3, #4
 800d33a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d33c:	7bbb      	ldrb	r3, [r7, #14]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d002      	beq.n	800d348 <USBD_StdEPReq+0x2d8>
 800d342:	7bbb      	ldrb	r3, [r7, #14]
 800d344:	2b80      	cmp	r3, #128	; 0x80
 800d346:	d103      	bne.n	800d350 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	2200      	movs	r2, #0
 800d34c:	601a      	str	r2, [r3, #0]
 800d34e:	e00e      	b.n	800d36e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d350:	7bbb      	ldrb	r3, [r7, #14]
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f004 fe73 	bl	8012040 <USBD_LL_IsStallEP>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d003      	beq.n	800d368 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	2201      	movs	r2, #1
 800d364:	601a      	str	r2, [r3, #0]
 800d366:	e002      	b.n	800d36e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	2200      	movs	r2, #0
 800d36c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	2202      	movs	r2, #2
 800d372:	4619      	mov	r1, r3
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 fbd1 	bl	800db1c <USBD_CtlSendData>
              break;
 800d37a:	e004      	b.n	800d386 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d37c:	6839      	ldr	r1, [r7, #0]
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 fb5b 	bl	800da3a <USBD_CtlError>
              break;
 800d384:	bf00      	nop
          }
          break;
 800d386:	e004      	b.n	800d392 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d388:	6839      	ldr	r1, [r7, #0]
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 fb55 	bl	800da3a <USBD_CtlError>
          break;
 800d390:	bf00      	nop
      }
      break;
 800d392:	e005      	b.n	800d3a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d394:	6839      	ldr	r1, [r7, #0]
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 fb4f 	bl	800da3a <USBD_CtlError>
      break;
 800d39c:	e000      	b.n	800d3a0 <USBD_StdEPReq+0x330>
      break;
 800d39e:	bf00      	nop
  }

  return ret;
 800d3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3710      	adds	r7, #16
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
	...

0800d3ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	885b      	ldrh	r3, [r3, #2]
 800d3c6:	0a1b      	lsrs	r3, r3, #8
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	2b06      	cmp	r3, #6
 800d3ce:	f200 8128 	bhi.w	800d622 <USBD_GetDescriptor+0x276>
 800d3d2:	a201      	add	r2, pc, #4	; (adr r2, 800d3d8 <USBD_GetDescriptor+0x2c>)
 800d3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d8:	0800d3f5 	.word	0x0800d3f5
 800d3dc:	0800d40d 	.word	0x0800d40d
 800d3e0:	0800d44d 	.word	0x0800d44d
 800d3e4:	0800d623 	.word	0x0800d623
 800d3e8:	0800d623 	.word	0x0800d623
 800d3ec:	0800d5c3 	.word	0x0800d5c3
 800d3f0:	0800d5ef 	.word	0x0800d5ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	7c12      	ldrb	r2, [r2, #16]
 800d400:	f107 0108 	add.w	r1, r7, #8
 800d404:	4610      	mov	r0, r2
 800d406:	4798      	blx	r3
 800d408:	60f8      	str	r0, [r7, #12]
      break;
 800d40a:	e112      	b.n	800d632 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	7c1b      	ldrb	r3, [r3, #16]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10d      	bne.n	800d430 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d41c:	f107 0208 	add.w	r2, r7, #8
 800d420:	4610      	mov	r0, r2
 800d422:	4798      	blx	r3
 800d424:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	3301      	adds	r3, #1
 800d42a:	2202      	movs	r2, #2
 800d42c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d42e:	e100      	b.n	800d632 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d438:	f107 0208 	add.w	r2, r7, #8
 800d43c:	4610      	mov	r0, r2
 800d43e:	4798      	blx	r3
 800d440:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	3301      	adds	r3, #1
 800d446:	2202      	movs	r2, #2
 800d448:	701a      	strb	r2, [r3, #0]
      break;
 800d44a:	e0f2      	b.n	800d632 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	885b      	ldrh	r3, [r3, #2]
 800d450:	b2db      	uxtb	r3, r3
 800d452:	2b05      	cmp	r3, #5
 800d454:	f200 80ac 	bhi.w	800d5b0 <USBD_GetDescriptor+0x204>
 800d458:	a201      	add	r2, pc, #4	; (adr r2, 800d460 <USBD_GetDescriptor+0xb4>)
 800d45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d45e:	bf00      	nop
 800d460:	0800d479 	.word	0x0800d479
 800d464:	0800d4ad 	.word	0x0800d4ad
 800d468:	0800d4e1 	.word	0x0800d4e1
 800d46c:	0800d515 	.word	0x0800d515
 800d470:	0800d549 	.word	0x0800d549
 800d474:	0800d57d 	.word	0x0800d57d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d00b      	beq.n	800d49c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	7c12      	ldrb	r2, [r2, #16]
 800d490:	f107 0108 	add.w	r1, r7, #8
 800d494:	4610      	mov	r0, r2
 800d496:	4798      	blx	r3
 800d498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d49a:	e091      	b.n	800d5c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d49c:	6839      	ldr	r1, [r7, #0]
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 facb 	bl	800da3a <USBD_CtlError>
            err++;
 800d4a4:	7afb      	ldrb	r3, [r7, #11]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	72fb      	strb	r3, [r7, #11]
          break;
 800d4aa:	e089      	b.n	800d5c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d00b      	beq.n	800d4d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4be:	689b      	ldr	r3, [r3, #8]
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	7c12      	ldrb	r2, [r2, #16]
 800d4c4:	f107 0108 	add.w	r1, r7, #8
 800d4c8:	4610      	mov	r0, r2
 800d4ca:	4798      	blx	r3
 800d4cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4ce:	e077      	b.n	800d5c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4d0:	6839      	ldr	r1, [r7, #0]
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 fab1 	bl	800da3a <USBD_CtlError>
            err++;
 800d4d8:	7afb      	ldrb	r3, [r7, #11]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	72fb      	strb	r3, [r7, #11]
          break;
 800d4de:	e06f      	b.n	800d5c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00b      	beq.n	800d504 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	7c12      	ldrb	r2, [r2, #16]
 800d4f8:	f107 0108 	add.w	r1, r7, #8
 800d4fc:	4610      	mov	r0, r2
 800d4fe:	4798      	blx	r3
 800d500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d502:	e05d      	b.n	800d5c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d504:	6839      	ldr	r1, [r7, #0]
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 fa97 	bl	800da3a <USBD_CtlError>
            err++;
 800d50c:	7afb      	ldrb	r3, [r7, #11]
 800d50e:	3301      	adds	r3, #1
 800d510:	72fb      	strb	r3, [r7, #11]
          break;
 800d512:	e055      	b.n	800d5c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00b      	beq.n	800d538 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d526:	691b      	ldr	r3, [r3, #16]
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	7c12      	ldrb	r2, [r2, #16]
 800d52c:	f107 0108 	add.w	r1, r7, #8
 800d530:	4610      	mov	r0, r2
 800d532:	4798      	blx	r3
 800d534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d536:	e043      	b.n	800d5c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d538:	6839      	ldr	r1, [r7, #0]
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 fa7d 	bl	800da3a <USBD_CtlError>
            err++;
 800d540:	7afb      	ldrb	r3, [r7, #11]
 800d542:	3301      	adds	r3, #1
 800d544:	72fb      	strb	r3, [r7, #11]
          break;
 800d546:	e03b      	b.n	800d5c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d54e:	695b      	ldr	r3, [r3, #20]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00b      	beq.n	800d56c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d55a:	695b      	ldr	r3, [r3, #20]
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	7c12      	ldrb	r2, [r2, #16]
 800d560:	f107 0108 	add.w	r1, r7, #8
 800d564:	4610      	mov	r0, r2
 800d566:	4798      	blx	r3
 800d568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d56a:	e029      	b.n	800d5c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d56c:	6839      	ldr	r1, [r7, #0]
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 fa63 	bl	800da3a <USBD_CtlError>
            err++;
 800d574:	7afb      	ldrb	r3, [r7, #11]
 800d576:	3301      	adds	r3, #1
 800d578:	72fb      	strb	r3, [r7, #11]
          break;
 800d57a:	e021      	b.n	800d5c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d582:	699b      	ldr	r3, [r3, #24]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d00b      	beq.n	800d5a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d58e:	699b      	ldr	r3, [r3, #24]
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	7c12      	ldrb	r2, [r2, #16]
 800d594:	f107 0108 	add.w	r1, r7, #8
 800d598:	4610      	mov	r0, r2
 800d59a:	4798      	blx	r3
 800d59c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d59e:	e00f      	b.n	800d5c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5a0:	6839      	ldr	r1, [r7, #0]
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 fa49 	bl	800da3a <USBD_CtlError>
            err++;
 800d5a8:	7afb      	ldrb	r3, [r7, #11]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	72fb      	strb	r3, [r7, #11]
          break;
 800d5ae:	e007      	b.n	800d5c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d5b0:	6839      	ldr	r1, [r7, #0]
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 fa41 	bl	800da3a <USBD_CtlError>
          err++;
 800d5b8:	7afb      	ldrb	r3, [r7, #11]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d5be:	bf00      	nop
      }
      break;
 800d5c0:	e037      	b.n	800d632 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	7c1b      	ldrb	r3, [r3, #16]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d109      	bne.n	800d5de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d2:	f107 0208 	add.w	r2, r7, #8
 800d5d6:	4610      	mov	r0, r2
 800d5d8:	4798      	blx	r3
 800d5da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d5dc:	e029      	b.n	800d632 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d5de:	6839      	ldr	r1, [r7, #0]
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f000 fa2a 	bl	800da3a <USBD_CtlError>
        err++;
 800d5e6:	7afb      	ldrb	r3, [r7, #11]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	72fb      	strb	r3, [r7, #11]
      break;
 800d5ec:	e021      	b.n	800d632 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	7c1b      	ldrb	r3, [r3, #16]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d10d      	bne.n	800d612 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5fe:	f107 0208 	add.w	r2, r7, #8
 800d602:	4610      	mov	r0, r2
 800d604:	4798      	blx	r3
 800d606:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	3301      	adds	r3, #1
 800d60c:	2207      	movs	r2, #7
 800d60e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d610:	e00f      	b.n	800d632 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d612:	6839      	ldr	r1, [r7, #0]
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 fa10 	bl	800da3a <USBD_CtlError>
        err++;
 800d61a:	7afb      	ldrb	r3, [r7, #11]
 800d61c:	3301      	adds	r3, #1
 800d61e:	72fb      	strb	r3, [r7, #11]
      break;
 800d620:	e007      	b.n	800d632 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d622:	6839      	ldr	r1, [r7, #0]
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 fa08 	bl	800da3a <USBD_CtlError>
      err++;
 800d62a:	7afb      	ldrb	r3, [r7, #11]
 800d62c:	3301      	adds	r3, #1
 800d62e:	72fb      	strb	r3, [r7, #11]
      break;
 800d630:	bf00      	nop
  }

  if (err != 0U)
 800d632:	7afb      	ldrb	r3, [r7, #11]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d11e      	bne.n	800d676 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	88db      	ldrh	r3, [r3, #6]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d016      	beq.n	800d66e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d640:	893b      	ldrh	r3, [r7, #8]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00e      	beq.n	800d664 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	88da      	ldrh	r2, [r3, #6]
 800d64a:	893b      	ldrh	r3, [r7, #8]
 800d64c:	4293      	cmp	r3, r2
 800d64e:	bf28      	it	cs
 800d650:	4613      	movcs	r3, r2
 800d652:	b29b      	uxth	r3, r3
 800d654:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d656:	893b      	ldrh	r3, [r7, #8]
 800d658:	461a      	mov	r2, r3
 800d65a:	68f9      	ldr	r1, [r7, #12]
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 fa5d 	bl	800db1c <USBD_CtlSendData>
 800d662:	e009      	b.n	800d678 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d664:	6839      	ldr	r1, [r7, #0]
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f9e7 	bl	800da3a <USBD_CtlError>
 800d66c:	e004      	b.n	800d678 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 faae 	bl	800dbd0 <USBD_CtlSendStatus>
 800d674:	e000      	b.n	800d678 <USBD_GetDescriptor+0x2cc>
    return;
 800d676:	bf00      	nop
  }
}
 800d678:	3710      	adds	r7, #16
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop

0800d680 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	889b      	ldrh	r3, [r3, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d131      	bne.n	800d6f6 <USBD_SetAddress+0x76>
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	88db      	ldrh	r3, [r3, #6]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d12d      	bne.n	800d6f6 <USBD_SetAddress+0x76>
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	885b      	ldrh	r3, [r3, #2]
 800d69e:	2b7f      	cmp	r3, #127	; 0x7f
 800d6a0:	d829      	bhi.n	800d6f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	885b      	ldrh	r3, [r3, #2]
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	2b03      	cmp	r3, #3
 800d6b8:	d104      	bne.n	800d6c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d6ba:	6839      	ldr	r1, [r7, #0]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 f9bc 	bl	800da3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6c2:	e01d      	b.n	800d700 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	7bfa      	ldrb	r2, [r7, #15]
 800d6c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d6cc:	7bfb      	ldrb	r3, [r7, #15]
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f004 fce1 	bl	8012098 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 fa7a 	bl	800dbd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d6dc:	7bfb      	ldrb	r3, [r7, #15]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d004      	beq.n	800d6ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2202      	movs	r2, #2
 800d6e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ea:	e009      	b.n	800d700 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6f4:	e004      	b.n	800d700 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d6f6:	6839      	ldr	r1, [r7, #0]
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 f99e 	bl	800da3a <USBD_CtlError>
  }
}
 800d6fe:	bf00      	nop
 800d700:	bf00      	nop
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d712:	2300      	movs	r3, #0
 800d714:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	885b      	ldrh	r3, [r3, #2]
 800d71a:	b2da      	uxtb	r2, r3
 800d71c:	4b4e      	ldr	r3, [pc, #312]	; (800d858 <USBD_SetConfig+0x150>)
 800d71e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d720:	4b4d      	ldr	r3, [pc, #308]	; (800d858 <USBD_SetConfig+0x150>)
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	2b01      	cmp	r3, #1
 800d726:	d905      	bls.n	800d734 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d728:	6839      	ldr	r1, [r7, #0]
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f000 f985 	bl	800da3a <USBD_CtlError>
    return USBD_FAIL;
 800d730:	2303      	movs	r3, #3
 800d732:	e08c      	b.n	800d84e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	2b02      	cmp	r3, #2
 800d73e:	d002      	beq.n	800d746 <USBD_SetConfig+0x3e>
 800d740:	2b03      	cmp	r3, #3
 800d742:	d029      	beq.n	800d798 <USBD_SetConfig+0x90>
 800d744:	e075      	b.n	800d832 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d746:	4b44      	ldr	r3, [pc, #272]	; (800d858 <USBD_SetConfig+0x150>)
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d020      	beq.n	800d790 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d74e:	4b42      	ldr	r3, [pc, #264]	; (800d858 <USBD_SetConfig+0x150>)
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	461a      	mov	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d758:	4b3f      	ldr	r3, [pc, #252]	; (800d858 <USBD_SetConfig+0x150>)
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	4619      	mov	r1, r3
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7fe ffe1 	bl	800c726 <USBD_SetClassConfig>
 800d764:	4603      	mov	r3, r0
 800d766:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d768:	7bfb      	ldrb	r3, [r7, #15]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d008      	beq.n	800d780 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d76e:	6839      	ldr	r1, [r7, #0]
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 f962 	bl	800da3a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2202      	movs	r2, #2
 800d77a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d77e:	e065      	b.n	800d84c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 fa25 	bl	800dbd0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2203      	movs	r2, #3
 800d78a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d78e:	e05d      	b.n	800d84c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 fa1d 	bl	800dbd0 <USBD_CtlSendStatus>
      break;
 800d796:	e059      	b.n	800d84c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d798:	4b2f      	ldr	r3, [pc, #188]	; (800d858 <USBD_SetConfig+0x150>)
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d112      	bne.n	800d7c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2202      	movs	r2, #2
 800d7a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d7a8:	4b2b      	ldr	r3, [pc, #172]	; (800d858 <USBD_SetConfig+0x150>)
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d7b2:	4b29      	ldr	r3, [pc, #164]	; (800d858 <USBD_SetConfig+0x150>)
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f7fe ffd0 	bl	800c75e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 fa06 	bl	800dbd0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d7c4:	e042      	b.n	800d84c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d7c6:	4b24      	ldr	r3, [pc, #144]	; (800d858 <USBD_SetConfig+0x150>)
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d02a      	beq.n	800d82a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	4619      	mov	r1, r3
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f7fe ffbe 	bl	800c75e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d7e2:	4b1d      	ldr	r3, [pc, #116]	; (800d858 <USBD_SetConfig+0x150>)
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d7ec:	4b1a      	ldr	r3, [pc, #104]	; (800d858 <USBD_SetConfig+0x150>)
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7fe ff97 	bl	800c726 <USBD_SetClassConfig>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d7fc:	7bfb      	ldrb	r3, [r7, #15]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d00f      	beq.n	800d822 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d802:	6839      	ldr	r1, [r7, #0]
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f000 f918 	bl	800da3a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	4619      	mov	r1, r3
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7fe ffa3 	bl	800c75e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2202      	movs	r2, #2
 800d81c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d820:	e014      	b.n	800d84c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 f9d4 	bl	800dbd0 <USBD_CtlSendStatus>
      break;
 800d828:	e010      	b.n	800d84c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f000 f9d0 	bl	800dbd0 <USBD_CtlSendStatus>
      break;
 800d830:	e00c      	b.n	800d84c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d832:	6839      	ldr	r1, [r7, #0]
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 f900 	bl	800da3a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d83a:	4b07      	ldr	r3, [pc, #28]	; (800d858 <USBD_SetConfig+0x150>)
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	4619      	mov	r1, r3
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f7fe ff8c 	bl	800c75e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d846:	2303      	movs	r3, #3
 800d848:	73fb      	strb	r3, [r7, #15]
      break;
 800d84a:	bf00      	nop
  }

  return ret;
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	2000bd9c 	.word	0x2000bd9c

0800d85c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	88db      	ldrh	r3, [r3, #6]
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d004      	beq.n	800d878 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d86e:	6839      	ldr	r1, [r7, #0]
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 f8e2 	bl	800da3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d876:	e023      	b.n	800d8c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	2b02      	cmp	r3, #2
 800d882:	dc02      	bgt.n	800d88a <USBD_GetConfig+0x2e>
 800d884:	2b00      	cmp	r3, #0
 800d886:	dc03      	bgt.n	800d890 <USBD_GetConfig+0x34>
 800d888:	e015      	b.n	800d8b6 <USBD_GetConfig+0x5a>
 800d88a:	2b03      	cmp	r3, #3
 800d88c:	d00b      	beq.n	800d8a6 <USBD_GetConfig+0x4a>
 800d88e:	e012      	b.n	800d8b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	3308      	adds	r3, #8
 800d89a:	2201      	movs	r2, #1
 800d89c:	4619      	mov	r1, r3
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 f93c 	bl	800db1c <USBD_CtlSendData>
        break;
 800d8a4:	e00c      	b.n	800d8c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 f934 	bl	800db1c <USBD_CtlSendData>
        break;
 800d8b4:	e004      	b.n	800d8c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d8b6:	6839      	ldr	r1, [r7, #0]
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 f8be 	bl	800da3a <USBD_CtlError>
        break;
 800d8be:	bf00      	nop
}
 800d8c0:	bf00      	nop
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	2b02      	cmp	r3, #2
 800d8de:	d81e      	bhi.n	800d91e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	88db      	ldrh	r3, [r3, #6]
 800d8e4:	2b02      	cmp	r3, #2
 800d8e6:	d004      	beq.n	800d8f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d8e8:	6839      	ldr	r1, [r7, #0]
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 f8a5 	bl	800da3a <USBD_CtlError>
        break;
 800d8f0:	e01a      	b.n	800d928 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d005      	beq.n	800d90e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	f043 0202 	orr.w	r2, r3, #2
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	330c      	adds	r3, #12
 800d912:	2202      	movs	r2, #2
 800d914:	4619      	mov	r1, r3
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 f900 	bl	800db1c <USBD_CtlSendData>
      break;
 800d91c:	e004      	b.n	800d928 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d91e:	6839      	ldr	r1, [r7, #0]
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 f88a 	bl	800da3a <USBD_CtlError>
      break;
 800d926:	bf00      	nop
  }
}
 800d928:	bf00      	nop
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	885b      	ldrh	r3, [r3, #2]
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d107      	bne.n	800d952 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2201      	movs	r2, #1
 800d946:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 f940 	bl	800dbd0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d950:	e013      	b.n	800d97a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	885b      	ldrh	r3, [r3, #2]
 800d956:	2b02      	cmp	r3, #2
 800d958:	d10b      	bne.n	800d972 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	889b      	ldrh	r3, [r3, #4]
 800d95e:	0a1b      	lsrs	r3, r3, #8
 800d960:	b29b      	uxth	r3, r3
 800d962:	b2da      	uxtb	r2, r3
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 f930 	bl	800dbd0 <USBD_CtlSendStatus>
}
 800d970:	e003      	b.n	800d97a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d972:	6839      	ldr	r1, [r7, #0]
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 f860 	bl	800da3a <USBD_CtlError>
}
 800d97a:	bf00      	nop
 800d97c:	3708      	adds	r7, #8
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d982:	b580      	push	{r7, lr}
 800d984:	b082      	sub	sp, #8
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
 800d98a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d992:	b2db      	uxtb	r3, r3
 800d994:	3b01      	subs	r3, #1
 800d996:	2b02      	cmp	r3, #2
 800d998:	d80b      	bhi.n	800d9b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	885b      	ldrh	r3, [r3, #2]
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d10c      	bne.n	800d9bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f910 	bl	800dbd0 <USBD_CtlSendStatus>
      }
      break;
 800d9b0:	e004      	b.n	800d9bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d9b2:	6839      	ldr	r1, [r7, #0]
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 f840 	bl	800da3a <USBD_CtlError>
      break;
 800d9ba:	e000      	b.n	800d9be <USBD_ClrFeature+0x3c>
      break;
 800d9bc:	bf00      	nop
  }
}
 800d9be:	bf00      	nop
 800d9c0:	3708      	adds	r7, #8
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}

0800d9c6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b084      	sub	sp, #16
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
 800d9ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	781a      	ldrb	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	781a      	ldrb	r2, [r3, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	f7ff fa41 	bl	800ce78 <SWAPBYTE>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	3301      	adds	r3, #1
 800da02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	3301      	adds	r3, #1
 800da08:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f7ff fa34 	bl	800ce78 <SWAPBYTE>
 800da10:	4603      	mov	r3, r0
 800da12:	461a      	mov	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	3301      	adds	r3, #1
 800da1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	3301      	adds	r3, #1
 800da22:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800da24:	68f8      	ldr	r0, [r7, #12]
 800da26:	f7ff fa27 	bl	800ce78 <SWAPBYTE>
 800da2a:	4603      	mov	r3, r0
 800da2c:	461a      	mov	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	80da      	strh	r2, [r3, #6]
}
 800da32:	bf00      	nop
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b082      	sub	sp, #8
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800da44:	2180      	movs	r1, #128	; 0x80
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f004 fabc 	bl	8011fc4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800da4c:	2100      	movs	r1, #0
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f004 fab8 	bl	8011fc4 <USBD_LL_StallEP>
}
 800da54:	bf00      	nop
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b086      	sub	sp, #24
 800da60:	af00      	add	r7, sp, #0
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800da68:	2300      	movs	r3, #0
 800da6a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d036      	beq.n	800dae0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800da76:	6938      	ldr	r0, [r7, #16]
 800da78:	f000 f836 	bl	800dae8 <USBD_GetLen>
 800da7c:	4603      	mov	r3, r0
 800da7e:	3301      	adds	r3, #1
 800da80:	b29b      	uxth	r3, r3
 800da82:	005b      	lsls	r3, r3, #1
 800da84:	b29a      	uxth	r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800da8a:	7dfb      	ldrb	r3, [r7, #23]
 800da8c:	68ba      	ldr	r2, [r7, #8]
 800da8e:	4413      	add	r3, r2
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	7812      	ldrb	r2, [r2, #0]
 800da94:	701a      	strb	r2, [r3, #0]
  idx++;
 800da96:	7dfb      	ldrb	r3, [r7, #23]
 800da98:	3301      	adds	r3, #1
 800da9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800da9c:	7dfb      	ldrb	r3, [r7, #23]
 800da9e:	68ba      	ldr	r2, [r7, #8]
 800daa0:	4413      	add	r3, r2
 800daa2:	2203      	movs	r2, #3
 800daa4:	701a      	strb	r2, [r3, #0]
  idx++;
 800daa6:	7dfb      	ldrb	r3, [r7, #23]
 800daa8:	3301      	adds	r3, #1
 800daaa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800daac:	e013      	b.n	800dad6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800daae:	7dfb      	ldrb	r3, [r7, #23]
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	4413      	add	r3, r2
 800dab4:	693a      	ldr	r2, [r7, #16]
 800dab6:	7812      	ldrb	r2, [r2, #0]
 800dab8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	3301      	adds	r3, #1
 800dabe:	613b      	str	r3, [r7, #16]
    idx++;
 800dac0:	7dfb      	ldrb	r3, [r7, #23]
 800dac2:	3301      	adds	r3, #1
 800dac4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dac6:	7dfb      	ldrb	r3, [r7, #23]
 800dac8:	68ba      	ldr	r2, [r7, #8]
 800daca:	4413      	add	r3, r2
 800dacc:	2200      	movs	r2, #0
 800dace:	701a      	strb	r2, [r3, #0]
    idx++;
 800dad0:	7dfb      	ldrb	r3, [r7, #23]
 800dad2:	3301      	adds	r3, #1
 800dad4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d1e7      	bne.n	800daae <USBD_GetString+0x52>
 800dade:	e000      	b.n	800dae2 <USBD_GetString+0x86>
    return;
 800dae0:	bf00      	nop
  }
}
 800dae2:	3718      	adds	r7, #24
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dae8:	b480      	push	{r7}
 800daea:	b085      	sub	sp, #20
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800daf0:	2300      	movs	r3, #0
 800daf2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800daf8:	e005      	b.n	800db06 <USBD_GetLen+0x1e>
  {
    len++;
 800dafa:	7bfb      	ldrb	r3, [r7, #15]
 800dafc:	3301      	adds	r3, #1
 800dafe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	3301      	adds	r3, #1
 800db04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1f5      	bne.n	800dafa <USBD_GetLen+0x12>
  }

  return len;
 800db0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db10:	4618      	mov	r0, r3
 800db12:	3714      	adds	r7, #20
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2202      	movs	r2, #2
 800db2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	68ba      	ldr	r2, [r7, #8]
 800db40:	2100      	movs	r1, #0
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f004 fac7 	bl	80120d6 <USBD_LL_Transmit>

  return USBD_OK;
 800db48:	2300      	movs	r3, #0
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3710      	adds	r7, #16
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b084      	sub	sp, #16
 800db56:	af00      	add	r7, sp, #0
 800db58:	60f8      	str	r0, [r7, #12]
 800db5a:	60b9      	str	r1, [r7, #8]
 800db5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	68ba      	ldr	r2, [r7, #8]
 800db62:	2100      	movs	r1, #0
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	f004 fab6 	bl	80120d6 <USBD_LL_Transmit>

  return USBD_OK;
 800db6a:	2300      	movs	r3, #0
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3710      	adds	r7, #16
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2203      	movs	r2, #3
 800db84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	68ba      	ldr	r2, [r7, #8]
 800db9c:	2100      	movs	r1, #0
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f004 faba 	bl	8012118 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dba4:	2300      	movs	r3, #0
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3710      	adds	r7, #16
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}

0800dbae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b084      	sub	sp, #16
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	60f8      	str	r0, [r7, #12]
 800dbb6:	60b9      	str	r1, [r7, #8]
 800dbb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	68f8      	ldr	r0, [r7, #12]
 800dbc2:	f004 faa9 	bl	8012118 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dbc6:	2300      	movs	r3, #0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2204      	movs	r2, #4
 800dbdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f004 fa75 	bl	80120d6 <USBD_LL_Transmit>

  return USBD_OK;
 800dbec:	2300      	movs	r3, #0
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b082      	sub	sp, #8
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2205      	movs	r2, #5
 800dc02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc06:	2300      	movs	r3, #0
 800dc08:	2200      	movs	r2, #0
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f004 fa83 	bl	8012118 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc12:	2300      	movs	r3, #0
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	4603      	mov	r3, r0
 800dc24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dc26:	79fb      	ldrb	r3, [r7, #7]
 800dc28:	4a08      	ldr	r2, [pc, #32]	; (800dc4c <disk_status+0x30>)
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	4413      	add	r3, r2
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	79fa      	ldrb	r2, [r7, #7]
 800dc34:	4905      	ldr	r1, [pc, #20]	; (800dc4c <disk_status+0x30>)
 800dc36:	440a      	add	r2, r1
 800dc38:	7a12      	ldrb	r2, [r2, #8]
 800dc3a:	4610      	mov	r0, r2
 800dc3c:	4798      	blx	r3
 800dc3e:	4603      	mov	r3, r0
 800dc40:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dc42:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3710      	adds	r7, #16
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	2000bdc8 	.word	0x2000bdc8

0800dc50 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	4603      	mov	r3, r0
 800dc58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dc5e:	79fb      	ldrb	r3, [r7, #7]
 800dc60:	4a0e      	ldr	r2, [pc, #56]	; (800dc9c <disk_initialize+0x4c>)
 800dc62:	5cd3      	ldrb	r3, [r2, r3]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d114      	bne.n	800dc92 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dc68:	79fb      	ldrb	r3, [r7, #7]
 800dc6a:	4a0c      	ldr	r2, [pc, #48]	; (800dc9c <disk_initialize+0x4c>)
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	4413      	add	r3, r2
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	79fa      	ldrb	r2, [r7, #7]
 800dc76:	4909      	ldr	r1, [pc, #36]	; (800dc9c <disk_initialize+0x4c>)
 800dc78:	440a      	add	r2, r1
 800dc7a:	7a12      	ldrb	r2, [r2, #8]
 800dc7c:	4610      	mov	r0, r2
 800dc7e:	4798      	blx	r3
 800dc80:	4603      	mov	r3, r0
 800dc82:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800dc84:	7bfb      	ldrb	r3, [r7, #15]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d103      	bne.n	800dc92 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800dc8a:	79fb      	ldrb	r3, [r7, #7]
 800dc8c:	4a03      	ldr	r2, [pc, #12]	; (800dc9c <disk_initialize+0x4c>)
 800dc8e:	2101      	movs	r1, #1
 800dc90:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800dc92:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	2000bdc8 	.word	0x2000bdc8

0800dca0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dca0:	b590      	push	{r4, r7, lr}
 800dca2:	b087      	sub	sp, #28
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60b9      	str	r1, [r7, #8]
 800dca8:	607a      	str	r2, [r7, #4]
 800dcaa:	603b      	str	r3, [r7, #0]
 800dcac:	4603      	mov	r3, r0
 800dcae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dcb0:	7bfb      	ldrb	r3, [r7, #15]
 800dcb2:	4a0a      	ldr	r2, [pc, #40]	; (800dcdc <disk_read+0x3c>)
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	4413      	add	r3, r2
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	689c      	ldr	r4, [r3, #8]
 800dcbc:	7bfb      	ldrb	r3, [r7, #15]
 800dcbe:	4a07      	ldr	r2, [pc, #28]	; (800dcdc <disk_read+0x3c>)
 800dcc0:	4413      	add	r3, r2
 800dcc2:	7a18      	ldrb	r0, [r3, #8]
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	68b9      	ldr	r1, [r7, #8]
 800dcca:	47a0      	blx	r4
 800dccc:	4603      	mov	r3, r0
 800dcce:	75fb      	strb	r3, [r7, #23]
  return res;
 800dcd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	371c      	adds	r7, #28
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd90      	pop	{r4, r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	2000bdc8 	.word	0x2000bdc8

0800dce0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dce0:	b590      	push	{r4, r7, lr}
 800dce2:	b087      	sub	sp, #28
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60b9      	str	r1, [r7, #8]
 800dce8:	607a      	str	r2, [r7, #4]
 800dcea:	603b      	str	r3, [r7, #0]
 800dcec:	4603      	mov	r3, r0
 800dcee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dcf0:	7bfb      	ldrb	r3, [r7, #15]
 800dcf2:	4a0a      	ldr	r2, [pc, #40]	; (800dd1c <disk_write+0x3c>)
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	4413      	add	r3, r2
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	68dc      	ldr	r4, [r3, #12]
 800dcfc:	7bfb      	ldrb	r3, [r7, #15]
 800dcfe:	4a07      	ldr	r2, [pc, #28]	; (800dd1c <disk_write+0x3c>)
 800dd00:	4413      	add	r3, r2
 800dd02:	7a18      	ldrb	r0, [r3, #8]
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	68b9      	ldr	r1, [r7, #8]
 800dd0a:	47a0      	blx	r4
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	75fb      	strb	r3, [r7, #23]
  return res;
 800dd10:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	371c      	adds	r7, #28
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd90      	pop	{r4, r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	2000bdc8 	.word	0x2000bdc8

0800dd20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	4603      	mov	r3, r0
 800dd28:	603a      	str	r2, [r7, #0]
 800dd2a:	71fb      	strb	r3, [r7, #7]
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800dd30:	79fb      	ldrb	r3, [r7, #7]
 800dd32:	4a09      	ldr	r2, [pc, #36]	; (800dd58 <disk_ioctl+0x38>)
 800dd34:	009b      	lsls	r3, r3, #2
 800dd36:	4413      	add	r3, r2
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	691b      	ldr	r3, [r3, #16]
 800dd3c:	79fa      	ldrb	r2, [r7, #7]
 800dd3e:	4906      	ldr	r1, [pc, #24]	; (800dd58 <disk_ioctl+0x38>)
 800dd40:	440a      	add	r2, r1
 800dd42:	7a10      	ldrb	r0, [r2, #8]
 800dd44:	79b9      	ldrb	r1, [r7, #6]
 800dd46:	683a      	ldr	r2, [r7, #0]
 800dd48:	4798      	blx	r3
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	73fb      	strb	r3, [r7, #15]
  return res;
 800dd4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3710      	adds	r7, #16
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	2000bdc8 	.word	0x2000bdc8

0800dd5c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b085      	sub	sp, #20
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	3301      	adds	r3, #1
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800dd6c:	89fb      	ldrh	r3, [r7, #14]
 800dd6e:	021b      	lsls	r3, r3, #8
 800dd70:	b21a      	sxth	r2, r3
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	b21b      	sxth	r3, r3
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	b21b      	sxth	r3, r3
 800dd7c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800dd7e:	89fb      	ldrh	r3, [r7, #14]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3714      	adds	r7, #20
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr

0800dd8c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b085      	sub	sp, #20
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	3303      	adds	r3, #3
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	021b      	lsls	r3, r3, #8
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	3202      	adds	r2, #2
 800dda4:	7812      	ldrb	r2, [r2, #0]
 800dda6:	4313      	orrs	r3, r2
 800dda8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	021b      	lsls	r3, r3, #8
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	3201      	adds	r2, #1
 800ddb2:	7812      	ldrb	r2, [r2, #0]
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	021b      	lsls	r3, r3, #8
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	7812      	ldrb	r2, [r2, #0]
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	60fb      	str	r3, [r7, #12]
	return rv;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3714      	adds	r7, #20
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ddd2:	b480      	push	{r7}
 800ddd4:	b083      	sub	sp, #12
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	460b      	mov	r3, r1
 800dddc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	1c5a      	adds	r2, r3, #1
 800dde2:	607a      	str	r2, [r7, #4]
 800dde4:	887a      	ldrh	r2, [r7, #2]
 800dde6:	b2d2      	uxtb	r2, r2
 800dde8:	701a      	strb	r2, [r3, #0]
 800ddea:	887b      	ldrh	r3, [r7, #2]
 800ddec:	0a1b      	lsrs	r3, r3, #8
 800ddee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	1c5a      	adds	r2, r3, #1
 800ddf4:	607a      	str	r2, [r7, #4]
 800ddf6:	887a      	ldrh	r2, [r7, #2]
 800ddf8:	b2d2      	uxtb	r2, r2
 800ddfa:	701a      	strb	r2, [r3, #0]
}
 800ddfc:	bf00      	nop
 800ddfe:	370c      	adds	r7, #12
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	1c5a      	adds	r2, r3, #1
 800de16:	607a      	str	r2, [r7, #4]
 800de18:	683a      	ldr	r2, [r7, #0]
 800de1a:	b2d2      	uxtb	r2, r2
 800de1c:	701a      	strb	r2, [r3, #0]
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	0a1b      	lsrs	r3, r3, #8
 800de22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	1c5a      	adds	r2, r3, #1
 800de28:	607a      	str	r2, [r7, #4]
 800de2a:	683a      	ldr	r2, [r7, #0]
 800de2c:	b2d2      	uxtb	r2, r2
 800de2e:	701a      	strb	r2, [r3, #0]
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	0a1b      	lsrs	r3, r3, #8
 800de34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	1c5a      	adds	r2, r3, #1
 800de3a:	607a      	str	r2, [r7, #4]
 800de3c:	683a      	ldr	r2, [r7, #0]
 800de3e:	b2d2      	uxtb	r2, r2
 800de40:	701a      	strb	r2, [r3, #0]
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	0a1b      	lsrs	r3, r3, #8
 800de46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	1c5a      	adds	r2, r3, #1
 800de4c:	607a      	str	r2, [r7, #4]
 800de4e:	683a      	ldr	r2, [r7, #0]
 800de50:	b2d2      	uxtb	r2, r2
 800de52:	701a      	strb	r2, [r3, #0]
}
 800de54:	bf00      	nop
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr

0800de60 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800de60:	b480      	push	{r7}
 800de62:	b087      	sub	sp, #28
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00d      	beq.n	800de96 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800de7a:	693a      	ldr	r2, [r7, #16]
 800de7c:	1c53      	adds	r3, r2, #1
 800de7e:	613b      	str	r3, [r7, #16]
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	1c59      	adds	r1, r3, #1
 800de84:	6179      	str	r1, [r7, #20]
 800de86:	7812      	ldrb	r2, [r2, #0]
 800de88:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	3b01      	subs	r3, #1
 800de8e:	607b      	str	r3, [r7, #4]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1f1      	bne.n	800de7a <mem_cpy+0x1a>
	}
}
 800de96:	bf00      	nop
 800de98:	371c      	adds	r7, #28
 800de9a:	46bd      	mov	sp, r7
 800de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea0:	4770      	bx	lr

0800dea2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800dea2:	b480      	push	{r7}
 800dea4:	b087      	sub	sp, #28
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	60f8      	str	r0, [r7, #12]
 800deaa:	60b9      	str	r1, [r7, #8]
 800deac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	1c5a      	adds	r2, r3, #1
 800deb6:	617a      	str	r2, [r7, #20]
 800deb8:	68ba      	ldr	r2, [r7, #8]
 800deba:	b2d2      	uxtb	r2, r2
 800debc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	3b01      	subs	r3, #1
 800dec2:	607b      	str	r3, [r7, #4]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d1f3      	bne.n	800deb2 <mem_set+0x10>
}
 800deca:	bf00      	nop
 800decc:	bf00      	nop
 800dece:	371c      	adds	r7, #28
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ded8:	b480      	push	{r7}
 800deda:	b089      	sub	sp, #36	; 0x24
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	61fb      	str	r3, [r7, #28]
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800deec:	2300      	movs	r3, #0
 800deee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	1c5a      	adds	r2, r3, #1
 800def4:	61fa      	str	r2, [r7, #28]
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	4619      	mov	r1, r3
 800defa:	69bb      	ldr	r3, [r7, #24]
 800defc:	1c5a      	adds	r2, r3, #1
 800defe:	61ba      	str	r2, [r7, #24]
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	1acb      	subs	r3, r1, r3
 800df04:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	3b01      	subs	r3, #1
 800df0a:	607b      	str	r3, [r7, #4]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d002      	beq.n	800df18 <mem_cmp+0x40>
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d0eb      	beq.n	800def0 <mem_cmp+0x18>

	return r;
 800df18:	697b      	ldr	r3, [r7, #20]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3724      	adds	r7, #36	; 0x24
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr

0800df26 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800df26:	b480      	push	{r7}
 800df28:	b083      	sub	sp, #12
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	6078      	str	r0, [r7, #4]
 800df2e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800df30:	e002      	b.n	800df38 <chk_chr+0x12>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	3301      	adds	r3, #1
 800df36:	607b      	str	r3, [r7, #4]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d005      	beq.n	800df4c <chk_chr+0x26>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	461a      	mov	r2, r3
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	4293      	cmp	r3, r2
 800df4a:	d1f2      	bne.n	800df32 <chk_chr+0xc>
	return *str;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	781b      	ldrb	r3, [r3, #0]
}
 800df50:	4618      	mov	r0, r3
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr

0800df5c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b085      	sub	sp, #20
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800df66:	2300      	movs	r3, #0
 800df68:	60bb      	str	r3, [r7, #8]
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	60fb      	str	r3, [r7, #12]
 800df6e:	e029      	b.n	800dfc4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800df70:	4a27      	ldr	r2, [pc, #156]	; (800e010 <chk_lock+0xb4>)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	011b      	lsls	r3, r3, #4
 800df76:	4413      	add	r3, r2
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d01d      	beq.n	800dfba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800df7e:	4a24      	ldr	r2, [pc, #144]	; (800e010 <chk_lock+0xb4>)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	011b      	lsls	r3, r3, #4
 800df84:	4413      	add	r3, r2
 800df86:	681a      	ldr	r2, [r3, #0]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d116      	bne.n	800dfbe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800df90:	4a1f      	ldr	r2, [pc, #124]	; (800e010 <chk_lock+0xb4>)
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	011b      	lsls	r3, r3, #4
 800df96:	4413      	add	r3, r2
 800df98:	3304      	adds	r3, #4
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d10c      	bne.n	800dfbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dfa4:	4a1a      	ldr	r2, [pc, #104]	; (800e010 <chk_lock+0xb4>)
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	011b      	lsls	r3, r3, #4
 800dfaa:	4413      	add	r3, r2
 800dfac:	3308      	adds	r3, #8
 800dfae:	681a      	ldr	r2, [r3, #0]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d102      	bne.n	800dfbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dfb8:	e007      	b.n	800dfca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	60fb      	str	r3, [r7, #12]
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d9d2      	bls.n	800df70 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2b02      	cmp	r3, #2
 800dfce:	d109      	bne.n	800dfe4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d102      	bne.n	800dfdc <chk_lock+0x80>
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	d101      	bne.n	800dfe0 <chk_lock+0x84>
 800dfdc:	2300      	movs	r3, #0
 800dfde:	e010      	b.n	800e002 <chk_lock+0xa6>
 800dfe0:	2312      	movs	r3, #18
 800dfe2:	e00e      	b.n	800e002 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d108      	bne.n	800dffc <chk_lock+0xa0>
 800dfea:	4a09      	ldr	r2, [pc, #36]	; (800e010 <chk_lock+0xb4>)
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	011b      	lsls	r3, r3, #4
 800dff0:	4413      	add	r3, r2
 800dff2:	330c      	adds	r3, #12
 800dff4:	881b      	ldrh	r3, [r3, #0]
 800dff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dffa:	d101      	bne.n	800e000 <chk_lock+0xa4>
 800dffc:	2310      	movs	r3, #16
 800dffe:	e000      	b.n	800e002 <chk_lock+0xa6>
 800e000:	2300      	movs	r3, #0
}
 800e002:	4618      	mov	r0, r3
 800e004:	3714      	adds	r7, #20
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	2000bda8 	.word	0x2000bda8

0800e014 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e01a:	2300      	movs	r3, #0
 800e01c:	607b      	str	r3, [r7, #4]
 800e01e:	e002      	b.n	800e026 <enq_lock+0x12>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	3301      	adds	r3, #1
 800e024:	607b      	str	r3, [r7, #4]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d806      	bhi.n	800e03a <enq_lock+0x26>
 800e02c:	4a09      	ldr	r2, [pc, #36]	; (800e054 <enq_lock+0x40>)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	011b      	lsls	r3, r3, #4
 800e032:	4413      	add	r3, r2
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d1f2      	bne.n	800e020 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2b02      	cmp	r3, #2
 800e03e:	bf14      	ite	ne
 800e040:	2301      	movne	r3, #1
 800e042:	2300      	moveq	r3, #0
 800e044:	b2db      	uxtb	r3, r3
}
 800e046:	4618      	mov	r0, r3
 800e048:	370c      	adds	r7, #12
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop
 800e054:	2000bda8 	.word	0x2000bda8

0800e058 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e062:	2300      	movs	r3, #0
 800e064:	60fb      	str	r3, [r7, #12]
 800e066:	e01f      	b.n	800e0a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e068:	4a41      	ldr	r2, [pc, #260]	; (800e170 <inc_lock+0x118>)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	011b      	lsls	r3, r3, #4
 800e06e:	4413      	add	r3, r2
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	429a      	cmp	r2, r3
 800e078:	d113      	bne.n	800e0a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e07a:	4a3d      	ldr	r2, [pc, #244]	; (800e170 <inc_lock+0x118>)
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	011b      	lsls	r3, r3, #4
 800e080:	4413      	add	r3, r2
 800e082:	3304      	adds	r3, #4
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d109      	bne.n	800e0a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e08e:	4a38      	ldr	r2, [pc, #224]	; (800e170 <inc_lock+0x118>)
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	011b      	lsls	r3, r3, #4
 800e094:	4413      	add	r3, r2
 800e096:	3308      	adds	r3, #8
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d006      	beq.n	800e0b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	60fb      	str	r3, [r7, #12]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d9dc      	bls.n	800e068 <inc_lock+0x10>
 800e0ae:	e000      	b.n	800e0b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e0b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2b02      	cmp	r3, #2
 800e0b6:	d132      	bne.n	800e11e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	60fb      	str	r3, [r7, #12]
 800e0bc:	e002      	b.n	800e0c4 <inc_lock+0x6c>
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	60fb      	str	r3, [r7, #12]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d806      	bhi.n	800e0d8 <inc_lock+0x80>
 800e0ca:	4a29      	ldr	r2, [pc, #164]	; (800e170 <inc_lock+0x118>)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	011b      	lsls	r3, r3, #4
 800e0d0:	4413      	add	r3, r2
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d1f2      	bne.n	800e0be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2b02      	cmp	r3, #2
 800e0dc:	d101      	bne.n	800e0e2 <inc_lock+0x8a>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	e040      	b.n	800e164 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	4922      	ldr	r1, [pc, #136]	; (800e170 <inc_lock+0x118>)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	011b      	lsls	r3, r3, #4
 800e0ec:	440b      	add	r3, r1
 800e0ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	689a      	ldr	r2, [r3, #8]
 800e0f4:	491e      	ldr	r1, [pc, #120]	; (800e170 <inc_lock+0x118>)
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	011b      	lsls	r3, r3, #4
 800e0fa:	440b      	add	r3, r1
 800e0fc:	3304      	adds	r3, #4
 800e0fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	695a      	ldr	r2, [r3, #20]
 800e104:	491a      	ldr	r1, [pc, #104]	; (800e170 <inc_lock+0x118>)
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	011b      	lsls	r3, r3, #4
 800e10a:	440b      	add	r3, r1
 800e10c:	3308      	adds	r3, #8
 800e10e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e110:	4a17      	ldr	r2, [pc, #92]	; (800e170 <inc_lock+0x118>)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	011b      	lsls	r3, r3, #4
 800e116:	4413      	add	r3, r2
 800e118:	330c      	adds	r3, #12
 800e11a:	2200      	movs	r2, #0
 800e11c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d009      	beq.n	800e138 <inc_lock+0xe0>
 800e124:	4a12      	ldr	r2, [pc, #72]	; (800e170 <inc_lock+0x118>)
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	011b      	lsls	r3, r3, #4
 800e12a:	4413      	add	r3, r2
 800e12c:	330c      	adds	r3, #12
 800e12e:	881b      	ldrh	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d001      	beq.n	800e138 <inc_lock+0xe0>
 800e134:	2300      	movs	r3, #0
 800e136:	e015      	b.n	800e164 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d108      	bne.n	800e150 <inc_lock+0xf8>
 800e13e:	4a0c      	ldr	r2, [pc, #48]	; (800e170 <inc_lock+0x118>)
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	011b      	lsls	r3, r3, #4
 800e144:	4413      	add	r3, r2
 800e146:	330c      	adds	r3, #12
 800e148:	881b      	ldrh	r3, [r3, #0]
 800e14a:	3301      	adds	r3, #1
 800e14c:	b29a      	uxth	r2, r3
 800e14e:	e001      	b.n	800e154 <inc_lock+0xfc>
 800e150:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e154:	4906      	ldr	r1, [pc, #24]	; (800e170 <inc_lock+0x118>)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	011b      	lsls	r3, r3, #4
 800e15a:	440b      	add	r3, r1
 800e15c:	330c      	adds	r3, #12
 800e15e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	3301      	adds	r3, #1
}
 800e164:	4618      	mov	r0, r3
 800e166:	3714      	adds	r7, #20
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr
 800e170:	2000bda8 	.word	0x2000bda8

0800e174 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e174:	b480      	push	{r7}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	3b01      	subs	r3, #1
 800e180:	607b      	str	r3, [r7, #4]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2b01      	cmp	r3, #1
 800e186:	d825      	bhi.n	800e1d4 <dec_lock+0x60>
		n = Files[i].ctr;
 800e188:	4a17      	ldr	r2, [pc, #92]	; (800e1e8 <dec_lock+0x74>)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	011b      	lsls	r3, r3, #4
 800e18e:	4413      	add	r3, r2
 800e190:	330c      	adds	r3, #12
 800e192:	881b      	ldrh	r3, [r3, #0]
 800e194:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e196:	89fb      	ldrh	r3, [r7, #14]
 800e198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e19c:	d101      	bne.n	800e1a2 <dec_lock+0x2e>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e1a2:	89fb      	ldrh	r3, [r7, #14]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d002      	beq.n	800e1ae <dec_lock+0x3a>
 800e1a8:	89fb      	ldrh	r3, [r7, #14]
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e1ae:	4a0e      	ldr	r2, [pc, #56]	; (800e1e8 <dec_lock+0x74>)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	011b      	lsls	r3, r3, #4
 800e1b4:	4413      	add	r3, r2
 800e1b6:	330c      	adds	r3, #12
 800e1b8:	89fa      	ldrh	r2, [r7, #14]
 800e1ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e1bc:	89fb      	ldrh	r3, [r7, #14]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d105      	bne.n	800e1ce <dec_lock+0x5a>
 800e1c2:	4a09      	ldr	r2, [pc, #36]	; (800e1e8 <dec_lock+0x74>)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	011b      	lsls	r3, r3, #4
 800e1c8:	4413      	add	r3, r2
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	737b      	strb	r3, [r7, #13]
 800e1d2:	e001      	b.n	800e1d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e1d4:	2302      	movs	r3, #2
 800e1d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e1d8:	7b7b      	ldrb	r3, [r7, #13]
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3714      	adds	r7, #20
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	2000bda8 	.word	0x2000bda8

0800e1ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	60fb      	str	r3, [r7, #12]
 800e1f8:	e010      	b.n	800e21c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e1fa:	4a0d      	ldr	r2, [pc, #52]	; (800e230 <clear_lock+0x44>)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	011b      	lsls	r3, r3, #4
 800e200:	4413      	add	r3, r2
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	429a      	cmp	r2, r3
 800e208:	d105      	bne.n	800e216 <clear_lock+0x2a>
 800e20a:	4a09      	ldr	r2, [pc, #36]	; (800e230 <clear_lock+0x44>)
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	011b      	lsls	r3, r3, #4
 800e210:	4413      	add	r3, r2
 800e212:	2200      	movs	r2, #0
 800e214:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	3301      	adds	r3, #1
 800e21a:	60fb      	str	r3, [r7, #12]
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d9eb      	bls.n	800e1fa <clear_lock+0xe>
	}
}
 800e222:	bf00      	nop
 800e224:	bf00      	nop
 800e226:	3714      	adds	r7, #20
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr
 800e230:	2000bda8 	.word	0x2000bda8

0800e234 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b086      	sub	sp, #24
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e23c:	2300      	movs	r3, #0
 800e23e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	78db      	ldrb	r3, [r3, #3]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d034      	beq.n	800e2b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e24c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	7858      	ldrb	r0, [r3, #1]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e258:	2301      	movs	r3, #1
 800e25a:	697a      	ldr	r2, [r7, #20]
 800e25c:	f7ff fd40 	bl	800dce0 <disk_write>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d002      	beq.n	800e26c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e266:	2301      	movs	r3, #1
 800e268:	73fb      	strb	r3, [r7, #15]
 800e26a:	e022      	b.n	800e2b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2200      	movs	r2, #0
 800e270:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e276:	697a      	ldr	r2, [r7, #20]
 800e278:	1ad2      	subs	r2, r2, r3
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	69db      	ldr	r3, [r3, #28]
 800e27e:	429a      	cmp	r2, r3
 800e280:	d217      	bcs.n	800e2b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	789b      	ldrb	r3, [r3, #2]
 800e286:	613b      	str	r3, [r7, #16]
 800e288:	e010      	b.n	800e2ac <sync_window+0x78>
					wsect += fs->fsize;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	69db      	ldr	r3, [r3, #28]
 800e28e:	697a      	ldr	r2, [r7, #20]
 800e290:	4413      	add	r3, r2
 800e292:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	7858      	ldrb	r0, [r3, #1]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e29e:	2301      	movs	r3, #1
 800e2a0:	697a      	ldr	r2, [r7, #20]
 800e2a2:	f7ff fd1d 	bl	800dce0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	3b01      	subs	r3, #1
 800e2aa:	613b      	str	r3, [r7, #16]
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d8eb      	bhi.n	800e28a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3718      	adds	r7, #24
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ce:	683a      	ldr	r2, [r7, #0]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d01b      	beq.n	800e30c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7ff ffad 	bl	800e234 <sync_window>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e2de:	7bfb      	ldrb	r3, [r7, #15]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d113      	bne.n	800e30c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	7858      	ldrb	r0, [r3, #1]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	683a      	ldr	r2, [r7, #0]
 800e2f2:	f7ff fcd5 	bl	800dca0 <disk_read>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d004      	beq.n	800e306 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e300:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e302:	2301      	movs	r3, #1
 800e304:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	683a      	ldr	r2, [r7, #0]
 800e30a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
	...

0800e318 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f7ff ff87 	bl	800e234 <sync_window>
 800e326:	4603      	mov	r3, r0
 800e328:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e32a:	7bfb      	ldrb	r3, [r7, #15]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d158      	bne.n	800e3e2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	2b03      	cmp	r3, #3
 800e336:	d148      	bne.n	800e3ca <sync_fs+0xb2>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	791b      	ldrb	r3, [r3, #4]
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d144      	bne.n	800e3ca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	3334      	adds	r3, #52	; 0x34
 800e344:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e348:	2100      	movs	r1, #0
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7ff fda9 	bl	800dea2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	3334      	adds	r3, #52	; 0x34
 800e354:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e358:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7ff fd38 	bl	800ddd2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	3334      	adds	r3, #52	; 0x34
 800e366:	4921      	ldr	r1, [pc, #132]	; (800e3ec <sync_fs+0xd4>)
 800e368:	4618      	mov	r0, r3
 800e36a:	f7ff fd4d 	bl	800de08 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	3334      	adds	r3, #52	; 0x34
 800e372:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e376:	491e      	ldr	r1, [pc, #120]	; (800e3f0 <sync_fs+0xd8>)
 800e378:	4618      	mov	r0, r3
 800e37a:	f7ff fd45 	bl	800de08 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	3334      	adds	r3, #52	; 0x34
 800e382:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	695b      	ldr	r3, [r3, #20]
 800e38a:	4619      	mov	r1, r3
 800e38c:	4610      	mov	r0, r2
 800e38e:	f7ff fd3b 	bl	800de08 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	3334      	adds	r3, #52	; 0x34
 800e396:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	691b      	ldr	r3, [r3, #16]
 800e39e:	4619      	mov	r1, r3
 800e3a0:	4610      	mov	r0, r2
 800e3a2:	f7ff fd31 	bl	800de08 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6a1b      	ldr	r3, [r3, #32]
 800e3aa:	1c5a      	adds	r2, r3, #1
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	7858      	ldrb	r0, [r3, #1]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3be:	2301      	movs	r3, #1
 800e3c0:	f7ff fc8e 	bl	800dce0 <disk_write>
			fs->fsi_flag = 0;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	785b      	ldrb	r3, [r3, #1]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7ff fca4 	bl	800dd20 <disk_ioctl>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d001      	beq.n	800e3e2 <sync_fs+0xca>
 800e3de:	2301      	movs	r3, #1
 800e3e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e3e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3710      	adds	r7, #16
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	41615252 	.word	0x41615252
 800e3f0:	61417272 	.word	0x61417272

0800e3f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b083      	sub	sp, #12
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	3b02      	subs	r3, #2
 800e402:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	699b      	ldr	r3, [r3, #24]
 800e408:	3b02      	subs	r3, #2
 800e40a:	683a      	ldr	r2, [r7, #0]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d301      	bcc.n	800e414 <clust2sect+0x20>
 800e410:	2300      	movs	r3, #0
 800e412:	e008      	b.n	800e426 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	895b      	ldrh	r3, [r3, #10]
 800e418:	461a      	mov	r2, r3
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	fb03 f202 	mul.w	r2, r3, r2
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e424:	4413      	add	r3, r2
}
 800e426:	4618      	mov	r0, r3
 800e428:	370c      	adds	r7, #12
 800e42a:	46bd      	mov	sp, r7
 800e42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e430:	4770      	bx	lr

0800e432 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e432:	b580      	push	{r7, lr}
 800e434:	b086      	sub	sp, #24
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
 800e43a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	2b01      	cmp	r3, #1
 800e446:	d904      	bls.n	800e452 <get_fat+0x20>
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	699b      	ldr	r3, [r3, #24]
 800e44c:	683a      	ldr	r2, [r7, #0]
 800e44e:	429a      	cmp	r2, r3
 800e450:	d302      	bcc.n	800e458 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e452:	2301      	movs	r3, #1
 800e454:	617b      	str	r3, [r7, #20]
 800e456:	e08f      	b.n	800e578 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e458:	f04f 33ff 	mov.w	r3, #4294967295
 800e45c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	2b03      	cmp	r3, #3
 800e464:	d062      	beq.n	800e52c <get_fat+0xfa>
 800e466:	2b03      	cmp	r3, #3
 800e468:	dc7c      	bgt.n	800e564 <get_fat+0x132>
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d002      	beq.n	800e474 <get_fat+0x42>
 800e46e:	2b02      	cmp	r3, #2
 800e470:	d042      	beq.n	800e4f8 <get_fat+0xc6>
 800e472:	e077      	b.n	800e564 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	60fb      	str	r3, [r7, #12]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	085b      	lsrs	r3, r3, #1
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	4413      	add	r3, r2
 800e480:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	0a5b      	lsrs	r3, r3, #9
 800e48a:	4413      	add	r3, r2
 800e48c:	4619      	mov	r1, r3
 800e48e:	6938      	ldr	r0, [r7, #16]
 800e490:	f7ff ff14 	bl	800e2bc <move_window>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d167      	bne.n	800e56a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	1c5a      	adds	r2, r3, #1
 800e49e:	60fa      	str	r2, [r7, #12]
 800e4a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4a4:	693a      	ldr	r2, [r7, #16]
 800e4a6:	4413      	add	r3, r2
 800e4a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e4ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	0a5b      	lsrs	r3, r3, #9
 800e4b6:	4413      	add	r3, r2
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	6938      	ldr	r0, [r7, #16]
 800e4bc:	f7ff fefe 	bl	800e2bc <move_window>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d153      	bne.n	800e56e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4cc:	693a      	ldr	r2, [r7, #16]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e4d4:	021b      	lsls	r3, r3, #8
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	4313      	orrs	r3, r2
 800e4dc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	f003 0301 	and.w	r3, r3, #1
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d002      	beq.n	800e4ee <get_fat+0xbc>
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	091b      	lsrs	r3, r3, #4
 800e4ec:	e002      	b.n	800e4f4 <get_fat+0xc2>
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e4f4:	617b      	str	r3, [r7, #20]
			break;
 800e4f6:	e03f      	b.n	800e578 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	0a1b      	lsrs	r3, r3, #8
 800e500:	4413      	add	r3, r2
 800e502:	4619      	mov	r1, r3
 800e504:	6938      	ldr	r0, [r7, #16]
 800e506:	f7ff fed9 	bl	800e2bc <move_window>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d130      	bne.n	800e572 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	005b      	lsls	r3, r3, #1
 800e51a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e51e:	4413      	add	r3, r2
 800e520:	4618      	mov	r0, r3
 800e522:	f7ff fc1b 	bl	800dd5c <ld_word>
 800e526:	4603      	mov	r3, r0
 800e528:	617b      	str	r3, [r7, #20]
			break;
 800e52a:	e025      	b.n	800e578 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	09db      	lsrs	r3, r3, #7
 800e534:	4413      	add	r3, r2
 800e536:	4619      	mov	r1, r3
 800e538:	6938      	ldr	r0, [r7, #16]
 800e53a:	f7ff febf 	bl	800e2bc <move_window>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d118      	bne.n	800e576 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	009b      	lsls	r3, r3, #2
 800e54e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e552:	4413      	add	r3, r2
 800e554:	4618      	mov	r0, r3
 800e556:	f7ff fc19 	bl	800dd8c <ld_dword>
 800e55a:	4603      	mov	r3, r0
 800e55c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e560:	617b      	str	r3, [r7, #20]
			break;
 800e562:	e009      	b.n	800e578 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e564:	2301      	movs	r3, #1
 800e566:	617b      	str	r3, [r7, #20]
 800e568:	e006      	b.n	800e578 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e56a:	bf00      	nop
 800e56c:	e004      	b.n	800e578 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e56e:	bf00      	nop
 800e570:	e002      	b.n	800e578 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e572:	bf00      	nop
 800e574:	e000      	b.n	800e578 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e576:	bf00      	nop
		}
	}

	return val;
 800e578:	697b      	ldr	r3, [r7, #20]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3718      	adds	r7, #24
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e582:	b590      	push	{r4, r7, lr}
 800e584:	b089      	sub	sp, #36	; 0x24
 800e586:	af00      	add	r7, sp, #0
 800e588:	60f8      	str	r0, [r7, #12]
 800e58a:	60b9      	str	r1, [r7, #8]
 800e58c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e58e:	2302      	movs	r3, #2
 800e590:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	2b01      	cmp	r3, #1
 800e596:	f240 80d9 	bls.w	800e74c <put_fat+0x1ca>
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	699b      	ldr	r3, [r3, #24]
 800e59e:	68ba      	ldr	r2, [r7, #8]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	f080 80d3 	bcs.w	800e74c <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	2b03      	cmp	r3, #3
 800e5ac:	f000 8096 	beq.w	800e6dc <put_fat+0x15a>
 800e5b0:	2b03      	cmp	r3, #3
 800e5b2:	f300 80cb 	bgt.w	800e74c <put_fat+0x1ca>
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d002      	beq.n	800e5c0 <put_fat+0x3e>
 800e5ba:	2b02      	cmp	r3, #2
 800e5bc:	d06e      	beq.n	800e69c <put_fat+0x11a>
 800e5be:	e0c5      	b.n	800e74c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	61bb      	str	r3, [r7, #24]
 800e5c4:	69bb      	ldr	r3, [r7, #24]
 800e5c6:	085b      	lsrs	r3, r3, #1
 800e5c8:	69ba      	ldr	r2, [r7, #24]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5d2:	69bb      	ldr	r3, [r7, #24]
 800e5d4:	0a5b      	lsrs	r3, r3, #9
 800e5d6:	4413      	add	r3, r2
 800e5d8:	4619      	mov	r1, r3
 800e5da:	68f8      	ldr	r0, [r7, #12]
 800e5dc:	f7ff fe6e 	bl	800e2bc <move_window>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e5e4:	7ffb      	ldrb	r3, [r7, #31]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f040 80a9 	bne.w	800e73e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	1c59      	adds	r1, r3, #1
 800e5f6:	61b9      	str	r1, [r7, #24]
 800e5f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5fc:	4413      	add	r3, r2
 800e5fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	f003 0301 	and.w	r3, r3, #1
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00d      	beq.n	800e626 <put_fat+0xa4>
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	b25b      	sxtb	r3, r3
 800e610:	f003 030f 	and.w	r3, r3, #15
 800e614:	b25a      	sxtb	r2, r3
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	011b      	lsls	r3, r3, #4
 800e61c:	b25b      	sxtb	r3, r3
 800e61e:	4313      	orrs	r3, r2
 800e620:	b25b      	sxtb	r3, r3
 800e622:	b2db      	uxtb	r3, r3
 800e624:	e001      	b.n	800e62a <put_fat+0xa8>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	697a      	ldr	r2, [r7, #20]
 800e62c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2201      	movs	r2, #1
 800e632:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e638:	69bb      	ldr	r3, [r7, #24]
 800e63a:	0a5b      	lsrs	r3, r3, #9
 800e63c:	4413      	add	r3, r2
 800e63e:	4619      	mov	r1, r3
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f7ff fe3b 	bl	800e2bc <move_window>
 800e646:	4603      	mov	r3, r0
 800e648:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e64a:	7ffb      	ldrb	r3, [r7, #31]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d178      	bne.n	800e742 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e65c:	4413      	add	r3, r2
 800e65e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	f003 0301 	and.w	r3, r3, #1
 800e666:	2b00      	cmp	r3, #0
 800e668:	d003      	beq.n	800e672 <put_fat+0xf0>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	091b      	lsrs	r3, r3, #4
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	e00e      	b.n	800e690 <put_fat+0x10e>
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	b25b      	sxtb	r3, r3
 800e678:	f023 030f 	bic.w	r3, r3, #15
 800e67c:	b25a      	sxtb	r2, r3
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	0a1b      	lsrs	r3, r3, #8
 800e682:	b25b      	sxtb	r3, r3
 800e684:	f003 030f 	and.w	r3, r3, #15
 800e688:	b25b      	sxtb	r3, r3
 800e68a:	4313      	orrs	r3, r2
 800e68c:	b25b      	sxtb	r3, r3
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	697a      	ldr	r2, [r7, #20]
 800e692:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2201      	movs	r2, #1
 800e698:	70da      	strb	r2, [r3, #3]
			break;
 800e69a:	e057      	b.n	800e74c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	0a1b      	lsrs	r3, r3, #8
 800e6a4:	4413      	add	r3, r2
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	f7ff fe07 	bl	800e2bc <move_window>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e6b2:	7ffb      	ldrb	r3, [r7, #31]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d146      	bne.n	800e746 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	005b      	lsls	r3, r3, #1
 800e6c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e6c6:	4413      	add	r3, r2
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	b292      	uxth	r2, r2
 800e6cc:	4611      	mov	r1, r2
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7ff fb7f 	bl	800ddd2 <st_word>
			fs->wflag = 1;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	70da      	strb	r2, [r3, #3]
			break;
 800e6da:	e037      	b.n	800e74c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	09db      	lsrs	r3, r3, #7
 800e6e4:	4413      	add	r3, r2
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	f7ff fde7 	bl	800e2bc <move_window>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e6f2:	7ffb      	ldrb	r3, [r7, #31]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d128      	bne.n	800e74a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	009b      	lsls	r3, r3, #2
 800e708:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e70c:	4413      	add	r3, r2
 800e70e:	4618      	mov	r0, r3
 800e710:	f7ff fb3c 	bl	800dd8c <ld_dword>
 800e714:	4603      	mov	r3, r0
 800e716:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e71a:	4323      	orrs	r3, r4
 800e71c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e72c:	4413      	add	r3, r2
 800e72e:	6879      	ldr	r1, [r7, #4]
 800e730:	4618      	mov	r0, r3
 800e732:	f7ff fb69 	bl	800de08 <st_dword>
			fs->wflag = 1;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2201      	movs	r2, #1
 800e73a:	70da      	strb	r2, [r3, #3]
			break;
 800e73c:	e006      	b.n	800e74c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e73e:	bf00      	nop
 800e740:	e004      	b.n	800e74c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e742:	bf00      	nop
 800e744:	e002      	b.n	800e74c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e746:	bf00      	nop
 800e748:	e000      	b.n	800e74c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e74a:	bf00      	nop
		}
	}
	return res;
 800e74c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3724      	adds	r7, #36	; 0x24
 800e752:	46bd      	mov	sp, r7
 800e754:	bd90      	pop	{r4, r7, pc}

0800e756 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b088      	sub	sp, #32
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	60f8      	str	r0, [r7, #12]
 800e75e:	60b9      	str	r1, [r7, #8]
 800e760:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e762:	2300      	movs	r3, #0
 800e764:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d904      	bls.n	800e77c <remove_chain+0x26>
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	699b      	ldr	r3, [r3, #24]
 800e776:	68ba      	ldr	r2, [r7, #8]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d301      	bcc.n	800e780 <remove_chain+0x2a>
 800e77c:	2302      	movs	r3, #2
 800e77e:	e04b      	b.n	800e818 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00c      	beq.n	800e7a0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e786:	f04f 32ff 	mov.w	r2, #4294967295
 800e78a:	6879      	ldr	r1, [r7, #4]
 800e78c:	69b8      	ldr	r0, [r7, #24]
 800e78e:	f7ff fef8 	bl	800e582 <put_fat>
 800e792:	4603      	mov	r3, r0
 800e794:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e796:	7ffb      	ldrb	r3, [r7, #31]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d001      	beq.n	800e7a0 <remove_chain+0x4a>
 800e79c:	7ffb      	ldrb	r3, [r7, #31]
 800e79e:	e03b      	b.n	800e818 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e7a0:	68b9      	ldr	r1, [r7, #8]
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f7ff fe45 	bl	800e432 <get_fat>
 800e7a8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d031      	beq.n	800e814 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d101      	bne.n	800e7ba <remove_chain+0x64>
 800e7b6:	2302      	movs	r3, #2
 800e7b8:	e02e      	b.n	800e818 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7c0:	d101      	bne.n	800e7c6 <remove_chain+0x70>
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	e028      	b.n	800e818 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	68b9      	ldr	r1, [r7, #8]
 800e7ca:	69b8      	ldr	r0, [r7, #24]
 800e7cc:	f7ff fed9 	bl	800e582 <put_fat>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e7d4:	7ffb      	ldrb	r3, [r7, #31]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d001      	beq.n	800e7de <remove_chain+0x88>
 800e7da:	7ffb      	ldrb	r3, [r7, #31]
 800e7dc:	e01c      	b.n	800e818 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	695a      	ldr	r2, [r3, #20]
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	3b02      	subs	r3, #2
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d20b      	bcs.n	800e804 <remove_chain+0xae>
			fs->free_clst++;
 800e7ec:	69bb      	ldr	r3, [r7, #24]
 800e7ee:	695b      	ldr	r3, [r3, #20]
 800e7f0:	1c5a      	adds	r2, r3, #1
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	791b      	ldrb	r3, [r3, #4]
 800e7fa:	f043 0301 	orr.w	r3, r3, #1
 800e7fe:	b2da      	uxtb	r2, r3
 800e800:	69bb      	ldr	r3, [r7, #24]
 800e802:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e808:	69bb      	ldr	r3, [r7, #24]
 800e80a:	699b      	ldr	r3, [r3, #24]
 800e80c:	68ba      	ldr	r2, [r7, #8]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d3c6      	bcc.n	800e7a0 <remove_chain+0x4a>
 800e812:	e000      	b.n	800e816 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e814:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e816:	2300      	movs	r3, #0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3720      	adds	r7, #32
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b088      	sub	sp, #32
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d10d      	bne.n	800e852 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	691b      	ldr	r3, [r3, #16]
 800e83a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d004      	beq.n	800e84c <create_chain+0x2c>
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	699b      	ldr	r3, [r3, #24]
 800e846:	69ba      	ldr	r2, [r7, #24]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d31b      	bcc.n	800e884 <create_chain+0x64>
 800e84c:	2301      	movs	r3, #1
 800e84e:	61bb      	str	r3, [r7, #24]
 800e850:	e018      	b.n	800e884 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e852:	6839      	ldr	r1, [r7, #0]
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f7ff fdec 	bl	800e432 <get_fat>
 800e85a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d801      	bhi.n	800e866 <create_chain+0x46>
 800e862:	2301      	movs	r3, #1
 800e864:	e070      	b.n	800e948 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e86c:	d101      	bne.n	800e872 <create_chain+0x52>
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	e06a      	b.n	800e948 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	699b      	ldr	r3, [r3, #24]
 800e876:	68fa      	ldr	r2, [r7, #12]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d201      	bcs.n	800e880 <create_chain+0x60>
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	e063      	b.n	800e948 <create_chain+0x128>
		scl = clst;
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e884:	69bb      	ldr	r3, [r7, #24]
 800e886:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	3301      	adds	r3, #1
 800e88c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	699b      	ldr	r3, [r3, #24]
 800e892:	69fa      	ldr	r2, [r7, #28]
 800e894:	429a      	cmp	r2, r3
 800e896:	d307      	bcc.n	800e8a8 <create_chain+0x88>
				ncl = 2;
 800e898:	2302      	movs	r3, #2
 800e89a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e89c:	69fa      	ldr	r2, [r7, #28]
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d901      	bls.n	800e8a8 <create_chain+0x88>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	e04f      	b.n	800e948 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e8a8:	69f9      	ldr	r1, [r7, #28]
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7ff fdc1 	bl	800e432 <get_fat>
 800e8b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d00e      	beq.n	800e8d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2b01      	cmp	r3, #1
 800e8bc:	d003      	beq.n	800e8c6 <create_chain+0xa6>
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8c4:	d101      	bne.n	800e8ca <create_chain+0xaa>
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	e03e      	b.n	800e948 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e8ca:	69fa      	ldr	r2, [r7, #28]
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d1da      	bne.n	800e888 <create_chain+0x68>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	e038      	b.n	800e948 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e8d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e8dc:	69f9      	ldr	r1, [r7, #28]
 800e8de:	6938      	ldr	r0, [r7, #16]
 800e8e0:	f7ff fe4f 	bl	800e582 <put_fat>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e8e8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d109      	bne.n	800e902 <create_chain+0xe2>
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d006      	beq.n	800e902 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e8f4:	69fa      	ldr	r2, [r7, #28]
 800e8f6:	6839      	ldr	r1, [r7, #0]
 800e8f8:	6938      	ldr	r0, [r7, #16]
 800e8fa:	f7ff fe42 	bl	800e582 <put_fat>
 800e8fe:	4603      	mov	r3, r0
 800e900:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e902:	7dfb      	ldrb	r3, [r7, #23]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d116      	bne.n	800e936 <create_chain+0x116>
		fs->last_clst = ncl;
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	69fa      	ldr	r2, [r7, #28]
 800e90c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	695a      	ldr	r2, [r3, #20]
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	3b02      	subs	r3, #2
 800e918:	429a      	cmp	r2, r3
 800e91a:	d804      	bhi.n	800e926 <create_chain+0x106>
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	695b      	ldr	r3, [r3, #20]
 800e920:	1e5a      	subs	r2, r3, #1
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	791b      	ldrb	r3, [r3, #4]
 800e92a:	f043 0301 	orr.w	r3, r3, #1
 800e92e:	b2da      	uxtb	r2, r3
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	711a      	strb	r2, [r3, #4]
 800e934:	e007      	b.n	800e946 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e936:	7dfb      	ldrb	r3, [r7, #23]
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d102      	bne.n	800e942 <create_chain+0x122>
 800e93c:	f04f 33ff 	mov.w	r3, #4294967295
 800e940:	e000      	b.n	800e944 <create_chain+0x124>
 800e942:	2301      	movs	r3, #1
 800e944:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e946:	69fb      	ldr	r3, [r7, #28]
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3720      	adds	r7, #32
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e950:	b480      	push	{r7}
 800e952:	b087      	sub	sp, #28
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e964:	3304      	adds	r3, #4
 800e966:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	0a5b      	lsrs	r3, r3, #9
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	8952      	ldrh	r2, [r2, #10]
 800e970:	fbb3 f3f2 	udiv	r3, r3, r2
 800e974:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	1d1a      	adds	r2, r3, #4
 800e97a:	613a      	str	r2, [r7, #16]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d101      	bne.n	800e98a <clmt_clust+0x3a>
 800e986:	2300      	movs	r3, #0
 800e988:	e010      	b.n	800e9ac <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e98a:	697a      	ldr	r2, [r7, #20]
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d307      	bcc.n	800e9a2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	1ad3      	subs	r3, r2, r3
 800e998:	617b      	str	r3, [r7, #20]
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	3304      	adds	r3, #4
 800e99e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e9a0:	e7e9      	b.n	800e976 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e9a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	4413      	add	r3, r2
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	371c      	adds	r7, #28
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr

0800e9b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b086      	sub	sp, #24
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e9ce:	d204      	bcs.n	800e9da <dir_sdi+0x22>
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	f003 031f 	and.w	r3, r3, #31
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d001      	beq.n	800e9de <dir_sdi+0x26>
		return FR_INT_ERR;
 800e9da:	2302      	movs	r3, #2
 800e9dc:	e063      	b.n	800eaa6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	683a      	ldr	r2, [r7, #0]
 800e9e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	689b      	ldr	r3, [r3, #8]
 800e9e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d106      	bne.n	800e9fe <dir_sdi+0x46>
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	2b02      	cmp	r3, #2
 800e9f6:	d902      	bls.n	800e9fe <dir_sdi+0x46>
		clst = fs->dirbase;
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d10c      	bne.n	800ea1e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	095b      	lsrs	r3, r3, #5
 800ea08:	693a      	ldr	r2, [r7, #16]
 800ea0a:	8912      	ldrh	r2, [r2, #8]
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d301      	bcc.n	800ea14 <dir_sdi+0x5c>
 800ea10:	2302      	movs	r3, #2
 800ea12:	e048      	b.n	800eaa6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	61da      	str	r2, [r3, #28]
 800ea1c:	e029      	b.n	800ea72 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	895b      	ldrh	r3, [r3, #10]
 800ea22:	025b      	lsls	r3, r3, #9
 800ea24:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ea26:	e019      	b.n	800ea5c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6979      	ldr	r1, [r7, #20]
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7ff fd00 	bl	800e432 <get_fat>
 800ea32:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea3a:	d101      	bne.n	800ea40 <dir_sdi+0x88>
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	e032      	b.n	800eaa6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d904      	bls.n	800ea50 <dir_sdi+0x98>
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	699b      	ldr	r3, [r3, #24]
 800ea4a:	697a      	ldr	r2, [r7, #20]
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d301      	bcc.n	800ea54 <dir_sdi+0x9c>
 800ea50:	2302      	movs	r3, #2
 800ea52:	e028      	b.n	800eaa6 <dir_sdi+0xee>
			ofs -= csz;
 800ea54:	683a      	ldr	r2, [r7, #0]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	1ad3      	subs	r3, r2, r3
 800ea5a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ea5c:	683a      	ldr	r2, [r7, #0]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d2e1      	bcs.n	800ea28 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ea64:	6979      	ldr	r1, [r7, #20]
 800ea66:	6938      	ldr	r0, [r7, #16]
 800ea68:	f7ff fcc4 	bl	800e3f4 <clust2sect>
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	697a      	ldr	r2, [r7, #20]
 800ea76:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	69db      	ldr	r3, [r3, #28]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d101      	bne.n	800ea84 <dir_sdi+0xcc>
 800ea80:	2302      	movs	r3, #2
 800ea82:	e010      	b.n	800eaa6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	69da      	ldr	r2, [r3, #28]
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	0a5b      	lsrs	r3, r3, #9
 800ea8c:	441a      	add	r2, r3
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea9e:	441a      	add	r2, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eaa4:	2300      	movs	r3, #0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3718      	adds	r7, #24
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}

0800eaae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b086      	sub	sp, #24
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
 800eab6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	695b      	ldr	r3, [r3, #20]
 800eac2:	3320      	adds	r3, #32
 800eac4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	69db      	ldr	r3, [r3, #28]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d003      	beq.n	800ead6 <dir_next+0x28>
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ead4:	d301      	bcc.n	800eada <dir_next+0x2c>
 800ead6:	2304      	movs	r3, #4
 800ead8:	e0aa      	b.n	800ec30 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f040 8098 	bne.w	800ec16 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	69db      	ldr	r3, [r3, #28]
 800eaea:	1c5a      	adds	r2, r3, #1
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	699b      	ldr	r3, [r3, #24]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d10b      	bne.n	800eb10 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	095b      	lsrs	r3, r3, #5
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	8912      	ldrh	r2, [r2, #8]
 800eb00:	4293      	cmp	r3, r2
 800eb02:	f0c0 8088 	bcc.w	800ec16 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	61da      	str	r2, [r3, #28]
 800eb0c:	2304      	movs	r3, #4
 800eb0e:	e08f      	b.n	800ec30 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	0a5b      	lsrs	r3, r3, #9
 800eb14:	68fa      	ldr	r2, [r7, #12]
 800eb16:	8952      	ldrh	r2, [r2, #10]
 800eb18:	3a01      	subs	r2, #1
 800eb1a:	4013      	ands	r3, r2
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d17a      	bne.n	800ec16 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	699b      	ldr	r3, [r3, #24]
 800eb26:	4619      	mov	r1, r3
 800eb28:	4610      	mov	r0, r2
 800eb2a:	f7ff fc82 	bl	800e432 <get_fat>
 800eb2e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	2b01      	cmp	r3, #1
 800eb34:	d801      	bhi.n	800eb3a <dir_next+0x8c>
 800eb36:	2302      	movs	r3, #2
 800eb38:	e07a      	b.n	800ec30 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb40:	d101      	bne.n	800eb46 <dir_next+0x98>
 800eb42:	2301      	movs	r3, #1
 800eb44:	e074      	b.n	800ec30 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	699b      	ldr	r3, [r3, #24]
 800eb4a:	697a      	ldr	r2, [r7, #20]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d358      	bcc.n	800ec02 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d104      	bne.n	800eb60 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	61da      	str	r2, [r3, #28]
 800eb5c:	2304      	movs	r3, #4
 800eb5e:	e067      	b.n	800ec30 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	699b      	ldr	r3, [r3, #24]
 800eb66:	4619      	mov	r1, r3
 800eb68:	4610      	mov	r0, r2
 800eb6a:	f7ff fe59 	bl	800e820 <create_chain>
 800eb6e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d101      	bne.n	800eb7a <dir_next+0xcc>
 800eb76:	2307      	movs	r3, #7
 800eb78:	e05a      	b.n	800ec30 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d101      	bne.n	800eb84 <dir_next+0xd6>
 800eb80:	2302      	movs	r3, #2
 800eb82:	e055      	b.n	800ec30 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb8a:	d101      	bne.n	800eb90 <dir_next+0xe2>
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e04f      	b.n	800ec30 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f7ff fb4f 	bl	800e234 <sync_window>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d001      	beq.n	800eba0 <dir_next+0xf2>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e047      	b.n	800ec30 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	3334      	adds	r3, #52	; 0x34
 800eba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eba8:	2100      	movs	r1, #0
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7ff f979 	bl	800dea2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	613b      	str	r3, [r7, #16]
 800ebb4:	6979      	ldr	r1, [r7, #20]
 800ebb6:	68f8      	ldr	r0, [r7, #12]
 800ebb8:	f7ff fc1c 	bl	800e3f4 <clust2sect>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	631a      	str	r2, [r3, #48]	; 0x30
 800ebc2:	e012      	b.n	800ebea <dir_next+0x13c>
						fs->wflag = 1;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ebca:	68f8      	ldr	r0, [r7, #12]
 800ebcc:	f7ff fb32 	bl	800e234 <sync_window>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d001      	beq.n	800ebda <dir_next+0x12c>
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	e02a      	b.n	800ec30 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	613b      	str	r3, [r7, #16]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebe4:	1c5a      	adds	r2, r3, #1
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	631a      	str	r2, [r3, #48]	; 0x30
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	895b      	ldrh	r3, [r3, #10]
 800ebee:	461a      	mov	r2, r3
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d3e6      	bcc.n	800ebc4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	1ad2      	subs	r2, r2, r3
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	697a      	ldr	r2, [r7, #20]
 800ec06:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ec08:	6979      	ldr	r1, [r7, #20]
 800ec0a:	68f8      	ldr	r0, [r7, #12]
 800ec0c:	f7ff fbf2 	bl	800e3f4 <clust2sect>
 800ec10:	4602      	mov	r2, r0
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	68ba      	ldr	r2, [r7, #8]
 800ec1a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec28:	441a      	add	r2, r3
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ec2e:	2300      	movs	r3, #0
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3718      	adds	r7, #24
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b086      	sub	sp, #24
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ec48:	2100      	movs	r1, #0
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f7ff feb4 	bl	800e9b8 <dir_sdi>
 800ec50:	4603      	mov	r3, r0
 800ec52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ec54:	7dfb      	ldrb	r3, [r7, #23]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d12b      	bne.n	800ecb2 <dir_alloc+0x7a>
		n = 0;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	69db      	ldr	r3, [r3, #28]
 800ec62:	4619      	mov	r1, r3
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f7ff fb29 	bl	800e2bc <move_window>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ec6e:	7dfb      	ldrb	r3, [r7, #23]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d11d      	bne.n	800ecb0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6a1b      	ldr	r3, [r3, #32]
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	2be5      	cmp	r3, #229	; 0xe5
 800ec7c:	d004      	beq.n	800ec88 <dir_alloc+0x50>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6a1b      	ldr	r3, [r3, #32]
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d107      	bne.n	800ec98 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	613b      	str	r3, [r7, #16]
 800ec8e:	693a      	ldr	r2, [r7, #16]
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d102      	bne.n	800ec9c <dir_alloc+0x64>
 800ec96:	e00c      	b.n	800ecb2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ec98:	2300      	movs	r3, #0
 800ec9a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ec9c:	2101      	movs	r1, #1
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f7ff ff05 	bl	800eaae <dir_next>
 800eca4:	4603      	mov	r3, r0
 800eca6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800eca8:	7dfb      	ldrb	r3, [r7, #23]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d0d7      	beq.n	800ec5e <dir_alloc+0x26>
 800ecae:	e000      	b.n	800ecb2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ecb0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ecb2:	7dfb      	ldrb	r3, [r7, #23]
 800ecb4:	2b04      	cmp	r3, #4
 800ecb6:	d101      	bne.n	800ecbc <dir_alloc+0x84>
 800ecb8:	2307      	movs	r3, #7
 800ecba:	75fb      	strb	r3, [r7, #23]
	return res;
 800ecbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3718      	adds	r7, #24
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b084      	sub	sp, #16
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
 800ecce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	331a      	adds	r3, #26
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7ff f841 	bl	800dd5c <ld_word>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	2b03      	cmp	r3, #3
 800ece4:	d109      	bne.n	800ecfa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	3314      	adds	r3, #20
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7ff f836 	bl	800dd5c <ld_word>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	041b      	lsls	r3, r3, #16
 800ecf4:	68fa      	ldr	r2, [r7, #12]
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3710      	adds	r7, #16
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b084      	sub	sp, #16
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	331a      	adds	r3, #26
 800ed14:	687a      	ldr	r2, [r7, #4]
 800ed16:	b292      	uxth	r2, r2
 800ed18:	4611      	mov	r1, r2
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7ff f859 	bl	800ddd2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	2b03      	cmp	r3, #3
 800ed26:	d109      	bne.n	800ed3c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	f103 0214 	add.w	r2, r3, #20
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	0c1b      	lsrs	r3, r3, #16
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	4619      	mov	r1, r3
 800ed36:	4610      	mov	r0, r2
 800ed38:	f7ff f84b 	bl	800ddd2 <st_word>
	}
}
 800ed3c:	bf00      	nop
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ed44:	b590      	push	{r4, r7, lr}
 800ed46:	b087      	sub	sp, #28
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	331a      	adds	r3, #26
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7ff f802 	bl	800dd5c <ld_word>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d001      	beq.n	800ed62 <cmp_lfn+0x1e>
 800ed5e:	2300      	movs	r3, #0
 800ed60:	e059      	b.n	800ee16 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed6a:	1e5a      	subs	r2, r3, #1
 800ed6c:	4613      	mov	r3, r2
 800ed6e:	005b      	lsls	r3, r3, #1
 800ed70:	4413      	add	r3, r2
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	4413      	add	r3, r2
 800ed76:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ed78:	2301      	movs	r3, #1
 800ed7a:	81fb      	strh	r3, [r7, #14]
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	613b      	str	r3, [r7, #16]
 800ed80:	e033      	b.n	800edea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ed82:	4a27      	ldr	r2, [pc, #156]	; (800ee20 <cmp_lfn+0xdc>)
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	4413      	add	r3, r2
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	4413      	add	r3, r2
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7fe ffe3 	bl	800dd5c <ld_word>
 800ed96:	4603      	mov	r3, r0
 800ed98:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ed9a:	89fb      	ldrh	r3, [r7, #14]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d01a      	beq.n	800edd6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	2bfe      	cmp	r3, #254	; 0xfe
 800eda4:	d812      	bhi.n	800edcc <cmp_lfn+0x88>
 800eda6:	89bb      	ldrh	r3, [r7, #12]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f002 fc61 	bl	8011670 <ff_wtoupper>
 800edae:	4603      	mov	r3, r0
 800edb0:	461c      	mov	r4, r3
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	1c5a      	adds	r2, r3, #1
 800edb6:	617a      	str	r2, [r7, #20]
 800edb8:	005b      	lsls	r3, r3, #1
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	4413      	add	r3, r2
 800edbe:	881b      	ldrh	r3, [r3, #0]
 800edc0:	4618      	mov	r0, r3
 800edc2:	f002 fc55 	bl	8011670 <ff_wtoupper>
 800edc6:	4603      	mov	r3, r0
 800edc8:	429c      	cmp	r4, r3
 800edca:	d001      	beq.n	800edd0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800edcc:	2300      	movs	r3, #0
 800edce:	e022      	b.n	800ee16 <cmp_lfn+0xd2>
			}
			wc = uc;
 800edd0:	89bb      	ldrh	r3, [r7, #12]
 800edd2:	81fb      	strh	r3, [r7, #14]
 800edd4:	e006      	b.n	800ede4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800edd6:	89bb      	ldrh	r3, [r7, #12]
 800edd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eddc:	4293      	cmp	r3, r2
 800edde:	d001      	beq.n	800ede4 <cmp_lfn+0xa0>
 800ede0:	2300      	movs	r3, #0
 800ede2:	e018      	b.n	800ee16 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	3301      	adds	r3, #1
 800ede8:	613b      	str	r3, [r7, #16]
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	2b0c      	cmp	r3, #12
 800edee:	d9c8      	bls.n	800ed82 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d00b      	beq.n	800ee14 <cmp_lfn+0xd0>
 800edfc:	89fb      	ldrh	r3, [r7, #14]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d008      	beq.n	800ee14 <cmp_lfn+0xd0>
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	005b      	lsls	r3, r3, #1
 800ee06:	687a      	ldr	r2, [r7, #4]
 800ee08:	4413      	add	r3, r2
 800ee0a:	881b      	ldrh	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d001      	beq.n	800ee14 <cmp_lfn+0xd0>
 800ee10:	2300      	movs	r3, #0
 800ee12:	e000      	b.n	800ee16 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ee14:	2301      	movs	r3, #1
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	371c      	adds	r7, #28
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd90      	pop	{r4, r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	080277f4 	.word	0x080277f4

0800ee24 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b088      	sub	sp, #32
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	60b9      	str	r1, [r7, #8]
 800ee2e:	4611      	mov	r1, r2
 800ee30:	461a      	mov	r2, r3
 800ee32:	460b      	mov	r3, r1
 800ee34:	71fb      	strb	r3, [r7, #7]
 800ee36:	4613      	mov	r3, r2
 800ee38:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	330d      	adds	r3, #13
 800ee3e:	79ba      	ldrb	r2, [r7, #6]
 800ee40:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	330b      	adds	r3, #11
 800ee46:	220f      	movs	r2, #15
 800ee48:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	330c      	adds	r3, #12
 800ee4e:	2200      	movs	r2, #0
 800ee50:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	331a      	adds	r3, #26
 800ee56:	2100      	movs	r1, #0
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fe ffba 	bl	800ddd2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ee5e:	79fb      	ldrb	r3, [r7, #7]
 800ee60:	1e5a      	subs	r2, r3, #1
 800ee62:	4613      	mov	r3, r2
 800ee64:	005b      	lsls	r3, r3, #1
 800ee66:	4413      	add	r3, r2
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	4413      	add	r3, r2
 800ee6c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	82fb      	strh	r3, [r7, #22]
 800ee72:	2300      	movs	r3, #0
 800ee74:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ee76:	8afb      	ldrh	r3, [r7, #22]
 800ee78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d007      	beq.n	800ee90 <put_lfn+0x6c>
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	1c5a      	adds	r2, r3, #1
 800ee84:	61fa      	str	r2, [r7, #28]
 800ee86:	005b      	lsls	r3, r3, #1
 800ee88:	68fa      	ldr	r2, [r7, #12]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	881b      	ldrh	r3, [r3, #0]
 800ee8e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ee90:	4a17      	ldr	r2, [pc, #92]	; (800eef0 <put_lfn+0xcc>)
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	4413      	add	r3, r2
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	461a      	mov	r2, r3
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	8afa      	ldrh	r2, [r7, #22]
 800eea0:	4611      	mov	r1, r2
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fe ff95 	bl	800ddd2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800eea8:	8afb      	ldrh	r3, [r7, #22]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d102      	bne.n	800eeb4 <put_lfn+0x90>
 800eeae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eeb2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	61bb      	str	r3, [r7, #24]
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	2b0c      	cmp	r3, #12
 800eebe:	d9da      	bls.n	800ee76 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800eec0:	8afb      	ldrh	r3, [r7, #22]
 800eec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d006      	beq.n	800eed8 <put_lfn+0xb4>
 800eeca:	69fb      	ldr	r3, [r7, #28]
 800eecc:	005b      	lsls	r3, r3, #1
 800eece:	68fa      	ldr	r2, [r7, #12]
 800eed0:	4413      	add	r3, r2
 800eed2:	881b      	ldrh	r3, [r3, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d103      	bne.n	800eee0 <put_lfn+0xbc>
 800eed8:	79fb      	ldrb	r3, [r7, #7]
 800eeda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eede:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	79fa      	ldrb	r2, [r7, #7]
 800eee4:	701a      	strb	r2, [r3, #0]
}
 800eee6:	bf00      	nop
 800eee8:	3720      	adds	r7, #32
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	080277f4 	.word	0x080277f4

0800eef4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b08c      	sub	sp, #48	; 0x30
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
 800ef00:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ef02:	220b      	movs	r2, #11
 800ef04:	68b9      	ldr	r1, [r7, #8]
 800ef06:	68f8      	ldr	r0, [r7, #12]
 800ef08:	f7fe ffaa 	bl	800de60 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	2b05      	cmp	r3, #5
 800ef10:	d92b      	bls.n	800ef6a <gen_numname+0x76>
		sr = seq;
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ef16:	e022      	b.n	800ef5e <gen_numname+0x6a>
			wc = *lfn++;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	1c9a      	adds	r2, r3, #2
 800ef1c:	607a      	str	r2, [r7, #4]
 800ef1e:	881b      	ldrh	r3, [r3, #0]
 800ef20:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ef22:	2300      	movs	r3, #0
 800ef24:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef26:	e017      	b.n	800ef58 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ef28:	69fb      	ldr	r3, [r7, #28]
 800ef2a:	005a      	lsls	r2, r3, #1
 800ef2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef2e:	f003 0301 	and.w	r3, r3, #1
 800ef32:	4413      	add	r3, r2
 800ef34:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ef36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef38:	085b      	lsrs	r3, r3, #1
 800ef3a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ef3c:	69fb      	ldr	r3, [r7, #28]
 800ef3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d005      	beq.n	800ef52 <gen_numname+0x5e>
 800ef46:	69fb      	ldr	r3, [r7, #28]
 800ef48:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ef4c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ef50:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ef52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef54:	3301      	adds	r3, #1
 800ef56:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5a:	2b0f      	cmp	r3, #15
 800ef5c:	d9e4      	bls.n	800ef28 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	881b      	ldrh	r3, [r3, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d1d8      	bne.n	800ef18 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ef66:	69fb      	ldr	r3, [r7, #28]
 800ef68:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ef6a:	2307      	movs	r3, #7
 800ef6c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	f003 030f 	and.w	r3, r3, #15
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	3330      	adds	r3, #48	; 0x30
 800ef7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ef7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef82:	2b39      	cmp	r3, #57	; 0x39
 800ef84:	d904      	bls.n	800ef90 <gen_numname+0x9c>
 800ef86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef8a:	3307      	adds	r3, #7
 800ef8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ef90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef92:	1e5a      	subs	r2, r3, #1
 800ef94:	62ba      	str	r2, [r7, #40]	; 0x28
 800ef96:	3330      	adds	r3, #48	; 0x30
 800ef98:	443b      	add	r3, r7
 800ef9a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ef9e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	091b      	lsrs	r3, r3, #4
 800efa6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d1df      	bne.n	800ef6e <gen_numname+0x7a>
	ns[i] = '~';
 800efae:	f107 0214 	add.w	r2, r7, #20
 800efb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb4:	4413      	add	r3, r2
 800efb6:	227e      	movs	r2, #126	; 0x7e
 800efb8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800efba:	2300      	movs	r3, #0
 800efbc:	627b      	str	r3, [r7, #36]	; 0x24
 800efbe:	e002      	b.n	800efc6 <gen_numname+0xd2>
 800efc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc2:	3301      	adds	r3, #1
 800efc4:	627b      	str	r3, [r7, #36]	; 0x24
 800efc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efca:	429a      	cmp	r2, r3
 800efcc:	d205      	bcs.n	800efda <gen_numname+0xe6>
 800efce:	68fa      	ldr	r2, [r7, #12]
 800efd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd2:	4413      	add	r3, r2
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	2b20      	cmp	r3, #32
 800efd8:	d1f2      	bne.n	800efc0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800efda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efdc:	2b07      	cmp	r3, #7
 800efde:	d807      	bhi.n	800eff0 <gen_numname+0xfc>
 800efe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe2:	1c5a      	adds	r2, r3, #1
 800efe4:	62ba      	str	r2, [r7, #40]	; 0x28
 800efe6:	3330      	adds	r3, #48	; 0x30
 800efe8:	443b      	add	r3, r7
 800efea:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800efee:	e000      	b.n	800eff2 <gen_numname+0xfe>
 800eff0:	2120      	movs	r1, #32
 800eff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff4:	1c5a      	adds	r2, r3, #1
 800eff6:	627a      	str	r2, [r7, #36]	; 0x24
 800eff8:	68fa      	ldr	r2, [r7, #12]
 800effa:	4413      	add	r3, r2
 800effc:	460a      	mov	r2, r1
 800effe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f002:	2b07      	cmp	r3, #7
 800f004:	d9e9      	bls.n	800efda <gen_numname+0xe6>
}
 800f006:	bf00      	nop
 800f008:	bf00      	nop
 800f00a:	3730      	adds	r7, #48	; 0x30
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f010:	b480      	push	{r7}
 800f012:	b085      	sub	sp, #20
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f018:	2300      	movs	r3, #0
 800f01a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f01c:	230b      	movs	r3, #11
 800f01e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f020:	7bfb      	ldrb	r3, [r7, #15]
 800f022:	b2da      	uxtb	r2, r3
 800f024:	0852      	lsrs	r2, r2, #1
 800f026:	01db      	lsls	r3, r3, #7
 800f028:	4313      	orrs	r3, r2
 800f02a:	b2da      	uxtb	r2, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	1c59      	adds	r1, r3, #1
 800f030:	6079      	str	r1, [r7, #4]
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	4413      	add	r3, r2
 800f036:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	3b01      	subs	r3, #1
 800f03c:	60bb      	str	r3, [r7, #8]
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d1ed      	bne.n	800f020 <sum_sfn+0x10>
	return sum;
 800f044:	7bfb      	ldrb	r3, [r7, #15]
}
 800f046:	4618      	mov	r0, r3
 800f048:	3714      	adds	r7, #20
 800f04a:	46bd      	mov	sp, r7
 800f04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f050:	4770      	bx	lr

0800f052 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f052:	b580      	push	{r7, lr}
 800f054:	b086      	sub	sp, #24
 800f056:	af00      	add	r7, sp, #0
 800f058:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f060:	2100      	movs	r1, #0
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7ff fca8 	bl	800e9b8 <dir_sdi>
 800f068:	4603      	mov	r3, r0
 800f06a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f06c:	7dfb      	ldrb	r3, [r7, #23]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d001      	beq.n	800f076 <dir_find+0x24>
 800f072:	7dfb      	ldrb	r3, [r7, #23]
 800f074:	e0a9      	b.n	800f1ca <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f076:	23ff      	movs	r3, #255	; 0xff
 800f078:	753b      	strb	r3, [r7, #20]
 800f07a:	7d3b      	ldrb	r3, [r7, #20]
 800f07c:	757b      	strb	r3, [r7, #21]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f04f 32ff 	mov.w	r2, #4294967295
 800f084:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	69db      	ldr	r3, [r3, #28]
 800f08a:	4619      	mov	r1, r3
 800f08c:	6938      	ldr	r0, [r7, #16]
 800f08e:	f7ff f915 	bl	800e2bc <move_window>
 800f092:	4603      	mov	r3, r0
 800f094:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f096:	7dfb      	ldrb	r3, [r7, #23]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	f040 8090 	bne.w	800f1be <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6a1b      	ldr	r3, [r3, #32]
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f0a6:	7dbb      	ldrb	r3, [r7, #22]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d102      	bne.n	800f0b2 <dir_find+0x60>
 800f0ac:	2304      	movs	r3, #4
 800f0ae:	75fb      	strb	r3, [r7, #23]
 800f0b0:	e08a      	b.n	800f1c8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6a1b      	ldr	r3, [r3, #32]
 800f0b6:	330b      	adds	r3, #11
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0be:	73fb      	strb	r3, [r7, #15]
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	7bfa      	ldrb	r2, [r7, #15]
 800f0c4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f0c6:	7dbb      	ldrb	r3, [r7, #22]
 800f0c8:	2be5      	cmp	r3, #229	; 0xe5
 800f0ca:	d007      	beq.n	800f0dc <dir_find+0x8a>
 800f0cc:	7bfb      	ldrb	r3, [r7, #15]
 800f0ce:	f003 0308 	and.w	r3, r3, #8
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d009      	beq.n	800f0ea <dir_find+0x98>
 800f0d6:	7bfb      	ldrb	r3, [r7, #15]
 800f0d8:	2b0f      	cmp	r3, #15
 800f0da:	d006      	beq.n	800f0ea <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f0dc:	23ff      	movs	r3, #255	; 0xff
 800f0de:	757b      	strb	r3, [r7, #21]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f0e6:	631a      	str	r2, [r3, #48]	; 0x30
 800f0e8:	e05e      	b.n	800f1a8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f0ea:	7bfb      	ldrb	r3, [r7, #15]
 800f0ec:	2b0f      	cmp	r3, #15
 800f0ee:	d136      	bne.n	800f15e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d154      	bne.n	800f1a8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f0fe:	7dbb      	ldrb	r3, [r7, #22]
 800f100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f104:	2b00      	cmp	r3, #0
 800f106:	d00d      	beq.n	800f124 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6a1b      	ldr	r3, [r3, #32]
 800f10c:	7b5b      	ldrb	r3, [r3, #13]
 800f10e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f110:	7dbb      	ldrb	r3, [r7, #22]
 800f112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f116:	75bb      	strb	r3, [r7, #22]
 800f118:	7dbb      	ldrb	r3, [r7, #22]
 800f11a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	695a      	ldr	r2, [r3, #20]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f124:	7dba      	ldrb	r2, [r7, #22]
 800f126:	7d7b      	ldrb	r3, [r7, #21]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d115      	bne.n	800f158 <dir_find+0x106>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6a1b      	ldr	r3, [r3, #32]
 800f130:	330d      	adds	r3, #13
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	7d3a      	ldrb	r2, [r7, #20]
 800f136:	429a      	cmp	r2, r3
 800f138:	d10e      	bne.n	800f158 <dir_find+0x106>
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	68da      	ldr	r2, [r3, #12]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6a1b      	ldr	r3, [r3, #32]
 800f142:	4619      	mov	r1, r3
 800f144:	4610      	mov	r0, r2
 800f146:	f7ff fdfd 	bl	800ed44 <cmp_lfn>
 800f14a:	4603      	mov	r3, r0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d003      	beq.n	800f158 <dir_find+0x106>
 800f150:	7d7b      	ldrb	r3, [r7, #21]
 800f152:	3b01      	subs	r3, #1
 800f154:	b2db      	uxtb	r3, r3
 800f156:	e000      	b.n	800f15a <dir_find+0x108>
 800f158:	23ff      	movs	r3, #255	; 0xff
 800f15a:	757b      	strb	r3, [r7, #21]
 800f15c:	e024      	b.n	800f1a8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f15e:	7d7b      	ldrb	r3, [r7, #21]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d109      	bne.n	800f178 <dir_find+0x126>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6a1b      	ldr	r3, [r3, #32]
 800f168:	4618      	mov	r0, r3
 800f16a:	f7ff ff51 	bl	800f010 <sum_sfn>
 800f16e:	4603      	mov	r3, r0
 800f170:	461a      	mov	r2, r3
 800f172:	7d3b      	ldrb	r3, [r7, #20]
 800f174:	4293      	cmp	r3, r2
 800f176:	d024      	beq.n	800f1c2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f17e:	f003 0301 	and.w	r3, r3, #1
 800f182:	2b00      	cmp	r3, #0
 800f184:	d10a      	bne.n	800f19c <dir_find+0x14a>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6a18      	ldr	r0, [r3, #32]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	3324      	adds	r3, #36	; 0x24
 800f18e:	220b      	movs	r2, #11
 800f190:	4619      	mov	r1, r3
 800f192:	f7fe fea1 	bl	800ded8 <mem_cmp>
 800f196:	4603      	mov	r3, r0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d014      	beq.n	800f1c6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f19c:	23ff      	movs	r3, #255	; 0xff
 800f19e:	757b      	strb	r3, [r7, #21]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800f1a6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f1a8:	2100      	movs	r1, #0
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f7ff fc7f 	bl	800eaae <dir_next>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f1b4:	7dfb      	ldrb	r3, [r7, #23]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f43f af65 	beq.w	800f086 <dir_find+0x34>
 800f1bc:	e004      	b.n	800f1c8 <dir_find+0x176>
		if (res != FR_OK) break;
 800f1be:	bf00      	nop
 800f1c0:	e002      	b.n	800f1c8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f1c2:	bf00      	nop
 800f1c4:	e000      	b.n	800f1c8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f1c6:	bf00      	nop

	return res;
 800f1c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3718      	adds	r7, #24
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
	...

0800f1d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b08c      	sub	sp, #48	; 0x30
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f1e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d001      	beq.n	800f1f4 <dir_register+0x20>
 800f1f0:	2306      	movs	r3, #6
 800f1f2:	e0e0      	b.n	800f3b6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	627b      	str	r3, [r7, #36]	; 0x24
 800f1f8:	e002      	b.n	800f200 <dir_register+0x2c>
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	627b      	str	r3, [r7, #36]	; 0x24
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	68da      	ldr	r2, [r3, #12]
 800f204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f206:	005b      	lsls	r3, r3, #1
 800f208:	4413      	add	r3, r2
 800f20a:	881b      	ldrh	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d1f4      	bne.n	800f1fa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f216:	f107 030c 	add.w	r3, r7, #12
 800f21a:	220c      	movs	r2, #12
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7fe fe1f 	bl	800de60 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f222:	7dfb      	ldrb	r3, [r7, #23]
 800f224:	f003 0301 	and.w	r3, r3, #1
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d032      	beq.n	800f292 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2240      	movs	r2, #64	; 0x40
 800f230:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f234:	2301      	movs	r3, #1
 800f236:	62bb      	str	r3, [r7, #40]	; 0x28
 800f238:	e016      	b.n	800f268 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	68da      	ldr	r2, [r3, #12]
 800f244:	f107 010c 	add.w	r1, r7, #12
 800f248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24a:	f7ff fe53 	bl	800eef4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7ff feff 	bl	800f052 <dir_find>
 800f254:	4603      	mov	r3, r0
 800f256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f25a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d106      	bne.n	800f270 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f264:	3301      	adds	r3, #1
 800f266:	62bb      	str	r3, [r7, #40]	; 0x28
 800f268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26a:	2b63      	cmp	r3, #99	; 0x63
 800f26c:	d9e5      	bls.n	800f23a <dir_register+0x66>
 800f26e:	e000      	b.n	800f272 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f270:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f274:	2b64      	cmp	r3, #100	; 0x64
 800f276:	d101      	bne.n	800f27c <dir_register+0xa8>
 800f278:	2307      	movs	r3, #7
 800f27a:	e09c      	b.n	800f3b6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f27c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f280:	2b04      	cmp	r3, #4
 800f282:	d002      	beq.n	800f28a <dir_register+0xb6>
 800f284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f288:	e095      	b.n	800f3b6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f28a:	7dfa      	ldrb	r2, [r7, #23]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f292:	7dfb      	ldrb	r3, [r7, #23]
 800f294:	f003 0302 	and.w	r3, r3, #2
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d007      	beq.n	800f2ac <dir_register+0xd8>
 800f29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29e:	330c      	adds	r3, #12
 800f2a0:	4a47      	ldr	r2, [pc, #284]	; (800f3c0 <dir_register+0x1ec>)
 800f2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2a6:	089b      	lsrs	r3, r3, #2
 800f2a8:	3301      	adds	r3, #1
 800f2aa:	e000      	b.n	800f2ae <dir_register+0xda>
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f2b0:	6a39      	ldr	r1, [r7, #32]
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7ff fcc0 	bl	800ec38 <dir_alloc>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f2be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d148      	bne.n	800f358 <dir_register+0x184>
 800f2c6:	6a3b      	ldr	r3, [r7, #32]
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	623b      	str	r3, [r7, #32]
 800f2cc:	6a3b      	ldr	r3, [r7, #32]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d042      	beq.n	800f358 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	695a      	ldr	r2, [r3, #20]
 800f2d6:	6a3b      	ldr	r3, [r7, #32]
 800f2d8:	015b      	lsls	r3, r3, #5
 800f2da:	1ad3      	subs	r3, r2, r3
 800f2dc:	4619      	mov	r1, r3
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f7ff fb6a 	bl	800e9b8 <dir_sdi>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f2ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d132      	bne.n	800f358 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	3324      	adds	r3, #36	; 0x24
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7ff fe8a 	bl	800f010 <sum_sfn>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	69db      	ldr	r3, [r3, #28]
 800f304:	4619      	mov	r1, r3
 800f306:	69f8      	ldr	r0, [r7, #28]
 800f308:	f7fe ffd8 	bl	800e2bc <move_window>
 800f30c:	4603      	mov	r3, r0
 800f30e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f316:	2b00      	cmp	r3, #0
 800f318:	d11d      	bne.n	800f356 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	68d8      	ldr	r0, [r3, #12]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6a19      	ldr	r1, [r3, #32]
 800f322:	6a3b      	ldr	r3, [r7, #32]
 800f324:	b2da      	uxtb	r2, r3
 800f326:	7efb      	ldrb	r3, [r7, #27]
 800f328:	f7ff fd7c 	bl	800ee24 <put_lfn>
				fs->wflag = 1;
 800f32c:	69fb      	ldr	r3, [r7, #28]
 800f32e:	2201      	movs	r2, #1
 800f330:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f332:	2100      	movs	r1, #0
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f7ff fbba 	bl	800eaae <dir_next>
 800f33a:	4603      	mov	r3, r0
 800f33c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f340:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f344:	2b00      	cmp	r3, #0
 800f346:	d107      	bne.n	800f358 <dir_register+0x184>
 800f348:	6a3b      	ldr	r3, [r7, #32]
 800f34a:	3b01      	subs	r3, #1
 800f34c:	623b      	str	r3, [r7, #32]
 800f34e:	6a3b      	ldr	r3, [r7, #32]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d1d5      	bne.n	800f300 <dir_register+0x12c>
 800f354:	e000      	b.n	800f358 <dir_register+0x184>
				if (res != FR_OK) break;
 800f356:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d128      	bne.n	800f3b2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	69db      	ldr	r3, [r3, #28]
 800f364:	4619      	mov	r1, r3
 800f366:	69f8      	ldr	r0, [r7, #28]
 800f368:	f7fe ffa8 	bl	800e2bc <move_window>
 800f36c:	4603      	mov	r3, r0
 800f36e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f376:	2b00      	cmp	r3, #0
 800f378:	d11b      	bne.n	800f3b2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6a1b      	ldr	r3, [r3, #32]
 800f37e:	2220      	movs	r2, #32
 800f380:	2100      	movs	r1, #0
 800f382:	4618      	mov	r0, r3
 800f384:	f7fe fd8d 	bl	800dea2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6a18      	ldr	r0, [r3, #32]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	3324      	adds	r3, #36	; 0x24
 800f390:	220b      	movs	r2, #11
 800f392:	4619      	mov	r1, r3
 800f394:	f7fe fd64 	bl	800de60 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6a1b      	ldr	r3, [r3, #32]
 800f3a2:	330c      	adds	r3, #12
 800f3a4:	f002 0218 	and.w	r2, r2, #24
 800f3a8:	b2d2      	uxtb	r2, r2
 800f3aa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f3b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3730      	adds	r7, #48	; 0x30
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	4ec4ec4f 	.word	0x4ec4ec4f

0800f3c4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b088      	sub	sp, #32
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	69db      	ldr	r3, [r3, #28]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	f000 80c9 	beq.w	800f576 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ec:	d032      	beq.n	800f454 <get_fileinfo+0x90>
			i = j = 0;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	61bb      	str	r3, [r7, #24]
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f3f6:	e01b      	b.n	800f430 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800f3f8:	89fb      	ldrh	r3, [r7, #14]
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f002 f8fb 	bl	80115f8 <ff_convert>
 800f402:	4603      	mov	r3, r0
 800f404:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800f406:	89fb      	ldrh	r3, [r7, #14]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d102      	bne.n	800f412 <get_fileinfo+0x4e>
 800f40c:	2300      	movs	r3, #0
 800f40e:	61fb      	str	r3, [r7, #28]
 800f410:	e01a      	b.n	800f448 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800f412:	69fb      	ldr	r3, [r7, #28]
 800f414:	2bfe      	cmp	r3, #254	; 0xfe
 800f416:	d902      	bls.n	800f41e <get_fileinfo+0x5a>
 800f418:	2300      	movs	r3, #0
 800f41a:	61fb      	str	r3, [r7, #28]
 800f41c:	e014      	b.n	800f448 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	1c5a      	adds	r2, r3, #1
 800f422:	61fa      	str	r2, [r7, #28]
 800f424:	89fa      	ldrh	r2, [r7, #14]
 800f426:	b2d1      	uxtb	r1, r2
 800f428:	683a      	ldr	r2, [r7, #0]
 800f42a:	4413      	add	r3, r2
 800f42c:	460a      	mov	r2, r1
 800f42e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	68da      	ldr	r2, [r3, #12]
 800f434:	69bb      	ldr	r3, [r7, #24]
 800f436:	1c59      	adds	r1, r3, #1
 800f438:	61b9      	str	r1, [r7, #24]
 800f43a:	005b      	lsls	r3, r3, #1
 800f43c:	4413      	add	r3, r2
 800f43e:	881b      	ldrh	r3, [r3, #0]
 800f440:	81fb      	strh	r3, [r7, #14]
 800f442:	89fb      	ldrh	r3, [r7, #14]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d1d7      	bne.n	800f3f8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	4413      	add	r3, r2
 800f44e:	3316      	adds	r3, #22
 800f450:	2200      	movs	r2, #0
 800f452:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800f454:	2300      	movs	r3, #0
 800f456:	61bb      	str	r3, [r7, #24]
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800f45c:	683a      	ldr	r2, [r7, #0]
 800f45e:	69fb      	ldr	r3, [r7, #28]
 800f460:	4413      	add	r3, r2
 800f462:	3316      	adds	r3, #22
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800f468:	e04c      	b.n	800f504 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6a1a      	ldr	r2, [r3, #32]
 800f46e:	69fb      	ldr	r3, [r7, #28]
 800f470:	1c59      	adds	r1, r3, #1
 800f472:	61f9      	str	r1, [r7, #28]
 800f474:	4413      	add	r3, r2
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800f47a:	7dfb      	ldrb	r3, [r7, #23]
 800f47c:	2b20      	cmp	r3, #32
 800f47e:	d100      	bne.n	800f482 <get_fileinfo+0xbe>
 800f480:	e040      	b.n	800f504 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f482:	7dfb      	ldrb	r3, [r7, #23]
 800f484:	2b05      	cmp	r3, #5
 800f486:	d101      	bne.n	800f48c <get_fileinfo+0xc8>
 800f488:	23e5      	movs	r3, #229	; 0xe5
 800f48a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	2b09      	cmp	r3, #9
 800f490:	d10f      	bne.n	800f4b2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800f492:	89bb      	ldrh	r3, [r7, #12]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d105      	bne.n	800f4a4 <get_fileinfo+0xe0>
 800f498:	683a      	ldr	r2, [r7, #0]
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	4413      	add	r3, r2
 800f49e:	3316      	adds	r3, #22
 800f4a0:	222e      	movs	r2, #46	; 0x2e
 800f4a2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	1c5a      	adds	r2, r3, #1
 800f4a8:	61ba      	str	r2, [r7, #24]
 800f4aa:	683a      	ldr	r2, [r7, #0]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	222e      	movs	r2, #46	; 0x2e
 800f4b0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800f4b2:	683a      	ldr	r2, [r7, #0]
 800f4b4:	69bb      	ldr	r3, [r7, #24]
 800f4b6:	4413      	add	r3, r2
 800f4b8:	3309      	adds	r3, #9
 800f4ba:	7dfa      	ldrb	r2, [r7, #23]
 800f4bc:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800f4be:	89bb      	ldrh	r3, [r7, #12]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d11c      	bne.n	800f4fe <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800f4c4:	7dfb      	ldrb	r3, [r7, #23]
 800f4c6:	2b40      	cmp	r3, #64	; 0x40
 800f4c8:	d913      	bls.n	800f4f2 <get_fileinfo+0x12e>
 800f4ca:	7dfb      	ldrb	r3, [r7, #23]
 800f4cc:	2b5a      	cmp	r3, #90	; 0x5a
 800f4ce:	d810      	bhi.n	800f4f2 <get_fileinfo+0x12e>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6a1b      	ldr	r3, [r3, #32]
 800f4d4:	330c      	adds	r3, #12
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	461a      	mov	r2, r3
 800f4da:	69fb      	ldr	r3, [r7, #28]
 800f4dc:	2b08      	cmp	r3, #8
 800f4de:	d901      	bls.n	800f4e4 <get_fileinfo+0x120>
 800f4e0:	2310      	movs	r3, #16
 800f4e2:	e000      	b.n	800f4e6 <get_fileinfo+0x122>
 800f4e4:	2308      	movs	r3, #8
 800f4e6:	4013      	ands	r3, r2
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d002      	beq.n	800f4f2 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800f4ec:	7dfb      	ldrb	r3, [r7, #23]
 800f4ee:	3320      	adds	r3, #32
 800f4f0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800f4f2:	683a      	ldr	r2, [r7, #0]
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	4413      	add	r3, r2
 800f4f8:	3316      	adds	r3, #22
 800f4fa:	7dfa      	ldrb	r2, [r7, #23]
 800f4fc:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	3301      	adds	r3, #1
 800f502:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	2b0a      	cmp	r3, #10
 800f508:	d9af      	bls.n	800f46a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800f50a:	89bb      	ldrh	r3, [r7, #12]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d10d      	bne.n	800f52c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800f510:	683a      	ldr	r2, [r7, #0]
 800f512:	69bb      	ldr	r3, [r7, #24]
 800f514:	4413      	add	r3, r2
 800f516:	3316      	adds	r3, #22
 800f518:	2200      	movs	r2, #0
 800f51a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6a1b      	ldr	r3, [r3, #32]
 800f520:	330c      	adds	r3, #12
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d101      	bne.n	800f52c <get_fileinfo+0x168>
 800f528:	2300      	movs	r3, #0
 800f52a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800f52c:	683a      	ldr	r2, [r7, #0]
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	4413      	add	r3, r2
 800f532:	3309      	adds	r3, #9
 800f534:	2200      	movs	r2, #0
 800f536:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6a1b      	ldr	r3, [r3, #32]
 800f53c:	7ada      	ldrb	r2, [r3, #11]
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6a1b      	ldr	r3, [r3, #32]
 800f546:	331c      	adds	r3, #28
 800f548:	4618      	mov	r0, r3
 800f54a:	f7fe fc1f 	bl	800dd8c <ld_dword>
 800f54e:	4602      	mov	r2, r0
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6a1b      	ldr	r3, [r3, #32]
 800f558:	3316      	adds	r3, #22
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fe fc16 	bl	800dd8c <ld_dword>
 800f560:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	b29a      	uxth	r2, r3
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	80da      	strh	r2, [r3, #6]
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	0c1b      	lsrs	r3, r3, #16
 800f56e:	b29a      	uxth	r2, r3
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	809a      	strh	r2, [r3, #4]
 800f574:	e000      	b.n	800f578 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f576:	bf00      	nop
}
 800f578:	3720      	adds	r7, #32
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
	...

0800f580 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b08a      	sub	sp, #40	; 0x28
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	613b      	str	r3, [r7, #16]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	60fb      	str	r3, [r7, #12]
 800f598:	2300      	movs	r3, #0
 800f59a:	617b      	str	r3, [r7, #20]
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	1c5a      	adds	r2, r3, #1
 800f5a4:	61ba      	str	r2, [r7, #24]
 800f5a6:	693a      	ldr	r2, [r7, #16]
 800f5a8:	4413      	add	r3, r2
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f5ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5b0:	2b1f      	cmp	r3, #31
 800f5b2:	d940      	bls.n	800f636 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f5b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5b6:	2b2f      	cmp	r3, #47	; 0x2f
 800f5b8:	d006      	beq.n	800f5c8 <create_name+0x48>
 800f5ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5bc:	2b5c      	cmp	r3, #92	; 0x5c
 800f5be:	d110      	bne.n	800f5e2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f5c0:	e002      	b.n	800f5c8 <create_name+0x48>
 800f5c2:	69bb      	ldr	r3, [r7, #24]
 800f5c4:	3301      	adds	r3, #1
 800f5c6:	61bb      	str	r3, [r7, #24]
 800f5c8:	693a      	ldr	r2, [r7, #16]
 800f5ca:	69bb      	ldr	r3, [r7, #24]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	2b2f      	cmp	r3, #47	; 0x2f
 800f5d2:	d0f6      	beq.n	800f5c2 <create_name+0x42>
 800f5d4:	693a      	ldr	r2, [r7, #16]
 800f5d6:	69bb      	ldr	r3, [r7, #24]
 800f5d8:	4413      	add	r3, r2
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	2b5c      	cmp	r3, #92	; 0x5c
 800f5de:	d0f0      	beq.n	800f5c2 <create_name+0x42>
			break;
 800f5e0:	e02a      	b.n	800f638 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	2bfe      	cmp	r3, #254	; 0xfe
 800f5e6:	d901      	bls.n	800f5ec <create_name+0x6c>
 800f5e8:	2306      	movs	r3, #6
 800f5ea:	e17d      	b.n	800f8e8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f5ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f5f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5f4:	2101      	movs	r1, #1
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f001 fffe 	bl	80115f8 <ff_convert>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f602:	2b00      	cmp	r3, #0
 800f604:	d101      	bne.n	800f60a <create_name+0x8a>
 800f606:	2306      	movs	r3, #6
 800f608:	e16e      	b.n	800f8e8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f60a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f60c:	2b7f      	cmp	r3, #127	; 0x7f
 800f60e:	d809      	bhi.n	800f624 <create_name+0xa4>
 800f610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f612:	4619      	mov	r1, r3
 800f614:	488d      	ldr	r0, [pc, #564]	; (800f84c <create_name+0x2cc>)
 800f616:	f7fe fc86 	bl	800df26 <chk_chr>
 800f61a:	4603      	mov	r3, r0
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d001      	beq.n	800f624 <create_name+0xa4>
 800f620:	2306      	movs	r3, #6
 800f622:	e161      	b.n	800f8e8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	1c5a      	adds	r2, r3, #1
 800f628:	617a      	str	r2, [r7, #20]
 800f62a:	005b      	lsls	r3, r3, #1
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	4413      	add	r3, r2
 800f630:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f632:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f634:	e7b4      	b.n	800f5a0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f636:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f638:	693a      	ldr	r2, [r7, #16]
 800f63a:	69bb      	ldr	r3, [r7, #24]
 800f63c:	441a      	add	r2, r3
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f644:	2b1f      	cmp	r3, #31
 800f646:	d801      	bhi.n	800f64c <create_name+0xcc>
 800f648:	2304      	movs	r3, #4
 800f64a:	e000      	b.n	800f64e <create_name+0xce>
 800f64c:	2300      	movs	r3, #0
 800f64e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f652:	e011      	b.n	800f678 <create_name+0xf8>
		w = lfn[di - 1];
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f65a:	3b01      	subs	r3, #1
 800f65c:	005b      	lsls	r3, r3, #1
 800f65e:	68fa      	ldr	r2, [r7, #12]
 800f660:	4413      	add	r3, r2
 800f662:	881b      	ldrh	r3, [r3, #0]
 800f664:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f668:	2b20      	cmp	r3, #32
 800f66a:	d002      	beq.n	800f672 <create_name+0xf2>
 800f66c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f66e:	2b2e      	cmp	r3, #46	; 0x2e
 800f670:	d106      	bne.n	800f680 <create_name+0x100>
		di--;
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	3b01      	subs	r3, #1
 800f676:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d1ea      	bne.n	800f654 <create_name+0xd4>
 800f67e:	e000      	b.n	800f682 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f680:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	005b      	lsls	r3, r3, #1
 800f686:	68fa      	ldr	r2, [r7, #12]
 800f688:	4413      	add	r3, r2
 800f68a:	2200      	movs	r2, #0
 800f68c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d101      	bne.n	800f698 <create_name+0x118>
 800f694:	2306      	movs	r3, #6
 800f696:	e127      	b.n	800f8e8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	3324      	adds	r3, #36	; 0x24
 800f69c:	220b      	movs	r2, #11
 800f69e:	2120      	movs	r1, #32
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7fe fbfe 	bl	800dea2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	61bb      	str	r3, [r7, #24]
 800f6aa:	e002      	b.n	800f6b2 <create_name+0x132>
 800f6ac:	69bb      	ldr	r3, [r7, #24]
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	61bb      	str	r3, [r7, #24]
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	005b      	lsls	r3, r3, #1
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	4413      	add	r3, r2
 800f6ba:	881b      	ldrh	r3, [r3, #0]
 800f6bc:	2b20      	cmp	r3, #32
 800f6be:	d0f5      	beq.n	800f6ac <create_name+0x12c>
 800f6c0:	69bb      	ldr	r3, [r7, #24]
 800f6c2:	005b      	lsls	r3, r3, #1
 800f6c4:	68fa      	ldr	r2, [r7, #12]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	881b      	ldrh	r3, [r3, #0]
 800f6ca:	2b2e      	cmp	r3, #46	; 0x2e
 800f6cc:	d0ee      	beq.n	800f6ac <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f6ce:	69bb      	ldr	r3, [r7, #24]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d009      	beq.n	800f6e8 <create_name+0x168>
 800f6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6d8:	f043 0303 	orr.w	r3, r3, #3
 800f6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f6e0:	e002      	b.n	800f6e8 <create_name+0x168>
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	3b01      	subs	r3, #1
 800f6e6:	617b      	str	r3, [r7, #20]
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d009      	beq.n	800f702 <create_name+0x182>
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f6f4:	3b01      	subs	r3, #1
 800f6f6:	005b      	lsls	r3, r3, #1
 800f6f8:	68fa      	ldr	r2, [r7, #12]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	881b      	ldrh	r3, [r3, #0]
 800f6fe:	2b2e      	cmp	r3, #46	; 0x2e
 800f700:	d1ef      	bne.n	800f6e2 <create_name+0x162>

	i = b = 0; ni = 8;
 800f702:	2300      	movs	r3, #0
 800f704:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f708:	2300      	movs	r3, #0
 800f70a:	623b      	str	r3, [r7, #32]
 800f70c:	2308      	movs	r3, #8
 800f70e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f710:	69bb      	ldr	r3, [r7, #24]
 800f712:	1c5a      	adds	r2, r3, #1
 800f714:	61ba      	str	r2, [r7, #24]
 800f716:	005b      	lsls	r3, r3, #1
 800f718:	68fa      	ldr	r2, [r7, #12]
 800f71a:	4413      	add	r3, r2
 800f71c:	881b      	ldrh	r3, [r3, #0]
 800f71e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f722:	2b00      	cmp	r3, #0
 800f724:	f000 8090 	beq.w	800f848 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f728:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f72a:	2b20      	cmp	r3, #32
 800f72c:	d006      	beq.n	800f73c <create_name+0x1bc>
 800f72e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f730:	2b2e      	cmp	r3, #46	; 0x2e
 800f732:	d10a      	bne.n	800f74a <create_name+0x1ca>
 800f734:	69ba      	ldr	r2, [r7, #24]
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d006      	beq.n	800f74a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f73c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f740:	f043 0303 	orr.w	r3, r3, #3
 800f744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f748:	e07d      	b.n	800f846 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f74a:	6a3a      	ldr	r2, [r7, #32]
 800f74c:	69fb      	ldr	r3, [r7, #28]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d203      	bcs.n	800f75a <create_name+0x1da>
 800f752:	69ba      	ldr	r2, [r7, #24]
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	429a      	cmp	r2, r3
 800f758:	d123      	bne.n	800f7a2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	2b0b      	cmp	r3, #11
 800f75e:	d106      	bne.n	800f76e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f764:	f043 0303 	orr.w	r3, r3, #3
 800f768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f76c:	e075      	b.n	800f85a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f76e:	69ba      	ldr	r2, [r7, #24]
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	429a      	cmp	r2, r3
 800f774:	d005      	beq.n	800f782 <create_name+0x202>
 800f776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f77a:	f043 0303 	orr.w	r3, r3, #3
 800f77e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f782:	69ba      	ldr	r2, [r7, #24]
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	429a      	cmp	r2, r3
 800f788:	d866      	bhi.n	800f858 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	61bb      	str	r3, [r7, #24]
 800f78e:	2308      	movs	r3, #8
 800f790:	623b      	str	r3, [r7, #32]
 800f792:	230b      	movs	r3, #11
 800f794:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f796:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f7a0:	e051      	b.n	800f846 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f7a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7a4:	2b7f      	cmp	r3, #127	; 0x7f
 800f7a6:	d914      	bls.n	800f7d2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f7a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7aa:	2100      	movs	r1, #0
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f001 ff23 	bl	80115f8 <ff_convert>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f7b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d004      	beq.n	800f7c6 <create_name+0x246>
 800f7bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7be:	3b80      	subs	r3, #128	; 0x80
 800f7c0:	4a23      	ldr	r2, [pc, #140]	; (800f850 <create_name+0x2d0>)
 800f7c2:	5cd3      	ldrb	r3, [r2, r3]
 800f7c4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f7c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7ca:	f043 0302 	orr.w	r3, r3, #2
 800f7ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f7d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d007      	beq.n	800f7e8 <create_name+0x268>
 800f7d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7da:	4619      	mov	r1, r3
 800f7dc:	481d      	ldr	r0, [pc, #116]	; (800f854 <create_name+0x2d4>)
 800f7de:	f7fe fba2 	bl	800df26 <chk_chr>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d008      	beq.n	800f7fa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f7e8:	235f      	movs	r3, #95	; 0x5f
 800f7ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f7ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7f0:	f043 0303 	orr.w	r3, r3, #3
 800f7f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f7f8:	e01b      	b.n	800f832 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f7fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7fc:	2b40      	cmp	r3, #64	; 0x40
 800f7fe:	d909      	bls.n	800f814 <create_name+0x294>
 800f800:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f802:	2b5a      	cmp	r3, #90	; 0x5a
 800f804:	d806      	bhi.n	800f814 <create_name+0x294>
					b |= 2;
 800f806:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f80a:	f043 0302 	orr.w	r3, r3, #2
 800f80e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f812:	e00e      	b.n	800f832 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f816:	2b60      	cmp	r3, #96	; 0x60
 800f818:	d90b      	bls.n	800f832 <create_name+0x2b2>
 800f81a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f81c:	2b7a      	cmp	r3, #122	; 0x7a
 800f81e:	d808      	bhi.n	800f832 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f820:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f824:	f043 0301 	orr.w	r3, r3, #1
 800f828:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f82c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f82e:	3b20      	subs	r3, #32
 800f830:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f832:	6a3b      	ldr	r3, [r7, #32]
 800f834:	1c5a      	adds	r2, r3, #1
 800f836:	623a      	str	r2, [r7, #32]
 800f838:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f83a:	b2d1      	uxtb	r1, r2
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	4413      	add	r3, r2
 800f840:	460a      	mov	r2, r1
 800f842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f846:	e763      	b.n	800f710 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f848:	bf00      	nop
 800f84a:	e006      	b.n	800f85a <create_name+0x2da>
 800f84c:	080139d8 	.word	0x080139d8
 800f850:	08027774 	.word	0x08027774
 800f854:	080139e4 	.word	0x080139e4
			if (si > di) break;			/* No extension */
 800f858:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f860:	2be5      	cmp	r3, #229	; 0xe5
 800f862:	d103      	bne.n	800f86c <create_name+0x2ec>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2205      	movs	r2, #5
 800f868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	2b08      	cmp	r3, #8
 800f870:	d104      	bne.n	800f87c <create_name+0x2fc>
 800f872:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f87c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f880:	f003 030c 	and.w	r3, r3, #12
 800f884:	2b0c      	cmp	r3, #12
 800f886:	d005      	beq.n	800f894 <create_name+0x314>
 800f888:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f88c:	f003 0303 	and.w	r3, r3, #3
 800f890:	2b03      	cmp	r3, #3
 800f892:	d105      	bne.n	800f8a0 <create_name+0x320>
 800f894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f898:	f043 0302 	orr.w	r3, r3, #2
 800f89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f8a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8a4:	f003 0302 	and.w	r3, r3, #2
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d117      	bne.n	800f8dc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f8ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8b0:	f003 0303 	and.w	r3, r3, #3
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d105      	bne.n	800f8c4 <create_name+0x344>
 800f8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8bc:	f043 0310 	orr.w	r3, r3, #16
 800f8c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f8c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8c8:	f003 030c 	and.w	r3, r3, #12
 800f8cc:	2b04      	cmp	r3, #4
 800f8ce:	d105      	bne.n	800f8dc <create_name+0x35c>
 800f8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8d4:	f043 0308 	orr.w	r3, r3, #8
 800f8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f8e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f8e6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	3728      	adds	r7, #40	; 0x28
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd80      	pop	{r7, pc}

0800f8f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b086      	sub	sp, #24
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f904:	e002      	b.n	800f90c <follow_path+0x1c>
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	3301      	adds	r3, #1
 800f90a:	603b      	str	r3, [r7, #0]
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	2b2f      	cmp	r3, #47	; 0x2f
 800f912:	d0f8      	beq.n	800f906 <follow_path+0x16>
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	2b5c      	cmp	r3, #92	; 0x5c
 800f91a:	d0f4      	beq.n	800f906 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	2200      	movs	r2, #0
 800f920:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	2b1f      	cmp	r3, #31
 800f928:	d80a      	bhi.n	800f940 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2280      	movs	r2, #128	; 0x80
 800f92e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f932:	2100      	movs	r1, #0
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7ff f83f 	bl	800e9b8 <dir_sdi>
 800f93a:	4603      	mov	r3, r0
 800f93c:	75fb      	strb	r3, [r7, #23]
 800f93e:	e043      	b.n	800f9c8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f940:	463b      	mov	r3, r7
 800f942:	4619      	mov	r1, r3
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f7ff fe1b 	bl	800f580 <create_name>
 800f94a:	4603      	mov	r3, r0
 800f94c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f94e:	7dfb      	ldrb	r3, [r7, #23]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d134      	bne.n	800f9be <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f7ff fb7c 	bl	800f052 <dir_find>
 800f95a:	4603      	mov	r3, r0
 800f95c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f964:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f966:	7dfb      	ldrb	r3, [r7, #23]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d00a      	beq.n	800f982 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f96c:	7dfb      	ldrb	r3, [r7, #23]
 800f96e:	2b04      	cmp	r3, #4
 800f970:	d127      	bne.n	800f9c2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f972:	7afb      	ldrb	r3, [r7, #11]
 800f974:	f003 0304 	and.w	r3, r3, #4
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d122      	bne.n	800f9c2 <follow_path+0xd2>
 800f97c:	2305      	movs	r3, #5
 800f97e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f980:	e01f      	b.n	800f9c2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f982:	7afb      	ldrb	r3, [r7, #11]
 800f984:	f003 0304 	and.w	r3, r3, #4
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d11c      	bne.n	800f9c6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	799b      	ldrb	r3, [r3, #6]
 800f990:	f003 0310 	and.w	r3, r3, #16
 800f994:	2b00      	cmp	r3, #0
 800f996:	d102      	bne.n	800f99e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f998:	2305      	movs	r3, #5
 800f99a:	75fb      	strb	r3, [r7, #23]
 800f99c:	e014      	b.n	800f9c8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	695b      	ldr	r3, [r3, #20]
 800f9a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9ac:	4413      	add	r3, r2
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	68f8      	ldr	r0, [r7, #12]
 800f9b2:	f7ff f988 	bl	800ecc6 <ld_clust>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f9bc:	e7c0      	b.n	800f940 <follow_path+0x50>
			if (res != FR_OK) break;
 800f9be:	bf00      	nop
 800f9c0:	e002      	b.n	800f9c8 <follow_path+0xd8>
				break;
 800f9c2:	bf00      	nop
 800f9c4:	e000      	b.n	800f9c8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f9c6:	bf00      	nop
			}
		}
	}

	return res;
 800f9c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3718      	adds	r7, #24
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f9d2:	b480      	push	{r7}
 800f9d4:	b087      	sub	sp, #28
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f9da:	f04f 33ff 	mov.w	r3, #4294967295
 800f9de:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d031      	beq.n	800fa4c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	617b      	str	r3, [r7, #20]
 800f9ee:	e002      	b.n	800f9f6 <get_ldnumber+0x24>
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	617b      	str	r3, [r7, #20]
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	2b1f      	cmp	r3, #31
 800f9fc:	d903      	bls.n	800fa06 <get_ldnumber+0x34>
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	2b3a      	cmp	r3, #58	; 0x3a
 800fa04:	d1f4      	bne.n	800f9f0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	2b3a      	cmp	r3, #58	; 0x3a
 800fa0c:	d11c      	bne.n	800fa48 <get_ldnumber+0x76>
			tp = *path;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	1c5a      	adds	r2, r3, #1
 800fa18:	60fa      	str	r2, [r7, #12]
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	3b30      	subs	r3, #48	; 0x30
 800fa1e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	2b09      	cmp	r3, #9
 800fa24:	d80e      	bhi.n	800fa44 <get_ldnumber+0x72>
 800fa26:	68fa      	ldr	r2, [r7, #12]
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d10a      	bne.n	800fa44 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d107      	bne.n	800fa44 <get_ldnumber+0x72>
					vol = (int)i;
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	617b      	str	r3, [r7, #20]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	697a      	ldr	r2, [r7, #20]
 800fa42:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	e002      	b.n	800fa4e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fa48:	2300      	movs	r3, #0
 800fa4a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fa4c:	693b      	ldr	r3, [r7, #16]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	371c      	adds	r7, #28
 800fa52:	46bd      	mov	sp, r7
 800fa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa58:	4770      	bx	lr
	...

0800fa5c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	70da      	strb	r2, [r3, #3]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa72:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fa74:	6839      	ldr	r1, [r7, #0]
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7fe fc20 	bl	800e2bc <move_window>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d001      	beq.n	800fa86 <check_fs+0x2a>
 800fa82:	2304      	movs	r3, #4
 800fa84:	e038      	b.n	800faf8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	3334      	adds	r3, #52	; 0x34
 800fa8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7fe f964 	bl	800dd5c <ld_word>
 800fa94:	4603      	mov	r3, r0
 800fa96:	461a      	mov	r2, r3
 800fa98:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d001      	beq.n	800faa4 <check_fs+0x48>
 800faa0:	2303      	movs	r3, #3
 800faa2:	e029      	b.n	800faf8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800faaa:	2be9      	cmp	r3, #233	; 0xe9
 800faac:	d009      	beq.n	800fac2 <check_fs+0x66>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fab4:	2beb      	cmp	r3, #235	; 0xeb
 800fab6:	d11e      	bne.n	800faf6 <check_fs+0x9a>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800fabe:	2b90      	cmp	r3, #144	; 0x90
 800fac0:	d119      	bne.n	800faf6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	3334      	adds	r3, #52	; 0x34
 800fac6:	3336      	adds	r3, #54	; 0x36
 800fac8:	4618      	mov	r0, r3
 800faca:	f7fe f95f 	bl	800dd8c <ld_dword>
 800face:	4603      	mov	r3, r0
 800fad0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fad4:	4a0a      	ldr	r2, [pc, #40]	; (800fb00 <check_fs+0xa4>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d101      	bne.n	800fade <check_fs+0x82>
 800fada:	2300      	movs	r3, #0
 800fadc:	e00c      	b.n	800faf8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	3334      	adds	r3, #52	; 0x34
 800fae2:	3352      	adds	r3, #82	; 0x52
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7fe f951 	bl	800dd8c <ld_dword>
 800faea:	4603      	mov	r3, r0
 800faec:	4a05      	ldr	r2, [pc, #20]	; (800fb04 <check_fs+0xa8>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d101      	bne.n	800faf6 <check_fs+0x9a>
 800faf2:	2300      	movs	r3, #0
 800faf4:	e000      	b.n	800faf8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800faf6:	2302      	movs	r3, #2
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	00544146 	.word	0x00544146
 800fb04:	33544146 	.word	0x33544146

0800fb08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b096      	sub	sp, #88	; 0x58
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	4613      	mov	r3, r2
 800fb14:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	f7ff ff58 	bl	800f9d2 <get_ldnumber>
 800fb22:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	da01      	bge.n	800fb2e <find_volume+0x26>
 800fb2a:	230b      	movs	r3, #11
 800fb2c:	e22d      	b.n	800ff8a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fb2e:	4aa1      	ldr	r2, [pc, #644]	; (800fdb4 <find_volume+0x2ac>)
 800fb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb36:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d101      	bne.n	800fb42 <find_volume+0x3a>
 800fb3e:	230c      	movs	r3, #12
 800fb40:	e223      	b.n	800ff8a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fb48:	79fb      	ldrb	r3, [r7, #7]
 800fb4a:	f023 0301 	bic.w	r3, r3, #1
 800fb4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d01a      	beq.n	800fb8e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5a:	785b      	ldrb	r3, [r3, #1]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7fe f85d 	bl	800dc1c <disk_status>
 800fb62:	4603      	mov	r3, r0
 800fb64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fb68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb6c:	f003 0301 	and.w	r3, r3, #1
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d10c      	bne.n	800fb8e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fb74:	79fb      	ldrb	r3, [r7, #7]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d007      	beq.n	800fb8a <find_volume+0x82>
 800fb7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb7e:	f003 0304 	and.w	r3, r3, #4
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d001      	beq.n	800fb8a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fb86:	230a      	movs	r3, #10
 800fb88:	e1ff      	b.n	800ff8a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	e1fd      	b.n	800ff8a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb90:	2200      	movs	r2, #0
 800fb92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fb94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb96:	b2da      	uxtb	r2, r3
 800fb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9e:	785b      	ldrb	r3, [r3, #1]
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7fe f855 	bl	800dc50 <disk_initialize>
 800fba6:	4603      	mov	r3, r0
 800fba8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fbac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbb0:	f003 0301 	and.w	r3, r3, #1
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d001      	beq.n	800fbbc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fbb8:	2303      	movs	r3, #3
 800fbba:	e1e6      	b.n	800ff8a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fbbc:	79fb      	ldrb	r3, [r7, #7]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d007      	beq.n	800fbd2 <find_volume+0xca>
 800fbc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbc6:	f003 0304 	and.w	r3, r3, #4
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d001      	beq.n	800fbd2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fbce:	230a      	movs	r3, #10
 800fbd0:	e1db      	b.n	800ff8a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fbd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbda:	f7ff ff3f 	bl	800fa5c <check_fs>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fbe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbe8:	2b02      	cmp	r3, #2
 800fbea:	d149      	bne.n	800fc80 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fbec:	2300      	movs	r3, #0
 800fbee:	643b      	str	r3, [r7, #64]	; 0x40
 800fbf0:	e01e      	b.n	800fc30 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fbf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbfa:	011b      	lsls	r3, r3, #4
 800fbfc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fc00:	4413      	add	r3, r2
 800fc02:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc06:	3304      	adds	r3, #4
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d006      	beq.n	800fc1c <find_volume+0x114>
 800fc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc10:	3308      	adds	r3, #8
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fe f8ba 	bl	800dd8c <ld_dword>
 800fc18:	4602      	mov	r2, r0
 800fc1a:	e000      	b.n	800fc1e <find_volume+0x116>
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc20:	009b      	lsls	r3, r3, #2
 800fc22:	3358      	adds	r3, #88	; 0x58
 800fc24:	443b      	add	r3, r7
 800fc26:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	643b      	str	r3, [r7, #64]	; 0x40
 800fc30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc32:	2b03      	cmp	r3, #3
 800fc34:	d9dd      	bls.n	800fbf2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fc36:	2300      	movs	r3, #0
 800fc38:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fc3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d002      	beq.n	800fc46 <find_volume+0x13e>
 800fc40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc42:	3b01      	subs	r3, #1
 800fc44:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fc46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	3358      	adds	r3, #88	; 0x58
 800fc4c:	443b      	add	r3, r7
 800fc4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fc52:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fc54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d005      	beq.n	800fc66 <find_volume+0x15e>
 800fc5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc5e:	f7ff fefd 	bl	800fa5c <check_fs>
 800fc62:	4603      	mov	r3, r0
 800fc64:	e000      	b.n	800fc68 <find_volume+0x160>
 800fc66:	2303      	movs	r3, #3
 800fc68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fc6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d905      	bls.n	800fc80 <find_volume+0x178>
 800fc74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc76:	3301      	adds	r3, #1
 800fc78:	643b      	str	r3, [r7, #64]	; 0x40
 800fc7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc7c:	2b03      	cmp	r3, #3
 800fc7e:	d9e2      	bls.n	800fc46 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fc80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc84:	2b04      	cmp	r3, #4
 800fc86:	d101      	bne.n	800fc8c <find_volume+0x184>
 800fc88:	2301      	movs	r3, #1
 800fc8a:	e17e      	b.n	800ff8a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fc8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	d901      	bls.n	800fc98 <find_volume+0x190>
 800fc94:	230d      	movs	r3, #13
 800fc96:	e178      	b.n	800ff8a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9a:	3334      	adds	r3, #52	; 0x34
 800fc9c:	330b      	adds	r3, #11
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fe f85c 	bl	800dd5c <ld_word>
 800fca4:	4603      	mov	r3, r0
 800fca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcaa:	d001      	beq.n	800fcb0 <find_volume+0x1a8>
 800fcac:	230d      	movs	r3, #13
 800fcae:	e16c      	b.n	800ff8a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb2:	3334      	adds	r3, #52	; 0x34
 800fcb4:	3316      	adds	r3, #22
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fe f850 	bl	800dd5c <ld_word>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fcc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d106      	bne.n	800fcd4 <find_volume+0x1cc>
 800fcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc8:	3334      	adds	r3, #52	; 0x34
 800fcca:	3324      	adds	r3, #36	; 0x24
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7fe f85d 	bl	800dd8c <ld_dword>
 800fcd2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcd8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcdc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800fce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce6:	789b      	ldrb	r3, [r3, #2]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d005      	beq.n	800fcf8 <find_volume+0x1f0>
 800fcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcee:	789b      	ldrb	r3, [r3, #2]
 800fcf0:	2b02      	cmp	r3, #2
 800fcf2:	d001      	beq.n	800fcf8 <find_volume+0x1f0>
 800fcf4:	230d      	movs	r3, #13
 800fcf6:	e148      	b.n	800ff8a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfa:	789b      	ldrb	r3, [r3, #2]
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd00:	fb02 f303 	mul.w	r3, r2, r3
 800fd04:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd10:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd14:	895b      	ldrh	r3, [r3, #10]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d008      	beq.n	800fd2c <find_volume+0x224>
 800fd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1c:	895b      	ldrh	r3, [r3, #10]
 800fd1e:	461a      	mov	r2, r3
 800fd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd22:	895b      	ldrh	r3, [r3, #10]
 800fd24:	3b01      	subs	r3, #1
 800fd26:	4013      	ands	r3, r2
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d001      	beq.n	800fd30 <find_volume+0x228>
 800fd2c:	230d      	movs	r3, #13
 800fd2e:	e12c      	b.n	800ff8a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd32:	3334      	adds	r3, #52	; 0x34
 800fd34:	3311      	adds	r3, #17
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fe f810 	bl	800dd5c <ld_word>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	461a      	mov	r2, r3
 800fd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd42:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd46:	891b      	ldrh	r3, [r3, #8]
 800fd48:	f003 030f 	and.w	r3, r3, #15
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d001      	beq.n	800fd56 <find_volume+0x24e>
 800fd52:	230d      	movs	r3, #13
 800fd54:	e119      	b.n	800ff8a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd58:	3334      	adds	r3, #52	; 0x34
 800fd5a:	3313      	adds	r3, #19
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7fd fffd 	bl	800dd5c <ld_word>
 800fd62:	4603      	mov	r3, r0
 800fd64:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fd66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d106      	bne.n	800fd7a <find_volume+0x272>
 800fd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6e:	3334      	adds	r3, #52	; 0x34
 800fd70:	3320      	adds	r3, #32
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fe f80a 	bl	800dd8c <ld_dword>
 800fd78:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7c:	3334      	adds	r3, #52	; 0x34
 800fd7e:	330e      	adds	r3, #14
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7fd ffeb 	bl	800dd5c <ld_word>
 800fd86:	4603      	mov	r3, r0
 800fd88:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fd8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <find_volume+0x28c>
 800fd90:	230d      	movs	r3, #13
 800fd92:	e0fa      	b.n	800ff8a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fd94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd98:	4413      	add	r3, r2
 800fd9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd9c:	8912      	ldrh	r2, [r2, #8]
 800fd9e:	0912      	lsrs	r2, r2, #4
 800fda0:	b292      	uxth	r2, r2
 800fda2:	4413      	add	r3, r2
 800fda4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fda6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d204      	bcs.n	800fdb8 <find_volume+0x2b0>
 800fdae:	230d      	movs	r3, #13
 800fdb0:	e0eb      	b.n	800ff8a <find_volume+0x482>
 800fdb2:	bf00      	nop
 800fdb4:	2000bda0 	.word	0x2000bda0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fdb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdbc:	1ad3      	subs	r3, r2, r3
 800fdbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdc0:	8952      	ldrh	r2, [r2, #10]
 800fdc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdc6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d101      	bne.n	800fdd2 <find_volume+0x2ca>
 800fdce:	230d      	movs	r3, #13
 800fdd0:	e0db      	b.n	800ff8a <find_volume+0x482>
		fmt = FS_FAT32;
 800fdd2:	2303      	movs	r3, #3
 800fdd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdda:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d802      	bhi.n	800fde8 <find_volume+0x2e0>
 800fde2:	2302      	movs	r3, #2
 800fde4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdea:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d802      	bhi.n	800fdf8 <find_volume+0x2f0>
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfa:	1c9a      	adds	r2, r3, #2
 800fdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfe:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800fe00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe04:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fe06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe0a:	441a      	add	r2, r3
 800fe0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800fe10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe14:	441a      	add	r2, r3
 800fe16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe18:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800fe1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe1e:	2b03      	cmp	r3, #3
 800fe20:	d11e      	bne.n	800fe60 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fe22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe24:	3334      	adds	r3, #52	; 0x34
 800fe26:	332a      	adds	r3, #42	; 0x2a
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fd ff97 	bl	800dd5c <ld_word>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d001      	beq.n	800fe38 <find_volume+0x330>
 800fe34:	230d      	movs	r3, #13
 800fe36:	e0a8      	b.n	800ff8a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fe38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3a:	891b      	ldrh	r3, [r3, #8]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d001      	beq.n	800fe44 <find_volume+0x33c>
 800fe40:	230d      	movs	r3, #13
 800fe42:	e0a2      	b.n	800ff8a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fe44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe46:	3334      	adds	r3, #52	; 0x34
 800fe48:	332c      	adds	r3, #44	; 0x2c
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fd ff9e 	bl	800dd8c <ld_dword>
 800fe50:	4602      	mov	r2, r0
 800fe52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe54:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fe56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe58:	699b      	ldr	r3, [r3, #24]
 800fe5a:	009b      	lsls	r3, r3, #2
 800fe5c:	647b      	str	r3, [r7, #68]	; 0x44
 800fe5e:	e01f      	b.n	800fea0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fe60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe62:	891b      	ldrh	r3, [r3, #8]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d101      	bne.n	800fe6c <find_volume+0x364>
 800fe68:	230d      	movs	r3, #13
 800fe6a:	e08e      	b.n	800ff8a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fe6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe72:	441a      	add	r2, r3
 800fe74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe76:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fe78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	d103      	bne.n	800fe88 <find_volume+0x380>
 800fe80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe82:	699b      	ldr	r3, [r3, #24]
 800fe84:	005b      	lsls	r3, r3, #1
 800fe86:	e00a      	b.n	800fe9e <find_volume+0x396>
 800fe88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe8a:	699a      	ldr	r2, [r3, #24]
 800fe8c:	4613      	mov	r3, r2
 800fe8e:	005b      	lsls	r3, r3, #1
 800fe90:	4413      	add	r3, r2
 800fe92:	085a      	lsrs	r2, r3, #1
 800fe94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe96:	699b      	ldr	r3, [r3, #24]
 800fe98:	f003 0301 	and.w	r3, r3, #1
 800fe9c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fe9e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea2:	69da      	ldr	r2, [r3, #28]
 800fea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fea6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800feaa:	0a5b      	lsrs	r3, r3, #9
 800feac:	429a      	cmp	r2, r3
 800feae:	d201      	bcs.n	800feb4 <find_volume+0x3ac>
 800feb0:	230d      	movs	r3, #13
 800feb2:	e06a      	b.n	800ff8a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800feb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb6:	f04f 32ff 	mov.w	r2, #4294967295
 800feba:	615a      	str	r2, [r3, #20]
 800febc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febe:	695a      	ldr	r2, [r3, #20]
 800fec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800fec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec6:	2280      	movs	r2, #128	; 0x80
 800fec8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800feca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fece:	2b03      	cmp	r3, #3
 800fed0:	d149      	bne.n	800ff66 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed4:	3334      	adds	r3, #52	; 0x34
 800fed6:	3330      	adds	r3, #48	; 0x30
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fd ff3f 	bl	800dd5c <ld_word>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b01      	cmp	r3, #1
 800fee2:	d140      	bne.n	800ff66 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fee6:	3301      	adds	r3, #1
 800fee8:	4619      	mov	r1, r3
 800feea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800feec:	f7fe f9e6 	bl	800e2bc <move_window>
 800fef0:	4603      	mov	r3, r0
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d137      	bne.n	800ff66 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef8:	2200      	movs	r2, #0
 800fefa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefe:	3334      	adds	r3, #52	; 0x34
 800ff00:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7fd ff29 	bl	800dd5c <ld_word>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d127      	bne.n	800ff66 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ff16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff18:	3334      	adds	r3, #52	; 0x34
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fd ff36 	bl	800dd8c <ld_dword>
 800ff20:	4603      	mov	r3, r0
 800ff22:	4a1c      	ldr	r2, [pc, #112]	; (800ff94 <find_volume+0x48c>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d11e      	bne.n	800ff66 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ff28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2a:	3334      	adds	r3, #52	; 0x34
 800ff2c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fd ff2b 	bl	800dd8c <ld_dword>
 800ff36:	4603      	mov	r3, r0
 800ff38:	4a17      	ldr	r2, [pc, #92]	; (800ff98 <find_volume+0x490>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d113      	bne.n	800ff66 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ff3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff40:	3334      	adds	r3, #52	; 0x34
 800ff42:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fd ff20 	bl	800dd8c <ld_dword>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff50:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ff52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff54:	3334      	adds	r3, #52	; 0x34
 800ff56:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7fd ff16 	bl	800dd8c <ld_dword>
 800ff60:	4602      	mov	r2, r0
 800ff62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff64:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ff66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff68:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ff6c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ff6e:	4b0b      	ldr	r3, [pc, #44]	; (800ff9c <find_volume+0x494>)
 800ff70:	881b      	ldrh	r3, [r3, #0]
 800ff72:	3301      	adds	r3, #1
 800ff74:	b29a      	uxth	r2, r3
 800ff76:	4b09      	ldr	r3, [pc, #36]	; (800ff9c <find_volume+0x494>)
 800ff78:	801a      	strh	r2, [r3, #0]
 800ff7a:	4b08      	ldr	r3, [pc, #32]	; (800ff9c <find_volume+0x494>)
 800ff7c:	881a      	ldrh	r2, [r3, #0]
 800ff7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff80:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ff82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff84:	f7fe f932 	bl	800e1ec <clear_lock>
#endif
	return FR_OK;
 800ff88:	2300      	movs	r3, #0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3758      	adds	r7, #88	; 0x58
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	bf00      	nop
 800ff94:	41615252 	.word	0x41615252
 800ff98:	61417272 	.word	0x61417272
 800ff9c:	2000bda4 	.word	0x2000bda4

0800ffa0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ffaa:	2309      	movs	r3, #9
 800ffac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d01c      	beq.n	800ffee <validate+0x4e>
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d018      	beq.n	800ffee <validate+0x4e>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d013      	beq.n	800ffee <validate+0x4e>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	889a      	ldrh	r2, [r3, #4]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	88db      	ldrh	r3, [r3, #6]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d10c      	bne.n	800ffee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	785b      	ldrb	r3, [r3, #1]
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7fd fe1e 	bl	800dc1c <disk_status>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	f003 0301 	and.w	r3, r3, #1
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d101      	bne.n	800ffee <validate+0x4e>
			res = FR_OK;
 800ffea:	2300      	movs	r3, #0
 800ffec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ffee:	7bfb      	ldrb	r3, [r7, #15]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d102      	bne.n	800fffa <validate+0x5a>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	e000      	b.n	800fffc <validate+0x5c>
 800fffa:	2300      	movs	r3, #0
 800fffc:	683a      	ldr	r2, [r7, #0]
 800fffe:	6013      	str	r3, [r2, #0]
	return res;
 8010000:	7bfb      	ldrb	r3, [r7, #15]
}
 8010002:	4618      	mov	r0, r3
 8010004:	3710      	adds	r7, #16
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
	...

0801000c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b088      	sub	sp, #32
 8010010:	af00      	add	r7, sp, #0
 8010012:	60f8      	str	r0, [r7, #12]
 8010014:	60b9      	str	r1, [r7, #8]
 8010016:	4613      	mov	r3, r2
 8010018:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801001e:	f107 0310 	add.w	r3, r7, #16
 8010022:	4618      	mov	r0, r3
 8010024:	f7ff fcd5 	bl	800f9d2 <get_ldnumber>
 8010028:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	2b00      	cmp	r3, #0
 801002e:	da01      	bge.n	8010034 <f_mount+0x28>
 8010030:	230b      	movs	r3, #11
 8010032:	e02b      	b.n	801008c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010034:	4a17      	ldr	r2, [pc, #92]	; (8010094 <f_mount+0x88>)
 8010036:	69fb      	ldr	r3, [r7, #28]
 8010038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801003c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801003e:	69bb      	ldr	r3, [r7, #24]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d005      	beq.n	8010050 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010044:	69b8      	ldr	r0, [r7, #24]
 8010046:	f7fe f8d1 	bl	800e1ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	2200      	movs	r2, #0
 801004e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d002      	beq.n	801005c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2200      	movs	r2, #0
 801005a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801005c:	68fa      	ldr	r2, [r7, #12]
 801005e:	490d      	ldr	r1, [pc, #52]	; (8010094 <f_mount+0x88>)
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d002      	beq.n	8010072 <f_mount+0x66>
 801006c:	79fb      	ldrb	r3, [r7, #7]
 801006e:	2b01      	cmp	r3, #1
 8010070:	d001      	beq.n	8010076 <f_mount+0x6a>
 8010072:	2300      	movs	r3, #0
 8010074:	e00a      	b.n	801008c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010076:	f107 010c 	add.w	r1, r7, #12
 801007a:	f107 0308 	add.w	r3, r7, #8
 801007e:	2200      	movs	r2, #0
 8010080:	4618      	mov	r0, r3
 8010082:	f7ff fd41 	bl	800fb08 <find_volume>
 8010086:	4603      	mov	r3, r0
 8010088:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801008a:	7dfb      	ldrb	r3, [r7, #23]
}
 801008c:	4618      	mov	r0, r3
 801008e:	3720      	adds	r7, #32
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}
 8010094:	2000bda0 	.word	0x2000bda0

08010098 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b09a      	sub	sp, #104	; 0x68
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	4613      	mov	r3, r2
 80100a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d101      	bne.n	80100b0 <f_open+0x18>
 80100ac:	2309      	movs	r3, #9
 80100ae:	e1bd      	b.n	801042c <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80100b0:	79fb      	ldrb	r3, [r7, #7]
 80100b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80100b8:	79fa      	ldrb	r2, [r7, #7]
 80100ba:	f107 0110 	add.w	r1, r7, #16
 80100be:	f107 0308 	add.w	r3, r7, #8
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7ff fd20 	bl	800fb08 <find_volume>
 80100c8:	4603      	mov	r3, r0
 80100ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80100ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f040 81a1 	bne.w	801041a <f_open+0x382>
		dj.obj.fs = fs;
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 80100dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80100e0:	f001 fb50 	bl	8011784 <ff_memalloc>
 80100e4:	65b8      	str	r0, [r7, #88]	; 0x58
 80100e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d101      	bne.n	80100f0 <f_open+0x58>
 80100ec:	2311      	movs	r3, #17
 80100ee:	e19d      	b.n	801042c <f_open+0x394>
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80100f4:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80100f6:	68ba      	ldr	r2, [r7, #8]
 80100f8:	f107 0314 	add.w	r3, r7, #20
 80100fc:	4611      	mov	r1, r2
 80100fe:	4618      	mov	r0, r3
 8010100:	f7ff fbf6 	bl	800f8f0 <follow_path>
 8010104:	4603      	mov	r3, r0
 8010106:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801010a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801010e:	2b00      	cmp	r3, #0
 8010110:	d11a      	bne.n	8010148 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010112:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010116:	b25b      	sxtb	r3, r3
 8010118:	2b00      	cmp	r3, #0
 801011a:	da03      	bge.n	8010124 <f_open+0x8c>
				res = FR_INVALID_NAME;
 801011c:	2306      	movs	r3, #6
 801011e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010122:	e011      	b.n	8010148 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010124:	79fb      	ldrb	r3, [r7, #7]
 8010126:	f023 0301 	bic.w	r3, r3, #1
 801012a:	2b00      	cmp	r3, #0
 801012c:	bf14      	ite	ne
 801012e:	2301      	movne	r3, #1
 8010130:	2300      	moveq	r3, #0
 8010132:	b2db      	uxtb	r3, r3
 8010134:	461a      	mov	r2, r3
 8010136:	f107 0314 	add.w	r3, r7, #20
 801013a:	4611      	mov	r1, r2
 801013c:	4618      	mov	r0, r3
 801013e:	f7fd ff0d 	bl	800df5c <chk_lock>
 8010142:	4603      	mov	r3, r0
 8010144:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010148:	79fb      	ldrb	r3, [r7, #7]
 801014a:	f003 031c 	and.w	r3, r3, #28
 801014e:	2b00      	cmp	r3, #0
 8010150:	d07f      	beq.n	8010252 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 8010152:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010156:	2b00      	cmp	r3, #0
 8010158:	d017      	beq.n	801018a <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801015a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801015e:	2b04      	cmp	r3, #4
 8010160:	d10e      	bne.n	8010180 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010162:	f7fd ff57 	bl	800e014 <enq_lock>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d006      	beq.n	801017a <f_open+0xe2>
 801016c:	f107 0314 	add.w	r3, r7, #20
 8010170:	4618      	mov	r0, r3
 8010172:	f7ff f82f 	bl	800f1d4 <dir_register>
 8010176:	4603      	mov	r3, r0
 8010178:	e000      	b.n	801017c <f_open+0xe4>
 801017a:	2312      	movs	r3, #18
 801017c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010180:	79fb      	ldrb	r3, [r7, #7]
 8010182:	f043 0308 	orr.w	r3, r3, #8
 8010186:	71fb      	strb	r3, [r7, #7]
 8010188:	e010      	b.n	80101ac <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801018a:	7ebb      	ldrb	r3, [r7, #26]
 801018c:	f003 0311 	and.w	r3, r3, #17
 8010190:	2b00      	cmp	r3, #0
 8010192:	d003      	beq.n	801019c <f_open+0x104>
					res = FR_DENIED;
 8010194:	2307      	movs	r3, #7
 8010196:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801019a:	e007      	b.n	80101ac <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801019c:	79fb      	ldrb	r3, [r7, #7]
 801019e:	f003 0304 	and.w	r3, r3, #4
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d002      	beq.n	80101ac <f_open+0x114>
 80101a6:	2308      	movs	r3, #8
 80101a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80101ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d168      	bne.n	8010286 <f_open+0x1ee>
 80101b4:	79fb      	ldrb	r3, [r7, #7]
 80101b6:	f003 0308 	and.w	r3, r3, #8
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d063      	beq.n	8010286 <f_open+0x1ee>
				dw = GET_FATTIME();
 80101be:	f7fb fd5c 	bl	800bc7a <get_fattime>
 80101c2:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80101c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c6:	330e      	adds	r3, #14
 80101c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7fd fe1c 	bl	800de08 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80101d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101d2:	3316      	adds	r3, #22
 80101d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7fd fe16 	bl	800de08 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80101dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101de:	330b      	adds	r3, #11
 80101e0:	2220      	movs	r2, #32
 80101e2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101e8:	4611      	mov	r1, r2
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fe fd6b 	bl	800ecc6 <ld_clust>
 80101f0:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80101f6:	2200      	movs	r2, #0
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fe fd83 	bl	800ed04 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80101fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010200:	331c      	adds	r3, #28
 8010202:	2100      	movs	r1, #0
 8010204:	4618      	mov	r0, r3
 8010206:	f7fd fdff 	bl	800de08 <st_dword>
					fs->wflag = 1;
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	2201      	movs	r2, #1
 801020e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010212:	2b00      	cmp	r3, #0
 8010214:	d037      	beq.n	8010286 <f_open+0x1ee>
						dw = fs->winsect;
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801021a:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 801021c:	f107 0314 	add.w	r3, r7, #20
 8010220:	2200      	movs	r2, #0
 8010222:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010224:	4618      	mov	r0, r3
 8010226:	f7fe fa96 	bl	800e756 <remove_chain>
 801022a:	4603      	mov	r3, r0
 801022c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010230:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010234:	2b00      	cmp	r3, #0
 8010236:	d126      	bne.n	8010286 <f_open+0x1ee>
							res = move_window(fs, dw);
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801023c:	4618      	mov	r0, r3
 801023e:	f7fe f83d 	bl	800e2bc <move_window>
 8010242:	4603      	mov	r3, r0
 8010244:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801024c:	3a01      	subs	r2, #1
 801024e:	611a      	str	r2, [r3, #16]
 8010250:	e019      	b.n	8010286 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010252:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010256:	2b00      	cmp	r3, #0
 8010258:	d115      	bne.n	8010286 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801025a:	7ebb      	ldrb	r3, [r7, #26]
 801025c:	f003 0310 	and.w	r3, r3, #16
 8010260:	2b00      	cmp	r3, #0
 8010262:	d003      	beq.n	801026c <f_open+0x1d4>
					res = FR_NO_FILE;
 8010264:	2304      	movs	r3, #4
 8010266:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801026a:	e00c      	b.n	8010286 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801026c:	79fb      	ldrb	r3, [r7, #7]
 801026e:	f003 0302 	and.w	r3, r3, #2
 8010272:	2b00      	cmp	r3, #0
 8010274:	d007      	beq.n	8010286 <f_open+0x1ee>
 8010276:	7ebb      	ldrb	r3, [r7, #26]
 8010278:	f003 0301 	and.w	r3, r3, #1
 801027c:	2b00      	cmp	r3, #0
 801027e:	d002      	beq.n	8010286 <f_open+0x1ee>
						res = FR_DENIED;
 8010280:	2307      	movs	r3, #7
 8010282:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010286:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801028a:	2b00      	cmp	r3, #0
 801028c:	d128      	bne.n	80102e0 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801028e:	79fb      	ldrb	r3, [r7, #7]
 8010290:	f003 0308 	and.w	r3, r3, #8
 8010294:	2b00      	cmp	r3, #0
 8010296:	d003      	beq.n	80102a0 <f_open+0x208>
				mode |= FA_MODIFIED;
 8010298:	79fb      	ldrb	r3, [r7, #7]
 801029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801029e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80102a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80102ae:	79fb      	ldrb	r3, [r7, #7]
 80102b0:	f023 0301 	bic.w	r3, r3, #1
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	bf14      	ite	ne
 80102b8:	2301      	movne	r3, #1
 80102ba:	2300      	moveq	r3, #0
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	461a      	mov	r2, r3
 80102c0:	f107 0314 	add.w	r3, r7, #20
 80102c4:	4611      	mov	r1, r2
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7fd fec6 	bl	800e058 <inc_lock>
 80102cc:	4602      	mov	r2, r0
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	691b      	ldr	r3, [r3, #16]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d102      	bne.n	80102e0 <f_open+0x248>
 80102da:	2302      	movs	r3, #2
 80102dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80102e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	f040 8095 	bne.w	8010414 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102ee:	4611      	mov	r1, r2
 80102f0:	4618      	mov	r0, r3
 80102f2:	f7fe fce8 	bl	800ecc6 <ld_clust>
 80102f6:	4602      	mov	r2, r0
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80102fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102fe:	331c      	adds	r3, #28
 8010300:	4618      	mov	r0, r3
 8010302:	f7fd fd43 	bl	800dd8c <ld_dword>
 8010306:	4602      	mov	r2, r0
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	2200      	movs	r2, #0
 8010310:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010312:	693a      	ldr	r2, [r7, #16]
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	88da      	ldrh	r2, [r3, #6]
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	79fa      	ldrb	r2, [r7, #7]
 8010324:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2200      	movs	r2, #0
 801032a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	2200      	movs	r2, #0
 8010330:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2200      	movs	r2, #0
 8010336:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	3330      	adds	r3, #48	; 0x30
 801033c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010340:	2100      	movs	r1, #0
 8010342:	4618      	mov	r0, r3
 8010344:	f7fd fdad 	bl	800dea2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010348:	79fb      	ldrb	r3, [r7, #7]
 801034a:	f003 0320 	and.w	r3, r3, #32
 801034e:	2b00      	cmp	r3, #0
 8010350:	d060      	beq.n	8010414 <f_open+0x37c>
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d05c      	beq.n	8010414 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	68da      	ldr	r2, [r3, #12]
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	895b      	ldrh	r3, [r3, #10]
 8010366:	025b      	lsls	r3, r3, #9
 8010368:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	689b      	ldr	r3, [r3, #8]
 801036e:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010376:	e016      	b.n	80103a6 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801037c:	4618      	mov	r0, r3
 801037e:	f7fe f858 	bl	800e432 <get_fat>
 8010382:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8010384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010386:	2b01      	cmp	r3, #1
 8010388:	d802      	bhi.n	8010390 <f_open+0x2f8>
 801038a:	2302      	movs	r3, #2
 801038c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010396:	d102      	bne.n	801039e <f_open+0x306>
 8010398:	2301      	movs	r3, #1
 801039a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801039e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80103a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103a2:	1ad3      	subs	r3, r2, r3
 80103a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d103      	bne.n	80103b6 <f_open+0x31e>
 80103ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80103b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d8e0      	bhi.n	8010378 <f_open+0x2e0>
				}
				fp->clust = clst;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80103ba:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80103bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d127      	bne.n	8010414 <f_open+0x37c>
 80103c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d022      	beq.n	8010414 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fe f80e 	bl	800e3f4 <clust2sect>
 80103d8:	64b8      	str	r0, [r7, #72]	; 0x48
 80103da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d103      	bne.n	80103e8 <f_open+0x350>
						res = FR_INT_ERR;
 80103e0:	2302      	movs	r3, #2
 80103e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80103e6:	e015      	b.n	8010414 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80103e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103ea:	0a5a      	lsrs	r2, r3, #9
 80103ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103ee:	441a      	add	r2, r3
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	7858      	ldrb	r0, [r3, #1]
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	6a1a      	ldr	r2, [r3, #32]
 8010402:	2301      	movs	r3, #1
 8010404:	f7fd fc4c 	bl	800dca0 <disk_read>
 8010408:	4603      	mov	r3, r0
 801040a:	2b00      	cmp	r3, #0
 801040c:	d002      	beq.n	8010414 <f_open+0x37c>
 801040e:	2301      	movs	r3, #1
 8010410:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8010414:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010416:	f001 f9c1 	bl	801179c <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801041a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801041e:	2b00      	cmp	r3, #0
 8010420:	d002      	beq.n	8010428 <f_open+0x390>
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	2200      	movs	r2, #0
 8010426:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010428:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801042c:	4618      	mov	r0, r3
 801042e:	3768      	adds	r7, #104	; 0x68
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b08e      	sub	sp, #56	; 0x38
 8010438:	af00      	add	r7, sp, #0
 801043a:	60f8      	str	r0, [r7, #12]
 801043c:	60b9      	str	r1, [r7, #8]
 801043e:	607a      	str	r2, [r7, #4]
 8010440:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	2200      	movs	r2, #0
 801044a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f107 0214 	add.w	r2, r7, #20
 8010452:	4611      	mov	r1, r2
 8010454:	4618      	mov	r0, r3
 8010456:	f7ff fda3 	bl	800ffa0 <validate>
 801045a:	4603      	mov	r3, r0
 801045c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010460:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010464:	2b00      	cmp	r3, #0
 8010466:	d107      	bne.n	8010478 <f_read+0x44>
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	7d5b      	ldrb	r3, [r3, #21]
 801046c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010470:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010474:	2b00      	cmp	r3, #0
 8010476:	d002      	beq.n	801047e <f_read+0x4a>
 8010478:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801047c:	e115      	b.n	80106aa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	7d1b      	ldrb	r3, [r3, #20]
 8010482:	f003 0301 	and.w	r3, r3, #1
 8010486:	2b00      	cmp	r3, #0
 8010488:	d101      	bne.n	801048e <f_read+0x5a>
 801048a:	2307      	movs	r3, #7
 801048c:	e10d      	b.n	80106aa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	68da      	ldr	r2, [r3, #12]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	699b      	ldr	r3, [r3, #24]
 8010496:	1ad3      	subs	r3, r2, r3
 8010498:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	6a3b      	ldr	r3, [r7, #32]
 801049e:	429a      	cmp	r2, r3
 80104a0:	f240 80fe 	bls.w	80106a0 <f_read+0x26c>
 80104a4:	6a3b      	ldr	r3, [r7, #32]
 80104a6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80104a8:	e0fa      	b.n	80106a0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	699b      	ldr	r3, [r3, #24]
 80104ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	f040 80c6 	bne.w	8010644 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	699b      	ldr	r3, [r3, #24]
 80104bc:	0a5b      	lsrs	r3, r3, #9
 80104be:	697a      	ldr	r2, [r7, #20]
 80104c0:	8952      	ldrh	r2, [r2, #10]
 80104c2:	3a01      	subs	r2, #1
 80104c4:	4013      	ands	r3, r2
 80104c6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80104c8:	69fb      	ldr	r3, [r7, #28]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d12f      	bne.n	801052e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	699b      	ldr	r3, [r3, #24]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d103      	bne.n	80104de <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	633b      	str	r3, [r7, #48]	; 0x30
 80104dc:	e013      	b.n	8010506 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d007      	beq.n	80104f6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	699b      	ldr	r3, [r3, #24]
 80104ea:	4619      	mov	r1, r3
 80104ec:	68f8      	ldr	r0, [r7, #12]
 80104ee:	f7fe fa2f 	bl	800e950 <clmt_clust>
 80104f2:	6338      	str	r0, [r7, #48]	; 0x30
 80104f4:	e007      	b.n	8010506 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80104f6:	68fa      	ldr	r2, [r7, #12]
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	69db      	ldr	r3, [r3, #28]
 80104fc:	4619      	mov	r1, r3
 80104fe:	4610      	mov	r0, r2
 8010500:	f7fd ff97 	bl	800e432 <get_fat>
 8010504:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010508:	2b01      	cmp	r3, #1
 801050a:	d804      	bhi.n	8010516 <f_read+0xe2>
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2202      	movs	r2, #2
 8010510:	755a      	strb	r2, [r3, #21]
 8010512:	2302      	movs	r3, #2
 8010514:	e0c9      	b.n	80106aa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801051c:	d104      	bne.n	8010528 <f_read+0xf4>
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	2201      	movs	r2, #1
 8010522:	755a      	strb	r2, [r3, #21]
 8010524:	2301      	movs	r3, #1
 8010526:	e0c0      	b.n	80106aa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801052c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801052e:	697a      	ldr	r2, [r7, #20]
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	69db      	ldr	r3, [r3, #28]
 8010534:	4619      	mov	r1, r3
 8010536:	4610      	mov	r0, r2
 8010538:	f7fd ff5c 	bl	800e3f4 <clust2sect>
 801053c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d104      	bne.n	801054e <f_read+0x11a>
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2202      	movs	r2, #2
 8010548:	755a      	strb	r2, [r3, #21]
 801054a:	2302      	movs	r3, #2
 801054c:	e0ad      	b.n	80106aa <f_read+0x276>
			sect += csect;
 801054e:	69ba      	ldr	r2, [r7, #24]
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	4413      	add	r3, r2
 8010554:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	0a5b      	lsrs	r3, r3, #9
 801055a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801055c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055e:	2b00      	cmp	r3, #0
 8010560:	d039      	beq.n	80105d6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010562:	69fa      	ldr	r2, [r7, #28]
 8010564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010566:	4413      	add	r3, r2
 8010568:	697a      	ldr	r2, [r7, #20]
 801056a:	8952      	ldrh	r2, [r2, #10]
 801056c:	4293      	cmp	r3, r2
 801056e:	d905      	bls.n	801057c <f_read+0x148>
					cc = fs->csize - csect;
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	895b      	ldrh	r3, [r3, #10]
 8010574:	461a      	mov	r2, r3
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	1ad3      	subs	r3, r2, r3
 801057a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	7858      	ldrb	r0, [r3, #1]
 8010580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010582:	69ba      	ldr	r2, [r7, #24]
 8010584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010586:	f7fd fb8b 	bl	800dca0 <disk_read>
 801058a:	4603      	mov	r3, r0
 801058c:	2b00      	cmp	r3, #0
 801058e:	d004      	beq.n	801059a <f_read+0x166>
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2201      	movs	r2, #1
 8010594:	755a      	strb	r2, [r3, #21]
 8010596:	2301      	movs	r3, #1
 8010598:	e087      	b.n	80106aa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	7d1b      	ldrb	r3, [r3, #20]
 801059e:	b25b      	sxtb	r3, r3
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	da14      	bge.n	80105ce <f_read+0x19a>
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	6a1a      	ldr	r2, [r3, #32]
 80105a8:	69bb      	ldr	r3, [r7, #24]
 80105aa:	1ad3      	subs	r3, r2, r3
 80105ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d90d      	bls.n	80105ce <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	6a1a      	ldr	r2, [r3, #32]
 80105b6:	69bb      	ldr	r3, [r7, #24]
 80105b8:	1ad3      	subs	r3, r2, r3
 80105ba:	025b      	lsls	r3, r3, #9
 80105bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105be:	18d0      	adds	r0, r2, r3
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	3330      	adds	r3, #48	; 0x30
 80105c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105c8:	4619      	mov	r1, r3
 80105ca:	f7fd fc49 	bl	800de60 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80105ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d0:	025b      	lsls	r3, r3, #9
 80105d2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80105d4:	e050      	b.n	8010678 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	6a1b      	ldr	r3, [r3, #32]
 80105da:	69ba      	ldr	r2, [r7, #24]
 80105dc:	429a      	cmp	r2, r3
 80105de:	d02e      	beq.n	801063e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	7d1b      	ldrb	r3, [r3, #20]
 80105e4:	b25b      	sxtb	r3, r3
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	da18      	bge.n	801061c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	7858      	ldrb	r0, [r3, #1]
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	6a1a      	ldr	r2, [r3, #32]
 80105f8:	2301      	movs	r3, #1
 80105fa:	f7fd fb71 	bl	800dce0 <disk_write>
 80105fe:	4603      	mov	r3, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	d004      	beq.n	801060e <f_read+0x1da>
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2201      	movs	r2, #1
 8010608:	755a      	strb	r2, [r3, #21]
 801060a:	2301      	movs	r3, #1
 801060c:	e04d      	b.n	80106aa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	7d1b      	ldrb	r3, [r3, #20]
 8010612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010616:	b2da      	uxtb	r2, r3
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	7858      	ldrb	r0, [r3, #1]
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010626:	2301      	movs	r3, #1
 8010628:	69ba      	ldr	r2, [r7, #24]
 801062a:	f7fd fb39 	bl	800dca0 <disk_read>
 801062e:	4603      	mov	r3, r0
 8010630:	2b00      	cmp	r3, #0
 8010632:	d004      	beq.n	801063e <f_read+0x20a>
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	2201      	movs	r2, #1
 8010638:	755a      	strb	r2, [r3, #21]
 801063a:	2301      	movs	r3, #1
 801063c:	e035      	b.n	80106aa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	69ba      	ldr	r2, [r7, #24]
 8010642:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	699b      	ldr	r3, [r3, #24]
 8010648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801064c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010650:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	429a      	cmp	r2, r3
 8010658:	d901      	bls.n	801065e <f_read+0x22a>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	699b      	ldr	r3, [r3, #24]
 8010668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801066c:	4413      	add	r3, r2
 801066e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010670:	4619      	mov	r1, r3
 8010672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010674:	f7fd fbf4 	bl	800de60 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067c:	4413      	add	r3, r2
 801067e:	627b      	str	r3, [r7, #36]	; 0x24
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	699a      	ldr	r2, [r3, #24]
 8010684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010686:	441a      	add	r2, r3
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	619a      	str	r2, [r3, #24]
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010692:	441a      	add	r2, r3
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	601a      	str	r2, [r3, #0]
 8010698:	687a      	ldr	r2, [r7, #4]
 801069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069c:	1ad3      	subs	r3, r2, r3
 801069e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	f47f af01 	bne.w	80104aa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80106a8:	2300      	movs	r3, #0
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3738      	adds	r7, #56	; 0x38
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}

080106b2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80106b2:	b580      	push	{r7, lr}
 80106b4:	b08c      	sub	sp, #48	; 0x30
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	60f8      	str	r0, [r7, #12]
 80106ba:	60b9      	str	r1, [r7, #8]
 80106bc:	607a      	str	r2, [r7, #4]
 80106be:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	2200      	movs	r2, #0
 80106c8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f107 0210 	add.w	r2, r7, #16
 80106d0:	4611      	mov	r1, r2
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7ff fc64 	bl	800ffa0 <validate>
 80106d8:	4603      	mov	r3, r0
 80106da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80106de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d107      	bne.n	80106f6 <f_write+0x44>
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	7d5b      	ldrb	r3, [r3, #21]
 80106ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80106ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d002      	beq.n	80106fc <f_write+0x4a>
 80106f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106fa:	e14b      	b.n	8010994 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	7d1b      	ldrb	r3, [r3, #20]
 8010700:	f003 0302 	and.w	r3, r3, #2
 8010704:	2b00      	cmp	r3, #0
 8010706:	d101      	bne.n	801070c <f_write+0x5a>
 8010708:	2307      	movs	r3, #7
 801070a:	e143      	b.n	8010994 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	699a      	ldr	r2, [r3, #24]
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	441a      	add	r2, r3
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	699b      	ldr	r3, [r3, #24]
 8010718:	429a      	cmp	r2, r3
 801071a:	f080 812d 	bcs.w	8010978 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	699b      	ldr	r3, [r3, #24]
 8010722:	43db      	mvns	r3, r3
 8010724:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010726:	e127      	b.n	8010978 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	699b      	ldr	r3, [r3, #24]
 801072c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010730:	2b00      	cmp	r3, #0
 8010732:	f040 80e3 	bne.w	80108fc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	699b      	ldr	r3, [r3, #24]
 801073a:	0a5b      	lsrs	r3, r3, #9
 801073c:	693a      	ldr	r2, [r7, #16]
 801073e:	8952      	ldrh	r2, [r2, #10]
 8010740:	3a01      	subs	r2, #1
 8010742:	4013      	ands	r3, r2
 8010744:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010746:	69bb      	ldr	r3, [r7, #24]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d143      	bne.n	80107d4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	699b      	ldr	r3, [r3, #24]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d10c      	bne.n	801076e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	689b      	ldr	r3, [r3, #8]
 8010758:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801075a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075c:	2b00      	cmp	r3, #0
 801075e:	d11a      	bne.n	8010796 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	2100      	movs	r1, #0
 8010764:	4618      	mov	r0, r3
 8010766:	f7fe f85b 	bl	800e820 <create_chain>
 801076a:	62b8      	str	r0, [r7, #40]	; 0x28
 801076c:	e013      	b.n	8010796 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010772:	2b00      	cmp	r3, #0
 8010774:	d007      	beq.n	8010786 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	699b      	ldr	r3, [r3, #24]
 801077a:	4619      	mov	r1, r3
 801077c:	68f8      	ldr	r0, [r7, #12]
 801077e:	f7fe f8e7 	bl	800e950 <clmt_clust>
 8010782:	62b8      	str	r0, [r7, #40]	; 0x28
 8010784:	e007      	b.n	8010796 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010786:	68fa      	ldr	r2, [r7, #12]
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	69db      	ldr	r3, [r3, #28]
 801078c:	4619      	mov	r1, r3
 801078e:	4610      	mov	r0, r2
 8010790:	f7fe f846 	bl	800e820 <create_chain>
 8010794:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010798:	2b00      	cmp	r3, #0
 801079a:	f000 80f2 	beq.w	8010982 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801079e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	d104      	bne.n	80107ae <f_write+0xfc>
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2202      	movs	r2, #2
 80107a8:	755a      	strb	r2, [r3, #21]
 80107aa:	2302      	movs	r3, #2
 80107ac:	e0f2      	b.n	8010994 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80107ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107b4:	d104      	bne.n	80107c0 <f_write+0x10e>
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2201      	movs	r2, #1
 80107ba:	755a      	strb	r2, [r3, #21]
 80107bc:	2301      	movs	r3, #1
 80107be:	e0e9      	b.n	8010994 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107c4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	689b      	ldr	r3, [r3, #8]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d102      	bne.n	80107d4 <f_write+0x122>
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107d2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	7d1b      	ldrb	r3, [r3, #20]
 80107d8:	b25b      	sxtb	r3, r3
 80107da:	2b00      	cmp	r3, #0
 80107dc:	da18      	bge.n	8010810 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	7858      	ldrb	r0, [r3, #1]
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	6a1a      	ldr	r2, [r3, #32]
 80107ec:	2301      	movs	r3, #1
 80107ee:	f7fd fa77 	bl	800dce0 <disk_write>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d004      	beq.n	8010802 <f_write+0x150>
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2201      	movs	r2, #1
 80107fc:	755a      	strb	r2, [r3, #21]
 80107fe:	2301      	movs	r3, #1
 8010800:	e0c8      	b.n	8010994 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	7d1b      	ldrb	r3, [r3, #20]
 8010806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801080a:	b2da      	uxtb	r2, r3
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010810:	693a      	ldr	r2, [r7, #16]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	69db      	ldr	r3, [r3, #28]
 8010816:	4619      	mov	r1, r3
 8010818:	4610      	mov	r0, r2
 801081a:	f7fd fdeb 	bl	800e3f4 <clust2sect>
 801081e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d104      	bne.n	8010830 <f_write+0x17e>
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	2202      	movs	r2, #2
 801082a:	755a      	strb	r2, [r3, #21]
 801082c:	2302      	movs	r3, #2
 801082e:	e0b1      	b.n	8010994 <f_write+0x2e2>
			sect += csect;
 8010830:	697a      	ldr	r2, [r7, #20]
 8010832:	69bb      	ldr	r3, [r7, #24]
 8010834:	4413      	add	r3, r2
 8010836:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	0a5b      	lsrs	r3, r3, #9
 801083c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801083e:	6a3b      	ldr	r3, [r7, #32]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d03c      	beq.n	80108be <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010844:	69ba      	ldr	r2, [r7, #24]
 8010846:	6a3b      	ldr	r3, [r7, #32]
 8010848:	4413      	add	r3, r2
 801084a:	693a      	ldr	r2, [r7, #16]
 801084c:	8952      	ldrh	r2, [r2, #10]
 801084e:	4293      	cmp	r3, r2
 8010850:	d905      	bls.n	801085e <f_write+0x1ac>
					cc = fs->csize - csect;
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	895b      	ldrh	r3, [r3, #10]
 8010856:	461a      	mov	r2, r3
 8010858:	69bb      	ldr	r3, [r7, #24]
 801085a:	1ad3      	subs	r3, r2, r3
 801085c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	7858      	ldrb	r0, [r3, #1]
 8010862:	6a3b      	ldr	r3, [r7, #32]
 8010864:	697a      	ldr	r2, [r7, #20]
 8010866:	69f9      	ldr	r1, [r7, #28]
 8010868:	f7fd fa3a 	bl	800dce0 <disk_write>
 801086c:	4603      	mov	r3, r0
 801086e:	2b00      	cmp	r3, #0
 8010870:	d004      	beq.n	801087c <f_write+0x1ca>
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2201      	movs	r2, #1
 8010876:	755a      	strb	r2, [r3, #21]
 8010878:	2301      	movs	r3, #1
 801087a:	e08b      	b.n	8010994 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	6a1a      	ldr	r2, [r3, #32]
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	1ad3      	subs	r3, r2, r3
 8010884:	6a3a      	ldr	r2, [r7, #32]
 8010886:	429a      	cmp	r2, r3
 8010888:	d915      	bls.n	80108b6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	6a1a      	ldr	r2, [r3, #32]
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	1ad3      	subs	r3, r2, r3
 8010898:	025b      	lsls	r3, r3, #9
 801089a:	69fa      	ldr	r2, [r7, #28]
 801089c:	4413      	add	r3, r2
 801089e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80108a2:	4619      	mov	r1, r3
 80108a4:	f7fd fadc 	bl	800de60 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	7d1b      	ldrb	r3, [r3, #20]
 80108ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108b0:	b2da      	uxtb	r2, r3
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80108b6:	6a3b      	ldr	r3, [r7, #32]
 80108b8:	025b      	lsls	r3, r3, #9
 80108ba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80108bc:	e03f      	b.n	801093e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	6a1b      	ldr	r3, [r3, #32]
 80108c2:	697a      	ldr	r2, [r7, #20]
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d016      	beq.n	80108f6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	699a      	ldr	r2, [r3, #24]
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d210      	bcs.n	80108f6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	7858      	ldrb	r0, [r3, #1]
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80108de:	2301      	movs	r3, #1
 80108e0:	697a      	ldr	r2, [r7, #20]
 80108e2:	f7fd f9dd 	bl	800dca0 <disk_read>
 80108e6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d004      	beq.n	80108f6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	2201      	movs	r2, #1
 80108f0:	755a      	strb	r2, [r3, #21]
 80108f2:	2301      	movs	r3, #1
 80108f4:	e04e      	b.n	8010994 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	697a      	ldr	r2, [r7, #20]
 80108fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	699b      	ldr	r3, [r3, #24]
 8010900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010904:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010908:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801090a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	429a      	cmp	r2, r3
 8010910:	d901      	bls.n	8010916 <f_write+0x264>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	699b      	ldr	r3, [r3, #24]
 8010920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010924:	4413      	add	r3, r2
 8010926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010928:	69f9      	ldr	r1, [r7, #28]
 801092a:	4618      	mov	r0, r3
 801092c:	f7fd fa98 	bl	800de60 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	7d1b      	ldrb	r3, [r3, #20]
 8010934:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010938:	b2da      	uxtb	r2, r3
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801093e:	69fa      	ldr	r2, [r7, #28]
 8010940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010942:	4413      	add	r3, r2
 8010944:	61fb      	str	r3, [r7, #28]
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	699a      	ldr	r2, [r3, #24]
 801094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094c:	441a      	add	r2, r3
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	619a      	str	r2, [r3, #24]
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	68da      	ldr	r2, [r3, #12]
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	699b      	ldr	r3, [r3, #24]
 801095a:	429a      	cmp	r2, r3
 801095c:	bf38      	it	cc
 801095e:	461a      	movcc	r2, r3
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	60da      	str	r2, [r3, #12]
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	681a      	ldr	r2, [r3, #0]
 8010968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096a:	441a      	add	r2, r3
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	601a      	str	r2, [r3, #0]
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010974:	1ad3      	subs	r3, r2, r3
 8010976:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2b00      	cmp	r3, #0
 801097c:	f47f aed4 	bne.w	8010728 <f_write+0x76>
 8010980:	e000      	b.n	8010984 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010982:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	7d1b      	ldrb	r3, [r3, #20]
 8010988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801098c:	b2da      	uxtb	r2, r3
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010992:	2300      	movs	r3, #0
}
 8010994:	4618      	mov	r0, r3
 8010996:	3730      	adds	r7, #48	; 0x30
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}

0801099c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b086      	sub	sp, #24
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f107 0208 	add.w	r2, r7, #8
 80109aa:	4611      	mov	r1, r2
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7ff faf7 	bl	800ffa0 <validate>
 80109b2:	4603      	mov	r3, r0
 80109b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80109b6:	7dfb      	ldrb	r3, [r7, #23]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d168      	bne.n	8010a8e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	7d1b      	ldrb	r3, [r3, #20]
 80109c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d062      	beq.n	8010a8e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	7d1b      	ldrb	r3, [r3, #20]
 80109cc:	b25b      	sxtb	r3, r3
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	da15      	bge.n	80109fe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	7858      	ldrb	r0, [r3, #1]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6a1a      	ldr	r2, [r3, #32]
 80109e0:	2301      	movs	r3, #1
 80109e2:	f7fd f97d 	bl	800dce0 <disk_write>
 80109e6:	4603      	mov	r3, r0
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d001      	beq.n	80109f0 <f_sync+0x54>
 80109ec:	2301      	movs	r3, #1
 80109ee:	e04f      	b.n	8010a90 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	7d1b      	ldrb	r3, [r3, #20]
 80109f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109f8:	b2da      	uxtb	r2, r3
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80109fe:	f7fb f93c 	bl	800bc7a <get_fattime>
 8010a02:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010a04:	68ba      	ldr	r2, [r7, #8]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	4610      	mov	r0, r2
 8010a0e:	f7fd fc55 	bl	800e2bc <move_window>
 8010a12:	4603      	mov	r3, r0
 8010a14:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010a16:	7dfb      	ldrb	r3, [r7, #23]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d138      	bne.n	8010a8e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a20:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	330b      	adds	r3, #11
 8010a26:	781a      	ldrb	r2, [r3, #0]
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	330b      	adds	r3, #11
 8010a2c:	f042 0220 	orr.w	r2, r2, #32
 8010a30:	b2d2      	uxtb	r2, r2
 8010a32:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6818      	ldr	r0, [r3, #0]
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	689b      	ldr	r3, [r3, #8]
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	68f9      	ldr	r1, [r7, #12]
 8010a40:	f7fe f960 	bl	800ed04 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	f103 021c 	add.w	r2, r3, #28
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	68db      	ldr	r3, [r3, #12]
 8010a4e:	4619      	mov	r1, r3
 8010a50:	4610      	mov	r0, r2
 8010a52:	f7fd f9d9 	bl	800de08 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	3316      	adds	r3, #22
 8010a5a:	6939      	ldr	r1, [r7, #16]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7fd f9d3 	bl	800de08 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	3312      	adds	r3, #18
 8010a66:	2100      	movs	r1, #0
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7fd f9b2 	bl	800ddd2 <st_word>
					fs->wflag = 1;
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	2201      	movs	r2, #1
 8010a72:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7fd fc4e 	bl	800e318 <sync_fs>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	7d1b      	ldrb	r3, [r3, #20]
 8010a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a88:	b2da      	uxtb	r2, r3
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3718      	adds	r7, #24
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b084      	sub	sp, #16
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f7ff ff7b 	bl	801099c <f_sync>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010aaa:	7bfb      	ldrb	r3, [r7, #15]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d118      	bne.n	8010ae2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f107 0208 	add.w	r2, r7, #8
 8010ab6:	4611      	mov	r1, r2
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7ff fa71 	bl	800ffa0 <validate>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010ac2:	7bfb      	ldrb	r3, [r7, #15]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d10c      	bne.n	8010ae2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	691b      	ldr	r3, [r3, #16]
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7fd fb51 	bl	800e174 <dec_lock>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010ad6:	7bfb      	ldrb	r3, [r7, #15]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d102      	bne.n	8010ae2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3710      	adds	r7, #16
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b092      	sub	sp, #72	; 0x48
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8010af6:	f107 010c 	add.w	r1, r7, #12
 8010afa:	1d3b      	adds	r3, r7, #4
 8010afc:	2200      	movs	r2, #0
 8010afe:	4618      	mov	r0, r3
 8010b00:	f7ff f802 	bl	800fb08 <find_volume>
 8010b04:	4603      	mov	r3, r0
 8010b06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010b0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d12f      	bne.n	8010b72 <f_stat+0x86>
		INIT_NAMBUF(dj.obj.fs);
 8010b12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010b16:	f000 fe35 	bl	8011784 <ff_memalloc>
 8010b1a:	6438      	str	r0, [r7, #64]	; 0x40
 8010b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d101      	bne.n	8010b26 <f_stat+0x3a>
 8010b22:	2311      	movs	r3, #17
 8010b24:	e027      	b.n	8010b76 <f_stat+0x8a>
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b2a:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	f107 030c 	add.w	r3, r7, #12
 8010b32:	4611      	mov	r1, r2
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7fe fedb 	bl	800f8f0 <follow_path>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {				/* Follow completed */
 8010b40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d111      	bne.n	8010b6c <f_stat+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8010b48:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010b4c:	b25b      	sxtb	r3, r3
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	da03      	bge.n	8010b5a <f_stat+0x6e>
				res = FR_INVALID_NAME;
 8010b52:	2306      	movs	r3, #6
 8010b54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010b58:	e008      	b.n	8010b6c <f_stat+0x80>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d005      	beq.n	8010b6c <f_stat+0x80>
 8010b60:	f107 030c 	add.w	r3, r7, #12
 8010b64:	6839      	ldr	r1, [r7, #0]
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7fe fc2c 	bl	800f3c4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 8010b6c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010b6e:	f000 fe15 	bl	801179c <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 8010b72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3748      	adds	r7, #72	; 0x48
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}

08010b7e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010b7e:	b580      	push	{r7, lr}
 8010b80:	b092      	sub	sp, #72	; 0x48
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	60f8      	str	r0, [r7, #12]
 8010b86:	60b9      	str	r1, [r7, #8]
 8010b88:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010b8a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010b8e:	f107 030c 	add.w	r3, r7, #12
 8010b92:	2200      	movs	r2, #0
 8010b94:	4618      	mov	r0, r3
 8010b96:	f7fe ffb7 	bl	800fb08 <find_volume>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010ba0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	f040 8099 	bne.w	8010cdc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8010baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb2:	695a      	ldr	r2, [r3, #20]
 8010bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb6:	699b      	ldr	r3, [r3, #24]
 8010bb8:	3b02      	subs	r3, #2
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d804      	bhi.n	8010bc8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc0:	695a      	ldr	r2, [r3, #20]
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	601a      	str	r2, [r3, #0]
 8010bc6:	e089      	b.n	8010cdc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8010bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d128      	bne.n	8010c26 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8010bd4:	2302      	movs	r3, #2
 8010bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bda:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8010bdc:	f107 0314 	add.w	r3, r7, #20
 8010be0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fd fc25 	bl	800e432 <get_fat>
 8010be8:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8010bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf0:	d103      	bne.n	8010bfa <f_getfree+0x7c>
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010bf8:	e063      	b.n	8010cc2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8010bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	d103      	bne.n	8010c08 <f_getfree+0x8a>
 8010c00:	2302      	movs	r3, #2
 8010c02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010c06:	e05c      	b.n	8010cc2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8010c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d102      	bne.n	8010c14 <f_getfree+0x96>
 8010c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c10:	3301      	adds	r3, #1
 8010c12:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8010c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c16:	3301      	adds	r3, #1
 8010c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c1c:	699b      	ldr	r3, [r3, #24]
 8010c1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d3db      	bcc.n	8010bdc <f_getfree+0x5e>
 8010c24:	e04d      	b.n	8010cc2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8010c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c28:	699b      	ldr	r3, [r3, #24]
 8010c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c30:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8010c32:	2300      	movs	r3, #0
 8010c34:	637b      	str	r3, [r7, #52]	; 0x34
 8010c36:	2300      	movs	r3, #0
 8010c38:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8010c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d113      	bne.n	8010c68 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8010c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c44:	1c5a      	adds	r2, r3, #1
 8010c46:	63ba      	str	r2, [r7, #56]	; 0x38
 8010c48:	4619      	mov	r1, r3
 8010c4a:	f7fd fb37 	bl	800e2bc <move_window>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8010c54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d131      	bne.n	8010cc0 <f_getfree+0x142>
							p = fs->win;
 8010c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c5e:	3334      	adds	r3, #52	; 0x34
 8010c60:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8010c62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c66:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8010c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	2b02      	cmp	r3, #2
 8010c6e:	d10f      	bne.n	8010c90 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8010c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c72:	f7fd f873 	bl	800dd5c <ld_word>
 8010c76:	4603      	mov	r3, r0
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d102      	bne.n	8010c82 <f_getfree+0x104>
 8010c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c7e:	3301      	adds	r3, #1
 8010c80:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8010c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c84:	3302      	adds	r3, #2
 8010c86:	633b      	str	r3, [r7, #48]	; 0x30
 8010c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c8a:	3b02      	subs	r3, #2
 8010c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8010c8e:	e010      	b.n	8010cb2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c92:	f7fd f87b 	bl	800dd8c <ld_dword>
 8010c96:	4603      	mov	r3, r0
 8010c98:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d102      	bne.n	8010ca6 <f_getfree+0x128>
 8010ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8010ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca8:	3304      	adds	r3, #4
 8010caa:	633b      	str	r3, [r7, #48]	; 0x30
 8010cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cae:	3b04      	subs	r3, #4
 8010cb0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8010cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cb4:	3b01      	subs	r3, #1
 8010cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d1bd      	bne.n	8010c3a <f_getfree+0xbc>
 8010cbe:	e000      	b.n	8010cc2 <f_getfree+0x144>
							if (res != FR_OK) break;
 8010cc0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010cc6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8010cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010ccc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd0:	791a      	ldrb	r2, [r3, #4]
 8010cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd4:	f042 0201 	orr.w	r2, r2, #1
 8010cd8:	b2d2      	uxtb	r2, r2
 8010cda:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8010cdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3748      	adds	r7, #72	; 0x48
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}

08010ce8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8010ce8:	b590      	push	{r4, r7, lr}
 8010cea:	b09d      	sub	sp, #116	; 0x74
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	60f8      	str	r0, [r7, #12]
 8010cf0:	607a      	str	r2, [r7, #4]
 8010cf2:	603b      	str	r3, [r7, #0]
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8010cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d00:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8010d02:	f107 030c 	add.w	r3, r7, #12
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fe fe63 	bl	800f9d2 <get_ldnumber>
 8010d0c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	da02      	bge.n	8010d1a <f_mkfs+0x32>
 8010d14:	230b      	movs	r3, #11
 8010d16:	f000 bc0d 	b.w	8011534 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8010d1a:	4a94      	ldr	r2, [pc, #592]	; (8010f6c <f_mkfs+0x284>)
 8010d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d005      	beq.n	8010d32 <f_mkfs+0x4a>
 8010d26:	4a91      	ldr	r2, [pc, #580]	; (8010f6c <f_mkfs+0x284>)
 8010d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8010d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d34:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8010d38:	2300      	movs	r3, #0
 8010d3a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8010d3e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7fc ff84 	bl	800dc50 <disk_initialize>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8010d4e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010d52:	f003 0301 	and.w	r3, r3, #1
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d001      	beq.n	8010d5e <f_mkfs+0x76>
 8010d5a:	2303      	movs	r3, #3
 8010d5c:	e3ea      	b.n	8011534 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8010d5e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010d62:	f003 0304 	and.w	r3, r3, #4
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d001      	beq.n	8010d6e <f_mkfs+0x86>
 8010d6a:	230a      	movs	r3, #10
 8010d6c:	e3e2      	b.n	8011534 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8010d6e:	f107 0214 	add.w	r2, r7, #20
 8010d72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010d76:	2103      	movs	r1, #3
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fc ffd1 	bl	800dd20 <disk_ioctl>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d10c      	bne.n	8010d9e <f_mkfs+0xb6>
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d009      	beq.n	8010d9e <f_mkfs+0xb6>
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d90:	d805      	bhi.n	8010d9e <f_mkfs+0xb6>
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	1e5a      	subs	r2, r3, #1
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	4013      	ands	r3, r2
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d001      	beq.n	8010da2 <f_mkfs+0xba>
 8010d9e:	2301      	movs	r3, #1
 8010da0:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8010da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010da6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d003      	beq.n	8010db6 <f_mkfs+0xce>
 8010dae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010db0:	687a      	ldr	r2, [r7, #4]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d309      	bcc.n	8010dca <f_mkfs+0xe2>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010dbc:	d805      	bhi.n	8010dca <f_mkfs+0xe2>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	1e5a      	subs	r2, r3, #1
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	4013      	ands	r3, r2
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d001      	beq.n	8010dce <f_mkfs+0xe6>
 8010dca:	2313      	movs	r3, #19
 8010dcc:	e3b2      	b.n	8011534 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8010dce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010dd0:	687a      	ldr	r2, [r7, #4]
 8010dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010dd6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8010ddc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010dde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010de6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8010de8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dec:	fb02 f303 	mul.w	r3, r2, r3
 8010df0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8010df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d101      	bne.n	8010dfc <f_mkfs+0x114>
 8010df8:	230e      	movs	r3, #14
 8010dfa:	e39b      	b.n	8011534 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8010dfc:	f107 0210 	add.w	r2, r7, #16
 8010e00:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010e04:	2101      	movs	r1, #1
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7fc ff8a 	bl	800dd20 <disk_ioctl>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d001      	beq.n	8010e16 <f_mkfs+0x12e>
 8010e12:	2301      	movs	r3, #1
 8010e14:	e38e      	b.n	8011534 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8010e16:	7afb      	ldrb	r3, [r7, #11]
 8010e18:	f003 0308 	and.w	r3, r3, #8
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d001      	beq.n	8010e24 <f_mkfs+0x13c>
 8010e20:	2300      	movs	r3, #0
 8010e22:	e000      	b.n	8010e26 <f_mkfs+0x13e>
 8010e24:	233f      	movs	r3, #63	; 0x3f
 8010e26:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8010e28:	693b      	ldr	r3, [r7, #16]
 8010e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d901      	bls.n	8010e34 <f_mkfs+0x14c>
 8010e30:	230e      	movs	r3, #14
 8010e32:	e37f      	b.n	8011534 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8010e34:	693a      	ldr	r2, [r7, #16]
 8010e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e38:	1ad3      	subs	r3, r2, r3
 8010e3a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8010e3c:	693b      	ldr	r3, [r7, #16]
 8010e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8010e40:	d801      	bhi.n	8010e46 <f_mkfs+0x15e>
 8010e42:	230e      	movs	r3, #14
 8010e44:	e376      	b.n	8011534 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2b80      	cmp	r3, #128	; 0x80
 8010e4a:	d901      	bls.n	8010e50 <f_mkfs+0x168>
 8010e4c:	2313      	movs	r3, #19
 8010e4e:	e371      	b.n	8011534 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8010e50:	7afb      	ldrb	r3, [r7, #11]
 8010e52:	f003 0302 	and.w	r3, r3, #2
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d00d      	beq.n	8010e76 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8010e5a:	7afb      	ldrb	r3, [r7, #11]
 8010e5c:	f003 0307 	and.w	r3, r3, #7
 8010e60:	2b02      	cmp	r3, #2
 8010e62:	d004      	beq.n	8010e6e <f_mkfs+0x186>
 8010e64:	7afb      	ldrb	r3, [r7, #11]
 8010e66:	f003 0301 	and.w	r3, r3, #1
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d103      	bne.n	8010e76 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8010e6e:	2303      	movs	r3, #3
 8010e70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010e74:	e009      	b.n	8010e8a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8010e76:	7afb      	ldrb	r3, [r7, #11]
 8010e78:	f003 0301 	and.w	r3, r3, #1
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d101      	bne.n	8010e84 <f_mkfs+0x19c>
 8010e80:	2313      	movs	r3, #19
 8010e82:	e357      	b.n	8011534 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8010e84:	2302      	movs	r3, #2
 8010e86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8010e8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010e92:	2b03      	cmp	r3, #3
 8010e94:	d13c      	bne.n	8010f10 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8010e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d11b      	bne.n	8010ed4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	0c5b      	lsrs	r3, r3, #17
 8010ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	653b      	str	r3, [r7, #80]	; 0x50
 8010eaa:	e005      	b.n	8010eb8 <f_mkfs+0x1d0>
 8010eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010eae:	3301      	adds	r3, #1
 8010eb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8010eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010eb4:	005b      	lsls	r3, r3, #1
 8010eb6:	653b      	str	r3, [r7, #80]	; 0x50
 8010eb8:	4a2d      	ldr	r2, [pc, #180]	; (8010f70 <f_mkfs+0x288>)
 8010eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d007      	beq.n	8010ed4 <f_mkfs+0x1ec>
 8010ec4:	4a2a      	ldr	r2, [pc, #168]	; (8010f70 <f_mkfs+0x288>)
 8010ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ecc:	461a      	mov	r2, r3
 8010ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	d2eb      	bcs.n	8010eac <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8010ed4:	693a      	ldr	r2, [r7, #16]
 8010ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8010edc:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8010ede:	6a3b      	ldr	r3, [r7, #32]
 8010ee0:	3302      	adds	r3, #2
 8010ee2:	009a      	lsls	r2, r3, #2
 8010ee4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010ee6:	4413      	add	r3, r2
 8010ee8:	1e5a      	subs	r2, r3, #1
 8010eea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ef0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8010ef2:	2320      	movs	r3, #32
 8010ef4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8010efa:	6a3b      	ldr	r3, [r7, #32]
 8010efc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010f00:	4293      	cmp	r3, r2
 8010f02:	d903      	bls.n	8010f0c <f_mkfs+0x224>
 8010f04:	6a3b      	ldr	r3, [r7, #32]
 8010f06:	4a1b      	ldr	r2, [pc, #108]	; (8010f74 <f_mkfs+0x28c>)
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	d952      	bls.n	8010fb2 <f_mkfs+0x2ca>
 8010f0c:	230e      	movs	r3, #14
 8010f0e:	e311      	b.n	8011534 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8010f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d11b      	bne.n	8010f4e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	0b1b      	lsrs	r3, r3, #12
 8010f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f20:	2301      	movs	r3, #1
 8010f22:	653b      	str	r3, [r7, #80]	; 0x50
 8010f24:	e005      	b.n	8010f32 <f_mkfs+0x24a>
 8010f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f28:	3301      	adds	r3, #1
 8010f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f2e:	005b      	lsls	r3, r3, #1
 8010f30:	653b      	str	r3, [r7, #80]	; 0x50
 8010f32:	4a11      	ldr	r2, [pc, #68]	; (8010f78 <f_mkfs+0x290>)
 8010f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d007      	beq.n	8010f4e <f_mkfs+0x266>
 8010f3e:	4a0e      	ldr	r2, [pc, #56]	; (8010f78 <f_mkfs+0x290>)
 8010f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f46:	461a      	mov	r2, r3
 8010f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	d2eb      	bcs.n	8010f26 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8010f4e:	693a      	ldr	r2, [r7, #16]
 8010f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f56:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8010f58:	6a3b      	ldr	r3, [r7, #32]
 8010f5a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d90c      	bls.n	8010f7c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8010f62:	6a3b      	ldr	r3, [r7, #32]
 8010f64:	3302      	adds	r3, #2
 8010f66:	005b      	lsls	r3, r3, #1
 8010f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010f6a:	e012      	b.n	8010f92 <f_mkfs+0x2aa>
 8010f6c:	2000bda0 	.word	0x2000bda0
 8010f70:	08027804 	.word	0x08027804
 8010f74:	0ffffff5 	.word	0x0ffffff5
 8010f78:	08027814 	.word	0x08027814
				} else {
					fmt = FS_FAT12;
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8010f82:	6a3a      	ldr	r2, [r7, #32]
 8010f84:	4613      	mov	r3, r2
 8010f86:	005b      	lsls	r3, r3, #1
 8010f88:	4413      	add	r3, r2
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	085b      	lsrs	r3, r3, #1
 8010f8e:	3303      	adds	r3, #3
 8010f90:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8010f92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f96:	4413      	add	r3, r2
 8010f98:	1e5a      	subs	r2, r3, #1
 8010f9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010fa0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8010fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fa8:	015a      	lsls	r2, r3, #5
 8010faa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8010fb0:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8010fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fb6:	4413      	add	r3, r2
 8010fb8:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8010fba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fbe:	fb03 f202 	mul.w	r2, r3, r2
 8010fc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010fc4:	4413      	add	r3, r2
 8010fc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010fc8:	4413      	add	r3, r2
 8010fca:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8010fcc:	697a      	ldr	r2, [r7, #20]
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	1e5a      	subs	r2, r3, #1
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	425b      	negs	r3, r3
 8010fd8:	401a      	ands	r2, r3
 8010fda:	69fb      	ldr	r3, [r7, #28]
 8010fdc:	1ad3      	subs	r3, r2, r3
 8010fde:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8010fe0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010fe4:	2b03      	cmp	r3, #3
 8010fe6:	d108      	bne.n	8010ffa <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8010fe8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010fec:	4413      	add	r3, r2
 8010fee:	657b      	str	r3, [r7, #84]	; 0x54
 8010ff0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ff4:	4413      	add	r3, r2
 8010ff6:	65bb      	str	r3, [r7, #88]	; 0x58
 8010ff8:	e006      	b.n	8011008 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8010ffa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8011002:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011004:	4413      	add	r3, r2
 8011006:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8011008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801100a:	011a      	lsls	r2, r3, #4
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	441a      	add	r2, r3
 8011010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011012:	1ad2      	subs	r2, r2, r3
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	429a      	cmp	r2, r3
 8011018:	d901      	bls.n	801101e <f_mkfs+0x336>
 801101a:	230e      	movs	r3, #14
 801101c:	e28a      	b.n	8011534 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 801101e:	693a      	ldr	r2, [r7, #16]
 8011020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011022:	1ad2      	subs	r2, r2, r3
 8011024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011028:	fb01 f303 	mul.w	r3, r1, r3
 801102c:	1ad2      	subs	r2, r2, r3
 801102e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011030:	1ad2      	subs	r2, r2, r3
 8011032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011034:	fbb2 f3f3 	udiv	r3, r2, r3
 8011038:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 801103a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801103e:	2b03      	cmp	r3, #3
 8011040:	d10f      	bne.n	8011062 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8011042:	6a3b      	ldr	r3, [r7, #32]
 8011044:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011048:	4293      	cmp	r3, r2
 801104a:	d80a      	bhi.n	8011062 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d105      	bne.n	801105e <f_mkfs+0x376>
 8011052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011054:	085b      	lsrs	r3, r3, #1
 8011056:	607b      	str	r3, [r7, #4]
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d144      	bne.n	80110e8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 801105e:	230e      	movs	r3, #14
 8011060:	e268      	b.n	8011534 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8011062:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011066:	2b02      	cmp	r3, #2
 8011068:	d133      	bne.n	80110d2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 801106a:	6a3b      	ldr	r3, [r7, #32]
 801106c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011070:	4293      	cmp	r3, r2
 8011072:	d91e      	bls.n	80110b2 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d107      	bne.n	801108a <f_mkfs+0x3a2>
 801107a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801107c:	005b      	lsls	r3, r3, #1
 801107e:	2b40      	cmp	r3, #64	; 0x40
 8011080:	d803      	bhi.n	801108a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8011082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011084:	005b      	lsls	r3, r3, #1
 8011086:	607b      	str	r3, [r7, #4]
 8011088:	e033      	b.n	80110f2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801108a:	7afb      	ldrb	r3, [r7, #11]
 801108c:	f003 0302 	and.w	r3, r3, #2
 8011090:	2b00      	cmp	r3, #0
 8011092:	d003      	beq.n	801109c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8011094:	2303      	movs	r3, #3
 8011096:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801109a:	e02a      	b.n	80110f2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d105      	bne.n	80110ae <f_mkfs+0x3c6>
 80110a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110a4:	005b      	lsls	r3, r3, #1
 80110a6:	607b      	str	r3, [r7, #4]
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2b80      	cmp	r3, #128	; 0x80
 80110ac:	d91e      	bls.n	80110ec <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80110ae:	230e      	movs	r3, #14
 80110b0:	e240      	b.n	8011534 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80110b2:	6a3b      	ldr	r3, [r7, #32]
 80110b4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d80a      	bhi.n	80110d2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d105      	bne.n	80110ce <f_mkfs+0x3e6>
 80110c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110c4:	005b      	lsls	r3, r3, #1
 80110c6:	607b      	str	r3, [r7, #4]
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2b80      	cmp	r3, #128	; 0x80
 80110cc:	d910      	bls.n	80110f0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80110ce:	230e      	movs	r3, #14
 80110d0:	e230      	b.n	8011534 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80110d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80110d6:	2b01      	cmp	r3, #1
 80110d8:	d10c      	bne.n	80110f4 <f_mkfs+0x40c>
 80110da:	6a3b      	ldr	r3, [r7, #32]
 80110dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d907      	bls.n	80110f4 <f_mkfs+0x40c>
 80110e4:	230e      	movs	r3, #14
 80110e6:	e225      	b.n	8011534 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80110e8:	bf00      	nop
 80110ea:	e6ce      	b.n	8010e8a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80110ec:	bf00      	nop
 80110ee:	e6cc      	b.n	8010e8a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80110f0:	bf00      	nop
			pau = au;
 80110f2:	e6ca      	b.n	8010e8a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80110f4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80110f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80110f8:	461a      	mov	r2, r3
 80110fa:	2100      	movs	r1, #0
 80110fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110fe:	f7fc fed0 	bl	800dea2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8011102:	220b      	movs	r2, #11
 8011104:	49b2      	ldr	r1, [pc, #712]	; (80113d0 <f_mkfs+0x6e8>)
 8011106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011108:	f7fc feaa 	bl	800de60 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 801110c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801110e:	330b      	adds	r3, #11
 8011110:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011112:	4611      	mov	r1, r2
 8011114:	4618      	mov	r0, r3
 8011116:	f7fc fe5c 	bl	800ddd2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 801111a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801111c:	330d      	adds	r3, #13
 801111e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011120:	b2d2      	uxtb	r2, r2
 8011122:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8011124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011126:	330e      	adds	r3, #14
 8011128:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801112a:	b292      	uxth	r2, r2
 801112c:	4611      	mov	r1, r2
 801112e:	4618      	mov	r0, r3
 8011130:	f7fc fe4f 	bl	800ddd2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8011134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011136:	3310      	adds	r3, #16
 8011138:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801113a:	b2d2      	uxtb	r2, r2
 801113c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 801113e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011140:	f103 0211 	add.w	r2, r3, #17
 8011144:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011148:	2b03      	cmp	r3, #3
 801114a:	d002      	beq.n	8011152 <f_mkfs+0x46a>
 801114c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801114e:	b29b      	uxth	r3, r3
 8011150:	e000      	b.n	8011154 <f_mkfs+0x46c>
 8011152:	2300      	movs	r3, #0
 8011154:	4619      	mov	r1, r3
 8011156:	4610      	mov	r0, r2
 8011158:	f7fc fe3b 	bl	800ddd2 <st_word>
		if (sz_vol < 0x10000) {
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011162:	d208      	bcs.n	8011176 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8011164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011166:	3313      	adds	r3, #19
 8011168:	693a      	ldr	r2, [r7, #16]
 801116a:	b292      	uxth	r2, r2
 801116c:	4611      	mov	r1, r2
 801116e:	4618      	mov	r0, r3
 8011170:	f7fc fe2f 	bl	800ddd2 <st_word>
 8011174:	e006      	b.n	8011184 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8011176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011178:	3320      	adds	r3, #32
 801117a:	693a      	ldr	r2, [r7, #16]
 801117c:	4611      	mov	r1, r2
 801117e:	4618      	mov	r0, r3
 8011180:	f7fc fe42 	bl	800de08 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8011184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011186:	3315      	adds	r3, #21
 8011188:	22f8      	movs	r2, #248	; 0xf8
 801118a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 801118c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801118e:	3318      	adds	r3, #24
 8011190:	213f      	movs	r1, #63	; 0x3f
 8011192:	4618      	mov	r0, r3
 8011194:	f7fc fe1d 	bl	800ddd2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8011198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801119a:	331a      	adds	r3, #26
 801119c:	21ff      	movs	r1, #255	; 0xff
 801119e:	4618      	mov	r0, r3
 80111a0:	f7fc fe17 	bl	800ddd2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80111a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a6:	331c      	adds	r3, #28
 80111a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fc fe2c 	bl	800de08 <st_dword>
		if (fmt == FS_FAT32) {
 80111b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80111b4:	2b03      	cmp	r3, #3
 80111b6:	d131      	bne.n	801121c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80111b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ba:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80111be:	f7fa fd5c 	bl	800bc7a <get_fattime>
 80111c2:	4603      	mov	r3, r0
 80111c4:	4619      	mov	r1, r3
 80111c6:	4620      	mov	r0, r4
 80111c8:	f7fc fe1e 	bl	800de08 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80111cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ce:	3324      	adds	r3, #36	; 0x24
 80111d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fc fe18 	bl	800de08 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80111d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111da:	332c      	adds	r3, #44	; 0x2c
 80111dc:	2102      	movs	r1, #2
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fc fe12 	bl	800de08 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80111e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e6:	3330      	adds	r3, #48	; 0x30
 80111e8:	2101      	movs	r1, #1
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7fc fdf1 	bl	800ddd2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80111f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f2:	3332      	adds	r3, #50	; 0x32
 80111f4:	2106      	movs	r1, #6
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7fc fdeb 	bl	800ddd2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80111fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111fe:	3340      	adds	r3, #64	; 0x40
 8011200:	2280      	movs	r2, #128	; 0x80
 8011202:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8011204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011206:	3342      	adds	r3, #66	; 0x42
 8011208:	2229      	movs	r2, #41	; 0x29
 801120a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 801120c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801120e:	3347      	adds	r3, #71	; 0x47
 8011210:	2213      	movs	r2, #19
 8011212:	4970      	ldr	r1, [pc, #448]	; (80113d4 <f_mkfs+0x6ec>)
 8011214:	4618      	mov	r0, r3
 8011216:	f7fc fe23 	bl	800de60 <mem_cpy>
 801121a:	e020      	b.n	801125e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 801121c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801121e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8011222:	f7fa fd2a 	bl	800bc7a <get_fattime>
 8011226:	4603      	mov	r3, r0
 8011228:	4619      	mov	r1, r3
 801122a:	4620      	mov	r0, r4
 801122c:	f7fc fdec 	bl	800de08 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8011230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011232:	3316      	adds	r3, #22
 8011234:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011236:	b292      	uxth	r2, r2
 8011238:	4611      	mov	r1, r2
 801123a:	4618      	mov	r0, r3
 801123c:	f7fc fdc9 	bl	800ddd2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8011240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011242:	3324      	adds	r3, #36	; 0x24
 8011244:	2280      	movs	r2, #128	; 0x80
 8011246:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8011248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801124a:	3326      	adds	r3, #38	; 0x26
 801124c:	2229      	movs	r2, #41	; 0x29
 801124e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8011250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011252:	332b      	adds	r3, #43	; 0x2b
 8011254:	2213      	movs	r2, #19
 8011256:	4960      	ldr	r1, [pc, #384]	; (80113d8 <f_mkfs+0x6f0>)
 8011258:	4618      	mov	r0, r3
 801125a:	f7fc fe01 	bl	800de60 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 801125e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011260:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011264:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011268:	4618      	mov	r0, r3
 801126a:	f7fc fdb2 	bl	800ddd2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 801126e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011272:	2301      	movs	r3, #1
 8011274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011276:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011278:	f7fc fd32 	bl	800dce0 <disk_write>
 801127c:	4603      	mov	r3, r0
 801127e:	2b00      	cmp	r3, #0
 8011280:	d001      	beq.n	8011286 <f_mkfs+0x59e>
 8011282:	2301      	movs	r3, #1
 8011284:	e156      	b.n	8011534 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8011286:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801128a:	2b03      	cmp	r3, #3
 801128c:	d140      	bne.n	8011310 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 801128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011290:	1d9a      	adds	r2, r3, #6
 8011292:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011296:	2301      	movs	r3, #1
 8011298:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801129a:	f7fc fd21 	bl	800dce0 <disk_write>
			mem_set(buf, 0, ss);
 801129e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80112a0:	461a      	mov	r2, r3
 80112a2:	2100      	movs	r1, #0
 80112a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112a6:	f7fc fdfc 	bl	800dea2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80112aa:	494c      	ldr	r1, [pc, #304]	; (80113dc <f_mkfs+0x6f4>)
 80112ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112ae:	f7fc fdab 	bl	800de08 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80112b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80112b8:	4949      	ldr	r1, [pc, #292]	; (80113e0 <f_mkfs+0x6f8>)
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7fc fda4 	bl	800de08 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80112c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80112c6:	6a3b      	ldr	r3, [r7, #32]
 80112c8:	3b01      	subs	r3, #1
 80112ca:	4619      	mov	r1, r3
 80112cc:	4610      	mov	r0, r2
 80112ce:	f7fc fd9b 	bl	800de08 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80112d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80112d8:	2102      	movs	r1, #2
 80112da:	4618      	mov	r0, r3
 80112dc:	f7fc fd94 	bl	800de08 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80112e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80112e6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7fc fd71 	bl	800ddd2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80112f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f2:	1dda      	adds	r2, r3, #7
 80112f4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80112f8:	2301      	movs	r3, #1
 80112fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80112fc:	f7fc fcf0 	bl	800dce0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8011300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011302:	1c5a      	adds	r2, r3, #1
 8011304:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011308:	2301      	movs	r3, #1
 801130a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801130c:	f7fc fce8 	bl	800dce0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8011310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011312:	2100      	movs	r1, #0
 8011314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011316:	f7fc fdc4 	bl	800dea2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 801131a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801131c:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801131e:	2300      	movs	r3, #0
 8011320:	64bb      	str	r3, [r7, #72]	; 0x48
 8011322:	e04b      	b.n	80113bc <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8011324:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011328:	2b03      	cmp	r3, #3
 801132a:	d113      	bne.n	8011354 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 801132c:	f06f 0107 	mvn.w	r1, #7
 8011330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011332:	f7fc fd69 	bl	800de08 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8011336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011338:	3304      	adds	r3, #4
 801133a:	f04f 31ff 	mov.w	r1, #4294967295
 801133e:	4618      	mov	r0, r3
 8011340:	f7fc fd62 	bl	800de08 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8011344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011346:	3308      	adds	r3, #8
 8011348:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801134c:	4618      	mov	r0, r3
 801134e:	f7fc fd5b 	bl	800de08 <st_dword>
 8011352:	e00b      	b.n	801136c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8011354:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011358:	2b01      	cmp	r3, #1
 801135a:	d101      	bne.n	8011360 <f_mkfs+0x678>
 801135c:	4b21      	ldr	r3, [pc, #132]	; (80113e4 <f_mkfs+0x6fc>)
 801135e:	e001      	b.n	8011364 <f_mkfs+0x67c>
 8011360:	f06f 0307 	mvn.w	r3, #7
 8011364:	4619      	mov	r1, r3
 8011366:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011368:	f7fc fd4e 	bl	800de08 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 801136c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801136e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8011370:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011374:	4293      	cmp	r3, r2
 8011376:	bf28      	it	cs
 8011378:	4613      	movcs	r3, r2
 801137a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 801137c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011382:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011386:	f7fc fcab 	bl	800dce0 <disk_write>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d001      	beq.n	8011394 <f_mkfs+0x6ac>
 8011390:	2301      	movs	r3, #1
 8011392:	e0cf      	b.n	8011534 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8011394:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011396:	461a      	mov	r2, r3
 8011398:	2100      	movs	r1, #0
 801139a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801139c:	f7fc fd81 	bl	800dea2 <mem_set>
				sect += n; nsect -= n;
 80113a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80113a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113a4:	4413      	add	r3, r2
 80113a6:	667b      	str	r3, [r7, #100]	; 0x64
 80113a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80113aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113ac:	1ad3      	subs	r3, r2, r3
 80113ae:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80113b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d1dc      	bne.n	8011370 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80113b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113b8:	3301      	adds	r3, #1
 80113ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80113bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d3af      	bcc.n	8011324 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80113c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80113c8:	2b03      	cmp	r3, #3
 80113ca:	d10d      	bne.n	80113e8 <f_mkfs+0x700>
 80113cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113ce:	e00c      	b.n	80113ea <f_mkfs+0x702>
 80113d0:	080139ec 	.word	0x080139ec
 80113d4:	080139f8 	.word	0x080139f8
 80113d8:	08013a0c 	.word	0x08013a0c
 80113dc:	41615252 	.word	0x41615252
 80113e0:	61417272 	.word	0x61417272
 80113e4:	00fffff8 	.word	0x00fffff8
 80113e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80113ea:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80113ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80113ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f0:	4293      	cmp	r3, r2
 80113f2:	bf28      	it	cs
 80113f4:	4613      	movcs	r3, r2
 80113f6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80113f8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80113fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011402:	f7fc fc6d 	bl	800dce0 <disk_write>
 8011406:	4603      	mov	r3, r0
 8011408:	2b00      	cmp	r3, #0
 801140a:	d001      	beq.n	8011410 <f_mkfs+0x728>
 801140c:	2301      	movs	r3, #1
 801140e:	e091      	b.n	8011534 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8011410:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011414:	4413      	add	r3, r2
 8011416:	667b      	str	r3, [r7, #100]	; 0x64
 8011418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801141a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801141c:	1ad3      	subs	r3, r2, r3
 801141e:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8011420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011422:	2b00      	cmp	r3, #0
 8011424:	d1e2      	bne.n	80113ec <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8011426:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801142a:	2b03      	cmp	r3, #3
 801142c:	d103      	bne.n	8011436 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 801142e:	230c      	movs	r3, #12
 8011430:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8011434:	e010      	b.n	8011458 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801143c:	d303      	bcc.n	8011446 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 801143e:	2306      	movs	r3, #6
 8011440:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8011444:	e008      	b.n	8011458 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8011446:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801144a:	2b02      	cmp	r3, #2
 801144c:	d101      	bne.n	8011452 <f_mkfs+0x76a>
 801144e:	2304      	movs	r3, #4
 8011450:	e000      	b.n	8011454 <f_mkfs+0x76c>
 8011452:	2301      	movs	r3, #1
 8011454:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8011458:	7afb      	ldrb	r3, [r7, #11]
 801145a:	f003 0308 	and.w	r3, r3, #8
 801145e:	2b00      	cmp	r3, #0
 8011460:	d15b      	bne.n	801151a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8011462:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011464:	461a      	mov	r2, r3
 8011466:	2100      	movs	r1, #0
 8011468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801146a:	f7fc fd1a 	bl	800dea2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 801146e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011470:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011474:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011478:	4618      	mov	r0, r3
 801147a:	f7fc fcaa 	bl	800ddd2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 801147e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011480:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011484:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8011486:	69bb      	ldr	r3, [r7, #24]
 8011488:	2200      	movs	r2, #0
 801148a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 801148c:	69bb      	ldr	r3, [r7, #24]
 801148e:	3301      	adds	r3, #1
 8011490:	2201      	movs	r2, #1
 8011492:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8011494:	69bb      	ldr	r3, [r7, #24]
 8011496:	3302      	adds	r3, #2
 8011498:	2201      	movs	r2, #1
 801149a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 801149c:	69bb      	ldr	r3, [r7, #24]
 801149e:	3303      	adds	r3, #3
 80114a0:	2200      	movs	r2, #0
 80114a2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80114a4:	69bb      	ldr	r3, [r7, #24]
 80114a6:	3304      	adds	r3, #4
 80114a8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80114ac:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80114ae:	693a      	ldr	r2, [r7, #16]
 80114b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b2:	441a      	add	r2, r3
 80114b4:	4b21      	ldr	r3, [pc, #132]	; (801153c <f_mkfs+0x854>)
 80114b6:	fba3 1302 	umull	r1, r3, r3, r2
 80114ba:	1ad2      	subs	r2, r2, r3
 80114bc:	0852      	lsrs	r2, r2, #1
 80114be:	4413      	add	r3, r2
 80114c0:	0b5b      	lsrs	r3, r3, #13
 80114c2:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80114c4:	69bb      	ldr	r3, [r7, #24]
 80114c6:	3305      	adds	r3, #5
 80114c8:	22fe      	movs	r2, #254	; 0xfe
 80114ca:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80114cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114ce:	089b      	lsrs	r3, r3, #2
 80114d0:	b2da      	uxtb	r2, r3
 80114d2:	69bb      	ldr	r3, [r7, #24]
 80114d4:	3306      	adds	r3, #6
 80114d6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80114da:	b2d2      	uxtb	r2, r2
 80114dc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80114de:	69bb      	ldr	r3, [r7, #24]
 80114e0:	3307      	adds	r3, #7
 80114e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80114e4:	b2d2      	uxtb	r2, r2
 80114e6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80114e8:	69bb      	ldr	r3, [r7, #24]
 80114ea:	3308      	adds	r3, #8
 80114ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7fc fc8a 	bl	800de08 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	330c      	adds	r3, #12
 80114f8:	693a      	ldr	r2, [r7, #16]
 80114fa:	4611      	mov	r1, r2
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7fc fc83 	bl	800de08 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8011502:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011506:	2301      	movs	r3, #1
 8011508:	2200      	movs	r2, #0
 801150a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801150c:	f7fc fbe8 	bl	800dce0 <disk_write>
 8011510:	4603      	mov	r3, r0
 8011512:	2b00      	cmp	r3, #0
 8011514:	d001      	beq.n	801151a <f_mkfs+0x832>
 8011516:	2301      	movs	r3, #1
 8011518:	e00c      	b.n	8011534 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 801151a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801151e:	2200      	movs	r2, #0
 8011520:	2100      	movs	r1, #0
 8011522:	4618      	mov	r0, r3
 8011524:	f7fc fbfc 	bl	800dd20 <disk_ioctl>
 8011528:	4603      	mov	r3, r0
 801152a:	2b00      	cmp	r3, #0
 801152c:	d001      	beq.n	8011532 <f_mkfs+0x84a>
 801152e:	2301      	movs	r3, #1
 8011530:	e000      	b.n	8011534 <f_mkfs+0x84c>

	return FR_OK;
 8011532:	2300      	movs	r3, #0
}
 8011534:	4618      	mov	r0, r3
 8011536:	3774      	adds	r7, #116	; 0x74
 8011538:	46bd      	mov	sp, r7
 801153a:	bd90      	pop	{r4, r7, pc}
 801153c:	0515565b 	.word	0x0515565b

08011540 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011540:	b480      	push	{r7}
 8011542:	b087      	sub	sp, #28
 8011544:	af00      	add	r7, sp, #0
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	4613      	mov	r3, r2
 801154c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801154e:	2301      	movs	r3, #1
 8011550:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011552:	2300      	movs	r3, #0
 8011554:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011556:	4b1f      	ldr	r3, [pc, #124]	; (80115d4 <FATFS_LinkDriverEx+0x94>)
 8011558:	7a5b      	ldrb	r3, [r3, #9]
 801155a:	b2db      	uxtb	r3, r3
 801155c:	2b00      	cmp	r3, #0
 801155e:	d131      	bne.n	80115c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011560:	4b1c      	ldr	r3, [pc, #112]	; (80115d4 <FATFS_LinkDriverEx+0x94>)
 8011562:	7a5b      	ldrb	r3, [r3, #9]
 8011564:	b2db      	uxtb	r3, r3
 8011566:	461a      	mov	r2, r3
 8011568:	4b1a      	ldr	r3, [pc, #104]	; (80115d4 <FATFS_LinkDriverEx+0x94>)
 801156a:	2100      	movs	r1, #0
 801156c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801156e:	4b19      	ldr	r3, [pc, #100]	; (80115d4 <FATFS_LinkDriverEx+0x94>)
 8011570:	7a5b      	ldrb	r3, [r3, #9]
 8011572:	b2db      	uxtb	r3, r3
 8011574:	4a17      	ldr	r2, [pc, #92]	; (80115d4 <FATFS_LinkDriverEx+0x94>)
 8011576:	009b      	lsls	r3, r3, #2
 8011578:	4413      	add	r3, r2
 801157a:	68fa      	ldr	r2, [r7, #12]
 801157c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801157e:	4b15      	ldr	r3, [pc, #84]	; (80115d4 <FATFS_LinkDriverEx+0x94>)
 8011580:	7a5b      	ldrb	r3, [r3, #9]
 8011582:	b2db      	uxtb	r3, r3
 8011584:	461a      	mov	r2, r3
 8011586:	4b13      	ldr	r3, [pc, #76]	; (80115d4 <FATFS_LinkDriverEx+0x94>)
 8011588:	4413      	add	r3, r2
 801158a:	79fa      	ldrb	r2, [r7, #7]
 801158c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801158e:	4b11      	ldr	r3, [pc, #68]	; (80115d4 <FATFS_LinkDriverEx+0x94>)
 8011590:	7a5b      	ldrb	r3, [r3, #9]
 8011592:	b2db      	uxtb	r3, r3
 8011594:	1c5a      	adds	r2, r3, #1
 8011596:	b2d1      	uxtb	r1, r2
 8011598:	4a0e      	ldr	r2, [pc, #56]	; (80115d4 <FATFS_LinkDriverEx+0x94>)
 801159a:	7251      	strb	r1, [r2, #9]
 801159c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801159e:	7dbb      	ldrb	r3, [r7, #22]
 80115a0:	3330      	adds	r3, #48	; 0x30
 80115a2:	b2da      	uxtb	r2, r3
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	3301      	adds	r3, #1
 80115ac:	223a      	movs	r2, #58	; 0x3a
 80115ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	3302      	adds	r3, #2
 80115b4:	222f      	movs	r2, #47	; 0x2f
 80115b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	3303      	adds	r3, #3
 80115bc:	2200      	movs	r2, #0
 80115be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80115c0:	2300      	movs	r3, #0
 80115c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80115c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	371c      	adds	r7, #28
 80115ca:	46bd      	mov	sp, r7
 80115cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d0:	4770      	bx	lr
 80115d2:	bf00      	nop
 80115d4:	2000bdc8 	.word	0x2000bdc8

080115d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b082      	sub	sp, #8
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80115e2:	2200      	movs	r2, #0
 80115e4:	6839      	ldr	r1, [r7, #0]
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f7ff ffaa 	bl	8011540 <FATFS_LinkDriverEx>
 80115ec:	4603      	mov	r3, r0
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3708      	adds	r7, #8
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
	...

080115f8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b085      	sub	sp, #20
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	4603      	mov	r3, r0
 8011600:	6039      	str	r1, [r7, #0]
 8011602:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011604:	88fb      	ldrh	r3, [r7, #6]
 8011606:	2b7f      	cmp	r3, #127	; 0x7f
 8011608:	d802      	bhi.n	8011610 <ff_convert+0x18>
		c = chr;
 801160a:	88fb      	ldrh	r3, [r7, #6]
 801160c:	81fb      	strh	r3, [r7, #14]
 801160e:	e025      	b.n	801165c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d00b      	beq.n	801162e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011616:	88fb      	ldrh	r3, [r7, #6]
 8011618:	2bff      	cmp	r3, #255	; 0xff
 801161a:	d805      	bhi.n	8011628 <ff_convert+0x30>
 801161c:	88fb      	ldrh	r3, [r7, #6]
 801161e:	3b80      	subs	r3, #128	; 0x80
 8011620:	4a12      	ldr	r2, [pc, #72]	; (801166c <ff_convert+0x74>)
 8011622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011626:	e000      	b.n	801162a <ff_convert+0x32>
 8011628:	2300      	movs	r3, #0
 801162a:	81fb      	strh	r3, [r7, #14]
 801162c:	e016      	b.n	801165c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801162e:	2300      	movs	r3, #0
 8011630:	81fb      	strh	r3, [r7, #14]
 8011632:	e009      	b.n	8011648 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011634:	89fb      	ldrh	r3, [r7, #14]
 8011636:	4a0d      	ldr	r2, [pc, #52]	; (801166c <ff_convert+0x74>)
 8011638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801163c:	88fa      	ldrh	r2, [r7, #6]
 801163e:	429a      	cmp	r2, r3
 8011640:	d006      	beq.n	8011650 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011642:	89fb      	ldrh	r3, [r7, #14]
 8011644:	3301      	adds	r3, #1
 8011646:	81fb      	strh	r3, [r7, #14]
 8011648:	89fb      	ldrh	r3, [r7, #14]
 801164a:	2b7f      	cmp	r3, #127	; 0x7f
 801164c:	d9f2      	bls.n	8011634 <ff_convert+0x3c>
 801164e:	e000      	b.n	8011652 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011650:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011652:	89fb      	ldrh	r3, [r7, #14]
 8011654:	3380      	adds	r3, #128	; 0x80
 8011656:	b29b      	uxth	r3, r3
 8011658:	b2db      	uxtb	r3, r3
 801165a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801165c:	89fb      	ldrh	r3, [r7, #14]
}
 801165e:	4618      	mov	r0, r3
 8011660:	3714      	adds	r7, #20
 8011662:	46bd      	mov	sp, r7
 8011664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011668:	4770      	bx	lr
 801166a:	bf00      	nop
 801166c:	08027824 	.word	0x08027824

08011670 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011670:	b480      	push	{r7}
 8011672:	b087      	sub	sp, #28
 8011674:	af00      	add	r7, sp, #0
 8011676:	4603      	mov	r3, r0
 8011678:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801167a:	88fb      	ldrh	r3, [r7, #6]
 801167c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011680:	d201      	bcs.n	8011686 <ff_wtoupper+0x16>
 8011682:	4b3e      	ldr	r3, [pc, #248]	; (801177c <ff_wtoupper+0x10c>)
 8011684:	e000      	b.n	8011688 <ff_wtoupper+0x18>
 8011686:	4b3e      	ldr	r3, [pc, #248]	; (8011780 <ff_wtoupper+0x110>)
 8011688:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	1c9a      	adds	r2, r3, #2
 801168e:	617a      	str	r2, [r7, #20]
 8011690:	881b      	ldrh	r3, [r3, #0]
 8011692:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011694:	8a7b      	ldrh	r3, [r7, #18]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d068      	beq.n	801176c <ff_wtoupper+0xfc>
 801169a:	88fa      	ldrh	r2, [r7, #6]
 801169c:	8a7b      	ldrh	r3, [r7, #18]
 801169e:	429a      	cmp	r2, r3
 80116a0:	d364      	bcc.n	801176c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	1c9a      	adds	r2, r3, #2
 80116a6:	617a      	str	r2, [r7, #20]
 80116a8:	881b      	ldrh	r3, [r3, #0]
 80116aa:	823b      	strh	r3, [r7, #16]
 80116ac:	8a3b      	ldrh	r3, [r7, #16]
 80116ae:	0a1b      	lsrs	r3, r3, #8
 80116b0:	81fb      	strh	r3, [r7, #14]
 80116b2:	8a3b      	ldrh	r3, [r7, #16]
 80116b4:	b2db      	uxtb	r3, r3
 80116b6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80116b8:	88fa      	ldrh	r2, [r7, #6]
 80116ba:	8a79      	ldrh	r1, [r7, #18]
 80116bc:	8a3b      	ldrh	r3, [r7, #16]
 80116be:	440b      	add	r3, r1
 80116c0:	429a      	cmp	r2, r3
 80116c2:	da49      	bge.n	8011758 <ff_wtoupper+0xe8>
			switch (cmd) {
 80116c4:	89fb      	ldrh	r3, [r7, #14]
 80116c6:	2b08      	cmp	r3, #8
 80116c8:	d84f      	bhi.n	801176a <ff_wtoupper+0xfa>
 80116ca:	a201      	add	r2, pc, #4	; (adr r2, 80116d0 <ff_wtoupper+0x60>)
 80116cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116d0:	080116f5 	.word	0x080116f5
 80116d4:	08011707 	.word	0x08011707
 80116d8:	0801171d 	.word	0x0801171d
 80116dc:	08011725 	.word	0x08011725
 80116e0:	0801172d 	.word	0x0801172d
 80116e4:	08011735 	.word	0x08011735
 80116e8:	0801173d 	.word	0x0801173d
 80116ec:	08011745 	.word	0x08011745
 80116f0:	0801174d 	.word	0x0801174d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80116f4:	88fa      	ldrh	r2, [r7, #6]
 80116f6:	8a7b      	ldrh	r3, [r7, #18]
 80116f8:	1ad3      	subs	r3, r2, r3
 80116fa:	005b      	lsls	r3, r3, #1
 80116fc:	697a      	ldr	r2, [r7, #20]
 80116fe:	4413      	add	r3, r2
 8011700:	881b      	ldrh	r3, [r3, #0]
 8011702:	80fb      	strh	r3, [r7, #6]
 8011704:	e027      	b.n	8011756 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011706:	88fa      	ldrh	r2, [r7, #6]
 8011708:	8a7b      	ldrh	r3, [r7, #18]
 801170a:	1ad3      	subs	r3, r2, r3
 801170c:	b29b      	uxth	r3, r3
 801170e:	f003 0301 	and.w	r3, r3, #1
 8011712:	b29b      	uxth	r3, r3
 8011714:	88fa      	ldrh	r2, [r7, #6]
 8011716:	1ad3      	subs	r3, r2, r3
 8011718:	80fb      	strh	r3, [r7, #6]
 801171a:	e01c      	b.n	8011756 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801171c:	88fb      	ldrh	r3, [r7, #6]
 801171e:	3b10      	subs	r3, #16
 8011720:	80fb      	strh	r3, [r7, #6]
 8011722:	e018      	b.n	8011756 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011724:	88fb      	ldrh	r3, [r7, #6]
 8011726:	3b20      	subs	r3, #32
 8011728:	80fb      	strh	r3, [r7, #6]
 801172a:	e014      	b.n	8011756 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801172c:	88fb      	ldrh	r3, [r7, #6]
 801172e:	3b30      	subs	r3, #48	; 0x30
 8011730:	80fb      	strh	r3, [r7, #6]
 8011732:	e010      	b.n	8011756 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011734:	88fb      	ldrh	r3, [r7, #6]
 8011736:	3b1a      	subs	r3, #26
 8011738:	80fb      	strh	r3, [r7, #6]
 801173a:	e00c      	b.n	8011756 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801173c:	88fb      	ldrh	r3, [r7, #6]
 801173e:	3308      	adds	r3, #8
 8011740:	80fb      	strh	r3, [r7, #6]
 8011742:	e008      	b.n	8011756 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011744:	88fb      	ldrh	r3, [r7, #6]
 8011746:	3b50      	subs	r3, #80	; 0x50
 8011748:	80fb      	strh	r3, [r7, #6]
 801174a:	e004      	b.n	8011756 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801174c:	88fb      	ldrh	r3, [r7, #6]
 801174e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011752:	80fb      	strh	r3, [r7, #6]
 8011754:	bf00      	nop
			}
			break;
 8011756:	e008      	b.n	801176a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011758:	89fb      	ldrh	r3, [r7, #14]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d195      	bne.n	801168a <ff_wtoupper+0x1a>
 801175e:	8a3b      	ldrh	r3, [r7, #16]
 8011760:	005b      	lsls	r3, r3, #1
 8011762:	697a      	ldr	r2, [r7, #20]
 8011764:	4413      	add	r3, r2
 8011766:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011768:	e78f      	b.n	801168a <ff_wtoupper+0x1a>
			break;
 801176a:	bf00      	nop
	}

	return chr;
 801176c:	88fb      	ldrh	r3, [r7, #6]
}
 801176e:	4618      	mov	r0, r3
 8011770:	371c      	adds	r7, #28
 8011772:	46bd      	mov	sp, r7
 8011774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011778:	4770      	bx	lr
 801177a:	bf00      	nop
 801177c:	08027924 	.word	0x08027924
 8011780:	08027b18 	.word	0x08027b18

08011784 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	f000 fd3b 	bl	8012208 <malloc>
 8011792:	4603      	mov	r3, r0
}
 8011794:	4618      	mov	r0, r3
 8011796:	3708      	adds	r7, #8
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}

0801179c <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f000 fd37 	bl	8012218 <free>
}
 80117aa:	bf00      	nop
 80117ac:	3708      	adds	r7, #8
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}
	...

080117b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80117b8:	2200      	movs	r2, #0
 80117ba:	4912      	ldr	r1, [pc, #72]	; (8011804 <MX_USB_DEVICE_Init+0x50>)
 80117bc:	4812      	ldr	r0, [pc, #72]	; (8011808 <MX_USB_DEVICE_Init+0x54>)
 80117be:	f7fa ff35 	bl	800c62c <USBD_Init>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d001      	beq.n	80117cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80117c8:	f7f0 fa0e 	bl	8001be8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80117cc:	490f      	ldr	r1, [pc, #60]	; (801180c <MX_USB_DEVICE_Init+0x58>)
 80117ce:	480e      	ldr	r0, [pc, #56]	; (8011808 <MX_USB_DEVICE_Init+0x54>)
 80117d0:	f7fa ff5c 	bl	800c68c <USBD_RegisterClass>
 80117d4:	4603      	mov	r3, r0
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d001      	beq.n	80117de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80117da:	f7f0 fa05 	bl	8001be8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80117de:	490c      	ldr	r1, [pc, #48]	; (8011810 <MX_USB_DEVICE_Init+0x5c>)
 80117e0:	4809      	ldr	r0, [pc, #36]	; (8011808 <MX_USB_DEVICE_Init+0x54>)
 80117e2:	f7fa fe53 	bl	800c48c <USBD_CDC_RegisterInterface>
 80117e6:	4603      	mov	r3, r0
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d001      	beq.n	80117f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80117ec:	f7f0 f9fc 	bl	8001be8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80117f0:	4805      	ldr	r0, [pc, #20]	; (8011808 <MX_USB_DEVICE_Init+0x54>)
 80117f2:	f7fa ff81 	bl	800c6f8 <USBD_Start>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d001      	beq.n	8011800 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80117fc:	f7f0 f9f4 	bl	8001be8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011800:	bf00      	nop
 8011802:	bd80      	pop	{r7, pc}
 8011804:	200000b4 	.word	0x200000b4
 8011808:	2000bdd4 	.word	0x2000bdd4
 801180c:	20000020 	.word	0x20000020
 8011810:	200000a0 	.word	0x200000a0

08011814 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011818:	2200      	movs	r2, #0
 801181a:	4905      	ldr	r1, [pc, #20]	; (8011830 <CDC_Init_FS+0x1c>)
 801181c:	4805      	ldr	r0, [pc, #20]	; (8011834 <CDC_Init_FS+0x20>)
 801181e:	f7fa fe4f 	bl	800c4c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011822:	4905      	ldr	r1, [pc, #20]	; (8011838 <CDC_Init_FS+0x24>)
 8011824:	4803      	ldr	r0, [pc, #12]	; (8011834 <CDC_Init_FS+0x20>)
 8011826:	f7fa fe6d 	bl	800c504 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801182a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801182c:	4618      	mov	r0, r3
 801182e:	bd80      	pop	{r7, pc}
 8011830:	2000c8b0 	.word	0x2000c8b0
 8011834:	2000bdd4 	.word	0x2000bdd4
 8011838:	2000c0b0 	.word	0x2000c0b0

0801183c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801183c:	b480      	push	{r7}
 801183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011840:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011842:	4618      	mov	r0, r3
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr

0801184c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801184c:	b480      	push	{r7}
 801184e:	b083      	sub	sp, #12
 8011850:	af00      	add	r7, sp, #0
 8011852:	4603      	mov	r3, r0
 8011854:	6039      	str	r1, [r7, #0]
 8011856:	71fb      	strb	r3, [r7, #7]
 8011858:	4613      	mov	r3, r2
 801185a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801185c:	79fb      	ldrb	r3, [r7, #7]
 801185e:	2b23      	cmp	r3, #35	; 0x23
 8011860:	d84a      	bhi.n	80118f8 <CDC_Control_FS+0xac>
 8011862:	a201      	add	r2, pc, #4	; (adr r2, 8011868 <CDC_Control_FS+0x1c>)
 8011864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011868:	080118f9 	.word	0x080118f9
 801186c:	080118f9 	.word	0x080118f9
 8011870:	080118f9 	.word	0x080118f9
 8011874:	080118f9 	.word	0x080118f9
 8011878:	080118f9 	.word	0x080118f9
 801187c:	080118f9 	.word	0x080118f9
 8011880:	080118f9 	.word	0x080118f9
 8011884:	080118f9 	.word	0x080118f9
 8011888:	080118f9 	.word	0x080118f9
 801188c:	080118f9 	.word	0x080118f9
 8011890:	080118f9 	.word	0x080118f9
 8011894:	080118f9 	.word	0x080118f9
 8011898:	080118f9 	.word	0x080118f9
 801189c:	080118f9 	.word	0x080118f9
 80118a0:	080118f9 	.word	0x080118f9
 80118a4:	080118f9 	.word	0x080118f9
 80118a8:	080118f9 	.word	0x080118f9
 80118ac:	080118f9 	.word	0x080118f9
 80118b0:	080118f9 	.word	0x080118f9
 80118b4:	080118f9 	.word	0x080118f9
 80118b8:	080118f9 	.word	0x080118f9
 80118bc:	080118f9 	.word	0x080118f9
 80118c0:	080118f9 	.word	0x080118f9
 80118c4:	080118f9 	.word	0x080118f9
 80118c8:	080118f9 	.word	0x080118f9
 80118cc:	080118f9 	.word	0x080118f9
 80118d0:	080118f9 	.word	0x080118f9
 80118d4:	080118f9 	.word	0x080118f9
 80118d8:	080118f9 	.word	0x080118f9
 80118dc:	080118f9 	.word	0x080118f9
 80118e0:	080118f9 	.word	0x080118f9
 80118e4:	080118f9 	.word	0x080118f9
 80118e8:	080118f9 	.word	0x080118f9
 80118ec:	080118f9 	.word	0x080118f9
 80118f0:	080118f9 	.word	0x080118f9
 80118f4:	080118f9 	.word	0x080118f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80118f8:	bf00      	nop
  }

  return (USBD_OK);
 80118fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	370c      	adds	r7, #12
 8011900:	46bd      	mov	sp, r7
 8011902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011906:	4770      	bx	lr

08011908 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011912:	6879      	ldr	r1, [r7, #4]
 8011914:	4810      	ldr	r0, [pc, #64]	; (8011958 <CDC_Receive_FS+0x50>)
 8011916:	f7fa fdf5 	bl	800c504 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801191a:	480f      	ldr	r0, [pc, #60]	; (8011958 <CDC_Receive_FS+0x50>)
 801191c:	f7fa fe50 	bl	800c5c0 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	73fb      	strb	r3, [r7, #15]
  FalgReadyPacketRx = true;
 8011926:	4b0d      	ldr	r3, [pc, #52]	; (801195c <CDC_Receive_FS+0x54>)
 8011928:	2201      	movs	r2, #1
 801192a:	701a      	strb	r2, [r3, #0]
  memset(BufferReceive, '\0', 64);
 801192c:	2240      	movs	r2, #64	; 0x40
 801192e:	2100      	movs	r1, #0
 8011930:	480b      	ldr	r0, [pc, #44]	; (8011960 <CDC_Receive_FS+0x58>)
 8011932:	f000 ff3d 	bl	80127b0 <memset>
  memcpy(BufferReceive, Buf, len);
 8011936:	7bfb      	ldrb	r3, [r7, #15]
 8011938:	461a      	mov	r2, r3
 801193a:	6879      	ldr	r1, [r7, #4]
 801193c:	4808      	ldr	r0, [pc, #32]	; (8011960 <CDC_Receive_FS+0x58>)
 801193e:	f000 ffc2 	bl	80128c6 <memcpy>
  memset(Buf, '\0', len);
 8011942:	7bfb      	ldrb	r3, [r7, #15]
 8011944:	461a      	mov	r2, r3
 8011946:	2100      	movs	r1, #0
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f000 ff31 	bl	80127b0 <memset>
  return (USBD_OK);
 801194e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011950:	4618      	mov	r0, r3
 8011952:	3710      	adds	r7, #16
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}
 8011958:	2000bdd4 	.word	0x2000bdd4
 801195c:	20000181 	.word	0x20000181
 8011960:	200001a0 	.word	0x200001a0

08011964 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	460b      	mov	r3, r1
 801196e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011970:	2300      	movs	r3, #0
 8011972:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011974:	4b0d      	ldr	r3, [pc, #52]	; (80119ac <CDC_Transmit_FS+0x48>)
 8011976:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801197a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011982:	2b00      	cmp	r3, #0
 8011984:	d001      	beq.n	801198a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011986:	2301      	movs	r3, #1
 8011988:	e00b      	b.n	80119a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801198a:	887b      	ldrh	r3, [r7, #2]
 801198c:	461a      	mov	r2, r3
 801198e:	6879      	ldr	r1, [r7, #4]
 8011990:	4806      	ldr	r0, [pc, #24]	; (80119ac <CDC_Transmit_FS+0x48>)
 8011992:	f7fa fd95 	bl	800c4c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011996:	4805      	ldr	r0, [pc, #20]	; (80119ac <CDC_Transmit_FS+0x48>)
 8011998:	f7fa fdd2 	bl	800c540 <USBD_CDC_TransmitPacket>
 801199c:	4603      	mov	r3, r0
 801199e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80119a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80119a2:	4618      	mov	r0, r3
 80119a4:	3710      	adds	r7, #16
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}
 80119aa:	bf00      	nop
 80119ac:	2000bdd4 	.word	0x2000bdd4

080119b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80119b0:	b480      	push	{r7}
 80119b2:	b087      	sub	sp, #28
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	60f8      	str	r0, [r7, #12]
 80119b8:	60b9      	str	r1, [r7, #8]
 80119ba:	4613      	mov	r3, r2
 80119bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80119be:	2300      	movs	r3, #0
 80119c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80119c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	371c      	adds	r7, #28
 80119ca:	46bd      	mov	sp, r7
 80119cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d0:	4770      	bx	lr
	...

080119d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119d4:	b480      	push	{r7}
 80119d6:	b083      	sub	sp, #12
 80119d8:	af00      	add	r7, sp, #0
 80119da:	4603      	mov	r3, r0
 80119dc:	6039      	str	r1, [r7, #0]
 80119de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	2212      	movs	r2, #18
 80119e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80119e6:	4b03      	ldr	r3, [pc, #12]	; (80119f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	370c      	adds	r7, #12
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr
 80119f4:	200000d0 	.word	0x200000d0

080119f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b083      	sub	sp, #12
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	4603      	mov	r3, r0
 8011a00:	6039      	str	r1, [r7, #0]
 8011a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	2204      	movs	r2, #4
 8011a08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011a0a:	4b03      	ldr	r3, [pc, #12]	; (8011a18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	370c      	adds	r7, #12
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr
 8011a18:	200000e4 	.word	0x200000e4

08011a1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b082      	sub	sp, #8
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	4603      	mov	r3, r0
 8011a24:	6039      	str	r1, [r7, #0]
 8011a26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011a28:	79fb      	ldrb	r3, [r7, #7]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d105      	bne.n	8011a3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011a2e:	683a      	ldr	r2, [r7, #0]
 8011a30:	4907      	ldr	r1, [pc, #28]	; (8011a50 <USBD_FS_ProductStrDescriptor+0x34>)
 8011a32:	4808      	ldr	r0, [pc, #32]	; (8011a54 <USBD_FS_ProductStrDescriptor+0x38>)
 8011a34:	f7fc f812 	bl	800da5c <USBD_GetString>
 8011a38:	e004      	b.n	8011a44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011a3a:	683a      	ldr	r2, [r7, #0]
 8011a3c:	4904      	ldr	r1, [pc, #16]	; (8011a50 <USBD_FS_ProductStrDescriptor+0x34>)
 8011a3e:	4805      	ldr	r0, [pc, #20]	; (8011a54 <USBD_FS_ProductStrDescriptor+0x38>)
 8011a40:	f7fc f80c 	bl	800da5c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a44:	4b02      	ldr	r3, [pc, #8]	; (8011a50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3708      	adds	r7, #8
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	bf00      	nop
 8011a50:	2000d0b0 	.word	0x2000d0b0
 8011a54:	08013a20 	.word	0x08013a20

08011a58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	4603      	mov	r3, r0
 8011a60:	6039      	str	r1, [r7, #0]
 8011a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011a64:	683a      	ldr	r2, [r7, #0]
 8011a66:	4904      	ldr	r1, [pc, #16]	; (8011a78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011a68:	4804      	ldr	r0, [pc, #16]	; (8011a7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011a6a:	f7fb fff7 	bl	800da5c <USBD_GetString>
  return USBD_StrDesc;
 8011a6e:	4b02      	ldr	r3, [pc, #8]	; (8011a78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3708      	adds	r7, #8
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}
 8011a78:	2000d0b0 	.word	0x2000d0b0
 8011a7c:	08013a34 	.word	0x08013a34

08011a80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	4603      	mov	r3, r0
 8011a88:	6039      	str	r1, [r7, #0]
 8011a8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	221a      	movs	r2, #26
 8011a90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011a92:	f000 f843 	bl	8011b1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011a96:	4b02      	ldr	r3, [pc, #8]	; (8011aa0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3708      	adds	r7, #8
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}
 8011aa0:	200000e8 	.word	0x200000e8

08011aa4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	4603      	mov	r3, r0
 8011aac:	6039      	str	r1, [r7, #0]
 8011aae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011ab0:	79fb      	ldrb	r3, [r7, #7]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d105      	bne.n	8011ac2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011ab6:	683a      	ldr	r2, [r7, #0]
 8011ab8:	4907      	ldr	r1, [pc, #28]	; (8011ad8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011aba:	4808      	ldr	r0, [pc, #32]	; (8011adc <USBD_FS_ConfigStrDescriptor+0x38>)
 8011abc:	f7fb ffce 	bl	800da5c <USBD_GetString>
 8011ac0:	e004      	b.n	8011acc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011ac2:	683a      	ldr	r2, [r7, #0]
 8011ac4:	4904      	ldr	r1, [pc, #16]	; (8011ad8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011ac6:	4805      	ldr	r0, [pc, #20]	; (8011adc <USBD_FS_ConfigStrDescriptor+0x38>)
 8011ac8:	f7fb ffc8 	bl	800da5c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011acc:	4b02      	ldr	r3, [pc, #8]	; (8011ad8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3708      	adds	r7, #8
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
 8011ad6:	bf00      	nop
 8011ad8:	2000d0b0 	.word	0x2000d0b0
 8011adc:	08013a48 	.word	0x08013a48

08011ae0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	6039      	str	r1, [r7, #0]
 8011aea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011aec:	79fb      	ldrb	r3, [r7, #7]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d105      	bne.n	8011afe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011af2:	683a      	ldr	r2, [r7, #0]
 8011af4:	4907      	ldr	r1, [pc, #28]	; (8011b14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011af6:	4808      	ldr	r0, [pc, #32]	; (8011b18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011af8:	f7fb ffb0 	bl	800da5c <USBD_GetString>
 8011afc:	e004      	b.n	8011b08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011afe:	683a      	ldr	r2, [r7, #0]
 8011b00:	4904      	ldr	r1, [pc, #16]	; (8011b14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011b02:	4805      	ldr	r0, [pc, #20]	; (8011b18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011b04:	f7fb ffaa 	bl	800da5c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011b08:	4b02      	ldr	r3, [pc, #8]	; (8011b14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3708      	adds	r7, #8
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
 8011b12:	bf00      	nop
 8011b14:	2000d0b0 	.word	0x2000d0b0
 8011b18:	08013a54 	.word	0x08013a54

08011b1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b084      	sub	sp, #16
 8011b20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011b22:	4b0f      	ldr	r3, [pc, #60]	; (8011b60 <Get_SerialNum+0x44>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011b28:	4b0e      	ldr	r3, [pc, #56]	; (8011b64 <Get_SerialNum+0x48>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011b2e:	4b0e      	ldr	r3, [pc, #56]	; (8011b68 <Get_SerialNum+0x4c>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011b34:	68fa      	ldr	r2, [r7, #12]
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	4413      	add	r3, r2
 8011b3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d009      	beq.n	8011b56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011b42:	2208      	movs	r2, #8
 8011b44:	4909      	ldr	r1, [pc, #36]	; (8011b6c <Get_SerialNum+0x50>)
 8011b46:	68f8      	ldr	r0, [r7, #12]
 8011b48:	f000 f814 	bl	8011b74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011b4c:	2204      	movs	r2, #4
 8011b4e:	4908      	ldr	r1, [pc, #32]	; (8011b70 <Get_SerialNum+0x54>)
 8011b50:	68b8      	ldr	r0, [r7, #8]
 8011b52:	f000 f80f 	bl	8011b74 <IntToUnicode>
  }
}
 8011b56:	bf00      	nop
 8011b58:	3710      	adds	r7, #16
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	1fff7a10 	.word	0x1fff7a10
 8011b64:	1fff7a14 	.word	0x1fff7a14
 8011b68:	1fff7a18 	.word	0x1fff7a18
 8011b6c:	200000ea 	.word	0x200000ea
 8011b70:	200000fa 	.word	0x200000fa

08011b74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011b74:	b480      	push	{r7}
 8011b76:	b087      	sub	sp, #28
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	4613      	mov	r3, r2
 8011b80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011b82:	2300      	movs	r3, #0
 8011b84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011b86:	2300      	movs	r3, #0
 8011b88:	75fb      	strb	r3, [r7, #23]
 8011b8a:	e027      	b.n	8011bdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	0f1b      	lsrs	r3, r3, #28
 8011b90:	2b09      	cmp	r3, #9
 8011b92:	d80b      	bhi.n	8011bac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	0f1b      	lsrs	r3, r3, #28
 8011b98:	b2da      	uxtb	r2, r3
 8011b9a:	7dfb      	ldrb	r3, [r7, #23]
 8011b9c:	005b      	lsls	r3, r3, #1
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	440b      	add	r3, r1
 8011ba4:	3230      	adds	r2, #48	; 0x30
 8011ba6:	b2d2      	uxtb	r2, r2
 8011ba8:	701a      	strb	r2, [r3, #0]
 8011baa:	e00a      	b.n	8011bc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	0f1b      	lsrs	r3, r3, #28
 8011bb0:	b2da      	uxtb	r2, r3
 8011bb2:	7dfb      	ldrb	r3, [r7, #23]
 8011bb4:	005b      	lsls	r3, r3, #1
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	440b      	add	r3, r1
 8011bbc:	3237      	adds	r2, #55	; 0x37
 8011bbe:	b2d2      	uxtb	r2, r2
 8011bc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	011b      	lsls	r3, r3, #4
 8011bc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011bc8:	7dfb      	ldrb	r3, [r7, #23]
 8011bca:	005b      	lsls	r3, r3, #1
 8011bcc:	3301      	adds	r3, #1
 8011bce:	68ba      	ldr	r2, [r7, #8]
 8011bd0:	4413      	add	r3, r2
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011bd6:	7dfb      	ldrb	r3, [r7, #23]
 8011bd8:	3301      	adds	r3, #1
 8011bda:	75fb      	strb	r3, [r7, #23]
 8011bdc:	7dfa      	ldrb	r2, [r7, #23]
 8011bde:	79fb      	ldrb	r3, [r7, #7]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d3d3      	bcc.n	8011b8c <IntToUnicode+0x18>
  }
}
 8011be4:	bf00      	nop
 8011be6:	bf00      	nop
 8011be8:	371c      	adds	r7, #28
 8011bea:	46bd      	mov	sp, r7
 8011bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf0:	4770      	bx	lr
	...

08011bf4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b08a      	sub	sp, #40	; 0x28
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011bfc:	f107 0314 	add.w	r3, r7, #20
 8011c00:	2200      	movs	r2, #0
 8011c02:	601a      	str	r2, [r3, #0]
 8011c04:	605a      	str	r2, [r3, #4]
 8011c06:	609a      	str	r2, [r3, #8]
 8011c08:	60da      	str	r2, [r3, #12]
 8011c0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011c14:	d13a      	bne.n	8011c8c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011c16:	2300      	movs	r3, #0
 8011c18:	613b      	str	r3, [r7, #16]
 8011c1a:	4b1e      	ldr	r3, [pc, #120]	; (8011c94 <HAL_PCD_MspInit+0xa0>)
 8011c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c1e:	4a1d      	ldr	r2, [pc, #116]	; (8011c94 <HAL_PCD_MspInit+0xa0>)
 8011c20:	f043 0301 	orr.w	r3, r3, #1
 8011c24:	6313      	str	r3, [r2, #48]	; 0x30
 8011c26:	4b1b      	ldr	r3, [pc, #108]	; (8011c94 <HAL_PCD_MspInit+0xa0>)
 8011c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c2a:	f003 0301 	and.w	r3, r3, #1
 8011c2e:	613b      	str	r3, [r7, #16]
 8011c30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011c32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c38:	2302      	movs	r3, #2
 8011c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011c40:	2303      	movs	r3, #3
 8011c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011c44:	230a      	movs	r3, #10
 8011c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c48:	f107 0314 	add.w	r3, r7, #20
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	4812      	ldr	r0, [pc, #72]	; (8011c98 <HAL_PCD_MspInit+0xa4>)
 8011c50:	f7f5 f892 	bl	8006d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011c54:	4b0f      	ldr	r3, [pc, #60]	; (8011c94 <HAL_PCD_MspInit+0xa0>)
 8011c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c58:	4a0e      	ldr	r2, [pc, #56]	; (8011c94 <HAL_PCD_MspInit+0xa0>)
 8011c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c5e:	6353      	str	r3, [r2, #52]	; 0x34
 8011c60:	2300      	movs	r3, #0
 8011c62:	60fb      	str	r3, [r7, #12]
 8011c64:	4b0b      	ldr	r3, [pc, #44]	; (8011c94 <HAL_PCD_MspInit+0xa0>)
 8011c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c68:	4a0a      	ldr	r2, [pc, #40]	; (8011c94 <HAL_PCD_MspInit+0xa0>)
 8011c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011c6e:	6453      	str	r3, [r2, #68]	; 0x44
 8011c70:	4b08      	ldr	r3, [pc, #32]	; (8011c94 <HAL_PCD_MspInit+0xa0>)
 8011c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011c78:	60fb      	str	r3, [r7, #12]
 8011c7a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	2100      	movs	r1, #0
 8011c80:	2043      	movs	r0, #67	; 0x43
 8011c82:	f7f4 fcd2 	bl	800662a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011c86:	2043      	movs	r0, #67	; 0x43
 8011c88:	f7f4 fceb 	bl	8006662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011c8c:	bf00      	nop
 8011c8e:	3728      	adds	r7, #40	; 0x28
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}
 8011c94:	40023800 	.word	0x40023800
 8011c98:	40020000 	.word	0x40020000

08011c9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b082      	sub	sp, #8
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	4610      	mov	r0, r2
 8011cb4:	f7fa fd6d 	bl	800c792 <USBD_LL_SetupStage>
}
 8011cb8:	bf00      	nop
 8011cba:	3708      	adds	r7, #8
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b082      	sub	sp, #8
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	460b      	mov	r3, r1
 8011cca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8011cd2:	78fa      	ldrb	r2, [r7, #3]
 8011cd4:	6879      	ldr	r1, [r7, #4]
 8011cd6:	4613      	mov	r3, r2
 8011cd8:	00db      	lsls	r3, r3, #3
 8011cda:	4413      	add	r3, r2
 8011cdc:	009b      	lsls	r3, r3, #2
 8011cde:	440b      	add	r3, r1
 8011ce0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011ce4:	681a      	ldr	r2, [r3, #0]
 8011ce6:	78fb      	ldrb	r3, [r7, #3]
 8011ce8:	4619      	mov	r1, r3
 8011cea:	f7fa fda7 	bl	800c83c <USBD_LL_DataOutStage>
}
 8011cee:	bf00      	nop
 8011cf0:	3708      	adds	r7, #8
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}

08011cf6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cf6:	b580      	push	{r7, lr}
 8011cf8:	b082      	sub	sp, #8
 8011cfa:	af00      	add	r7, sp, #0
 8011cfc:	6078      	str	r0, [r7, #4]
 8011cfe:	460b      	mov	r3, r1
 8011d00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8011d08:	78fa      	ldrb	r2, [r7, #3]
 8011d0a:	6879      	ldr	r1, [r7, #4]
 8011d0c:	4613      	mov	r3, r2
 8011d0e:	00db      	lsls	r3, r3, #3
 8011d10:	4413      	add	r3, r2
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	440b      	add	r3, r1
 8011d16:	3320      	adds	r3, #32
 8011d18:	681a      	ldr	r2, [r3, #0]
 8011d1a:	78fb      	ldrb	r3, [r7, #3]
 8011d1c:	4619      	mov	r1, r3
 8011d1e:	f7fa fe40 	bl	800c9a2 <USBD_LL_DataInStage>
}
 8011d22:	bf00      	nop
 8011d24:	3708      	adds	r7, #8
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}

08011d2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d2a:	b580      	push	{r7, lr}
 8011d2c:	b082      	sub	sp, #8
 8011d2e:	af00      	add	r7, sp, #0
 8011d30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f7fa ff7a 	bl	800cc32 <USBD_LL_SOF>
}
 8011d3e:	bf00      	nop
 8011d40:	3708      	adds	r7, #8
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}

08011d46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d46:	b580      	push	{r7, lr}
 8011d48:	b084      	sub	sp, #16
 8011d4a:	af00      	add	r7, sp, #0
 8011d4c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011d4e:	2301      	movs	r3, #1
 8011d50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	79db      	ldrb	r3, [r3, #7]
 8011d56:	2b02      	cmp	r3, #2
 8011d58:	d001      	beq.n	8011d5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011d5a:	f7ef ff45 	bl	8001be8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011d64:	7bfa      	ldrb	r2, [r7, #15]
 8011d66:	4611      	mov	r1, r2
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f7fa ff1e 	bl	800cbaa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011d74:	4618      	mov	r0, r3
 8011d76:	f7fa fec6 	bl	800cb06 <USBD_LL_Reset>
}
 8011d7a:	bf00      	nop
 8011d7c:	3710      	adds	r7, #16
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}
	...

08011d84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011d92:	4618      	mov	r0, r3
 8011d94:	f7fa ff19 	bl	800cbca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	687a      	ldr	r2, [r7, #4]
 8011da4:	6812      	ldr	r2, [r2, #0]
 8011da6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011daa:	f043 0301 	orr.w	r3, r3, #1
 8011dae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	7adb      	ldrb	r3, [r3, #11]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d005      	beq.n	8011dc4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011db8:	4b04      	ldr	r3, [pc, #16]	; (8011dcc <HAL_PCD_SuspendCallback+0x48>)
 8011dba:	691b      	ldr	r3, [r3, #16]
 8011dbc:	4a03      	ldr	r2, [pc, #12]	; (8011dcc <HAL_PCD_SuspendCallback+0x48>)
 8011dbe:	f043 0306 	orr.w	r3, r3, #6
 8011dc2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011dc4:	bf00      	nop
 8011dc6:	3708      	adds	r7, #8
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}
 8011dcc:	e000ed00 	.word	0xe000ed00

08011dd0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7fa ff0f 	bl	800cc02 <USBD_LL_Resume>
}
 8011de4:	bf00      	nop
 8011de6:	3708      	adds	r7, #8
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
 8011df4:	460b      	mov	r3, r1
 8011df6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011dfe:	78fa      	ldrb	r2, [r7, #3]
 8011e00:	4611      	mov	r1, r2
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7fa ff67 	bl	800ccd6 <USBD_LL_IsoOUTIncomplete>
}
 8011e08:	bf00      	nop
 8011e0a:	3708      	adds	r7, #8
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	460b      	mov	r3, r1
 8011e1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011e22:	78fa      	ldrb	r2, [r7, #3]
 8011e24:	4611      	mov	r1, r2
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7fa ff23 	bl	800cc72 <USBD_LL_IsoINIncomplete>
}
 8011e2c:	bf00      	nop
 8011e2e:	3708      	adds	r7, #8
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd80      	pop	{r7, pc}

08011e34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b082      	sub	sp, #8
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011e42:	4618      	mov	r0, r3
 8011e44:	f7fa ff79 	bl	800cd3a <USBD_LL_DevConnected>
}
 8011e48:	bf00      	nop
 8011e4a:	3708      	adds	r7, #8
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b082      	sub	sp, #8
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7fa ff76 	bl	800cd50 <USBD_LL_DevDisconnected>
}
 8011e64:	bf00      	nop
 8011e66:	3708      	adds	r7, #8
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}

08011e6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b082      	sub	sp, #8
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	781b      	ldrb	r3, [r3, #0]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d13c      	bne.n	8011ef6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011e7c:	4a20      	ldr	r2, [pc, #128]	; (8011f00 <USBD_LL_Init+0x94>)
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	4a1e      	ldr	r2, [pc, #120]	; (8011f00 <USBD_LL_Init+0x94>)
 8011e88:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011e8c:	4b1c      	ldr	r3, [pc, #112]	; (8011f00 <USBD_LL_Init+0x94>)
 8011e8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011e92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011e94:	4b1a      	ldr	r3, [pc, #104]	; (8011f00 <USBD_LL_Init+0x94>)
 8011e96:	2204      	movs	r2, #4
 8011e98:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011e9a:	4b19      	ldr	r3, [pc, #100]	; (8011f00 <USBD_LL_Init+0x94>)
 8011e9c:	2202      	movs	r2, #2
 8011e9e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011ea0:	4b17      	ldr	r3, [pc, #92]	; (8011f00 <USBD_LL_Init+0x94>)
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011ea6:	4b16      	ldr	r3, [pc, #88]	; (8011f00 <USBD_LL_Init+0x94>)
 8011ea8:	2202      	movs	r2, #2
 8011eaa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011eac:	4b14      	ldr	r3, [pc, #80]	; (8011f00 <USBD_LL_Init+0x94>)
 8011eae:	2200      	movs	r2, #0
 8011eb0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011eb2:	4b13      	ldr	r3, [pc, #76]	; (8011f00 <USBD_LL_Init+0x94>)
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011eb8:	4b11      	ldr	r3, [pc, #68]	; (8011f00 <USBD_LL_Init+0x94>)
 8011eba:	2200      	movs	r2, #0
 8011ebc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011ebe:	4b10      	ldr	r3, [pc, #64]	; (8011f00 <USBD_LL_Init+0x94>)
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011ec4:	4b0e      	ldr	r3, [pc, #56]	; (8011f00 <USBD_LL_Init+0x94>)
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011eca:	480d      	ldr	r0, [pc, #52]	; (8011f00 <USBD_LL_Init+0x94>)
 8011ecc:	f7f5 f90a 	bl	80070e4 <HAL_PCD_Init>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d001      	beq.n	8011eda <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011ed6:	f7ef fe87 	bl	8001be8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011eda:	2180      	movs	r1, #128	; 0x80
 8011edc:	4808      	ldr	r0, [pc, #32]	; (8011f00 <USBD_LL_Init+0x94>)
 8011ede:	f7f6 fb34 	bl	800854a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011ee2:	2240      	movs	r2, #64	; 0x40
 8011ee4:	2100      	movs	r1, #0
 8011ee6:	4806      	ldr	r0, [pc, #24]	; (8011f00 <USBD_LL_Init+0x94>)
 8011ee8:	f7f6 fae8 	bl	80084bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011eec:	2280      	movs	r2, #128	; 0x80
 8011eee:	2101      	movs	r1, #1
 8011ef0:	4803      	ldr	r0, [pc, #12]	; (8011f00 <USBD_LL_Init+0x94>)
 8011ef2:	f7f6 fae3 	bl	80084bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011ef6:	2300      	movs	r3, #0
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3708      	adds	r7, #8
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	2000d2b0 	.word	0x2000d2b0

08011f04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b084      	sub	sp, #16
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f10:	2300      	movs	r3, #0
 8011f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7f5 f9f1 	bl	8007302 <HAL_PCD_Start>
 8011f20:	4603      	mov	r3, r0
 8011f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f24:	7bfb      	ldrb	r3, [r7, #15]
 8011f26:	4618      	mov	r0, r3
 8011f28:	f000 f942 	bl	80121b0 <USBD_Get_USB_Status>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3710      	adds	r7, #16
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}

08011f3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011f3a:	b580      	push	{r7, lr}
 8011f3c:	b084      	sub	sp, #16
 8011f3e:	af00      	add	r7, sp, #0
 8011f40:	6078      	str	r0, [r7, #4]
 8011f42:	4608      	mov	r0, r1
 8011f44:	4611      	mov	r1, r2
 8011f46:	461a      	mov	r2, r3
 8011f48:	4603      	mov	r3, r0
 8011f4a:	70fb      	strb	r3, [r7, #3]
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	70bb      	strb	r3, [r7, #2]
 8011f50:	4613      	mov	r3, r2
 8011f52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f54:	2300      	movs	r3, #0
 8011f56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011f62:	78bb      	ldrb	r3, [r7, #2]
 8011f64:	883a      	ldrh	r2, [r7, #0]
 8011f66:	78f9      	ldrb	r1, [r7, #3]
 8011f68:	f7f5 fec5 	bl	8007cf6 <HAL_PCD_EP_Open>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f70:	7bfb      	ldrb	r3, [r7, #15]
 8011f72:	4618      	mov	r0, r3
 8011f74:	f000 f91c 	bl	80121b0 <USBD_Get_USB_Status>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3710      	adds	r7, #16
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}

08011f86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f86:	b580      	push	{r7, lr}
 8011f88:	b084      	sub	sp, #16
 8011f8a:	af00      	add	r7, sp, #0
 8011f8c:	6078      	str	r0, [r7, #4]
 8011f8e:	460b      	mov	r3, r1
 8011f90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f92:	2300      	movs	r3, #0
 8011f94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f96:	2300      	movs	r3, #0
 8011f98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011fa0:	78fa      	ldrb	r2, [r7, #3]
 8011fa2:	4611      	mov	r1, r2
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7f5 ff0e 	bl	8007dc6 <HAL_PCD_EP_Close>
 8011faa:	4603      	mov	r3, r0
 8011fac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011fae:	7bfb      	ldrb	r3, [r7, #15]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f000 f8fd 	bl	80121b0 <USBD_Get_USB_Status>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011fba:	7bbb      	ldrb	r3, [r7, #14]
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3710      	adds	r7, #16
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}

08011fc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b084      	sub	sp, #16
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	460b      	mov	r3, r1
 8011fce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011fde:	78fa      	ldrb	r2, [r7, #3]
 8011fe0:	4611      	mov	r1, r2
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7f5 ffc6 	bl	8007f74 <HAL_PCD_EP_SetStall>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011fec:	7bfb      	ldrb	r3, [r7, #15]
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f000 f8de 	bl	80121b0 <USBD_Get_USB_Status>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ff8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3710      	adds	r7, #16
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}

08012002 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012002:	b580      	push	{r7, lr}
 8012004:	b084      	sub	sp, #16
 8012006:	af00      	add	r7, sp, #0
 8012008:	6078      	str	r0, [r7, #4]
 801200a:	460b      	mov	r3, r1
 801200c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801200e:	2300      	movs	r3, #0
 8012010:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012012:	2300      	movs	r3, #0
 8012014:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801201c:	78fa      	ldrb	r2, [r7, #3]
 801201e:	4611      	mov	r1, r2
 8012020:	4618      	mov	r0, r3
 8012022:	f7f6 f80a 	bl	800803a <HAL_PCD_EP_ClrStall>
 8012026:	4603      	mov	r3, r0
 8012028:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801202a:	7bfb      	ldrb	r3, [r7, #15]
 801202c:	4618      	mov	r0, r3
 801202e:	f000 f8bf 	bl	80121b0 <USBD_Get_USB_Status>
 8012032:	4603      	mov	r3, r0
 8012034:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012036:	7bbb      	ldrb	r3, [r7, #14]
}
 8012038:	4618      	mov	r0, r3
 801203a:	3710      	adds	r7, #16
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}

08012040 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012040:	b480      	push	{r7}
 8012042:	b085      	sub	sp, #20
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	460b      	mov	r3, r1
 801204a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012052:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012058:	2b00      	cmp	r3, #0
 801205a:	da0b      	bge.n	8012074 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801205c:	78fb      	ldrb	r3, [r7, #3]
 801205e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012062:	68f9      	ldr	r1, [r7, #12]
 8012064:	4613      	mov	r3, r2
 8012066:	00db      	lsls	r3, r3, #3
 8012068:	4413      	add	r3, r2
 801206a:	009b      	lsls	r3, r3, #2
 801206c:	440b      	add	r3, r1
 801206e:	3316      	adds	r3, #22
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	e00b      	b.n	801208c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012074:	78fb      	ldrb	r3, [r7, #3]
 8012076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801207a:	68f9      	ldr	r1, [r7, #12]
 801207c:	4613      	mov	r3, r2
 801207e:	00db      	lsls	r3, r3, #3
 8012080:	4413      	add	r3, r2
 8012082:	009b      	lsls	r3, r3, #2
 8012084:	440b      	add	r3, r1
 8012086:	f203 2356 	addw	r3, r3, #598	; 0x256
 801208a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801208c:	4618      	mov	r0, r3
 801208e:	3714      	adds	r7, #20
 8012090:	46bd      	mov	sp, r7
 8012092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012096:	4770      	bx	lr

08012098 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b084      	sub	sp, #16
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	460b      	mov	r3, r1
 80120a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120a4:	2300      	movs	r3, #0
 80120a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120a8:	2300      	movs	r3, #0
 80120aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80120b2:	78fa      	ldrb	r2, [r7, #3]
 80120b4:	4611      	mov	r1, r2
 80120b6:	4618      	mov	r0, r3
 80120b8:	f7f5 fdf9 	bl	8007cae <HAL_PCD_SetAddress>
 80120bc:	4603      	mov	r3, r0
 80120be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120c0:	7bfb      	ldrb	r3, [r7, #15]
 80120c2:	4618      	mov	r0, r3
 80120c4:	f000 f874 	bl	80121b0 <USBD_Get_USB_Status>
 80120c8:	4603      	mov	r3, r0
 80120ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3710      	adds	r7, #16
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}

080120d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80120d6:	b580      	push	{r7, lr}
 80120d8:	b086      	sub	sp, #24
 80120da:	af00      	add	r7, sp, #0
 80120dc:	60f8      	str	r0, [r7, #12]
 80120de:	607a      	str	r2, [r7, #4]
 80120e0:	603b      	str	r3, [r7, #0]
 80120e2:	460b      	mov	r3, r1
 80120e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120e6:	2300      	movs	r3, #0
 80120e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120ea:	2300      	movs	r3, #0
 80120ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80120f4:	7af9      	ldrb	r1, [r7, #11]
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	687a      	ldr	r2, [r7, #4]
 80120fa:	f7f5 ff01 	bl	8007f00 <HAL_PCD_EP_Transmit>
 80120fe:	4603      	mov	r3, r0
 8012100:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012102:	7dfb      	ldrb	r3, [r7, #23]
 8012104:	4618      	mov	r0, r3
 8012106:	f000 f853 	bl	80121b0 <USBD_Get_USB_Status>
 801210a:	4603      	mov	r3, r0
 801210c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801210e:	7dbb      	ldrb	r3, [r7, #22]
}
 8012110:	4618      	mov	r0, r3
 8012112:	3718      	adds	r7, #24
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}

08012118 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b086      	sub	sp, #24
 801211c:	af00      	add	r7, sp, #0
 801211e:	60f8      	str	r0, [r7, #12]
 8012120:	607a      	str	r2, [r7, #4]
 8012122:	603b      	str	r3, [r7, #0]
 8012124:	460b      	mov	r3, r1
 8012126:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012128:	2300      	movs	r3, #0
 801212a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801212c:	2300      	movs	r3, #0
 801212e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012136:	7af9      	ldrb	r1, [r7, #11]
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	687a      	ldr	r2, [r7, #4]
 801213c:	f7f5 fe8d 	bl	8007e5a <HAL_PCD_EP_Receive>
 8012140:	4603      	mov	r3, r0
 8012142:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012144:	7dfb      	ldrb	r3, [r7, #23]
 8012146:	4618      	mov	r0, r3
 8012148:	f000 f832 	bl	80121b0 <USBD_Get_USB_Status>
 801214c:	4603      	mov	r3, r0
 801214e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012150:	7dbb      	ldrb	r3, [r7, #22]
}
 8012152:	4618      	mov	r0, r3
 8012154:	3718      	adds	r7, #24
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}

0801215a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801215a:	b580      	push	{r7, lr}
 801215c:	b082      	sub	sp, #8
 801215e:	af00      	add	r7, sp, #0
 8012160:	6078      	str	r0, [r7, #4]
 8012162:	460b      	mov	r3, r1
 8012164:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801216c:	78fa      	ldrb	r2, [r7, #3]
 801216e:	4611      	mov	r1, r2
 8012170:	4618      	mov	r0, r3
 8012172:	f7f5 fead 	bl	8007ed0 <HAL_PCD_EP_GetRxCount>
 8012176:	4603      	mov	r3, r0
}
 8012178:	4618      	mov	r0, r3
 801217a:	3708      	adds	r7, #8
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}

08012180 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012180:	b480      	push	{r7}
 8012182:	b083      	sub	sp, #12
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012188:	4b03      	ldr	r3, [pc, #12]	; (8012198 <USBD_static_malloc+0x18>)
}
 801218a:	4618      	mov	r0, r3
 801218c:	370c      	adds	r7, #12
 801218e:	46bd      	mov	sp, r7
 8012190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012194:	4770      	bx	lr
 8012196:	bf00      	nop
 8012198:	2000d794 	.word	0x2000d794

0801219c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801219c:	b480      	push	{r7}
 801219e:	b083      	sub	sp, #12
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]

}
 80121a4:	bf00      	nop
 80121a6:	370c      	adds	r7, #12
 80121a8:	46bd      	mov	sp, r7
 80121aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ae:	4770      	bx	lr

080121b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80121b0:	b480      	push	{r7}
 80121b2:	b085      	sub	sp, #20
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	4603      	mov	r3, r0
 80121b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121ba:	2300      	movs	r3, #0
 80121bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80121be:	79fb      	ldrb	r3, [r7, #7]
 80121c0:	2b03      	cmp	r3, #3
 80121c2:	d817      	bhi.n	80121f4 <USBD_Get_USB_Status+0x44>
 80121c4:	a201      	add	r2, pc, #4	; (adr r2, 80121cc <USBD_Get_USB_Status+0x1c>)
 80121c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121ca:	bf00      	nop
 80121cc:	080121dd 	.word	0x080121dd
 80121d0:	080121e3 	.word	0x080121e3
 80121d4:	080121e9 	.word	0x080121e9
 80121d8:	080121ef 	.word	0x080121ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80121dc:	2300      	movs	r3, #0
 80121de:	73fb      	strb	r3, [r7, #15]
    break;
 80121e0:	e00b      	b.n	80121fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80121e2:	2303      	movs	r3, #3
 80121e4:	73fb      	strb	r3, [r7, #15]
    break;
 80121e6:	e008      	b.n	80121fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80121e8:	2301      	movs	r3, #1
 80121ea:	73fb      	strb	r3, [r7, #15]
    break;
 80121ec:	e005      	b.n	80121fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80121ee:	2303      	movs	r3, #3
 80121f0:	73fb      	strb	r3, [r7, #15]
    break;
 80121f2:	e002      	b.n	80121fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80121f4:	2303      	movs	r3, #3
 80121f6:	73fb      	strb	r3, [r7, #15]
    break;
 80121f8:	bf00      	nop
  }
  return usb_status;
 80121fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	3714      	adds	r7, #20
 8012200:	46bd      	mov	sp, r7
 8012202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012206:	4770      	bx	lr

08012208 <malloc>:
 8012208:	4b02      	ldr	r3, [pc, #8]	; (8012214 <malloc+0xc>)
 801220a:	4601      	mov	r1, r0
 801220c:	6818      	ldr	r0, [r3, #0]
 801220e:	f000 b82b 	b.w	8012268 <_malloc_r>
 8012212:	bf00      	nop
 8012214:	2000015c 	.word	0x2000015c

08012218 <free>:
 8012218:	4b02      	ldr	r3, [pc, #8]	; (8012224 <free+0xc>)
 801221a:	4601      	mov	r1, r0
 801221c:	6818      	ldr	r0, [r3, #0]
 801221e:	f000 bb61 	b.w	80128e4 <_free_r>
 8012222:	bf00      	nop
 8012224:	2000015c 	.word	0x2000015c

08012228 <sbrk_aligned>:
 8012228:	b570      	push	{r4, r5, r6, lr}
 801222a:	4e0e      	ldr	r6, [pc, #56]	; (8012264 <sbrk_aligned+0x3c>)
 801222c:	460c      	mov	r4, r1
 801222e:	6831      	ldr	r1, [r6, #0]
 8012230:	4605      	mov	r5, r0
 8012232:	b911      	cbnz	r1, 801223a <sbrk_aligned+0x12>
 8012234:	f000 faf8 	bl	8012828 <_sbrk_r>
 8012238:	6030      	str	r0, [r6, #0]
 801223a:	4621      	mov	r1, r4
 801223c:	4628      	mov	r0, r5
 801223e:	f000 faf3 	bl	8012828 <_sbrk_r>
 8012242:	1c43      	adds	r3, r0, #1
 8012244:	d00a      	beq.n	801225c <sbrk_aligned+0x34>
 8012246:	1cc4      	adds	r4, r0, #3
 8012248:	f024 0403 	bic.w	r4, r4, #3
 801224c:	42a0      	cmp	r0, r4
 801224e:	d007      	beq.n	8012260 <sbrk_aligned+0x38>
 8012250:	1a21      	subs	r1, r4, r0
 8012252:	4628      	mov	r0, r5
 8012254:	f000 fae8 	bl	8012828 <_sbrk_r>
 8012258:	3001      	adds	r0, #1
 801225a:	d101      	bne.n	8012260 <sbrk_aligned+0x38>
 801225c:	f04f 34ff 	mov.w	r4, #4294967295
 8012260:	4620      	mov	r0, r4
 8012262:	bd70      	pop	{r4, r5, r6, pc}
 8012264:	2000d9b8 	.word	0x2000d9b8

08012268 <_malloc_r>:
 8012268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801226c:	1ccd      	adds	r5, r1, #3
 801226e:	f025 0503 	bic.w	r5, r5, #3
 8012272:	3508      	adds	r5, #8
 8012274:	2d0c      	cmp	r5, #12
 8012276:	bf38      	it	cc
 8012278:	250c      	movcc	r5, #12
 801227a:	2d00      	cmp	r5, #0
 801227c:	4607      	mov	r7, r0
 801227e:	db01      	blt.n	8012284 <_malloc_r+0x1c>
 8012280:	42a9      	cmp	r1, r5
 8012282:	d905      	bls.n	8012290 <_malloc_r+0x28>
 8012284:	230c      	movs	r3, #12
 8012286:	603b      	str	r3, [r7, #0]
 8012288:	2600      	movs	r6, #0
 801228a:	4630      	mov	r0, r6
 801228c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012290:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012364 <_malloc_r+0xfc>
 8012294:	f000 f868 	bl	8012368 <__malloc_lock>
 8012298:	f8d8 3000 	ldr.w	r3, [r8]
 801229c:	461c      	mov	r4, r3
 801229e:	bb5c      	cbnz	r4, 80122f8 <_malloc_r+0x90>
 80122a0:	4629      	mov	r1, r5
 80122a2:	4638      	mov	r0, r7
 80122a4:	f7ff ffc0 	bl	8012228 <sbrk_aligned>
 80122a8:	1c43      	adds	r3, r0, #1
 80122aa:	4604      	mov	r4, r0
 80122ac:	d155      	bne.n	801235a <_malloc_r+0xf2>
 80122ae:	f8d8 4000 	ldr.w	r4, [r8]
 80122b2:	4626      	mov	r6, r4
 80122b4:	2e00      	cmp	r6, #0
 80122b6:	d145      	bne.n	8012344 <_malloc_r+0xdc>
 80122b8:	2c00      	cmp	r4, #0
 80122ba:	d048      	beq.n	801234e <_malloc_r+0xe6>
 80122bc:	6823      	ldr	r3, [r4, #0]
 80122be:	4631      	mov	r1, r6
 80122c0:	4638      	mov	r0, r7
 80122c2:	eb04 0903 	add.w	r9, r4, r3
 80122c6:	f000 faaf 	bl	8012828 <_sbrk_r>
 80122ca:	4581      	cmp	r9, r0
 80122cc:	d13f      	bne.n	801234e <_malloc_r+0xe6>
 80122ce:	6821      	ldr	r1, [r4, #0]
 80122d0:	1a6d      	subs	r5, r5, r1
 80122d2:	4629      	mov	r1, r5
 80122d4:	4638      	mov	r0, r7
 80122d6:	f7ff ffa7 	bl	8012228 <sbrk_aligned>
 80122da:	3001      	adds	r0, #1
 80122dc:	d037      	beq.n	801234e <_malloc_r+0xe6>
 80122de:	6823      	ldr	r3, [r4, #0]
 80122e0:	442b      	add	r3, r5
 80122e2:	6023      	str	r3, [r4, #0]
 80122e4:	f8d8 3000 	ldr.w	r3, [r8]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d038      	beq.n	801235e <_malloc_r+0xf6>
 80122ec:	685a      	ldr	r2, [r3, #4]
 80122ee:	42a2      	cmp	r2, r4
 80122f0:	d12b      	bne.n	801234a <_malloc_r+0xe2>
 80122f2:	2200      	movs	r2, #0
 80122f4:	605a      	str	r2, [r3, #4]
 80122f6:	e00f      	b.n	8012318 <_malloc_r+0xb0>
 80122f8:	6822      	ldr	r2, [r4, #0]
 80122fa:	1b52      	subs	r2, r2, r5
 80122fc:	d41f      	bmi.n	801233e <_malloc_r+0xd6>
 80122fe:	2a0b      	cmp	r2, #11
 8012300:	d917      	bls.n	8012332 <_malloc_r+0xca>
 8012302:	1961      	adds	r1, r4, r5
 8012304:	42a3      	cmp	r3, r4
 8012306:	6025      	str	r5, [r4, #0]
 8012308:	bf18      	it	ne
 801230a:	6059      	strne	r1, [r3, #4]
 801230c:	6863      	ldr	r3, [r4, #4]
 801230e:	bf08      	it	eq
 8012310:	f8c8 1000 	streq.w	r1, [r8]
 8012314:	5162      	str	r2, [r4, r5]
 8012316:	604b      	str	r3, [r1, #4]
 8012318:	4638      	mov	r0, r7
 801231a:	f104 060b 	add.w	r6, r4, #11
 801231e:	f000 f829 	bl	8012374 <__malloc_unlock>
 8012322:	f026 0607 	bic.w	r6, r6, #7
 8012326:	1d23      	adds	r3, r4, #4
 8012328:	1af2      	subs	r2, r6, r3
 801232a:	d0ae      	beq.n	801228a <_malloc_r+0x22>
 801232c:	1b9b      	subs	r3, r3, r6
 801232e:	50a3      	str	r3, [r4, r2]
 8012330:	e7ab      	b.n	801228a <_malloc_r+0x22>
 8012332:	42a3      	cmp	r3, r4
 8012334:	6862      	ldr	r2, [r4, #4]
 8012336:	d1dd      	bne.n	80122f4 <_malloc_r+0x8c>
 8012338:	f8c8 2000 	str.w	r2, [r8]
 801233c:	e7ec      	b.n	8012318 <_malloc_r+0xb0>
 801233e:	4623      	mov	r3, r4
 8012340:	6864      	ldr	r4, [r4, #4]
 8012342:	e7ac      	b.n	801229e <_malloc_r+0x36>
 8012344:	4634      	mov	r4, r6
 8012346:	6876      	ldr	r6, [r6, #4]
 8012348:	e7b4      	b.n	80122b4 <_malloc_r+0x4c>
 801234a:	4613      	mov	r3, r2
 801234c:	e7cc      	b.n	80122e8 <_malloc_r+0x80>
 801234e:	230c      	movs	r3, #12
 8012350:	603b      	str	r3, [r7, #0]
 8012352:	4638      	mov	r0, r7
 8012354:	f000 f80e 	bl	8012374 <__malloc_unlock>
 8012358:	e797      	b.n	801228a <_malloc_r+0x22>
 801235a:	6025      	str	r5, [r4, #0]
 801235c:	e7dc      	b.n	8012318 <_malloc_r+0xb0>
 801235e:	605b      	str	r3, [r3, #4]
 8012360:	deff      	udf	#255	; 0xff
 8012362:	bf00      	nop
 8012364:	2000d9b4 	.word	0x2000d9b4

08012368 <__malloc_lock>:
 8012368:	4801      	ldr	r0, [pc, #4]	; (8012370 <__malloc_lock+0x8>)
 801236a:	f000 baaa 	b.w	80128c2 <__retarget_lock_acquire_recursive>
 801236e:	bf00      	nop
 8012370:	2000dafc 	.word	0x2000dafc

08012374 <__malloc_unlock>:
 8012374:	4801      	ldr	r0, [pc, #4]	; (801237c <__malloc_unlock+0x8>)
 8012376:	f000 baa5 	b.w	80128c4 <__retarget_lock_release_recursive>
 801237a:	bf00      	nop
 801237c:	2000dafc 	.word	0x2000dafc

08012380 <std>:
 8012380:	2300      	movs	r3, #0
 8012382:	b510      	push	{r4, lr}
 8012384:	4604      	mov	r4, r0
 8012386:	e9c0 3300 	strd	r3, r3, [r0]
 801238a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801238e:	6083      	str	r3, [r0, #8]
 8012390:	8181      	strh	r1, [r0, #12]
 8012392:	6643      	str	r3, [r0, #100]	; 0x64
 8012394:	81c2      	strh	r2, [r0, #14]
 8012396:	6183      	str	r3, [r0, #24]
 8012398:	4619      	mov	r1, r3
 801239a:	2208      	movs	r2, #8
 801239c:	305c      	adds	r0, #92	; 0x5c
 801239e:	f000 fa07 	bl	80127b0 <memset>
 80123a2:	4b0d      	ldr	r3, [pc, #52]	; (80123d8 <std+0x58>)
 80123a4:	6263      	str	r3, [r4, #36]	; 0x24
 80123a6:	4b0d      	ldr	r3, [pc, #52]	; (80123dc <std+0x5c>)
 80123a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80123aa:	4b0d      	ldr	r3, [pc, #52]	; (80123e0 <std+0x60>)
 80123ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80123ae:	4b0d      	ldr	r3, [pc, #52]	; (80123e4 <std+0x64>)
 80123b0:	6323      	str	r3, [r4, #48]	; 0x30
 80123b2:	4b0d      	ldr	r3, [pc, #52]	; (80123e8 <std+0x68>)
 80123b4:	6224      	str	r4, [r4, #32]
 80123b6:	429c      	cmp	r4, r3
 80123b8:	d006      	beq.n	80123c8 <std+0x48>
 80123ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80123be:	4294      	cmp	r4, r2
 80123c0:	d002      	beq.n	80123c8 <std+0x48>
 80123c2:	33d0      	adds	r3, #208	; 0xd0
 80123c4:	429c      	cmp	r4, r3
 80123c6:	d105      	bne.n	80123d4 <std+0x54>
 80123c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80123cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123d0:	f000 ba76 	b.w	80128c0 <__retarget_lock_init_recursive>
 80123d4:	bd10      	pop	{r4, pc}
 80123d6:	bf00      	nop
 80123d8:	080125e1 	.word	0x080125e1
 80123dc:	08012603 	.word	0x08012603
 80123e0:	0801263b 	.word	0x0801263b
 80123e4:	0801265f 	.word	0x0801265f
 80123e8:	2000d9bc 	.word	0x2000d9bc

080123ec <stdio_exit_handler>:
 80123ec:	4a02      	ldr	r2, [pc, #8]	; (80123f8 <stdio_exit_handler+0xc>)
 80123ee:	4903      	ldr	r1, [pc, #12]	; (80123fc <stdio_exit_handler+0x10>)
 80123f0:	4803      	ldr	r0, [pc, #12]	; (8012400 <stdio_exit_handler+0x14>)
 80123f2:	f000 b869 	b.w	80124c8 <_fwalk_sglue>
 80123f6:	bf00      	nop
 80123f8:	20000104 	.word	0x20000104
 80123fc:	08013031 	.word	0x08013031
 8012400:	20000110 	.word	0x20000110

08012404 <cleanup_stdio>:
 8012404:	6841      	ldr	r1, [r0, #4]
 8012406:	4b0c      	ldr	r3, [pc, #48]	; (8012438 <cleanup_stdio+0x34>)
 8012408:	4299      	cmp	r1, r3
 801240a:	b510      	push	{r4, lr}
 801240c:	4604      	mov	r4, r0
 801240e:	d001      	beq.n	8012414 <cleanup_stdio+0x10>
 8012410:	f000 fe0e 	bl	8013030 <_fflush_r>
 8012414:	68a1      	ldr	r1, [r4, #8]
 8012416:	4b09      	ldr	r3, [pc, #36]	; (801243c <cleanup_stdio+0x38>)
 8012418:	4299      	cmp	r1, r3
 801241a:	d002      	beq.n	8012422 <cleanup_stdio+0x1e>
 801241c:	4620      	mov	r0, r4
 801241e:	f000 fe07 	bl	8013030 <_fflush_r>
 8012422:	68e1      	ldr	r1, [r4, #12]
 8012424:	4b06      	ldr	r3, [pc, #24]	; (8012440 <cleanup_stdio+0x3c>)
 8012426:	4299      	cmp	r1, r3
 8012428:	d004      	beq.n	8012434 <cleanup_stdio+0x30>
 801242a:	4620      	mov	r0, r4
 801242c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012430:	f000 bdfe 	b.w	8013030 <_fflush_r>
 8012434:	bd10      	pop	{r4, pc}
 8012436:	bf00      	nop
 8012438:	2000d9bc 	.word	0x2000d9bc
 801243c:	2000da24 	.word	0x2000da24
 8012440:	2000da8c 	.word	0x2000da8c

08012444 <global_stdio_init.part.0>:
 8012444:	b510      	push	{r4, lr}
 8012446:	4b0b      	ldr	r3, [pc, #44]	; (8012474 <global_stdio_init.part.0+0x30>)
 8012448:	4c0b      	ldr	r4, [pc, #44]	; (8012478 <global_stdio_init.part.0+0x34>)
 801244a:	4a0c      	ldr	r2, [pc, #48]	; (801247c <global_stdio_init.part.0+0x38>)
 801244c:	601a      	str	r2, [r3, #0]
 801244e:	4620      	mov	r0, r4
 8012450:	2200      	movs	r2, #0
 8012452:	2104      	movs	r1, #4
 8012454:	f7ff ff94 	bl	8012380 <std>
 8012458:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801245c:	2201      	movs	r2, #1
 801245e:	2109      	movs	r1, #9
 8012460:	f7ff ff8e 	bl	8012380 <std>
 8012464:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012468:	2202      	movs	r2, #2
 801246a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801246e:	2112      	movs	r1, #18
 8012470:	f7ff bf86 	b.w	8012380 <std>
 8012474:	2000daf4 	.word	0x2000daf4
 8012478:	2000d9bc 	.word	0x2000d9bc
 801247c:	080123ed 	.word	0x080123ed

08012480 <__sfp_lock_acquire>:
 8012480:	4801      	ldr	r0, [pc, #4]	; (8012488 <__sfp_lock_acquire+0x8>)
 8012482:	f000 ba1e 	b.w	80128c2 <__retarget_lock_acquire_recursive>
 8012486:	bf00      	nop
 8012488:	2000dafd 	.word	0x2000dafd

0801248c <__sfp_lock_release>:
 801248c:	4801      	ldr	r0, [pc, #4]	; (8012494 <__sfp_lock_release+0x8>)
 801248e:	f000 ba19 	b.w	80128c4 <__retarget_lock_release_recursive>
 8012492:	bf00      	nop
 8012494:	2000dafd 	.word	0x2000dafd

08012498 <__sinit>:
 8012498:	b510      	push	{r4, lr}
 801249a:	4604      	mov	r4, r0
 801249c:	f7ff fff0 	bl	8012480 <__sfp_lock_acquire>
 80124a0:	6a23      	ldr	r3, [r4, #32]
 80124a2:	b11b      	cbz	r3, 80124ac <__sinit+0x14>
 80124a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124a8:	f7ff bff0 	b.w	801248c <__sfp_lock_release>
 80124ac:	4b04      	ldr	r3, [pc, #16]	; (80124c0 <__sinit+0x28>)
 80124ae:	6223      	str	r3, [r4, #32]
 80124b0:	4b04      	ldr	r3, [pc, #16]	; (80124c4 <__sinit+0x2c>)
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d1f5      	bne.n	80124a4 <__sinit+0xc>
 80124b8:	f7ff ffc4 	bl	8012444 <global_stdio_init.part.0>
 80124bc:	e7f2      	b.n	80124a4 <__sinit+0xc>
 80124be:	bf00      	nop
 80124c0:	08012405 	.word	0x08012405
 80124c4:	2000daf4 	.word	0x2000daf4

080124c8 <_fwalk_sglue>:
 80124c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124cc:	4607      	mov	r7, r0
 80124ce:	4688      	mov	r8, r1
 80124d0:	4614      	mov	r4, r2
 80124d2:	2600      	movs	r6, #0
 80124d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80124d8:	f1b9 0901 	subs.w	r9, r9, #1
 80124dc:	d505      	bpl.n	80124ea <_fwalk_sglue+0x22>
 80124de:	6824      	ldr	r4, [r4, #0]
 80124e0:	2c00      	cmp	r4, #0
 80124e2:	d1f7      	bne.n	80124d4 <_fwalk_sglue+0xc>
 80124e4:	4630      	mov	r0, r6
 80124e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124ea:	89ab      	ldrh	r3, [r5, #12]
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	d907      	bls.n	8012500 <_fwalk_sglue+0x38>
 80124f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80124f4:	3301      	adds	r3, #1
 80124f6:	d003      	beq.n	8012500 <_fwalk_sglue+0x38>
 80124f8:	4629      	mov	r1, r5
 80124fa:	4638      	mov	r0, r7
 80124fc:	47c0      	blx	r8
 80124fe:	4306      	orrs	r6, r0
 8012500:	3568      	adds	r5, #104	; 0x68
 8012502:	e7e9      	b.n	80124d8 <_fwalk_sglue+0x10>

08012504 <iprintf>:
 8012504:	b40f      	push	{r0, r1, r2, r3}
 8012506:	b507      	push	{r0, r1, r2, lr}
 8012508:	4906      	ldr	r1, [pc, #24]	; (8012524 <iprintf+0x20>)
 801250a:	ab04      	add	r3, sp, #16
 801250c:	6808      	ldr	r0, [r1, #0]
 801250e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012512:	6881      	ldr	r1, [r0, #8]
 8012514:	9301      	str	r3, [sp, #4]
 8012516:	f000 fa5b 	bl	80129d0 <_vfiprintf_r>
 801251a:	b003      	add	sp, #12
 801251c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012520:	b004      	add	sp, #16
 8012522:	4770      	bx	lr
 8012524:	2000015c 	.word	0x2000015c

08012528 <_puts_r>:
 8012528:	6a03      	ldr	r3, [r0, #32]
 801252a:	b570      	push	{r4, r5, r6, lr}
 801252c:	6884      	ldr	r4, [r0, #8]
 801252e:	4605      	mov	r5, r0
 8012530:	460e      	mov	r6, r1
 8012532:	b90b      	cbnz	r3, 8012538 <_puts_r+0x10>
 8012534:	f7ff ffb0 	bl	8012498 <__sinit>
 8012538:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801253a:	07db      	lsls	r3, r3, #31
 801253c:	d405      	bmi.n	801254a <_puts_r+0x22>
 801253e:	89a3      	ldrh	r3, [r4, #12]
 8012540:	0598      	lsls	r0, r3, #22
 8012542:	d402      	bmi.n	801254a <_puts_r+0x22>
 8012544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012546:	f000 f9bc 	bl	80128c2 <__retarget_lock_acquire_recursive>
 801254a:	89a3      	ldrh	r3, [r4, #12]
 801254c:	0719      	lsls	r1, r3, #28
 801254e:	d513      	bpl.n	8012578 <_puts_r+0x50>
 8012550:	6923      	ldr	r3, [r4, #16]
 8012552:	b18b      	cbz	r3, 8012578 <_puts_r+0x50>
 8012554:	3e01      	subs	r6, #1
 8012556:	68a3      	ldr	r3, [r4, #8]
 8012558:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801255c:	3b01      	subs	r3, #1
 801255e:	60a3      	str	r3, [r4, #8]
 8012560:	b9e9      	cbnz	r1, 801259e <_puts_r+0x76>
 8012562:	2b00      	cmp	r3, #0
 8012564:	da2e      	bge.n	80125c4 <_puts_r+0x9c>
 8012566:	4622      	mov	r2, r4
 8012568:	210a      	movs	r1, #10
 801256a:	4628      	mov	r0, r5
 801256c:	f000 f87b 	bl	8012666 <__swbuf_r>
 8012570:	3001      	adds	r0, #1
 8012572:	d007      	beq.n	8012584 <_puts_r+0x5c>
 8012574:	250a      	movs	r5, #10
 8012576:	e007      	b.n	8012588 <_puts_r+0x60>
 8012578:	4621      	mov	r1, r4
 801257a:	4628      	mov	r0, r5
 801257c:	f000 f8b0 	bl	80126e0 <__swsetup_r>
 8012580:	2800      	cmp	r0, #0
 8012582:	d0e7      	beq.n	8012554 <_puts_r+0x2c>
 8012584:	f04f 35ff 	mov.w	r5, #4294967295
 8012588:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801258a:	07da      	lsls	r2, r3, #31
 801258c:	d405      	bmi.n	801259a <_puts_r+0x72>
 801258e:	89a3      	ldrh	r3, [r4, #12]
 8012590:	059b      	lsls	r3, r3, #22
 8012592:	d402      	bmi.n	801259a <_puts_r+0x72>
 8012594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012596:	f000 f995 	bl	80128c4 <__retarget_lock_release_recursive>
 801259a:	4628      	mov	r0, r5
 801259c:	bd70      	pop	{r4, r5, r6, pc}
 801259e:	2b00      	cmp	r3, #0
 80125a0:	da04      	bge.n	80125ac <_puts_r+0x84>
 80125a2:	69a2      	ldr	r2, [r4, #24]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	dc06      	bgt.n	80125b6 <_puts_r+0x8e>
 80125a8:	290a      	cmp	r1, #10
 80125aa:	d004      	beq.n	80125b6 <_puts_r+0x8e>
 80125ac:	6823      	ldr	r3, [r4, #0]
 80125ae:	1c5a      	adds	r2, r3, #1
 80125b0:	6022      	str	r2, [r4, #0]
 80125b2:	7019      	strb	r1, [r3, #0]
 80125b4:	e7cf      	b.n	8012556 <_puts_r+0x2e>
 80125b6:	4622      	mov	r2, r4
 80125b8:	4628      	mov	r0, r5
 80125ba:	f000 f854 	bl	8012666 <__swbuf_r>
 80125be:	3001      	adds	r0, #1
 80125c0:	d1c9      	bne.n	8012556 <_puts_r+0x2e>
 80125c2:	e7df      	b.n	8012584 <_puts_r+0x5c>
 80125c4:	6823      	ldr	r3, [r4, #0]
 80125c6:	250a      	movs	r5, #10
 80125c8:	1c5a      	adds	r2, r3, #1
 80125ca:	6022      	str	r2, [r4, #0]
 80125cc:	701d      	strb	r5, [r3, #0]
 80125ce:	e7db      	b.n	8012588 <_puts_r+0x60>

080125d0 <puts>:
 80125d0:	4b02      	ldr	r3, [pc, #8]	; (80125dc <puts+0xc>)
 80125d2:	4601      	mov	r1, r0
 80125d4:	6818      	ldr	r0, [r3, #0]
 80125d6:	f7ff bfa7 	b.w	8012528 <_puts_r>
 80125da:	bf00      	nop
 80125dc:	2000015c 	.word	0x2000015c

080125e0 <__sread>:
 80125e0:	b510      	push	{r4, lr}
 80125e2:	460c      	mov	r4, r1
 80125e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125e8:	f000 f90c 	bl	8012804 <_read_r>
 80125ec:	2800      	cmp	r0, #0
 80125ee:	bfab      	itete	ge
 80125f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80125f2:	89a3      	ldrhlt	r3, [r4, #12]
 80125f4:	181b      	addge	r3, r3, r0
 80125f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80125fa:	bfac      	ite	ge
 80125fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80125fe:	81a3      	strhlt	r3, [r4, #12]
 8012600:	bd10      	pop	{r4, pc}

08012602 <__swrite>:
 8012602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012606:	461f      	mov	r7, r3
 8012608:	898b      	ldrh	r3, [r1, #12]
 801260a:	05db      	lsls	r3, r3, #23
 801260c:	4605      	mov	r5, r0
 801260e:	460c      	mov	r4, r1
 8012610:	4616      	mov	r6, r2
 8012612:	d505      	bpl.n	8012620 <__swrite+0x1e>
 8012614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012618:	2302      	movs	r3, #2
 801261a:	2200      	movs	r2, #0
 801261c:	f000 f8e0 	bl	80127e0 <_lseek_r>
 8012620:	89a3      	ldrh	r3, [r4, #12]
 8012622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801262a:	81a3      	strh	r3, [r4, #12]
 801262c:	4632      	mov	r2, r6
 801262e:	463b      	mov	r3, r7
 8012630:	4628      	mov	r0, r5
 8012632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012636:	f000 b907 	b.w	8012848 <_write_r>

0801263a <__sseek>:
 801263a:	b510      	push	{r4, lr}
 801263c:	460c      	mov	r4, r1
 801263e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012642:	f000 f8cd 	bl	80127e0 <_lseek_r>
 8012646:	1c43      	adds	r3, r0, #1
 8012648:	89a3      	ldrh	r3, [r4, #12]
 801264a:	bf15      	itete	ne
 801264c:	6560      	strne	r0, [r4, #84]	; 0x54
 801264e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012656:	81a3      	strheq	r3, [r4, #12]
 8012658:	bf18      	it	ne
 801265a:	81a3      	strhne	r3, [r4, #12]
 801265c:	bd10      	pop	{r4, pc}

0801265e <__sclose>:
 801265e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012662:	f000 b8ad 	b.w	80127c0 <_close_r>

08012666 <__swbuf_r>:
 8012666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012668:	460e      	mov	r6, r1
 801266a:	4614      	mov	r4, r2
 801266c:	4605      	mov	r5, r0
 801266e:	b118      	cbz	r0, 8012678 <__swbuf_r+0x12>
 8012670:	6a03      	ldr	r3, [r0, #32]
 8012672:	b90b      	cbnz	r3, 8012678 <__swbuf_r+0x12>
 8012674:	f7ff ff10 	bl	8012498 <__sinit>
 8012678:	69a3      	ldr	r3, [r4, #24]
 801267a:	60a3      	str	r3, [r4, #8]
 801267c:	89a3      	ldrh	r3, [r4, #12]
 801267e:	071a      	lsls	r2, r3, #28
 8012680:	d525      	bpl.n	80126ce <__swbuf_r+0x68>
 8012682:	6923      	ldr	r3, [r4, #16]
 8012684:	b31b      	cbz	r3, 80126ce <__swbuf_r+0x68>
 8012686:	6823      	ldr	r3, [r4, #0]
 8012688:	6922      	ldr	r2, [r4, #16]
 801268a:	1a98      	subs	r0, r3, r2
 801268c:	6963      	ldr	r3, [r4, #20]
 801268e:	b2f6      	uxtb	r6, r6
 8012690:	4283      	cmp	r3, r0
 8012692:	4637      	mov	r7, r6
 8012694:	dc04      	bgt.n	80126a0 <__swbuf_r+0x3a>
 8012696:	4621      	mov	r1, r4
 8012698:	4628      	mov	r0, r5
 801269a:	f000 fcc9 	bl	8013030 <_fflush_r>
 801269e:	b9e0      	cbnz	r0, 80126da <__swbuf_r+0x74>
 80126a0:	68a3      	ldr	r3, [r4, #8]
 80126a2:	3b01      	subs	r3, #1
 80126a4:	60a3      	str	r3, [r4, #8]
 80126a6:	6823      	ldr	r3, [r4, #0]
 80126a8:	1c5a      	adds	r2, r3, #1
 80126aa:	6022      	str	r2, [r4, #0]
 80126ac:	701e      	strb	r6, [r3, #0]
 80126ae:	6962      	ldr	r2, [r4, #20]
 80126b0:	1c43      	adds	r3, r0, #1
 80126b2:	429a      	cmp	r2, r3
 80126b4:	d004      	beq.n	80126c0 <__swbuf_r+0x5a>
 80126b6:	89a3      	ldrh	r3, [r4, #12]
 80126b8:	07db      	lsls	r3, r3, #31
 80126ba:	d506      	bpl.n	80126ca <__swbuf_r+0x64>
 80126bc:	2e0a      	cmp	r6, #10
 80126be:	d104      	bne.n	80126ca <__swbuf_r+0x64>
 80126c0:	4621      	mov	r1, r4
 80126c2:	4628      	mov	r0, r5
 80126c4:	f000 fcb4 	bl	8013030 <_fflush_r>
 80126c8:	b938      	cbnz	r0, 80126da <__swbuf_r+0x74>
 80126ca:	4638      	mov	r0, r7
 80126cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126ce:	4621      	mov	r1, r4
 80126d0:	4628      	mov	r0, r5
 80126d2:	f000 f805 	bl	80126e0 <__swsetup_r>
 80126d6:	2800      	cmp	r0, #0
 80126d8:	d0d5      	beq.n	8012686 <__swbuf_r+0x20>
 80126da:	f04f 37ff 	mov.w	r7, #4294967295
 80126de:	e7f4      	b.n	80126ca <__swbuf_r+0x64>

080126e0 <__swsetup_r>:
 80126e0:	b538      	push	{r3, r4, r5, lr}
 80126e2:	4b2a      	ldr	r3, [pc, #168]	; (801278c <__swsetup_r+0xac>)
 80126e4:	4605      	mov	r5, r0
 80126e6:	6818      	ldr	r0, [r3, #0]
 80126e8:	460c      	mov	r4, r1
 80126ea:	b118      	cbz	r0, 80126f4 <__swsetup_r+0x14>
 80126ec:	6a03      	ldr	r3, [r0, #32]
 80126ee:	b90b      	cbnz	r3, 80126f4 <__swsetup_r+0x14>
 80126f0:	f7ff fed2 	bl	8012498 <__sinit>
 80126f4:	89a3      	ldrh	r3, [r4, #12]
 80126f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126fa:	0718      	lsls	r0, r3, #28
 80126fc:	d422      	bmi.n	8012744 <__swsetup_r+0x64>
 80126fe:	06d9      	lsls	r1, r3, #27
 8012700:	d407      	bmi.n	8012712 <__swsetup_r+0x32>
 8012702:	2309      	movs	r3, #9
 8012704:	602b      	str	r3, [r5, #0]
 8012706:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801270a:	81a3      	strh	r3, [r4, #12]
 801270c:	f04f 30ff 	mov.w	r0, #4294967295
 8012710:	e034      	b.n	801277c <__swsetup_r+0x9c>
 8012712:	0758      	lsls	r0, r3, #29
 8012714:	d512      	bpl.n	801273c <__swsetup_r+0x5c>
 8012716:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012718:	b141      	cbz	r1, 801272c <__swsetup_r+0x4c>
 801271a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801271e:	4299      	cmp	r1, r3
 8012720:	d002      	beq.n	8012728 <__swsetup_r+0x48>
 8012722:	4628      	mov	r0, r5
 8012724:	f000 f8de 	bl	80128e4 <_free_r>
 8012728:	2300      	movs	r3, #0
 801272a:	6363      	str	r3, [r4, #52]	; 0x34
 801272c:	89a3      	ldrh	r3, [r4, #12]
 801272e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012732:	81a3      	strh	r3, [r4, #12]
 8012734:	2300      	movs	r3, #0
 8012736:	6063      	str	r3, [r4, #4]
 8012738:	6923      	ldr	r3, [r4, #16]
 801273a:	6023      	str	r3, [r4, #0]
 801273c:	89a3      	ldrh	r3, [r4, #12]
 801273e:	f043 0308 	orr.w	r3, r3, #8
 8012742:	81a3      	strh	r3, [r4, #12]
 8012744:	6923      	ldr	r3, [r4, #16]
 8012746:	b94b      	cbnz	r3, 801275c <__swsetup_r+0x7c>
 8012748:	89a3      	ldrh	r3, [r4, #12]
 801274a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801274e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012752:	d003      	beq.n	801275c <__swsetup_r+0x7c>
 8012754:	4621      	mov	r1, r4
 8012756:	4628      	mov	r0, r5
 8012758:	f000 fcb8 	bl	80130cc <__smakebuf_r>
 801275c:	89a0      	ldrh	r0, [r4, #12]
 801275e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012762:	f010 0301 	ands.w	r3, r0, #1
 8012766:	d00a      	beq.n	801277e <__swsetup_r+0x9e>
 8012768:	2300      	movs	r3, #0
 801276a:	60a3      	str	r3, [r4, #8]
 801276c:	6963      	ldr	r3, [r4, #20]
 801276e:	425b      	negs	r3, r3
 8012770:	61a3      	str	r3, [r4, #24]
 8012772:	6923      	ldr	r3, [r4, #16]
 8012774:	b943      	cbnz	r3, 8012788 <__swsetup_r+0xa8>
 8012776:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801277a:	d1c4      	bne.n	8012706 <__swsetup_r+0x26>
 801277c:	bd38      	pop	{r3, r4, r5, pc}
 801277e:	0781      	lsls	r1, r0, #30
 8012780:	bf58      	it	pl
 8012782:	6963      	ldrpl	r3, [r4, #20]
 8012784:	60a3      	str	r3, [r4, #8]
 8012786:	e7f4      	b.n	8012772 <__swsetup_r+0x92>
 8012788:	2000      	movs	r0, #0
 801278a:	e7f7      	b.n	801277c <__swsetup_r+0x9c>
 801278c:	2000015c 	.word	0x2000015c

08012790 <memcmp>:
 8012790:	b510      	push	{r4, lr}
 8012792:	3901      	subs	r1, #1
 8012794:	4402      	add	r2, r0
 8012796:	4290      	cmp	r0, r2
 8012798:	d101      	bne.n	801279e <memcmp+0xe>
 801279a:	2000      	movs	r0, #0
 801279c:	e005      	b.n	80127aa <memcmp+0x1a>
 801279e:	7803      	ldrb	r3, [r0, #0]
 80127a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80127a4:	42a3      	cmp	r3, r4
 80127a6:	d001      	beq.n	80127ac <memcmp+0x1c>
 80127a8:	1b18      	subs	r0, r3, r4
 80127aa:	bd10      	pop	{r4, pc}
 80127ac:	3001      	adds	r0, #1
 80127ae:	e7f2      	b.n	8012796 <memcmp+0x6>

080127b0 <memset>:
 80127b0:	4402      	add	r2, r0
 80127b2:	4603      	mov	r3, r0
 80127b4:	4293      	cmp	r3, r2
 80127b6:	d100      	bne.n	80127ba <memset+0xa>
 80127b8:	4770      	bx	lr
 80127ba:	f803 1b01 	strb.w	r1, [r3], #1
 80127be:	e7f9      	b.n	80127b4 <memset+0x4>

080127c0 <_close_r>:
 80127c0:	b538      	push	{r3, r4, r5, lr}
 80127c2:	4d06      	ldr	r5, [pc, #24]	; (80127dc <_close_r+0x1c>)
 80127c4:	2300      	movs	r3, #0
 80127c6:	4604      	mov	r4, r0
 80127c8:	4608      	mov	r0, r1
 80127ca:	602b      	str	r3, [r5, #0]
 80127cc:	f7f0 fe05 	bl	80033da <_close>
 80127d0:	1c43      	adds	r3, r0, #1
 80127d2:	d102      	bne.n	80127da <_close_r+0x1a>
 80127d4:	682b      	ldr	r3, [r5, #0]
 80127d6:	b103      	cbz	r3, 80127da <_close_r+0x1a>
 80127d8:	6023      	str	r3, [r4, #0]
 80127da:	bd38      	pop	{r3, r4, r5, pc}
 80127dc:	2000daf8 	.word	0x2000daf8

080127e0 <_lseek_r>:
 80127e0:	b538      	push	{r3, r4, r5, lr}
 80127e2:	4d07      	ldr	r5, [pc, #28]	; (8012800 <_lseek_r+0x20>)
 80127e4:	4604      	mov	r4, r0
 80127e6:	4608      	mov	r0, r1
 80127e8:	4611      	mov	r1, r2
 80127ea:	2200      	movs	r2, #0
 80127ec:	602a      	str	r2, [r5, #0]
 80127ee:	461a      	mov	r2, r3
 80127f0:	f7f0 fe1a 	bl	8003428 <_lseek>
 80127f4:	1c43      	adds	r3, r0, #1
 80127f6:	d102      	bne.n	80127fe <_lseek_r+0x1e>
 80127f8:	682b      	ldr	r3, [r5, #0]
 80127fa:	b103      	cbz	r3, 80127fe <_lseek_r+0x1e>
 80127fc:	6023      	str	r3, [r4, #0]
 80127fe:	bd38      	pop	{r3, r4, r5, pc}
 8012800:	2000daf8 	.word	0x2000daf8

08012804 <_read_r>:
 8012804:	b538      	push	{r3, r4, r5, lr}
 8012806:	4d07      	ldr	r5, [pc, #28]	; (8012824 <_read_r+0x20>)
 8012808:	4604      	mov	r4, r0
 801280a:	4608      	mov	r0, r1
 801280c:	4611      	mov	r1, r2
 801280e:	2200      	movs	r2, #0
 8012810:	602a      	str	r2, [r5, #0]
 8012812:	461a      	mov	r2, r3
 8012814:	f7f0 fdc4 	bl	80033a0 <_read>
 8012818:	1c43      	adds	r3, r0, #1
 801281a:	d102      	bne.n	8012822 <_read_r+0x1e>
 801281c:	682b      	ldr	r3, [r5, #0]
 801281e:	b103      	cbz	r3, 8012822 <_read_r+0x1e>
 8012820:	6023      	str	r3, [r4, #0]
 8012822:	bd38      	pop	{r3, r4, r5, pc}
 8012824:	2000daf8 	.word	0x2000daf8

08012828 <_sbrk_r>:
 8012828:	b538      	push	{r3, r4, r5, lr}
 801282a:	4d06      	ldr	r5, [pc, #24]	; (8012844 <_sbrk_r+0x1c>)
 801282c:	2300      	movs	r3, #0
 801282e:	4604      	mov	r4, r0
 8012830:	4608      	mov	r0, r1
 8012832:	602b      	str	r3, [r5, #0]
 8012834:	f7f0 fe06 	bl	8003444 <_sbrk>
 8012838:	1c43      	adds	r3, r0, #1
 801283a:	d102      	bne.n	8012842 <_sbrk_r+0x1a>
 801283c:	682b      	ldr	r3, [r5, #0]
 801283e:	b103      	cbz	r3, 8012842 <_sbrk_r+0x1a>
 8012840:	6023      	str	r3, [r4, #0]
 8012842:	bd38      	pop	{r3, r4, r5, pc}
 8012844:	2000daf8 	.word	0x2000daf8

08012848 <_write_r>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	4d07      	ldr	r5, [pc, #28]	; (8012868 <_write_r+0x20>)
 801284c:	4604      	mov	r4, r0
 801284e:	4608      	mov	r0, r1
 8012850:	4611      	mov	r1, r2
 8012852:	2200      	movs	r2, #0
 8012854:	602a      	str	r2, [r5, #0]
 8012856:	461a      	mov	r2, r3
 8012858:	f7ee fac2 	bl	8000de0 <_write>
 801285c:	1c43      	adds	r3, r0, #1
 801285e:	d102      	bne.n	8012866 <_write_r+0x1e>
 8012860:	682b      	ldr	r3, [r5, #0]
 8012862:	b103      	cbz	r3, 8012866 <_write_r+0x1e>
 8012864:	6023      	str	r3, [r4, #0]
 8012866:	bd38      	pop	{r3, r4, r5, pc}
 8012868:	2000daf8 	.word	0x2000daf8

0801286c <__errno>:
 801286c:	4b01      	ldr	r3, [pc, #4]	; (8012874 <__errno+0x8>)
 801286e:	6818      	ldr	r0, [r3, #0]
 8012870:	4770      	bx	lr
 8012872:	bf00      	nop
 8012874:	2000015c 	.word	0x2000015c

08012878 <__libc_init_array>:
 8012878:	b570      	push	{r4, r5, r6, lr}
 801287a:	4d0d      	ldr	r5, [pc, #52]	; (80128b0 <__libc_init_array+0x38>)
 801287c:	4c0d      	ldr	r4, [pc, #52]	; (80128b4 <__libc_init_array+0x3c>)
 801287e:	1b64      	subs	r4, r4, r5
 8012880:	10a4      	asrs	r4, r4, #2
 8012882:	2600      	movs	r6, #0
 8012884:	42a6      	cmp	r6, r4
 8012886:	d109      	bne.n	801289c <__libc_init_array+0x24>
 8012888:	4d0b      	ldr	r5, [pc, #44]	; (80128b8 <__libc_init_array+0x40>)
 801288a:	4c0c      	ldr	r4, [pc, #48]	; (80128bc <__libc_init_array+0x44>)
 801288c:	f000 fe3c 	bl	8013508 <_init>
 8012890:	1b64      	subs	r4, r4, r5
 8012892:	10a4      	asrs	r4, r4, #2
 8012894:	2600      	movs	r6, #0
 8012896:	42a6      	cmp	r6, r4
 8012898:	d105      	bne.n	80128a6 <__libc_init_array+0x2e>
 801289a:	bd70      	pop	{r4, r5, r6, pc}
 801289c:	f855 3b04 	ldr.w	r3, [r5], #4
 80128a0:	4798      	blx	r3
 80128a2:	3601      	adds	r6, #1
 80128a4:	e7ee      	b.n	8012884 <__libc_init_array+0xc>
 80128a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80128aa:	4798      	blx	r3
 80128ac:	3601      	adds	r6, #1
 80128ae:	e7f2      	b.n	8012896 <__libc_init_array+0x1e>
 80128b0:	08027c48 	.word	0x08027c48
 80128b4:	08027c48 	.word	0x08027c48
 80128b8:	08027c48 	.word	0x08027c48
 80128bc:	08027c4c 	.word	0x08027c4c

080128c0 <__retarget_lock_init_recursive>:
 80128c0:	4770      	bx	lr

080128c2 <__retarget_lock_acquire_recursive>:
 80128c2:	4770      	bx	lr

080128c4 <__retarget_lock_release_recursive>:
 80128c4:	4770      	bx	lr

080128c6 <memcpy>:
 80128c6:	440a      	add	r2, r1
 80128c8:	4291      	cmp	r1, r2
 80128ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80128ce:	d100      	bne.n	80128d2 <memcpy+0xc>
 80128d0:	4770      	bx	lr
 80128d2:	b510      	push	{r4, lr}
 80128d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80128d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80128dc:	4291      	cmp	r1, r2
 80128de:	d1f9      	bne.n	80128d4 <memcpy+0xe>
 80128e0:	bd10      	pop	{r4, pc}
	...

080128e4 <_free_r>:
 80128e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80128e6:	2900      	cmp	r1, #0
 80128e8:	d044      	beq.n	8012974 <_free_r+0x90>
 80128ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128ee:	9001      	str	r0, [sp, #4]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	f1a1 0404 	sub.w	r4, r1, #4
 80128f6:	bfb8      	it	lt
 80128f8:	18e4      	addlt	r4, r4, r3
 80128fa:	f7ff fd35 	bl	8012368 <__malloc_lock>
 80128fe:	4a1e      	ldr	r2, [pc, #120]	; (8012978 <_free_r+0x94>)
 8012900:	9801      	ldr	r0, [sp, #4]
 8012902:	6813      	ldr	r3, [r2, #0]
 8012904:	b933      	cbnz	r3, 8012914 <_free_r+0x30>
 8012906:	6063      	str	r3, [r4, #4]
 8012908:	6014      	str	r4, [r2, #0]
 801290a:	b003      	add	sp, #12
 801290c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012910:	f7ff bd30 	b.w	8012374 <__malloc_unlock>
 8012914:	42a3      	cmp	r3, r4
 8012916:	d908      	bls.n	801292a <_free_r+0x46>
 8012918:	6825      	ldr	r5, [r4, #0]
 801291a:	1961      	adds	r1, r4, r5
 801291c:	428b      	cmp	r3, r1
 801291e:	bf01      	itttt	eq
 8012920:	6819      	ldreq	r1, [r3, #0]
 8012922:	685b      	ldreq	r3, [r3, #4]
 8012924:	1949      	addeq	r1, r1, r5
 8012926:	6021      	streq	r1, [r4, #0]
 8012928:	e7ed      	b.n	8012906 <_free_r+0x22>
 801292a:	461a      	mov	r2, r3
 801292c:	685b      	ldr	r3, [r3, #4]
 801292e:	b10b      	cbz	r3, 8012934 <_free_r+0x50>
 8012930:	42a3      	cmp	r3, r4
 8012932:	d9fa      	bls.n	801292a <_free_r+0x46>
 8012934:	6811      	ldr	r1, [r2, #0]
 8012936:	1855      	adds	r5, r2, r1
 8012938:	42a5      	cmp	r5, r4
 801293a:	d10b      	bne.n	8012954 <_free_r+0x70>
 801293c:	6824      	ldr	r4, [r4, #0]
 801293e:	4421      	add	r1, r4
 8012940:	1854      	adds	r4, r2, r1
 8012942:	42a3      	cmp	r3, r4
 8012944:	6011      	str	r1, [r2, #0]
 8012946:	d1e0      	bne.n	801290a <_free_r+0x26>
 8012948:	681c      	ldr	r4, [r3, #0]
 801294a:	685b      	ldr	r3, [r3, #4]
 801294c:	6053      	str	r3, [r2, #4]
 801294e:	440c      	add	r4, r1
 8012950:	6014      	str	r4, [r2, #0]
 8012952:	e7da      	b.n	801290a <_free_r+0x26>
 8012954:	d902      	bls.n	801295c <_free_r+0x78>
 8012956:	230c      	movs	r3, #12
 8012958:	6003      	str	r3, [r0, #0]
 801295a:	e7d6      	b.n	801290a <_free_r+0x26>
 801295c:	6825      	ldr	r5, [r4, #0]
 801295e:	1961      	adds	r1, r4, r5
 8012960:	428b      	cmp	r3, r1
 8012962:	bf04      	itt	eq
 8012964:	6819      	ldreq	r1, [r3, #0]
 8012966:	685b      	ldreq	r3, [r3, #4]
 8012968:	6063      	str	r3, [r4, #4]
 801296a:	bf04      	itt	eq
 801296c:	1949      	addeq	r1, r1, r5
 801296e:	6021      	streq	r1, [r4, #0]
 8012970:	6054      	str	r4, [r2, #4]
 8012972:	e7ca      	b.n	801290a <_free_r+0x26>
 8012974:	b003      	add	sp, #12
 8012976:	bd30      	pop	{r4, r5, pc}
 8012978:	2000d9b4 	.word	0x2000d9b4

0801297c <__sfputc_r>:
 801297c:	6893      	ldr	r3, [r2, #8]
 801297e:	3b01      	subs	r3, #1
 8012980:	2b00      	cmp	r3, #0
 8012982:	b410      	push	{r4}
 8012984:	6093      	str	r3, [r2, #8]
 8012986:	da08      	bge.n	801299a <__sfputc_r+0x1e>
 8012988:	6994      	ldr	r4, [r2, #24]
 801298a:	42a3      	cmp	r3, r4
 801298c:	db01      	blt.n	8012992 <__sfputc_r+0x16>
 801298e:	290a      	cmp	r1, #10
 8012990:	d103      	bne.n	801299a <__sfputc_r+0x1e>
 8012992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012996:	f7ff be66 	b.w	8012666 <__swbuf_r>
 801299a:	6813      	ldr	r3, [r2, #0]
 801299c:	1c58      	adds	r0, r3, #1
 801299e:	6010      	str	r0, [r2, #0]
 80129a0:	7019      	strb	r1, [r3, #0]
 80129a2:	4608      	mov	r0, r1
 80129a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129a8:	4770      	bx	lr

080129aa <__sfputs_r>:
 80129aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ac:	4606      	mov	r6, r0
 80129ae:	460f      	mov	r7, r1
 80129b0:	4614      	mov	r4, r2
 80129b2:	18d5      	adds	r5, r2, r3
 80129b4:	42ac      	cmp	r4, r5
 80129b6:	d101      	bne.n	80129bc <__sfputs_r+0x12>
 80129b8:	2000      	movs	r0, #0
 80129ba:	e007      	b.n	80129cc <__sfputs_r+0x22>
 80129bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129c0:	463a      	mov	r2, r7
 80129c2:	4630      	mov	r0, r6
 80129c4:	f7ff ffda 	bl	801297c <__sfputc_r>
 80129c8:	1c43      	adds	r3, r0, #1
 80129ca:	d1f3      	bne.n	80129b4 <__sfputs_r+0xa>
 80129cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080129d0 <_vfiprintf_r>:
 80129d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d4:	460d      	mov	r5, r1
 80129d6:	b09d      	sub	sp, #116	; 0x74
 80129d8:	4614      	mov	r4, r2
 80129da:	4698      	mov	r8, r3
 80129dc:	4606      	mov	r6, r0
 80129de:	b118      	cbz	r0, 80129e8 <_vfiprintf_r+0x18>
 80129e0:	6a03      	ldr	r3, [r0, #32]
 80129e2:	b90b      	cbnz	r3, 80129e8 <_vfiprintf_r+0x18>
 80129e4:	f7ff fd58 	bl	8012498 <__sinit>
 80129e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80129ea:	07d9      	lsls	r1, r3, #31
 80129ec:	d405      	bmi.n	80129fa <_vfiprintf_r+0x2a>
 80129ee:	89ab      	ldrh	r3, [r5, #12]
 80129f0:	059a      	lsls	r2, r3, #22
 80129f2:	d402      	bmi.n	80129fa <_vfiprintf_r+0x2a>
 80129f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80129f6:	f7ff ff64 	bl	80128c2 <__retarget_lock_acquire_recursive>
 80129fa:	89ab      	ldrh	r3, [r5, #12]
 80129fc:	071b      	lsls	r3, r3, #28
 80129fe:	d501      	bpl.n	8012a04 <_vfiprintf_r+0x34>
 8012a00:	692b      	ldr	r3, [r5, #16]
 8012a02:	b99b      	cbnz	r3, 8012a2c <_vfiprintf_r+0x5c>
 8012a04:	4629      	mov	r1, r5
 8012a06:	4630      	mov	r0, r6
 8012a08:	f7ff fe6a 	bl	80126e0 <__swsetup_r>
 8012a0c:	b170      	cbz	r0, 8012a2c <_vfiprintf_r+0x5c>
 8012a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a10:	07dc      	lsls	r4, r3, #31
 8012a12:	d504      	bpl.n	8012a1e <_vfiprintf_r+0x4e>
 8012a14:	f04f 30ff 	mov.w	r0, #4294967295
 8012a18:	b01d      	add	sp, #116	; 0x74
 8012a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a1e:	89ab      	ldrh	r3, [r5, #12]
 8012a20:	0598      	lsls	r0, r3, #22
 8012a22:	d4f7      	bmi.n	8012a14 <_vfiprintf_r+0x44>
 8012a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a26:	f7ff ff4d 	bl	80128c4 <__retarget_lock_release_recursive>
 8012a2a:	e7f3      	b.n	8012a14 <_vfiprintf_r+0x44>
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8012a30:	2320      	movs	r3, #32
 8012a32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a36:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a3a:	2330      	movs	r3, #48	; 0x30
 8012a3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012bf0 <_vfiprintf_r+0x220>
 8012a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a44:	f04f 0901 	mov.w	r9, #1
 8012a48:	4623      	mov	r3, r4
 8012a4a:	469a      	mov	sl, r3
 8012a4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a50:	b10a      	cbz	r2, 8012a56 <_vfiprintf_r+0x86>
 8012a52:	2a25      	cmp	r2, #37	; 0x25
 8012a54:	d1f9      	bne.n	8012a4a <_vfiprintf_r+0x7a>
 8012a56:	ebba 0b04 	subs.w	fp, sl, r4
 8012a5a:	d00b      	beq.n	8012a74 <_vfiprintf_r+0xa4>
 8012a5c:	465b      	mov	r3, fp
 8012a5e:	4622      	mov	r2, r4
 8012a60:	4629      	mov	r1, r5
 8012a62:	4630      	mov	r0, r6
 8012a64:	f7ff ffa1 	bl	80129aa <__sfputs_r>
 8012a68:	3001      	adds	r0, #1
 8012a6a:	f000 80a9 	beq.w	8012bc0 <_vfiprintf_r+0x1f0>
 8012a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a70:	445a      	add	r2, fp
 8012a72:	9209      	str	r2, [sp, #36]	; 0x24
 8012a74:	f89a 3000 	ldrb.w	r3, [sl]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f000 80a1 	beq.w	8012bc0 <_vfiprintf_r+0x1f0>
 8012a7e:	2300      	movs	r3, #0
 8012a80:	f04f 32ff 	mov.w	r2, #4294967295
 8012a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a88:	f10a 0a01 	add.w	sl, sl, #1
 8012a8c:	9304      	str	r3, [sp, #16]
 8012a8e:	9307      	str	r3, [sp, #28]
 8012a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a94:	931a      	str	r3, [sp, #104]	; 0x68
 8012a96:	4654      	mov	r4, sl
 8012a98:	2205      	movs	r2, #5
 8012a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a9e:	4854      	ldr	r0, [pc, #336]	; (8012bf0 <_vfiprintf_r+0x220>)
 8012aa0:	f7ed fb9e 	bl	80001e0 <memchr>
 8012aa4:	9a04      	ldr	r2, [sp, #16]
 8012aa6:	b9d8      	cbnz	r0, 8012ae0 <_vfiprintf_r+0x110>
 8012aa8:	06d1      	lsls	r1, r2, #27
 8012aaa:	bf44      	itt	mi
 8012aac:	2320      	movmi	r3, #32
 8012aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ab2:	0713      	lsls	r3, r2, #28
 8012ab4:	bf44      	itt	mi
 8012ab6:	232b      	movmi	r3, #43	; 0x2b
 8012ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012abc:	f89a 3000 	ldrb.w	r3, [sl]
 8012ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8012ac2:	d015      	beq.n	8012af0 <_vfiprintf_r+0x120>
 8012ac4:	9a07      	ldr	r2, [sp, #28]
 8012ac6:	4654      	mov	r4, sl
 8012ac8:	2000      	movs	r0, #0
 8012aca:	f04f 0c0a 	mov.w	ip, #10
 8012ace:	4621      	mov	r1, r4
 8012ad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ad4:	3b30      	subs	r3, #48	; 0x30
 8012ad6:	2b09      	cmp	r3, #9
 8012ad8:	d94d      	bls.n	8012b76 <_vfiprintf_r+0x1a6>
 8012ada:	b1b0      	cbz	r0, 8012b0a <_vfiprintf_r+0x13a>
 8012adc:	9207      	str	r2, [sp, #28]
 8012ade:	e014      	b.n	8012b0a <_vfiprintf_r+0x13a>
 8012ae0:	eba0 0308 	sub.w	r3, r0, r8
 8012ae4:	fa09 f303 	lsl.w	r3, r9, r3
 8012ae8:	4313      	orrs	r3, r2
 8012aea:	9304      	str	r3, [sp, #16]
 8012aec:	46a2      	mov	sl, r4
 8012aee:	e7d2      	b.n	8012a96 <_vfiprintf_r+0xc6>
 8012af0:	9b03      	ldr	r3, [sp, #12]
 8012af2:	1d19      	adds	r1, r3, #4
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	9103      	str	r1, [sp, #12]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	bfbb      	ittet	lt
 8012afc:	425b      	neglt	r3, r3
 8012afe:	f042 0202 	orrlt.w	r2, r2, #2
 8012b02:	9307      	strge	r3, [sp, #28]
 8012b04:	9307      	strlt	r3, [sp, #28]
 8012b06:	bfb8      	it	lt
 8012b08:	9204      	strlt	r2, [sp, #16]
 8012b0a:	7823      	ldrb	r3, [r4, #0]
 8012b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8012b0e:	d10c      	bne.n	8012b2a <_vfiprintf_r+0x15a>
 8012b10:	7863      	ldrb	r3, [r4, #1]
 8012b12:	2b2a      	cmp	r3, #42	; 0x2a
 8012b14:	d134      	bne.n	8012b80 <_vfiprintf_r+0x1b0>
 8012b16:	9b03      	ldr	r3, [sp, #12]
 8012b18:	1d1a      	adds	r2, r3, #4
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	9203      	str	r2, [sp, #12]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	bfb8      	it	lt
 8012b22:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b26:	3402      	adds	r4, #2
 8012b28:	9305      	str	r3, [sp, #20]
 8012b2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012c00 <_vfiprintf_r+0x230>
 8012b2e:	7821      	ldrb	r1, [r4, #0]
 8012b30:	2203      	movs	r2, #3
 8012b32:	4650      	mov	r0, sl
 8012b34:	f7ed fb54 	bl	80001e0 <memchr>
 8012b38:	b138      	cbz	r0, 8012b4a <_vfiprintf_r+0x17a>
 8012b3a:	9b04      	ldr	r3, [sp, #16]
 8012b3c:	eba0 000a 	sub.w	r0, r0, sl
 8012b40:	2240      	movs	r2, #64	; 0x40
 8012b42:	4082      	lsls	r2, r0
 8012b44:	4313      	orrs	r3, r2
 8012b46:	3401      	adds	r4, #1
 8012b48:	9304      	str	r3, [sp, #16]
 8012b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b4e:	4829      	ldr	r0, [pc, #164]	; (8012bf4 <_vfiprintf_r+0x224>)
 8012b50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b54:	2206      	movs	r2, #6
 8012b56:	f7ed fb43 	bl	80001e0 <memchr>
 8012b5a:	2800      	cmp	r0, #0
 8012b5c:	d03f      	beq.n	8012bde <_vfiprintf_r+0x20e>
 8012b5e:	4b26      	ldr	r3, [pc, #152]	; (8012bf8 <_vfiprintf_r+0x228>)
 8012b60:	bb1b      	cbnz	r3, 8012baa <_vfiprintf_r+0x1da>
 8012b62:	9b03      	ldr	r3, [sp, #12]
 8012b64:	3307      	adds	r3, #7
 8012b66:	f023 0307 	bic.w	r3, r3, #7
 8012b6a:	3308      	adds	r3, #8
 8012b6c:	9303      	str	r3, [sp, #12]
 8012b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b70:	443b      	add	r3, r7
 8012b72:	9309      	str	r3, [sp, #36]	; 0x24
 8012b74:	e768      	b.n	8012a48 <_vfiprintf_r+0x78>
 8012b76:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b7a:	460c      	mov	r4, r1
 8012b7c:	2001      	movs	r0, #1
 8012b7e:	e7a6      	b.n	8012ace <_vfiprintf_r+0xfe>
 8012b80:	2300      	movs	r3, #0
 8012b82:	3401      	adds	r4, #1
 8012b84:	9305      	str	r3, [sp, #20]
 8012b86:	4619      	mov	r1, r3
 8012b88:	f04f 0c0a 	mov.w	ip, #10
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b92:	3a30      	subs	r2, #48	; 0x30
 8012b94:	2a09      	cmp	r2, #9
 8012b96:	d903      	bls.n	8012ba0 <_vfiprintf_r+0x1d0>
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d0c6      	beq.n	8012b2a <_vfiprintf_r+0x15a>
 8012b9c:	9105      	str	r1, [sp, #20]
 8012b9e:	e7c4      	b.n	8012b2a <_vfiprintf_r+0x15a>
 8012ba0:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ba4:	4604      	mov	r4, r0
 8012ba6:	2301      	movs	r3, #1
 8012ba8:	e7f0      	b.n	8012b8c <_vfiprintf_r+0x1bc>
 8012baa:	ab03      	add	r3, sp, #12
 8012bac:	9300      	str	r3, [sp, #0]
 8012bae:	462a      	mov	r2, r5
 8012bb0:	4b12      	ldr	r3, [pc, #72]	; (8012bfc <_vfiprintf_r+0x22c>)
 8012bb2:	a904      	add	r1, sp, #16
 8012bb4:	4630      	mov	r0, r6
 8012bb6:	f3af 8000 	nop.w
 8012bba:	4607      	mov	r7, r0
 8012bbc:	1c78      	adds	r0, r7, #1
 8012bbe:	d1d6      	bne.n	8012b6e <_vfiprintf_r+0x19e>
 8012bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bc2:	07d9      	lsls	r1, r3, #31
 8012bc4:	d405      	bmi.n	8012bd2 <_vfiprintf_r+0x202>
 8012bc6:	89ab      	ldrh	r3, [r5, #12]
 8012bc8:	059a      	lsls	r2, r3, #22
 8012bca:	d402      	bmi.n	8012bd2 <_vfiprintf_r+0x202>
 8012bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012bce:	f7ff fe79 	bl	80128c4 <__retarget_lock_release_recursive>
 8012bd2:	89ab      	ldrh	r3, [r5, #12]
 8012bd4:	065b      	lsls	r3, r3, #25
 8012bd6:	f53f af1d 	bmi.w	8012a14 <_vfiprintf_r+0x44>
 8012bda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012bdc:	e71c      	b.n	8012a18 <_vfiprintf_r+0x48>
 8012bde:	ab03      	add	r3, sp, #12
 8012be0:	9300      	str	r3, [sp, #0]
 8012be2:	462a      	mov	r2, r5
 8012be4:	4b05      	ldr	r3, [pc, #20]	; (8012bfc <_vfiprintf_r+0x22c>)
 8012be6:	a904      	add	r1, sp, #16
 8012be8:	4630      	mov	r0, r6
 8012bea:	f000 f879 	bl	8012ce0 <_printf_i>
 8012bee:	e7e4      	b.n	8012bba <_vfiprintf_r+0x1ea>
 8012bf0:	08027bd4 	.word	0x08027bd4
 8012bf4:	08027bde 	.word	0x08027bde
 8012bf8:	00000000 	.word	0x00000000
 8012bfc:	080129ab 	.word	0x080129ab
 8012c00:	08027bda 	.word	0x08027bda

08012c04 <_printf_common>:
 8012c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c08:	4616      	mov	r6, r2
 8012c0a:	4699      	mov	r9, r3
 8012c0c:	688a      	ldr	r2, [r1, #8]
 8012c0e:	690b      	ldr	r3, [r1, #16]
 8012c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012c14:	4293      	cmp	r3, r2
 8012c16:	bfb8      	it	lt
 8012c18:	4613      	movlt	r3, r2
 8012c1a:	6033      	str	r3, [r6, #0]
 8012c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012c20:	4607      	mov	r7, r0
 8012c22:	460c      	mov	r4, r1
 8012c24:	b10a      	cbz	r2, 8012c2a <_printf_common+0x26>
 8012c26:	3301      	adds	r3, #1
 8012c28:	6033      	str	r3, [r6, #0]
 8012c2a:	6823      	ldr	r3, [r4, #0]
 8012c2c:	0699      	lsls	r1, r3, #26
 8012c2e:	bf42      	ittt	mi
 8012c30:	6833      	ldrmi	r3, [r6, #0]
 8012c32:	3302      	addmi	r3, #2
 8012c34:	6033      	strmi	r3, [r6, #0]
 8012c36:	6825      	ldr	r5, [r4, #0]
 8012c38:	f015 0506 	ands.w	r5, r5, #6
 8012c3c:	d106      	bne.n	8012c4c <_printf_common+0x48>
 8012c3e:	f104 0a19 	add.w	sl, r4, #25
 8012c42:	68e3      	ldr	r3, [r4, #12]
 8012c44:	6832      	ldr	r2, [r6, #0]
 8012c46:	1a9b      	subs	r3, r3, r2
 8012c48:	42ab      	cmp	r3, r5
 8012c4a:	dc26      	bgt.n	8012c9a <_printf_common+0x96>
 8012c4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012c50:	1e13      	subs	r3, r2, #0
 8012c52:	6822      	ldr	r2, [r4, #0]
 8012c54:	bf18      	it	ne
 8012c56:	2301      	movne	r3, #1
 8012c58:	0692      	lsls	r2, r2, #26
 8012c5a:	d42b      	bmi.n	8012cb4 <_printf_common+0xb0>
 8012c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012c60:	4649      	mov	r1, r9
 8012c62:	4638      	mov	r0, r7
 8012c64:	47c0      	blx	r8
 8012c66:	3001      	adds	r0, #1
 8012c68:	d01e      	beq.n	8012ca8 <_printf_common+0xa4>
 8012c6a:	6823      	ldr	r3, [r4, #0]
 8012c6c:	6922      	ldr	r2, [r4, #16]
 8012c6e:	f003 0306 	and.w	r3, r3, #6
 8012c72:	2b04      	cmp	r3, #4
 8012c74:	bf02      	ittt	eq
 8012c76:	68e5      	ldreq	r5, [r4, #12]
 8012c78:	6833      	ldreq	r3, [r6, #0]
 8012c7a:	1aed      	subeq	r5, r5, r3
 8012c7c:	68a3      	ldr	r3, [r4, #8]
 8012c7e:	bf0c      	ite	eq
 8012c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c84:	2500      	movne	r5, #0
 8012c86:	4293      	cmp	r3, r2
 8012c88:	bfc4      	itt	gt
 8012c8a:	1a9b      	subgt	r3, r3, r2
 8012c8c:	18ed      	addgt	r5, r5, r3
 8012c8e:	2600      	movs	r6, #0
 8012c90:	341a      	adds	r4, #26
 8012c92:	42b5      	cmp	r5, r6
 8012c94:	d11a      	bne.n	8012ccc <_printf_common+0xc8>
 8012c96:	2000      	movs	r0, #0
 8012c98:	e008      	b.n	8012cac <_printf_common+0xa8>
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	4652      	mov	r2, sl
 8012c9e:	4649      	mov	r1, r9
 8012ca0:	4638      	mov	r0, r7
 8012ca2:	47c0      	blx	r8
 8012ca4:	3001      	adds	r0, #1
 8012ca6:	d103      	bne.n	8012cb0 <_printf_common+0xac>
 8012ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8012cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cb0:	3501      	adds	r5, #1
 8012cb2:	e7c6      	b.n	8012c42 <_printf_common+0x3e>
 8012cb4:	18e1      	adds	r1, r4, r3
 8012cb6:	1c5a      	adds	r2, r3, #1
 8012cb8:	2030      	movs	r0, #48	; 0x30
 8012cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012cbe:	4422      	add	r2, r4
 8012cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012cc8:	3302      	adds	r3, #2
 8012cca:	e7c7      	b.n	8012c5c <_printf_common+0x58>
 8012ccc:	2301      	movs	r3, #1
 8012cce:	4622      	mov	r2, r4
 8012cd0:	4649      	mov	r1, r9
 8012cd2:	4638      	mov	r0, r7
 8012cd4:	47c0      	blx	r8
 8012cd6:	3001      	adds	r0, #1
 8012cd8:	d0e6      	beq.n	8012ca8 <_printf_common+0xa4>
 8012cda:	3601      	adds	r6, #1
 8012cdc:	e7d9      	b.n	8012c92 <_printf_common+0x8e>
	...

08012ce0 <_printf_i>:
 8012ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ce4:	7e0f      	ldrb	r7, [r1, #24]
 8012ce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012ce8:	2f78      	cmp	r7, #120	; 0x78
 8012cea:	4691      	mov	r9, r2
 8012cec:	4680      	mov	r8, r0
 8012cee:	460c      	mov	r4, r1
 8012cf0:	469a      	mov	sl, r3
 8012cf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012cf6:	d807      	bhi.n	8012d08 <_printf_i+0x28>
 8012cf8:	2f62      	cmp	r7, #98	; 0x62
 8012cfa:	d80a      	bhi.n	8012d12 <_printf_i+0x32>
 8012cfc:	2f00      	cmp	r7, #0
 8012cfe:	f000 80d4 	beq.w	8012eaa <_printf_i+0x1ca>
 8012d02:	2f58      	cmp	r7, #88	; 0x58
 8012d04:	f000 80c0 	beq.w	8012e88 <_printf_i+0x1a8>
 8012d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012d10:	e03a      	b.n	8012d88 <_printf_i+0xa8>
 8012d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012d16:	2b15      	cmp	r3, #21
 8012d18:	d8f6      	bhi.n	8012d08 <_printf_i+0x28>
 8012d1a:	a101      	add	r1, pc, #4	; (adr r1, 8012d20 <_printf_i+0x40>)
 8012d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012d20:	08012d79 	.word	0x08012d79
 8012d24:	08012d8d 	.word	0x08012d8d
 8012d28:	08012d09 	.word	0x08012d09
 8012d2c:	08012d09 	.word	0x08012d09
 8012d30:	08012d09 	.word	0x08012d09
 8012d34:	08012d09 	.word	0x08012d09
 8012d38:	08012d8d 	.word	0x08012d8d
 8012d3c:	08012d09 	.word	0x08012d09
 8012d40:	08012d09 	.word	0x08012d09
 8012d44:	08012d09 	.word	0x08012d09
 8012d48:	08012d09 	.word	0x08012d09
 8012d4c:	08012e91 	.word	0x08012e91
 8012d50:	08012db9 	.word	0x08012db9
 8012d54:	08012e4b 	.word	0x08012e4b
 8012d58:	08012d09 	.word	0x08012d09
 8012d5c:	08012d09 	.word	0x08012d09
 8012d60:	08012eb3 	.word	0x08012eb3
 8012d64:	08012d09 	.word	0x08012d09
 8012d68:	08012db9 	.word	0x08012db9
 8012d6c:	08012d09 	.word	0x08012d09
 8012d70:	08012d09 	.word	0x08012d09
 8012d74:	08012e53 	.word	0x08012e53
 8012d78:	682b      	ldr	r3, [r5, #0]
 8012d7a:	1d1a      	adds	r2, r3, #4
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	602a      	str	r2, [r5, #0]
 8012d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012d88:	2301      	movs	r3, #1
 8012d8a:	e09f      	b.n	8012ecc <_printf_i+0x1ec>
 8012d8c:	6820      	ldr	r0, [r4, #0]
 8012d8e:	682b      	ldr	r3, [r5, #0]
 8012d90:	0607      	lsls	r7, r0, #24
 8012d92:	f103 0104 	add.w	r1, r3, #4
 8012d96:	6029      	str	r1, [r5, #0]
 8012d98:	d501      	bpl.n	8012d9e <_printf_i+0xbe>
 8012d9a:	681e      	ldr	r6, [r3, #0]
 8012d9c:	e003      	b.n	8012da6 <_printf_i+0xc6>
 8012d9e:	0646      	lsls	r6, r0, #25
 8012da0:	d5fb      	bpl.n	8012d9a <_printf_i+0xba>
 8012da2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012da6:	2e00      	cmp	r6, #0
 8012da8:	da03      	bge.n	8012db2 <_printf_i+0xd2>
 8012daa:	232d      	movs	r3, #45	; 0x2d
 8012dac:	4276      	negs	r6, r6
 8012dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012db2:	485a      	ldr	r0, [pc, #360]	; (8012f1c <_printf_i+0x23c>)
 8012db4:	230a      	movs	r3, #10
 8012db6:	e012      	b.n	8012dde <_printf_i+0xfe>
 8012db8:	682b      	ldr	r3, [r5, #0]
 8012dba:	6820      	ldr	r0, [r4, #0]
 8012dbc:	1d19      	adds	r1, r3, #4
 8012dbe:	6029      	str	r1, [r5, #0]
 8012dc0:	0605      	lsls	r5, r0, #24
 8012dc2:	d501      	bpl.n	8012dc8 <_printf_i+0xe8>
 8012dc4:	681e      	ldr	r6, [r3, #0]
 8012dc6:	e002      	b.n	8012dce <_printf_i+0xee>
 8012dc8:	0641      	lsls	r1, r0, #25
 8012dca:	d5fb      	bpl.n	8012dc4 <_printf_i+0xe4>
 8012dcc:	881e      	ldrh	r6, [r3, #0]
 8012dce:	4853      	ldr	r0, [pc, #332]	; (8012f1c <_printf_i+0x23c>)
 8012dd0:	2f6f      	cmp	r7, #111	; 0x6f
 8012dd2:	bf0c      	ite	eq
 8012dd4:	2308      	moveq	r3, #8
 8012dd6:	230a      	movne	r3, #10
 8012dd8:	2100      	movs	r1, #0
 8012dda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012dde:	6865      	ldr	r5, [r4, #4]
 8012de0:	60a5      	str	r5, [r4, #8]
 8012de2:	2d00      	cmp	r5, #0
 8012de4:	bfa2      	ittt	ge
 8012de6:	6821      	ldrge	r1, [r4, #0]
 8012de8:	f021 0104 	bicge.w	r1, r1, #4
 8012dec:	6021      	strge	r1, [r4, #0]
 8012dee:	b90e      	cbnz	r6, 8012df4 <_printf_i+0x114>
 8012df0:	2d00      	cmp	r5, #0
 8012df2:	d04b      	beq.n	8012e8c <_printf_i+0x1ac>
 8012df4:	4615      	mov	r5, r2
 8012df6:	fbb6 f1f3 	udiv	r1, r6, r3
 8012dfa:	fb03 6711 	mls	r7, r3, r1, r6
 8012dfe:	5dc7      	ldrb	r7, [r0, r7]
 8012e00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012e04:	4637      	mov	r7, r6
 8012e06:	42bb      	cmp	r3, r7
 8012e08:	460e      	mov	r6, r1
 8012e0a:	d9f4      	bls.n	8012df6 <_printf_i+0x116>
 8012e0c:	2b08      	cmp	r3, #8
 8012e0e:	d10b      	bne.n	8012e28 <_printf_i+0x148>
 8012e10:	6823      	ldr	r3, [r4, #0]
 8012e12:	07de      	lsls	r6, r3, #31
 8012e14:	d508      	bpl.n	8012e28 <_printf_i+0x148>
 8012e16:	6923      	ldr	r3, [r4, #16]
 8012e18:	6861      	ldr	r1, [r4, #4]
 8012e1a:	4299      	cmp	r1, r3
 8012e1c:	bfde      	ittt	le
 8012e1e:	2330      	movle	r3, #48	; 0x30
 8012e20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012e24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012e28:	1b52      	subs	r2, r2, r5
 8012e2a:	6122      	str	r2, [r4, #16]
 8012e2c:	f8cd a000 	str.w	sl, [sp]
 8012e30:	464b      	mov	r3, r9
 8012e32:	aa03      	add	r2, sp, #12
 8012e34:	4621      	mov	r1, r4
 8012e36:	4640      	mov	r0, r8
 8012e38:	f7ff fee4 	bl	8012c04 <_printf_common>
 8012e3c:	3001      	adds	r0, #1
 8012e3e:	d14a      	bne.n	8012ed6 <_printf_i+0x1f6>
 8012e40:	f04f 30ff 	mov.w	r0, #4294967295
 8012e44:	b004      	add	sp, #16
 8012e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e4a:	6823      	ldr	r3, [r4, #0]
 8012e4c:	f043 0320 	orr.w	r3, r3, #32
 8012e50:	6023      	str	r3, [r4, #0]
 8012e52:	4833      	ldr	r0, [pc, #204]	; (8012f20 <_printf_i+0x240>)
 8012e54:	2778      	movs	r7, #120	; 0x78
 8012e56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012e5a:	6823      	ldr	r3, [r4, #0]
 8012e5c:	6829      	ldr	r1, [r5, #0]
 8012e5e:	061f      	lsls	r7, r3, #24
 8012e60:	f851 6b04 	ldr.w	r6, [r1], #4
 8012e64:	d402      	bmi.n	8012e6c <_printf_i+0x18c>
 8012e66:	065f      	lsls	r7, r3, #25
 8012e68:	bf48      	it	mi
 8012e6a:	b2b6      	uxthmi	r6, r6
 8012e6c:	07df      	lsls	r7, r3, #31
 8012e6e:	bf48      	it	mi
 8012e70:	f043 0320 	orrmi.w	r3, r3, #32
 8012e74:	6029      	str	r1, [r5, #0]
 8012e76:	bf48      	it	mi
 8012e78:	6023      	strmi	r3, [r4, #0]
 8012e7a:	b91e      	cbnz	r6, 8012e84 <_printf_i+0x1a4>
 8012e7c:	6823      	ldr	r3, [r4, #0]
 8012e7e:	f023 0320 	bic.w	r3, r3, #32
 8012e82:	6023      	str	r3, [r4, #0]
 8012e84:	2310      	movs	r3, #16
 8012e86:	e7a7      	b.n	8012dd8 <_printf_i+0xf8>
 8012e88:	4824      	ldr	r0, [pc, #144]	; (8012f1c <_printf_i+0x23c>)
 8012e8a:	e7e4      	b.n	8012e56 <_printf_i+0x176>
 8012e8c:	4615      	mov	r5, r2
 8012e8e:	e7bd      	b.n	8012e0c <_printf_i+0x12c>
 8012e90:	682b      	ldr	r3, [r5, #0]
 8012e92:	6826      	ldr	r6, [r4, #0]
 8012e94:	6961      	ldr	r1, [r4, #20]
 8012e96:	1d18      	adds	r0, r3, #4
 8012e98:	6028      	str	r0, [r5, #0]
 8012e9a:	0635      	lsls	r5, r6, #24
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	d501      	bpl.n	8012ea4 <_printf_i+0x1c4>
 8012ea0:	6019      	str	r1, [r3, #0]
 8012ea2:	e002      	b.n	8012eaa <_printf_i+0x1ca>
 8012ea4:	0670      	lsls	r0, r6, #25
 8012ea6:	d5fb      	bpl.n	8012ea0 <_printf_i+0x1c0>
 8012ea8:	8019      	strh	r1, [r3, #0]
 8012eaa:	2300      	movs	r3, #0
 8012eac:	6123      	str	r3, [r4, #16]
 8012eae:	4615      	mov	r5, r2
 8012eb0:	e7bc      	b.n	8012e2c <_printf_i+0x14c>
 8012eb2:	682b      	ldr	r3, [r5, #0]
 8012eb4:	1d1a      	adds	r2, r3, #4
 8012eb6:	602a      	str	r2, [r5, #0]
 8012eb8:	681d      	ldr	r5, [r3, #0]
 8012eba:	6862      	ldr	r2, [r4, #4]
 8012ebc:	2100      	movs	r1, #0
 8012ebe:	4628      	mov	r0, r5
 8012ec0:	f7ed f98e 	bl	80001e0 <memchr>
 8012ec4:	b108      	cbz	r0, 8012eca <_printf_i+0x1ea>
 8012ec6:	1b40      	subs	r0, r0, r5
 8012ec8:	6060      	str	r0, [r4, #4]
 8012eca:	6863      	ldr	r3, [r4, #4]
 8012ecc:	6123      	str	r3, [r4, #16]
 8012ece:	2300      	movs	r3, #0
 8012ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ed4:	e7aa      	b.n	8012e2c <_printf_i+0x14c>
 8012ed6:	6923      	ldr	r3, [r4, #16]
 8012ed8:	462a      	mov	r2, r5
 8012eda:	4649      	mov	r1, r9
 8012edc:	4640      	mov	r0, r8
 8012ede:	47d0      	blx	sl
 8012ee0:	3001      	adds	r0, #1
 8012ee2:	d0ad      	beq.n	8012e40 <_printf_i+0x160>
 8012ee4:	6823      	ldr	r3, [r4, #0]
 8012ee6:	079b      	lsls	r3, r3, #30
 8012ee8:	d413      	bmi.n	8012f12 <_printf_i+0x232>
 8012eea:	68e0      	ldr	r0, [r4, #12]
 8012eec:	9b03      	ldr	r3, [sp, #12]
 8012eee:	4298      	cmp	r0, r3
 8012ef0:	bfb8      	it	lt
 8012ef2:	4618      	movlt	r0, r3
 8012ef4:	e7a6      	b.n	8012e44 <_printf_i+0x164>
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	4632      	mov	r2, r6
 8012efa:	4649      	mov	r1, r9
 8012efc:	4640      	mov	r0, r8
 8012efe:	47d0      	blx	sl
 8012f00:	3001      	adds	r0, #1
 8012f02:	d09d      	beq.n	8012e40 <_printf_i+0x160>
 8012f04:	3501      	adds	r5, #1
 8012f06:	68e3      	ldr	r3, [r4, #12]
 8012f08:	9903      	ldr	r1, [sp, #12]
 8012f0a:	1a5b      	subs	r3, r3, r1
 8012f0c:	42ab      	cmp	r3, r5
 8012f0e:	dcf2      	bgt.n	8012ef6 <_printf_i+0x216>
 8012f10:	e7eb      	b.n	8012eea <_printf_i+0x20a>
 8012f12:	2500      	movs	r5, #0
 8012f14:	f104 0619 	add.w	r6, r4, #25
 8012f18:	e7f5      	b.n	8012f06 <_printf_i+0x226>
 8012f1a:	bf00      	nop
 8012f1c:	08027be5 	.word	0x08027be5
 8012f20:	08027bf6 	.word	0x08027bf6

08012f24 <__sflush_r>:
 8012f24:	898a      	ldrh	r2, [r1, #12]
 8012f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f2a:	4605      	mov	r5, r0
 8012f2c:	0710      	lsls	r0, r2, #28
 8012f2e:	460c      	mov	r4, r1
 8012f30:	d458      	bmi.n	8012fe4 <__sflush_r+0xc0>
 8012f32:	684b      	ldr	r3, [r1, #4]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	dc05      	bgt.n	8012f44 <__sflush_r+0x20>
 8012f38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	dc02      	bgt.n	8012f44 <__sflush_r+0x20>
 8012f3e:	2000      	movs	r0, #0
 8012f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f46:	2e00      	cmp	r6, #0
 8012f48:	d0f9      	beq.n	8012f3e <__sflush_r+0x1a>
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012f50:	682f      	ldr	r7, [r5, #0]
 8012f52:	6a21      	ldr	r1, [r4, #32]
 8012f54:	602b      	str	r3, [r5, #0]
 8012f56:	d032      	beq.n	8012fbe <__sflush_r+0x9a>
 8012f58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012f5a:	89a3      	ldrh	r3, [r4, #12]
 8012f5c:	075a      	lsls	r2, r3, #29
 8012f5e:	d505      	bpl.n	8012f6c <__sflush_r+0x48>
 8012f60:	6863      	ldr	r3, [r4, #4]
 8012f62:	1ac0      	subs	r0, r0, r3
 8012f64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f66:	b10b      	cbz	r3, 8012f6c <__sflush_r+0x48>
 8012f68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f6a:	1ac0      	subs	r0, r0, r3
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	4602      	mov	r2, r0
 8012f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f72:	6a21      	ldr	r1, [r4, #32]
 8012f74:	4628      	mov	r0, r5
 8012f76:	47b0      	blx	r6
 8012f78:	1c43      	adds	r3, r0, #1
 8012f7a:	89a3      	ldrh	r3, [r4, #12]
 8012f7c:	d106      	bne.n	8012f8c <__sflush_r+0x68>
 8012f7e:	6829      	ldr	r1, [r5, #0]
 8012f80:	291d      	cmp	r1, #29
 8012f82:	d82b      	bhi.n	8012fdc <__sflush_r+0xb8>
 8012f84:	4a29      	ldr	r2, [pc, #164]	; (801302c <__sflush_r+0x108>)
 8012f86:	410a      	asrs	r2, r1
 8012f88:	07d6      	lsls	r6, r2, #31
 8012f8a:	d427      	bmi.n	8012fdc <__sflush_r+0xb8>
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	6062      	str	r2, [r4, #4]
 8012f90:	04d9      	lsls	r1, r3, #19
 8012f92:	6922      	ldr	r2, [r4, #16]
 8012f94:	6022      	str	r2, [r4, #0]
 8012f96:	d504      	bpl.n	8012fa2 <__sflush_r+0x7e>
 8012f98:	1c42      	adds	r2, r0, #1
 8012f9a:	d101      	bne.n	8012fa0 <__sflush_r+0x7c>
 8012f9c:	682b      	ldr	r3, [r5, #0]
 8012f9e:	b903      	cbnz	r3, 8012fa2 <__sflush_r+0x7e>
 8012fa0:	6560      	str	r0, [r4, #84]	; 0x54
 8012fa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012fa4:	602f      	str	r7, [r5, #0]
 8012fa6:	2900      	cmp	r1, #0
 8012fa8:	d0c9      	beq.n	8012f3e <__sflush_r+0x1a>
 8012faa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012fae:	4299      	cmp	r1, r3
 8012fb0:	d002      	beq.n	8012fb8 <__sflush_r+0x94>
 8012fb2:	4628      	mov	r0, r5
 8012fb4:	f7ff fc96 	bl	80128e4 <_free_r>
 8012fb8:	2000      	movs	r0, #0
 8012fba:	6360      	str	r0, [r4, #52]	; 0x34
 8012fbc:	e7c0      	b.n	8012f40 <__sflush_r+0x1c>
 8012fbe:	2301      	movs	r3, #1
 8012fc0:	4628      	mov	r0, r5
 8012fc2:	47b0      	blx	r6
 8012fc4:	1c41      	adds	r1, r0, #1
 8012fc6:	d1c8      	bne.n	8012f5a <__sflush_r+0x36>
 8012fc8:	682b      	ldr	r3, [r5, #0]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d0c5      	beq.n	8012f5a <__sflush_r+0x36>
 8012fce:	2b1d      	cmp	r3, #29
 8012fd0:	d001      	beq.n	8012fd6 <__sflush_r+0xb2>
 8012fd2:	2b16      	cmp	r3, #22
 8012fd4:	d101      	bne.n	8012fda <__sflush_r+0xb6>
 8012fd6:	602f      	str	r7, [r5, #0]
 8012fd8:	e7b1      	b.n	8012f3e <__sflush_r+0x1a>
 8012fda:	89a3      	ldrh	r3, [r4, #12]
 8012fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fe0:	81a3      	strh	r3, [r4, #12]
 8012fe2:	e7ad      	b.n	8012f40 <__sflush_r+0x1c>
 8012fe4:	690f      	ldr	r7, [r1, #16]
 8012fe6:	2f00      	cmp	r7, #0
 8012fe8:	d0a9      	beq.n	8012f3e <__sflush_r+0x1a>
 8012fea:	0793      	lsls	r3, r2, #30
 8012fec:	680e      	ldr	r6, [r1, #0]
 8012fee:	bf08      	it	eq
 8012ff0:	694b      	ldreq	r3, [r1, #20]
 8012ff2:	600f      	str	r7, [r1, #0]
 8012ff4:	bf18      	it	ne
 8012ff6:	2300      	movne	r3, #0
 8012ff8:	eba6 0807 	sub.w	r8, r6, r7
 8012ffc:	608b      	str	r3, [r1, #8]
 8012ffe:	f1b8 0f00 	cmp.w	r8, #0
 8013002:	dd9c      	ble.n	8012f3e <__sflush_r+0x1a>
 8013004:	6a21      	ldr	r1, [r4, #32]
 8013006:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013008:	4643      	mov	r3, r8
 801300a:	463a      	mov	r2, r7
 801300c:	4628      	mov	r0, r5
 801300e:	47b0      	blx	r6
 8013010:	2800      	cmp	r0, #0
 8013012:	dc06      	bgt.n	8013022 <__sflush_r+0xfe>
 8013014:	89a3      	ldrh	r3, [r4, #12]
 8013016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801301a:	81a3      	strh	r3, [r4, #12]
 801301c:	f04f 30ff 	mov.w	r0, #4294967295
 8013020:	e78e      	b.n	8012f40 <__sflush_r+0x1c>
 8013022:	4407      	add	r7, r0
 8013024:	eba8 0800 	sub.w	r8, r8, r0
 8013028:	e7e9      	b.n	8012ffe <__sflush_r+0xda>
 801302a:	bf00      	nop
 801302c:	dfbffffe 	.word	0xdfbffffe

08013030 <_fflush_r>:
 8013030:	b538      	push	{r3, r4, r5, lr}
 8013032:	690b      	ldr	r3, [r1, #16]
 8013034:	4605      	mov	r5, r0
 8013036:	460c      	mov	r4, r1
 8013038:	b913      	cbnz	r3, 8013040 <_fflush_r+0x10>
 801303a:	2500      	movs	r5, #0
 801303c:	4628      	mov	r0, r5
 801303e:	bd38      	pop	{r3, r4, r5, pc}
 8013040:	b118      	cbz	r0, 801304a <_fflush_r+0x1a>
 8013042:	6a03      	ldr	r3, [r0, #32]
 8013044:	b90b      	cbnz	r3, 801304a <_fflush_r+0x1a>
 8013046:	f7ff fa27 	bl	8012498 <__sinit>
 801304a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d0f3      	beq.n	801303a <_fflush_r+0xa>
 8013052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013054:	07d0      	lsls	r0, r2, #31
 8013056:	d404      	bmi.n	8013062 <_fflush_r+0x32>
 8013058:	0599      	lsls	r1, r3, #22
 801305a:	d402      	bmi.n	8013062 <_fflush_r+0x32>
 801305c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801305e:	f7ff fc30 	bl	80128c2 <__retarget_lock_acquire_recursive>
 8013062:	4628      	mov	r0, r5
 8013064:	4621      	mov	r1, r4
 8013066:	f7ff ff5d 	bl	8012f24 <__sflush_r>
 801306a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801306c:	07da      	lsls	r2, r3, #31
 801306e:	4605      	mov	r5, r0
 8013070:	d4e4      	bmi.n	801303c <_fflush_r+0xc>
 8013072:	89a3      	ldrh	r3, [r4, #12]
 8013074:	059b      	lsls	r3, r3, #22
 8013076:	d4e1      	bmi.n	801303c <_fflush_r+0xc>
 8013078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801307a:	f7ff fc23 	bl	80128c4 <__retarget_lock_release_recursive>
 801307e:	e7dd      	b.n	801303c <_fflush_r+0xc>

08013080 <__swhatbuf_r>:
 8013080:	b570      	push	{r4, r5, r6, lr}
 8013082:	460c      	mov	r4, r1
 8013084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013088:	2900      	cmp	r1, #0
 801308a:	b096      	sub	sp, #88	; 0x58
 801308c:	4615      	mov	r5, r2
 801308e:	461e      	mov	r6, r3
 8013090:	da0d      	bge.n	80130ae <__swhatbuf_r+0x2e>
 8013092:	89a3      	ldrh	r3, [r4, #12]
 8013094:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013098:	f04f 0100 	mov.w	r1, #0
 801309c:	bf0c      	ite	eq
 801309e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80130a2:	2340      	movne	r3, #64	; 0x40
 80130a4:	2000      	movs	r0, #0
 80130a6:	6031      	str	r1, [r6, #0]
 80130a8:	602b      	str	r3, [r5, #0]
 80130aa:	b016      	add	sp, #88	; 0x58
 80130ac:	bd70      	pop	{r4, r5, r6, pc}
 80130ae:	466a      	mov	r2, sp
 80130b0:	f000 f848 	bl	8013144 <_fstat_r>
 80130b4:	2800      	cmp	r0, #0
 80130b6:	dbec      	blt.n	8013092 <__swhatbuf_r+0x12>
 80130b8:	9901      	ldr	r1, [sp, #4]
 80130ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80130be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80130c2:	4259      	negs	r1, r3
 80130c4:	4159      	adcs	r1, r3
 80130c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130ca:	e7eb      	b.n	80130a4 <__swhatbuf_r+0x24>

080130cc <__smakebuf_r>:
 80130cc:	898b      	ldrh	r3, [r1, #12]
 80130ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80130d0:	079d      	lsls	r5, r3, #30
 80130d2:	4606      	mov	r6, r0
 80130d4:	460c      	mov	r4, r1
 80130d6:	d507      	bpl.n	80130e8 <__smakebuf_r+0x1c>
 80130d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80130dc:	6023      	str	r3, [r4, #0]
 80130de:	6123      	str	r3, [r4, #16]
 80130e0:	2301      	movs	r3, #1
 80130e2:	6163      	str	r3, [r4, #20]
 80130e4:	b002      	add	sp, #8
 80130e6:	bd70      	pop	{r4, r5, r6, pc}
 80130e8:	ab01      	add	r3, sp, #4
 80130ea:	466a      	mov	r2, sp
 80130ec:	f7ff ffc8 	bl	8013080 <__swhatbuf_r>
 80130f0:	9900      	ldr	r1, [sp, #0]
 80130f2:	4605      	mov	r5, r0
 80130f4:	4630      	mov	r0, r6
 80130f6:	f7ff f8b7 	bl	8012268 <_malloc_r>
 80130fa:	b948      	cbnz	r0, 8013110 <__smakebuf_r+0x44>
 80130fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013100:	059a      	lsls	r2, r3, #22
 8013102:	d4ef      	bmi.n	80130e4 <__smakebuf_r+0x18>
 8013104:	f023 0303 	bic.w	r3, r3, #3
 8013108:	f043 0302 	orr.w	r3, r3, #2
 801310c:	81a3      	strh	r3, [r4, #12]
 801310e:	e7e3      	b.n	80130d8 <__smakebuf_r+0xc>
 8013110:	89a3      	ldrh	r3, [r4, #12]
 8013112:	6020      	str	r0, [r4, #0]
 8013114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013118:	81a3      	strh	r3, [r4, #12]
 801311a:	9b00      	ldr	r3, [sp, #0]
 801311c:	6163      	str	r3, [r4, #20]
 801311e:	9b01      	ldr	r3, [sp, #4]
 8013120:	6120      	str	r0, [r4, #16]
 8013122:	b15b      	cbz	r3, 801313c <__smakebuf_r+0x70>
 8013124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013128:	4630      	mov	r0, r6
 801312a:	f000 f81d 	bl	8013168 <_isatty_r>
 801312e:	b128      	cbz	r0, 801313c <__smakebuf_r+0x70>
 8013130:	89a3      	ldrh	r3, [r4, #12]
 8013132:	f023 0303 	bic.w	r3, r3, #3
 8013136:	f043 0301 	orr.w	r3, r3, #1
 801313a:	81a3      	strh	r3, [r4, #12]
 801313c:	89a3      	ldrh	r3, [r4, #12]
 801313e:	431d      	orrs	r5, r3
 8013140:	81a5      	strh	r5, [r4, #12]
 8013142:	e7cf      	b.n	80130e4 <__smakebuf_r+0x18>

08013144 <_fstat_r>:
 8013144:	b538      	push	{r3, r4, r5, lr}
 8013146:	4d07      	ldr	r5, [pc, #28]	; (8013164 <_fstat_r+0x20>)
 8013148:	2300      	movs	r3, #0
 801314a:	4604      	mov	r4, r0
 801314c:	4608      	mov	r0, r1
 801314e:	4611      	mov	r1, r2
 8013150:	602b      	str	r3, [r5, #0]
 8013152:	f7f0 f94e 	bl	80033f2 <_fstat>
 8013156:	1c43      	adds	r3, r0, #1
 8013158:	d102      	bne.n	8013160 <_fstat_r+0x1c>
 801315a:	682b      	ldr	r3, [r5, #0]
 801315c:	b103      	cbz	r3, 8013160 <_fstat_r+0x1c>
 801315e:	6023      	str	r3, [r4, #0]
 8013160:	bd38      	pop	{r3, r4, r5, pc}
 8013162:	bf00      	nop
 8013164:	2000daf8 	.word	0x2000daf8

08013168 <_isatty_r>:
 8013168:	b538      	push	{r3, r4, r5, lr}
 801316a:	4d06      	ldr	r5, [pc, #24]	; (8013184 <_isatty_r+0x1c>)
 801316c:	2300      	movs	r3, #0
 801316e:	4604      	mov	r4, r0
 8013170:	4608      	mov	r0, r1
 8013172:	602b      	str	r3, [r5, #0]
 8013174:	f7f0 f94d 	bl	8003412 <_isatty>
 8013178:	1c43      	adds	r3, r0, #1
 801317a:	d102      	bne.n	8013182 <_isatty_r+0x1a>
 801317c:	682b      	ldr	r3, [r5, #0]
 801317e:	b103      	cbz	r3, 8013182 <_isatty_r+0x1a>
 8013180:	6023      	str	r3, [r4, #0]
 8013182:	bd38      	pop	{r3, r4, r5, pc}
 8013184:	2000daf8 	.word	0x2000daf8

08013188 <atan2f>:
 8013188:	f000 b842 	b.w	8013210 <__ieee754_atan2f>

0801318c <ceilf>:
 801318c:	ee10 3a10 	vmov	r3, s0
 8013190:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013194:	3a7f      	subs	r2, #127	; 0x7f
 8013196:	2a16      	cmp	r2, #22
 8013198:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801319c:	dc2a      	bgt.n	80131f4 <ceilf+0x68>
 801319e:	2a00      	cmp	r2, #0
 80131a0:	da11      	bge.n	80131c6 <ceilf+0x3a>
 80131a2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8013208 <ceilf+0x7c>
 80131a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80131aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80131ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b2:	dd05      	ble.n	80131c0 <ceilf+0x34>
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	db23      	blt.n	8013200 <ceilf+0x74>
 80131b8:	2900      	cmp	r1, #0
 80131ba:	bf18      	it	ne
 80131bc:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80131c0:	ee00 3a10 	vmov	s0, r3
 80131c4:	4770      	bx	lr
 80131c6:	4911      	ldr	r1, [pc, #68]	; (801320c <ceilf+0x80>)
 80131c8:	4111      	asrs	r1, r2
 80131ca:	420b      	tst	r3, r1
 80131cc:	d0fa      	beq.n	80131c4 <ceilf+0x38>
 80131ce:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8013208 <ceilf+0x7c>
 80131d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80131d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80131da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131de:	ddef      	ble.n	80131c0 <ceilf+0x34>
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	bfc2      	ittt	gt
 80131e4:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80131e8:	fa40 f202 	asrgt.w	r2, r0, r2
 80131ec:	189b      	addgt	r3, r3, r2
 80131ee:	ea23 0301 	bic.w	r3, r3, r1
 80131f2:	e7e5      	b.n	80131c0 <ceilf+0x34>
 80131f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80131f8:	d3e4      	bcc.n	80131c4 <ceilf+0x38>
 80131fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80131fe:	4770      	bx	lr
 8013200:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013204:	e7dc      	b.n	80131c0 <ceilf+0x34>
 8013206:	bf00      	nop
 8013208:	7149f2ca 	.word	0x7149f2ca
 801320c:	007fffff 	.word	0x007fffff

08013210 <__ieee754_atan2f>:
 8013210:	ee10 2a90 	vmov	r2, s1
 8013214:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013218:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801321c:	b510      	push	{r4, lr}
 801321e:	eef0 7a40 	vmov.f32	s15, s0
 8013222:	dc06      	bgt.n	8013232 <__ieee754_atan2f+0x22>
 8013224:	ee10 0a10 	vmov	r0, s0
 8013228:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801322c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013230:	dd04      	ble.n	801323c <__ieee754_atan2f+0x2c>
 8013232:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013236:	eeb0 0a67 	vmov.f32	s0, s15
 801323a:	bd10      	pop	{r4, pc}
 801323c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013240:	d103      	bne.n	801324a <__ieee754_atan2f+0x3a>
 8013242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013246:	f000 b883 	b.w	8013350 <atanf>
 801324a:	1794      	asrs	r4, r2, #30
 801324c:	f004 0402 	and.w	r4, r4, #2
 8013250:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013254:	b943      	cbnz	r3, 8013268 <__ieee754_atan2f+0x58>
 8013256:	2c02      	cmp	r4, #2
 8013258:	d05e      	beq.n	8013318 <__ieee754_atan2f+0x108>
 801325a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801332c <__ieee754_atan2f+0x11c>
 801325e:	2c03      	cmp	r4, #3
 8013260:	bf08      	it	eq
 8013262:	eef0 7a47 	vmoveq.f32	s15, s14
 8013266:	e7e6      	b.n	8013236 <__ieee754_atan2f+0x26>
 8013268:	b941      	cbnz	r1, 801327c <__ieee754_atan2f+0x6c>
 801326a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8013330 <__ieee754_atan2f+0x120>
 801326e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013334 <__ieee754_atan2f+0x124>
 8013272:	2800      	cmp	r0, #0
 8013274:	bfb8      	it	lt
 8013276:	eef0 7a47 	vmovlt.f32	s15, s14
 801327a:	e7dc      	b.n	8013236 <__ieee754_atan2f+0x26>
 801327c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013280:	d110      	bne.n	80132a4 <__ieee754_atan2f+0x94>
 8013282:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013286:	f104 34ff 	add.w	r4, r4, #4294967295
 801328a:	d107      	bne.n	801329c <__ieee754_atan2f+0x8c>
 801328c:	2c02      	cmp	r4, #2
 801328e:	d846      	bhi.n	801331e <__ieee754_atan2f+0x10e>
 8013290:	4b29      	ldr	r3, [pc, #164]	; (8013338 <__ieee754_atan2f+0x128>)
 8013292:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013296:	edd3 7a00 	vldr	s15, [r3]
 801329a:	e7cc      	b.n	8013236 <__ieee754_atan2f+0x26>
 801329c:	2c02      	cmp	r4, #2
 801329e:	d841      	bhi.n	8013324 <__ieee754_atan2f+0x114>
 80132a0:	4b26      	ldr	r3, [pc, #152]	; (801333c <__ieee754_atan2f+0x12c>)
 80132a2:	e7f6      	b.n	8013292 <__ieee754_atan2f+0x82>
 80132a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80132a8:	d0df      	beq.n	801326a <__ieee754_atan2f+0x5a>
 80132aa:	1a5b      	subs	r3, r3, r1
 80132ac:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80132b0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80132b4:	da1a      	bge.n	80132ec <__ieee754_atan2f+0xdc>
 80132b6:	2a00      	cmp	r2, #0
 80132b8:	da01      	bge.n	80132be <__ieee754_atan2f+0xae>
 80132ba:	313c      	adds	r1, #60	; 0x3c
 80132bc:	db19      	blt.n	80132f2 <__ieee754_atan2f+0xe2>
 80132be:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80132c2:	f000 f919 	bl	80134f8 <fabsf>
 80132c6:	f000 f843 	bl	8013350 <atanf>
 80132ca:	eef0 7a40 	vmov.f32	s15, s0
 80132ce:	2c01      	cmp	r4, #1
 80132d0:	d012      	beq.n	80132f8 <__ieee754_atan2f+0xe8>
 80132d2:	2c02      	cmp	r4, #2
 80132d4:	d017      	beq.n	8013306 <__ieee754_atan2f+0xf6>
 80132d6:	2c00      	cmp	r4, #0
 80132d8:	d0ad      	beq.n	8013236 <__ieee754_atan2f+0x26>
 80132da:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8013340 <__ieee754_atan2f+0x130>
 80132de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80132e2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8013344 <__ieee754_atan2f+0x134>
 80132e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80132ea:	e7a4      	b.n	8013236 <__ieee754_atan2f+0x26>
 80132ec:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013330 <__ieee754_atan2f+0x120>
 80132f0:	e7ed      	b.n	80132ce <__ieee754_atan2f+0xbe>
 80132f2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013348 <__ieee754_atan2f+0x138>
 80132f6:	e7ea      	b.n	80132ce <__ieee754_atan2f+0xbe>
 80132f8:	ee17 3a90 	vmov	r3, s15
 80132fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013300:	ee07 3a90 	vmov	s15, r3
 8013304:	e797      	b.n	8013236 <__ieee754_atan2f+0x26>
 8013306:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8013340 <__ieee754_atan2f+0x130>
 801330a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801330e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8013344 <__ieee754_atan2f+0x134>
 8013312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013316:	e78e      	b.n	8013236 <__ieee754_atan2f+0x26>
 8013318:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8013344 <__ieee754_atan2f+0x134>
 801331c:	e78b      	b.n	8013236 <__ieee754_atan2f+0x26>
 801331e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801334c <__ieee754_atan2f+0x13c>
 8013322:	e788      	b.n	8013236 <__ieee754_atan2f+0x26>
 8013324:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013348 <__ieee754_atan2f+0x138>
 8013328:	e785      	b.n	8013236 <__ieee754_atan2f+0x26>
 801332a:	bf00      	nop
 801332c:	c0490fdb 	.word	0xc0490fdb
 8013330:	3fc90fdb 	.word	0x3fc90fdb
 8013334:	bfc90fdb 	.word	0xbfc90fdb
 8013338:	08027c08 	.word	0x08027c08
 801333c:	08027c14 	.word	0x08027c14
 8013340:	33bbbd2e 	.word	0x33bbbd2e
 8013344:	40490fdb 	.word	0x40490fdb
 8013348:	00000000 	.word	0x00000000
 801334c:	3f490fdb 	.word	0x3f490fdb

08013350 <atanf>:
 8013350:	b538      	push	{r3, r4, r5, lr}
 8013352:	ee10 5a10 	vmov	r5, s0
 8013356:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801335a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801335e:	eef0 7a40 	vmov.f32	s15, s0
 8013362:	db10      	blt.n	8013386 <atanf+0x36>
 8013364:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013368:	dd04      	ble.n	8013374 <atanf+0x24>
 801336a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801336e:	eeb0 0a67 	vmov.f32	s0, s15
 8013372:	bd38      	pop	{r3, r4, r5, pc}
 8013374:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80134ac <atanf+0x15c>
 8013378:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80134b0 <atanf+0x160>
 801337c:	2d00      	cmp	r5, #0
 801337e:	bfd8      	it	le
 8013380:	eef0 7a47 	vmovle.f32	s15, s14
 8013384:	e7f3      	b.n	801336e <atanf+0x1e>
 8013386:	4b4b      	ldr	r3, [pc, #300]	; (80134b4 <atanf+0x164>)
 8013388:	429c      	cmp	r4, r3
 801338a:	dc10      	bgt.n	80133ae <atanf+0x5e>
 801338c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013390:	da0a      	bge.n	80133a8 <atanf+0x58>
 8013392:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80134b8 <atanf+0x168>
 8013396:	ee30 7a07 	vadd.f32	s14, s0, s14
 801339a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801339e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80133a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a6:	dce2      	bgt.n	801336e <atanf+0x1e>
 80133a8:	f04f 33ff 	mov.w	r3, #4294967295
 80133ac:	e013      	b.n	80133d6 <atanf+0x86>
 80133ae:	f000 f8a3 	bl	80134f8 <fabsf>
 80133b2:	4b42      	ldr	r3, [pc, #264]	; (80134bc <atanf+0x16c>)
 80133b4:	429c      	cmp	r4, r3
 80133b6:	dc4f      	bgt.n	8013458 <atanf+0x108>
 80133b8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80133bc:	429c      	cmp	r4, r3
 80133be:	dc41      	bgt.n	8013444 <atanf+0xf4>
 80133c0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80133c4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80133c8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80133cc:	2300      	movs	r3, #0
 80133ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80133d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80133d6:	1c5a      	adds	r2, r3, #1
 80133d8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80133dc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80134c0 <atanf+0x170>
 80133e0:	eddf 5a38 	vldr	s11, [pc, #224]	; 80134c4 <atanf+0x174>
 80133e4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80134c8 <atanf+0x178>
 80133e8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80133ec:	eee6 5a87 	vfma.f32	s11, s13, s14
 80133f0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80134cc <atanf+0x17c>
 80133f4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80133f8:	eddf 5a35 	vldr	s11, [pc, #212]	; 80134d0 <atanf+0x180>
 80133fc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013400:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80134d4 <atanf+0x184>
 8013404:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013408:	eddf 5a33 	vldr	s11, [pc, #204]	; 80134d8 <atanf+0x188>
 801340c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013410:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80134dc <atanf+0x18c>
 8013414:	eea6 5a87 	vfma.f32	s10, s13, s14
 8013418:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80134e0 <atanf+0x190>
 801341c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013420:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80134e4 <atanf+0x194>
 8013424:	eea7 5a26 	vfma.f32	s10, s14, s13
 8013428:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80134e8 <atanf+0x198>
 801342c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013430:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013434:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013438:	ee27 7a87 	vmul.f32	s14, s15, s14
 801343c:	d121      	bne.n	8013482 <atanf+0x132>
 801343e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013442:	e794      	b.n	801336e <atanf+0x1e>
 8013444:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013448:	ee30 7a67 	vsub.f32	s14, s0, s15
 801344c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013450:	2301      	movs	r3, #1
 8013452:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013456:	e7be      	b.n	80133d6 <atanf+0x86>
 8013458:	4b24      	ldr	r3, [pc, #144]	; (80134ec <atanf+0x19c>)
 801345a:	429c      	cmp	r4, r3
 801345c:	dc0b      	bgt.n	8013476 <atanf+0x126>
 801345e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013462:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013466:	eea0 7a27 	vfma.f32	s14, s0, s15
 801346a:	2302      	movs	r3, #2
 801346c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013474:	e7af      	b.n	80133d6 <atanf+0x86>
 8013476:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801347a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801347e:	2303      	movs	r3, #3
 8013480:	e7a9      	b.n	80133d6 <atanf+0x86>
 8013482:	4a1b      	ldr	r2, [pc, #108]	; (80134f0 <atanf+0x1a0>)
 8013484:	491b      	ldr	r1, [pc, #108]	; (80134f4 <atanf+0x1a4>)
 8013486:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801348a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801348e:	edd3 6a00 	vldr	s13, [r3]
 8013492:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013496:	2d00      	cmp	r5, #0
 8013498:	ee37 7a67 	vsub.f32	s14, s14, s15
 801349c:	edd2 7a00 	vldr	s15, [r2]
 80134a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80134a4:	bfb8      	it	lt
 80134a6:	eef1 7a67 	vneglt.f32	s15, s15
 80134aa:	e760      	b.n	801336e <atanf+0x1e>
 80134ac:	3fc90fdb 	.word	0x3fc90fdb
 80134b0:	bfc90fdb 	.word	0xbfc90fdb
 80134b4:	3edfffff 	.word	0x3edfffff
 80134b8:	7149f2ca 	.word	0x7149f2ca
 80134bc:	3f97ffff 	.word	0x3f97ffff
 80134c0:	3c8569d7 	.word	0x3c8569d7
 80134c4:	3d4bda59 	.word	0x3d4bda59
 80134c8:	bd6ef16b 	.word	0xbd6ef16b
 80134cc:	3d886b35 	.word	0x3d886b35
 80134d0:	3dba2e6e 	.word	0x3dba2e6e
 80134d4:	3e124925 	.word	0x3e124925
 80134d8:	3eaaaaab 	.word	0x3eaaaaab
 80134dc:	bd15a221 	.word	0xbd15a221
 80134e0:	bd9d8795 	.word	0xbd9d8795
 80134e4:	bde38e38 	.word	0xbde38e38
 80134e8:	be4ccccd 	.word	0xbe4ccccd
 80134ec:	401bffff 	.word	0x401bffff
 80134f0:	08027c20 	.word	0x08027c20
 80134f4:	08027c30 	.word	0x08027c30

080134f8 <fabsf>:
 80134f8:	ee10 3a10 	vmov	r3, s0
 80134fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013500:	ee00 3a10 	vmov	s0, r3
 8013504:	4770      	bx	lr
	...

08013508 <_init>:
 8013508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801350a:	bf00      	nop
 801350c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801350e:	bc08      	pop	{r3}
 8013510:	469e      	mov	lr, r3
 8013512:	4770      	bx	lr

08013514 <_fini>:
 8013514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013516:	bf00      	nop
 8013518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801351a:	bc08      	pop	{r3}
 801351c:	469e      	mov	lr, r3
 801351e:	4770      	bx	lr
